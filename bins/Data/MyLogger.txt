2023-07-07 17:40:51.877 WRN default: Invalid QML element name " AccReportDateRangeElement"
2023-07-07 17:40:51.877 WRN default: Invalid QML element name " AccReportMonthRangeElement"
2023-07-07 17:40:51.877 WRN default: Invalid QML element name " BookingReportDateRangeElement"
2023-07-07 17:40:51.877 WRN default: Invalid QML element name " BookingReportMonthRangeElement"
2023-07-07 17:40:51.879 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-07 17:40:51.879 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() In static getTrustListModelInstance of TrustListModel inside if 

2023-07-07 17:40:51.879 DBG default: TrustListModel::TrustListModel() 

2023-07-07 17:40:51.879 DBG default: void TrustListModel::init() 

2023-07-07 17:40:51.879 DBG default: TrustConfiguration::TrustConfiguration(QObject*) 

2023-07-07 17:40:51.879 DBG default: void TrustConfiguration::readTrustsFromJsonToList() path  "D:/TempleFiles_suman/Temple-main/bins" 

2023-07-07 17:40:51.879 DBG default: file opened 

2023-07-07 17:40:51.880 DBG default: read all 

2023-07-07 17:40:51.880 DBG default: void TrustConfiguration::readTrustsFromJsonToList() dddddddoooooooooooocccccccc 

2023-07-07 17:40:51.880 DBG default: Trust::Trust(QObject*) 

2023-07-07 17:40:52.051 WRN qt.qpa.fonts: Unable to open default EUDC font: "EUDC.TTE"
2023-07-07 17:40:52.231 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 17:40:52.232 DBG qml: Screen screenWidth size =1920
2023-07-07 17:40:52.232 DBG qml: Screen screenHeight size =1000
2023-07-07 17:40:52.271 DBG qml: screen height= 1080
2023-07-07 17:40:52.272 DBG qml: screen width= 1920
2023-07-07 17:40:52.272 DBG qml: Screen MyStyles-screecnWidth size =1920
2023-07-07 17:40:52.272 DBG qml: Screen MyStyles-screenHeight size =1000
2023-07-07 17:40:52.272 DBG qml: screen density  == 6.228183399741848
2023-07-07 17:40:52.272 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 17:40:52.272 DBG qml: Screen screenWidth size =1920
2023-07-07 17:40:52.272 DBG qml: Screen screenHeight size =1000
2023-07-07 17:40:57.392 DBG default: int TrustListModel::getTrustListSize() 

2023-07-07 17:40:57.392 DBG default: int TrustListModel::getTrustListSize() 

2023-07-07 17:40:57.392 DBG qml: in else--------------
2023-07-07 17:40:57.392 DBG qml: in else------trustName--------Hubablli
2023-07-07 17:40:57.392 DBG qml: in else-------trustCode-------Hubablli
2023-07-07 17:40:57.392 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) 

2023-07-07 17:40:57.392 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) m_currentConfigLocation  "D:/TempleFiles_suman/Temple-main/bins/Config/Hubablli" 

2023-07-07 17:40:57.392 DBG default: Inside lamda 

2023-07-07 17:40:57.393 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) 

2023-07-07 17:40:57.393 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) m_currentDataLocation  "D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli" 

2023-07-07 17:40:57.393 DBG default: Inside lamda 

2023-07-07 17:40:57.393 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-07 17:40:57.394 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-07-07 17:40:57.394 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-07-07 17:40:57.394 DBG default: Creating the DataBase Connection  

2023-07-07 17:40:57.411 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-07 17:40:57.411 DBG default: QString TrustListModel::getDataLocation() 

2023-07-07 17:40:57.411 DBG default: DBInterface::DBInterface(QObject*) ******************* DB "D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-07-07 17:40:57.411 DBG default: Database is opened  "D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-07-07 17:40:57.411 DBG default: Sevabboking table not created
2023-07-07 17:40:57.413 DBG default: person details creation failed
2023-07-07 17:40:57.413 DBG default: SevaTypeJsonProcessor::SevaTypeJsonProcessor(QObject*) 

2023-07-07 17:40:57.413 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate() 

2023-07-07 17:40:57.413 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-07 17:40:57.413 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-07 17:40:57.413 DBG default: file opened 

2023-07-07 17:40:57.413 DBG default: read all 

2023-07-07 17:40:57.413 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-07-07 17:40:57.413 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  1000 

2023-07-07 17:40:57.413 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 1000 

2023-07-07 17:40:57.413 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  1000 already exist in DB 

2023-07-07 17:40:57.413 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-07-07 17:40:57.413 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  2000 

2023-07-07 17:40:57.413 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 2000 

2023-07-07 17:40:57.413 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  2000 already exist in DB 

2023-07-07 17:40:57.413 DBG default: void SevaTypeJsonProcessor::printSevaTypeNames() 

2023-07-07 17:40:57.413 DBG default: 1000 :  "Regular Seva" , 1000 , "Raj" 

2023-07-07 17:40:57.414 DBG default: 2000 :  "Aradhana Seva" , 2000 , "Abhi" 

2023-07-07 17:40:57.414 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-07 17:40:57.414 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-07 17:40:57.414 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-07-07 17:40:57.414 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-07 17:40:57.414 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-07 17:40:57.414 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  path "D:/TempleFiles_suman/Temple-main/bins/Config/Hubablli/SevaNames.json" 

2023-07-07 17:40:57.414 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-07-07 17:40:57.414 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() file opened 

2023-07-07 17:40:57.414 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() read all 

2023-07-07 17:40:57.414 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.416 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Udayaasthamaana Seva" 

2023-07-07 17:40:57.416 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.416 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.416 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1001 

2023-07-07 17:40:57.416 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.416 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.416 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.416 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.416 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.416 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Udayaasthamaana Seva"  sevaId=  1001 

2023-07-07 17:40:57.416 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1001 

2023-07-07 17:40:57.416 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1001 

2023-07-07 17:40:57.416 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.417 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Seva" 

2023-07-07 17:40:57.417 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.417 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.417 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1002 

2023-07-07 17:40:57.417 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.417 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.417 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.417 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.417 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.417 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Seva"  sevaId=  1002 

2023-07-07 17:40:57.417 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1002 

2023-07-07 17:40:57.417 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1002 

2023-07-07 17:40:57.417 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.417 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Samarpana Seva" 

2023-07-07 17:40:57.417 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.417 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.417 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1003 

2023-07-07 17:40:57.417 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.418 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.418 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.418 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.418 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.418 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Samarpana Seva"  sevaId=  1003 

2023-07-07 17:40:57.418 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1003 

2023-07-07 17:40:57.418 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1003 

2023-07-07 17:40:57.418 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.418 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakaabhisheka" 

2023-07-07 17:40:57.418 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.418 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.418 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1004 

2023-07-07 17:40:57.418 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.418 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.418 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.418 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.418 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.418 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakaabhisheka"  sevaId=  1004 

2023-07-07 17:40:57.418 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1004 

2023-07-07 17:40:57.418 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1004 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Godhana" 

2023-07-07 17:40:57.419 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.419 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1005 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.419 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Godhana"  sevaId=  1005 

2023-07-07 17:40:57.419 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1005 

2023-07-07 17:40:57.419 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1005 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mahaa Pooja" 

2023-07-07 17:40:57.419 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.419 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1006 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.419 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.419 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mahaa Pooja"  sevaId=  1006 

2023-07-07 17:40:57.420 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1006 

2023-07-07 17:40:57.420 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1006 

2023-07-07 17:40:57.420 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.420 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ksheeraabhisheka" 

2023-07-07 17:40:57.420 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.420 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.420 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1007 

2023-07-07 17:40:57.420 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.420 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.420 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.420 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.420 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.420 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ksheeraabhisheka"  sevaId=  1007 

2023-07-07 17:40:57.420 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1007 

2023-07-07 17:40:57.420 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1007 

2023-07-07 17:40:57.420 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.420 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Madhu Abhisheka" 

2023-07-07 17:40:57.420 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.420 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1008 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.421 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Madhu Abhisheka"  sevaId=  1008 

2023-07-07 17:40:57.421 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1008 

2023-07-07 17:40:57.421 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1008 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Yella Homagala Seva" 

2023-07-07 17:40:57.421 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.421 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1010 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.421 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.421 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Yella Homagala Seva"  sevaId=  1010 

2023-07-07 17:40:57.421 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1010 

2023-07-07 17:40:57.422 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1010 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Naivedhya/Hasthodaka" 

2023-07-07 17:40:57.422 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.422 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1011 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.422 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Naivedhya/Hasthodaka"  sevaId=  1011 

2023-07-07 17:40:57.422 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1011 

2023-07-07 17:40:57.422 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1011 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Phala - Panchaamrutha" 

2023-07-07 17:40:57.422 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.422 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1012 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.422 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.423 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.423 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.423 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Phala - Panchaamrutha"  sevaId=  1012 

2023-07-07 17:40:57.423 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1012 

2023-07-07 17:40:57.423 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1012 

2023-07-07 17:40:57.423 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.423 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ganapathi Abhisheka" 

2023-07-07 17:40:57.423 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.423 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.423 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1013 

2023-07-07 17:40:57.423 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.423 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.423 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.423 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.423 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.423 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ganapathi Abhisheka"  sevaId=  1013 

2023-07-07 17:40:57.423 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1013 

2023-07-07 17:40:57.423 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1013 

2023-07-07 17:40:57.423 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.423 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Nagadevara Abhisheka" 

2023-07-07 17:40:57.424 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.424 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1014 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.424 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Nagadevara Abhisheka"  sevaId=  1014 

2023-07-07 17:40:57.424 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1014 

2023-07-07 17:40:57.424 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1014 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Abhisheka" 

2023-07-07 17:40:57.424 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.424 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1015 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.424 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.424 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Abhisheka"  sevaId=  1015 

2023-07-07 17:40:57.425 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1015 

2023-07-07 17:40:57.425 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1015 

2023-07-07 17:40:57.425 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.425 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rathothsava" 

2023-07-07 17:40:57.425 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.425 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.425 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1016 

2023-07-07 17:40:57.425 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.425 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.425 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.425 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.425 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.425 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rathothsava"  sevaId=  1016 

2023-07-07 17:40:57.425 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1016 

2023-07-07 17:40:57.425 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1016 

2023-07-07 17:40:57.425 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.425 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Huggi Naivedhya" 

2023-07-07 17:40:57.425 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.425 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1017 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.426 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Huggi Naivedhya"  sevaId=  1017 

2023-07-07 17:40:57.426 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1017 

2023-07-07 17:40:57.426 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1017 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pongal Naivedhya" 

2023-07-07 17:40:57.426 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.426 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1018 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.426 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.426 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pongal Naivedhya"  sevaId=  1018 

2023-07-07 17:40:57.426 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1018 

2023-07-07 17:40:57.426 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1018 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Grahana Shanthi" 

2023-07-07 17:40:57.427 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.427 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1019 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.427 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Grahana Shanthi"  sevaId=  1019 

2023-07-07 17:40:57.427 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1019 

2023-07-07 17:40:57.427 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1019 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika - Rathothsava" 

2023-07-07 17:40:57.427 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.427 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1020 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.427 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.427 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika - Rathothsava"  sevaId=  1020 

2023-07-07 17:40:57.428 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1020 

2023-07-07 17:40:57.428 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1020 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika Seva" 

2023-07-07 17:40:57.428 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.428 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1021 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.428 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika Seva"  sevaId=  1021 

2023-07-07 17:40:57.428 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1021 

2023-07-07 17:40:57.428 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1021 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sri Sathya Narayana Pooja" 

2023-07-07 17:40:57.428 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.428 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1022 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.428 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.428 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sri Sathya Narayana Pooja"  sevaId=  1022 

2023-07-07 17:40:57.429 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1022 

2023-07-07 17:40:57.429 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1022 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Tulsi Archane" 

2023-07-07 17:40:57.429 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.429 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1023 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.429 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Tulsi Archane"  sevaId=  1023 

2023-07-07 17:40:57.429 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1023 

2023-07-07 17:40:57.429 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1023 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Chataka Shraadha" 

2023-07-07 17:40:57.429 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.429 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1024 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.429 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.429 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Chataka Shraadha"  sevaId=  1024 

2023-07-07 17:40:57.430 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1024 

2023-07-07 17:40:57.430 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1024 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sankalpa Shraadha" 

2023-07-07 17:40:57.430 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.430 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1025 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.430 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sankalpa Shraadha"  sevaId=  1025 

2023-07-07 17:40:57.430 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1025 

2023-07-07 17:40:57.430 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1025 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Vaahana Pooja" 

2023-07-07 17:40:57.430 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.430 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1026 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.430 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.430 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Vaahana Pooja"  sevaId=  1026 

2023-07-07 17:40:57.431 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1026 

2023-07-07 17:40:57.431 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1026 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Archane Seva" 

2023-07-07 17:40:57.431 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.431 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1027 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.431 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Archane Seva"  sevaId=  1027 

2023-07-07 17:40:57.431 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1027 

2023-07-07 17:40:57.431 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1027 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Lakshmi Pooja" 

2023-07-07 17:40:57.431 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.431 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1028 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.431 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.431 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Lakshmi Pooja"  sevaId=  1028 

2023-07-07 17:40:57.432 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1028 

2023-07-07 17:40:57.432 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1028 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Devarige Thailaabhisheka" 

2023-07-07 17:40:57.432 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.432 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1029 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.432 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Devarige Thailaabhisheka"  sevaId=  1029 

2023-07-07 17:40:57.432 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1029 

2023-07-07 17:40:57.432 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1029 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pavamaana Homa" 

2023-07-07 17:40:57.432 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.432 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1030 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.432 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.432 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pavamaana Homa"  sevaId=  1030 

2023-07-07 17:40:57.433 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1030 

2023-07-07 17:40:57.433 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1030 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Gana Homa" 

2023-07-07 17:40:57.433 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.433 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1031 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.433 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Gana Homa"  sevaId=  1031 

2023-07-07 17:40:57.433 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1031 

2023-07-07 17:40:57.433 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1031 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mruthyunjaya Homa" 

2023-07-07 17:40:57.433 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.433 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1032 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.433 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.433 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mruthyunjaya Homa"  sevaId=  1032 

2023-07-07 17:40:57.434 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1032 

2023-07-07 17:40:57.434 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1032 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rudraabhisheka" 

2023-07-07 17:40:57.434 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.434 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1033 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.434 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rudraabhisheka"  sevaId=  1033 

2023-07-07 17:40:57.434 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1033 

2023-07-07 17:40:57.434 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1033 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Sampurna Seva" 

2023-07-07 17:40:57.434 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.434 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2001 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.434 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Sampurna Seva"  sevaId=  2001 

2023-07-07 17:40:57.434 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2001 

2023-07-07 17:40:57.434 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2001 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Anna Santharpane Seva" 

2023-07-07 17:40:57.434 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.434 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2002 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.434 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.434 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Anna Santharpane Seva"  sevaId=  2002 

2023-07-07 17:40:57.434 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2002 

2023-07-07 17:40:57.436 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2002 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva(Huvina Alankara)" 

2023-07-07 17:40:57.436 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.436 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2003 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.436 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva(Huvina Alankara)"  sevaId=  2003 

2023-07-07 17:40:57.436 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2003 

2023-07-07 17:40:57.436 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2003 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva" 

2023-07-07 17:40:57.436 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.436 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2004 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.436 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva"  sevaId=  2004 

2023-07-07 17:40:57.436 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2004 

2023-07-07 17:40:57.436 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2004 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Noothana Vastra Seva" 

2023-07-07 17:40:57.436 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.436 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2005 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.436 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Noothana Vastra Seva"  sevaId=  2005 

2023-07-07 17:40:57.436 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2005 

2023-07-07 17:40:57.436 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2005 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva seva" 

2023-07-07 17:40:57.436 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.436 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2006 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.436 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva seva"  sevaId=  2006 

2023-07-07 17:40:57.436 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2006 

2023-07-07 17:40:57.436 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2006 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakabhisheka Seva" 

2023-07-07 17:40:57.436 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.436 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2007 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.436 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.437 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakabhisheka Seva"  sevaId=  2007 

2023-07-07 17:40:57.437 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2007 

2023-07-07 17:40:57.437 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2007 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Hasthodaka Seva(Prathidina)" 

2023-07-07 17:40:57.437 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.437 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2009 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.437 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Hasthodaka Seva(Prathidina)"  sevaId=  2009 

2023-07-07 17:40:57.437 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2009 

2023-07-07 17:40:57.437 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2009 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "MahaPooje" 

2023-07-07 17:40:57.437 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.437 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2010 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.437 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.437 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "MahaPooje"  sevaId=  2010 

2023-07-07 17:40:57.437 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2010 

2023-07-07 17:40:57.438 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2010 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ashtothara Seva(Prathidina)" 

2023-07-07 17:40:57.438 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.438 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2011 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.438 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ashtothara Seva(Prathidina)"  sevaId=  2011 

2023-07-07 17:40:57.438 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2011 

2023-07-07 17:40:57.438 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2011 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Paadakaradhane" 

2023-07-07 17:40:57.438 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.438 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2012 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.438 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Paadakaradhane"  sevaId=  2012 

2023-07-07 17:40:57.438 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2012 

2023-07-07 17:40:57.438 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2012 

2023-07-07 17:40:57.438 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "GanaHoma" 

2023-07-07 17:40:57.439 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.439 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2013 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.439 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "GanaHoma"  sevaId=  2013 

2023-07-07 17:40:57.439 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2013 

2023-07-07 17:40:57.439 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2013 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "PhalaPanchamrutha Seva" 

2023-07-07 17:40:57.439 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 17:40:57.439 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2014 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 17:40:57.439 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "PhalaPanchamrutha Seva"  sevaId=  2014 

2023-07-07 17:40:57.439 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2014 

2023-07-07 17:40:57.439 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2014 

2023-07-07 17:40:57.439 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-07 17:40:57.439 DBG default: void SevaTypeJsonProcessor::printSevasNames() 

2023-07-07 17:40:57.439 DBG default: 1001 :  "Udayaasthamaana Seva" , 1001 , 1 , 1000 , 5000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.439 DBG default: 1002 :  "Sarva Seva" , 1002 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.439 DBG default: 1003 :  "Sarva Samarpana Seva" , 1003 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1004 :  "Kanakaabhisheka" , 1004 , 1 , 1000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1005 :  "Godhana" , 1005 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1006 :  "Mahaa Pooja" , 1006 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1007 :  "Ksheeraabhisheka" , 1007 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1008 :  "Madhu Abhisheka" , 1008 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1010 :  "Yella Homagala Seva" , 1010 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1011 :  "Naivedhya/Hasthodaka" , 1011 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1012 :  "Phala - Panchaamrutha" , 1012 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1013 :  "Ganapathi Abhisheka" , 1013 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1014 :  "Nagadevara Abhisheka" , 1014 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1015 :  "Navagraha Abhisheka" , 1015 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1016 :  "Rathothsava" , 1016 , 1 , 1000 , 1000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1017 :  "Huggi Naivedhya" , 1017 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1018 :  "Pongal Naivedhya" , 1018 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1019 :  "Grahana Shanthi" , 1019 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1020 :  "Kaarthika - Rathothsava" , 1020 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1021 :  "Kaarthika Seva" , 1021 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1022 :  "Sri Sathya Narayana Pooja" , 1022 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1023 :  "Tulsi Archane" , 1023 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1024 :  "Chataka Shraadha" , 1024 , 1 , 1000 , 600 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1025 :  "Sankalpa Shraadha" , 1025 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1026 :  "Vaahana Pooja" , 1026 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1027 :  "Archane Seva" , 1027 , 1 , 1000 , 25 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1028 :  "Lakshmi Pooja" , 1028 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1029 :  "Navagraha Devarige Thailaabhisheka" , 1029 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1030 :  "Pavamaana Homa" , 1030 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1031 :  "Gana Homa" , 1031 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1032 :  "Mruthyunjaya Homa" , 1032 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 1033 :  "Rudraabhisheka" , 1033 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 2001 :  "Ondu Dinada Sampurna Seva" , 2001 , 1 , 2000 , 25001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 2002 :  "Ondu Dinada Anna Santharpane Seva" , 2002 , 1 , 2000 , 20001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 2003 :  "Alankara Seva(Huvina Alankara)" , 2003 , 1 , 2000 , 10001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 2004 :  "Alankara Seva" , 2004 , 1 , 2000 , 5001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 2005 :  "Noothana Vastra Seva" , 2005 , 1 , 2000 , 4000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 2006 :  "Sarva seva" , 2006 , 1 , 2000 , 2501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 2007 :  "Kanakabhisheka Seva" , 2007 , 1 , 2000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 2009 :  "Hasthodaka Seva(Prathidina)" , 2009 , 1 , 2000 , 1001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.440 DBG default: 2010 :  "MahaPooje" , 2010 , 1 , 2000 , 800 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.441 DBG default: 2011 :  "Ashtothara Seva(Prathidina)" , 2011 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.441 DBG default: 2012 :  "Paadakaradhane" , 2012 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.441 DBG default: 2013 :  "GanaHoma" , 2013 , 1 , 2000 , 101 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.441 DBG default: 2014 :  "PhalaPanchamrutha Seva" , 2014 , 1 , 2000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 17:40:57.441 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-07 17:40:57.441 DBG default: Creating the SevaTypeNamesDataModel  

2023-07-07 17:40:57.441 DBG default: SevaBookingConformationDataModel::SevaBookingConformationDataModel(QObject*) 

2023-07-07 17:40:57.441 DBG default: JsonWriter::JsonWriter(QObject*) 

2023-07-07 17:40:57.441 DBG default: SevaTypeNamesDataModel::SevaTypeNamesDataModel(QObject*) 

2023-07-07 17:40:57.441 DBG default: void SevaTypeNamesDataModel::connectSignals() 

2023-07-07 17:40:57.441 DBG default: bool SevaTypeNamesDataModel::querySevaTypes() 

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() 

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1 

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2 

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 3 

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 4 

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 5 

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 6 

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 7 

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.441 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 8 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 9 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 10 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 11 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 12 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 13 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 14 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 15 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 16 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 0 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 18 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 19 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 20 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 25 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 22 

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.442 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1000 

2023-07-07 17:40:57.443 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.443 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2000 

2023-07-07 17:40:57.443 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 17:40:57.443 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 26 

2023-07-07 17:40:57.443 DBG default: bool DBInterface::querySevaType() querying seva type done 

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::querySevaNames() 

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka"  Type = 1  SevaID = 2 

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))))
2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka"  Type = 1  SevaID = 3 

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))))
2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dwadashi Hasthodaka"  Type = 1  SevaID = 4 

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))))
2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi Homa"  Type = 9  SevaID = 5 

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))), QMap((5, SevaName(0x591de70))))
2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Panchamrutha/Abhisheka"  Type = 1  SevaID = 6 

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))), QMap((5, SevaName(0x591de70))))
2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Samanya Kanike"  Type = 1  SevaID = 7 

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))), QMap((5, SevaName(0x591de70))))
2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shop Kanike"  Type = 11  SevaID = 9 

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))), QMap((5, SevaName(0x591de70))), QMap((9, SevaName(0x591dd30))))
2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya thaila seva"  Type = 9  SevaID = 10 

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))), QMap((9, SevaName(0x591dd30))))
2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Building Fund"  Type = 12  SevaID = 11 

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))))
2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankar Pankthi"  Type = 4  SevaID = 12 

2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))), QMap((12, SevaName(0x591dfb0))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))))
2023-07-07 17:40:57.443 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Aradhna Kanike"  Type = 4  SevaID = 13 

2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))))
2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadhana "  Type = 4  SevaID = 14 

2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))))
2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hundi Collections"  Type = 13  SevaID = 15 

2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))))
2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Khara Huggi"  Type = 8  SevaID = 16 

2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))))
2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sweet Huggi"  Type = 8  SevaID = 17 

2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))))
2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thatte Hasthodaka"  Type = 1  SevaID = 18 

2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))))
2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Advance Recovered"  Type = 9  SevaID = 19 

2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))))
2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PP - Rent"  Type = 14  SevaID = 20 

2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Annadana Seva"  Type = 3  SevaID = 23 

2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((23, SevaName(0x594da18))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa"  Type = 3  SevaID = 24 

2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa Sankalp"  Type = 3  SevaID = 25 

2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachna Seva-All days"  Type = 3  SevaID = 26 

2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachana seva- 1 day"  Type = 3  SevaID = 27 

2023-07-07 17:40:57.444 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami  Annadana Sankalpa Seva"  Type = 3  SevaID = 28 

2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Hoovina Alankara seva"  Type = 3  SevaID = 29 

2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navmi Sarva seva"  Type = 3  SevaID = 30 

2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sumadhwavijaya Parayana seva"  Type = 3  SevaID = 31 

2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Prakarosthava"  Type = 3  SevaID = 34 

2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Seva"  Type = 3  SevaID = 35 

2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Gruha Padapooja"  Type = 3  SevaID = 36 

2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Serva Seva"  Type = 1  SevaID = 37 

2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Kanike"  Type = 3  SevaID = 38 

2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Annadana seva "  Type = 3  SevaID = 39 

2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pandith Sanman"  Type = 3  SevaID = 40 

2023-07-07 17:40:57.445 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.446 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M  Navami Panchamurtha "  Type = 3  SevaID = 41 

2023-07-07 17:40:57.446 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))))
2023-07-07 17:40:57.446 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Shanthi Homa"  Type = 15  SevaID = 42 

2023-07-07 17:40:57.446 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))))
2023-07-07 17:40:57.446 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Padapooja"  Type = 3  SevaID = 43 

2023-07-07 17:40:57.446 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))))
2023-07-07 17:40:57.446 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Madhu Abhiseka"  Type = 3  SevaID = 44 

2023-07-07 17:40:57.446 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))))
2023-07-07 17:40:57.446 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gopaladasara Aradhane"  Type = 16  SevaID = 45 

2023-07-07 17:40:57.446 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.446 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Additional Sweets"  Type = 9  SevaID = 46 

2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina alankara Seva"  Type = 1  SevaID = 47 

2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prasada Seve"  Type = 1  SevaID = 48 

2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka- 2 Hasthodaka"  Type = 1  SevaID = 49 

2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sathyanarayana Pooje"  Type = 10  SevaID = 50 

2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "AYUSH HOMA"  Type = 15  SevaID = 51 

2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILA ABHYANJANA"  Type = 9  SevaID = 52 

2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharana"  Type = 9  SevaID = 53 

2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.447 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI  SAMPOORNA SEVE"  Type = 2  SevaID = 54 

2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI SANKLAPA SEVE"  Type = 2  SevaID = 55 

2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA"  Type = 2  SevaID = 56 

2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA SANKALPA"  Type = 2  SevaID = 57 

2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SITA RAMA KALYANOTSVA"  Type = 2  SevaID = 58 

2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMA KALYANOTSAVA SANKALPAA"  Type = 2  SevaID = 59 

2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA PRAVACHANA SEVE "  Type = 2  SevaID = 60 

2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "YELLA DINAGALA PRAVACHANA SEVE"  Type = 2  SevaID = 61 

2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.448 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "HOOVINA ALANKARA"  Type = 2  SevaID = 62 

2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi"  Type = 2  SevaID = 63 

2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA SANJE PRASADA SEVE"  Type = 2  SevaID = 64 

2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "VISHESHA PANCHAMRUTA"  Type = 2  SevaID = 65 

2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRAKAROTSVA"  Type = 2  SevaID = 66 

2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILABYAJANA SEVE"  Type = 2  SevaID = 67 

2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ARCHANE"  Type = 2  SevaID = 68 

2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))))
2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Raghavendra Swamy Aradhane"  Type = 16  SevaID = 69 

2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))))
2023-07-07 17:40:57.449 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Abhisheka Madhu/Panchamrutha"  Type = 4  SevaID = 70 

2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))))
2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtottara"  Type = 4  SevaID = 71 

2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))))
2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara"  Type = 4  SevaID = 72 

2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))))
2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 4  SevaID = 73 

2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))))
2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Deepalankarana Seve"  Type = 7  SevaID = 74 

2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))))
2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tarakari Seve"  Type = 1  SevaID = 75 

2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))))
2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seva"  Type = 4  SevaID = 76 

2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))))
2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Bhiksha kanike"  Type = 18  SevaID = 77 

2023-07-07 17:40:57.450 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))))
2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "hastodaka P P"  Type = 5  SevaID = 78 

2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))))
2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka P P"  Type = 5  SevaID = 79 

2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))))
2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa  P P"  Type = 5  SevaID = 80 

2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))))
2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Nanda Deepa for 9 days"  Type = 6  SevaID = 81 

2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))))
2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Nanda Deepa for  9 days"  Type = 6  SevaID = 82 

2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))))
2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Deepa for 1 day"  Type = 6  SevaID = 83 

2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))))
2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Deepa for 1 day"  Type = 6  SevaID = 84 

2023-07-07 17:40:57.451 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))))
2023-07-07 17:40:57.452 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seve"  Type = 1  SevaID = 85 

2023-07-07 17:40:57.452 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))))
2023-07-07 17:40:57.452 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadana Kanike"  Type = 1  SevaID = 86 

2023-07-07 17:40:57.452 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))))
2023-07-07 17:40:57.452 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana"  Type = 19  SevaID = 87 

2023-07-07 17:40:57.452 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))))
2023-07-07 17:40:57.452 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana for one day"  Type = 19  SevaID = 88 

2023-07-07 17:40:57.452 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.452 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana Seva for one day"  Type = 6  SevaID = 89 

2023-07-07 17:40:57.452 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.452 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nitya Deepaseve"  Type = 7  SevaID = 90 

2023-07-07 17:40:57.452 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.453 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjana"  Type = 7  SevaID = 91 

2023-07-07 17:40:57.453 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.453 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Seve"  Type = 7  SevaID = 92 

2023-07-07 17:40:57.453 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.453 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Laksha Deepostava"  Type = 7  SevaID = 93 

2023-07-07 17:40:57.453 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.453 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Pratyekavagi "  Type = 7  SevaID = 94 

2023-07-07 17:40:57.453 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.453 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulasi Damodara Vivaha sankalpa"  Type = 7  SevaID = 95 

2023-07-07 17:40:57.453 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.453 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sampoorna Seve "  Type = 7  SevaID = 96 

2023-07-07 17:40:57.453 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.453 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sankalpa Seve "  Type = 7  SevaID = 97 

2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Hoovina Alankara "  Type = 7  SevaID = 98 

2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha Abhisheka "  Type = 7  SevaID = 99 

2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vijaya Dasara Aradhane"  Type = 16  SevaID = 100 

2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarotsva"  Type = 1  SevaID = 101 

2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 0  SevaID = 102 

2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 1  SevaID = 103 

2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.454 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtotthara Kanike"  Type = 1  SevaID = 104 

2023-07-07 17:40:57.455 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.455 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Santhana Gopala Krishna Homa"  Type = 15  SevaID = 105 

2023-07-07 17:40:57.455 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.455 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamana Homa"  Type = 15  SevaID = 106 

2023-07-07 17:40:57.455 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))))
2023-07-07 17:40:57.455 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shashwatha Seva Pooje"  Type = 20  SevaID = 107 

2023-07-07 17:40:57.455 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))))
2023-07-07 17:40:57.455 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Regular"  Type = 1  SevaID = 108 

2023-07-07 17:40:57.455 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))))
2023-07-07 17:40:57.455 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Seva"  Type = 8  SevaID = 109 

2023-07-07 17:40:57.455 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))))
2023-07-07 17:40:57.455 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mosaranna Naivedya"  Type = 9  SevaID = 110 

2023-07-07 17:40:57.456 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))))
2023-07-07 17:40:57.456 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Poorna Pragna Hall Kanike"  Type = 14  SevaID = 111 

2023-07-07 17:40:57.456 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))), QMap((50, SevaName(0x594d3d8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))))
2023-07-07 17:40:57.456 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pratyeka Sathyanarayana Pooja"  Type = 10  SevaID = 112 

2023-07-07 17:40:57.456 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))))
2023-07-07 17:40:57.456 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chikka Adige"  Type = 9  SevaID = 113 

2023-07-07 17:40:57.456 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))))
2023-07-07 17:40:57.456 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha"  Type = 21  SevaID = 114 

2023-07-07 17:40:57.456 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))))
2023-07-07 17:40:57.456 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjan seve"  Type = 21  SevaID = 115 

2023-07-07 17:40:57.456 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))))
2023-07-07 17:40:57.457 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri SeethaRamanjaneyarige Nuthana Vastra Dharane pratidevarige."  Type = 21  SevaID = 116 

2023-07-07 17:40:57.457 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))))
2023-07-07 17:40:57.457 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 21  SevaID = 117 

2023-07-07 17:40:57.457 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))))
2023-07-07 17:40:57.457 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane"  Type = 21  SevaID = 118 

2023-07-07 17:40:57.457 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))))
2023-07-07 17:40:57.457 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara seve"  Type = 21  SevaID = 119 

2023-07-07 17:40:57.457 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))))
2023-07-07 17:40:57.457 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ramanavami Kanike"  Type = 2  SevaID = 120 

2023-07-07 17:40:57.457 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))))
2023-07-07 17:40:57.457 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Villeydhele Hara"  Type = 1  SevaID = 121 

2023-07-07 17:40:57.457 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))))
2023-07-07 17:40:57.458 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gandha Lepana "  Type = 22  SevaID = 122 

2023-07-07 17:40:57.458 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))))
2023-07-07 17:40:57.458 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phalahara Pooja"  Type = 9  SevaID = 123 

2023-07-07 17:40:57.458 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))))
2023-07-07 17:40:57.458 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 15  SevaID = 124 

2023-07-07 17:40:57.458 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))))
2023-07-07 17:40:57.458 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Monthly"  Type = 1  SevaID = 125 

2023-07-07 17:40:57.458 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))))
2023-07-07 17:40:57.458 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Jayathirtha Aradhane Kanike"  Type = 16  SevaID = 126 

2023-07-07 17:40:57.458 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))))
2023-07-07 17:40:57.458 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Oldarticals sold"  Type = 9  SevaID = 127 

2023-07-07 17:40:57.458 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))))
2023-07-07 17:40:57.458 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Udayaasthamaana Seva"  Type = 1000  SevaID = 1001 

2023-07-07 17:40:57.459 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))))
2023-07-07 17:40:57.459 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Seva"  Type = 1000  SevaID = 1002 

2023-07-07 17:40:57.459 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))))
2023-07-07 17:40:57.459 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Samarpana Seva"  Type = 1000  SevaID = 1003 

2023-07-07 17:40:57.459 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))))
2023-07-07 17:40:57.460 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakaabhisheka"  Type = 1000  SevaID = 1004 

2023-07-07 17:40:57.460 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))))
2023-07-07 17:40:57.460 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Godhana"  Type = 1000  SevaID = 1005 

2023-07-07 17:40:57.460 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))))
2023-07-07 17:40:57.460 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mahaa Pooja"  Type = 1000  SevaID = 1006 

2023-07-07 17:40:57.461 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))))
2023-07-07 17:40:57.461 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ksheeraabhisheka"  Type = 1000  SevaID = 1007 

2023-07-07 17:40:57.461 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))))
2023-07-07 17:40:57.461 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Madhu Abhisheka"  Type = 1000  SevaID = 1008 

2023-07-07 17:40:57.461 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))))
2023-07-07 17:40:57.461 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Yella Homagala Seva"  Type = 1000  SevaID = 1010 

2023-07-07 17:40:57.461 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))))
2023-07-07 17:40:57.461 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Naivedhya/Hasthodaka"  Type = 1000  SevaID = 1011 

2023-07-07 17:40:57.461 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))))
2023-07-07 17:40:57.461 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phala - Panchaamrutha"  Type = 1000  SevaID = 1012 

2023-07-07 17:40:57.461 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))))
2023-07-07 17:40:57.461 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ganapathi Abhisheka"  Type = 1000  SevaID = 1013 

2023-07-07 17:40:57.462 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))))
2023-07-07 17:40:57.462 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nagadevara Abhisheka"  Type = 1000  SevaID = 1014 

2023-07-07 17:40:57.462 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))))
2023-07-07 17:40:57.462 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Abhisheka"  Type = 1000  SevaID = 1015 

2023-07-07 17:40:57.462 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))))
2023-07-07 17:40:57.462 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rathothsava"  Type = 1000  SevaID = 1016 

2023-07-07 17:40:57.462 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))))
2023-07-07 17:40:57.462 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Naivedhya"  Type = 1000  SevaID = 1017 

2023-07-07 17:40:57.462 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))))
2023-07-07 17:40:57.462 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pongal Naivedhya"  Type = 1000  SevaID = 1018 

2023-07-07 17:40:57.462 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))))
2023-07-07 17:40:57.462 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi"  Type = 1000  SevaID = 1019 

2023-07-07 17:40:57.463 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))))
2023-07-07 17:40:57.463 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika - Rathothsava"  Type = 1000  SevaID = 1020 

2023-07-07 17:40:57.463 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))))
2023-07-07 17:40:57.463 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika Seva"  Type = 1000  SevaID = 1021 

2023-07-07 17:40:57.463 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))))
2023-07-07 17:40:57.463 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri Sathya Narayana Pooja"  Type = 1000  SevaID = 1022 

2023-07-07 17:40:57.463 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))))
2023-07-07 17:40:57.463 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulsi Archane"  Type = 1000  SevaID = 1023 

2023-07-07 17:40:57.463 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))))
2023-07-07 17:40:57.463 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka Shraadha"  Type = 1000  SevaID = 1024 

2023-07-07 17:40:57.464 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))))
2023-07-07 17:40:57.464 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa Shraadha"  Type = 1000  SevaID = 1025 

2023-07-07 17:40:57.464 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))))
2023-07-07 17:40:57.464 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vaahana Pooja"  Type = 1000  SevaID = 1026 

2023-07-07 17:40:57.464 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))))
2023-07-07 17:40:57.464 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane Seva"  Type = 1000  SevaID = 1027 

2023-07-07 17:40:57.464 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))))
2023-07-07 17:40:57.464 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Lakshmi Pooja"  Type = 1000  SevaID = 1028 

2023-07-07 17:40:57.464 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))))
2023-07-07 17:40:57.464 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Devarige Thailaabhisheka"  Type = 1000  SevaID = 1029 

2023-07-07 17:40:57.465 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))))
2023-07-07 17:40:57.465 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamaana Homa"  Type = 1000  SevaID = 1030 

2023-07-07 17:40:57.465 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))))
2023-07-07 17:40:57.465 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gana Homa"  Type = 1000  SevaID = 1031 

2023-07-07 17:40:57.465 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))))
2023-07-07 17:40:57.465 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mruthyunjaya Homa"  Type = 1000  SevaID = 1032 

2023-07-07 17:40:57.465 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))))
2023-07-07 17:40:57.465 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rudraabhisheka"  Type = 1000  SevaID = 1033 

2023-07-07 17:40:57.465 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))))
2023-07-07 17:40:57.465 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ABCD"  Type = 1  SevaID = 2000 

2023-07-07 17:40:57.466 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))))
2023-07-07 17:40:57.466 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Sampurna Seva"  Type = 2000  SevaID = 2001 

2023-07-07 17:40:57.466 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))))
2023-07-07 17:40:57.466 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Anna Santharpane Seva"  Type = 2000  SevaID = 2002 

2023-07-07 17:40:57.466 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))))
2023-07-07 17:40:57.466 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva(Huvina Alankara)"  Type = 2000  SevaID = 2003 

2023-07-07 17:40:57.466 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))))
2023-07-07 17:40:57.466 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva"  Type = 2000  SevaID = 2004 

2023-07-07 17:40:57.466 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))))
2023-07-07 17:40:57.466 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Noothana Vastra Seva"  Type = 2000  SevaID = 2005 

2023-07-07 17:40:57.467 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))))
2023-07-07 17:40:57.467 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva seva"  Type = 2000  SevaID = 2006 

2023-07-07 17:40:57.467 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))(2006, SevaName(0x59c5538))))
2023-07-07 17:40:57.467 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakabhisheka Seva"  Type = 2000  SevaID = 2007 

2023-07-07 17:40:57.467 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))(2006, SevaName(0x59c5538))(2007, SevaName(0x59c5718))))
2023-07-07 17:40:57.467 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Seva(Prathidina)"  Type = 2000  SevaID = 2009 

2023-07-07 17:40:57.467 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))(2006, SevaName(0x59c5538))(2007, SevaName(0x59c5718))(2009, SevaName(0x59c58f8))))
2023-07-07 17:40:57.467 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "MahaPooje"  Type = 2000  SevaID = 2010 

2023-07-07 17:40:57.467 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))(2006, SevaName(0x59c5538))(2007, SevaName(0x59c5718))(2009, SevaName(0x59c58f8))(2010, SevaName(0x59c5948))))
2023-07-07 17:40:57.468 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtothara Seva(Prathidina)"  Type = 2000  SevaID = 2011 

2023-07-07 17:40:57.468 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))(2006, SevaName(0x59c5538))(2007, SevaName(0x59c5718))(2009, SevaName(0x59c58f8))(2010, SevaName(0x59c5948))(2011, SevaName(0x59c5088))))
2023-07-07 17:40:57.468 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Paadakaradhane"  Type = 2000  SevaID = 2012 

2023-07-07 17:40:57.468 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))(2006, SevaName(0x59c5538))(2007, SevaName(0x59c5718))(2009, SevaName(0x59c58f8))(2010, SevaName(0x59c5948))(2011, SevaName(0x59c5088))(2012, SevaName(0x59c4fe8))))
2023-07-07 17:40:57.468 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 2000  SevaID = 2013 

2023-07-07 17:40:57.468 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))(2006, SevaName(0x59c5538))(2007, SevaName(0x59c5718))(2009, SevaName(0x59c58f8))(2010, SevaName(0x59c5948))(2011, SevaName(0x59c5088))(2012, SevaName(0x59c4fe8))(2013, SevaName(0x59c50d8))))
2023-07-07 17:40:57.468 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PhalaPanchamrutha Seva"  Type = 2000  SevaID = 2014 

2023-07-07 17:40:57.468 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))(2006, SevaName(0x59c5538))(2007, SevaName(0x59c5718))(2009, SevaName(0x59c58f8))(2010, SevaName(0x59c5948))(2011, SevaName(0x59c5088))(2012, SevaName(0x59c4fe8))(2013, SevaName(0x59c50d8))(2014, SevaName(0x59c5a38))))
2023-07-07 17:40:57.468 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ChatakaN"  Type = 1  SevaID = 2015 

2023-07-07 17:40:57.468 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))(2015, SevaName(0x59c5b28))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))(2006, SevaName(0x59c5538))(2007, SevaName(0x59c5718))(2009, SevaName(0x59c58f8))(2010, SevaName(0x59c5948))(2011, SevaName(0x59c5088))(2012, SevaName(0x59c4fe8))(2013, SevaName(0x59c50d8))(2014, SevaName(0x59c5a38))))
2023-07-07 17:40:57.469 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SankalpaN"  Type = 1  SevaID = 2016 

2023-07-07 17:40:57.469 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))(2015, SevaName(0x59c5b28))(2016, SevaName(0x59c59e8))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))(2006, SevaName(0x59c5538))(2007, SevaName(0x59c5718))(2009, SevaName(0x59c58f8))(2010, SevaName(0x59c5948))(2011, SevaName(0x59c5088))(2012, SevaName(0x59c4fe8))(2013, SevaName(0x59c50d8))(2014, SevaName(0x59c5a38))))
2023-07-07 17:40:57.469 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Poornapragna Hall Kanike N "  Type = 14  SevaID = 2017 

2023-07-07 17:40:57.469 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x594e6e8))), QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))(2015, SevaName(0x59c5b28))(2016, SevaName(0x59c59e8))), QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))), QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))), QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))), QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))), QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))), QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))), QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))), QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))), QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))), QMap((9, SevaName(0x591dd30))), QMap((11, SevaName(0x591e1e0))), QMap((15, SevaName(0x591d970))), QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))(2017, SevaName(0x59c5ad8))), QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))), QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))), QMap((77, SevaName(0x594df18))), QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))), QMap((107, SevaName(0x594e7d8))), QMap((114, SevaName(0x59c4cc8))(115, SevaName(0x59c4ae8))(116, SevaName(0x59c4778))(117, SevaName(0x59c4b38))(118, SevaName(0x59c4a48))(119, SevaName(0x59c4908))), QMap((122, SevaName(0x59c47c8))), QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))), QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))(2006, SevaName(0x59c5538))(2007, SevaName(0x59c5718))(2009, SevaName(0x59c58f8))(2010, SevaName(0x59c5948))(2011, SevaName(0x59c5088))(2012, SevaName(0x59c4fe8))(2013, SevaName(0x59c50d8))(2014, SevaName(0x59c5a38))))
2023-07-07 17:40:57.469 DBG default: bool DBInterface::querySevaNames() querying seva names done 

2023-07-07 17:40:57.469 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:40:57.469 DBG default: UserManagement::UserManagement(QObject*) 

2023-07-07 17:40:57.469 DBG default: The role number recieved -1 

2023-07-07 17:40:57.469 DBG default: SevaDetailsTableView::SevaDetailsTableView(QObject*) 

2023-07-07 17:40:57.474 DBG default: hello suman 

2023-07-07 17:40:57.474 DBG default: AccountReportModel::AccountReportModel(QObject*) 

2023-07-07 17:40:57.474 DBG default: BookingReportModel::BookingReportModel(QObject*) 

2023-07-07 17:40:57.474 DBG default: AccountReportDateRangeModel::AccountReportDateRangeModel(QObject*) 

2023-07-07 17:40:57.474 DBG default: AccountReportMonthWiseModel::AccountReportMonthWiseModel(QObject*) 

2023-07-07 17:40:57.474 DBG default: BookingReportDateRangeModel::BookingReportDateRangeModel(QObject*) 

2023-07-07 17:40:57.474 DBG default: The connect status true 

2023-07-07 17:40:57.474 DBG default: BookingReportMonthWiseModel::BookingReportMonthWiseModel(QObject*) 

2023-07-07 17:40:57.474 DBG default: AccountFullReportModel::AccountFullReportModel(QObject*) 

2023-07-07 17:40:57.474 DBG default: AccountReportCSVProcessor::AccountReportCSVProcessor(QObject*) 

2023-07-07 17:40:57.474 DBG default: SevaBookingTableModel::SevaBookingTableModel(QObject*) 

2023-07-07 17:40:57.474 DBG default: SevaBookingSearchModel::SevaBookingSearchModel(QObject*) 

2023-07-07 17:40:57.474 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-07 17:40:57.474 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-07 17:40:57.474 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-07 17:40:57.474 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-07 17:40:57.474 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Date = 7  Mon = 7  Year = 2023
2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "1" 

2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "2" 

2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "3" 

2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "4" 

2023-07-07 17:40:57.475 WRN default: QSqlQuery::value: not positioned on a valid record
2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastReceiptNumber()  Size =  -1  receiptNo ID =  4  Value =  QVariant(Invalid) 

2023-07-07 17:40:57.475 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Last ReceiptNo from DB = 5  Generated = "2023_7_0005" 

2023-07-07 17:40:57.475 DBG default: QString SevaViewProxy::getNextReceiptNumber()  r number =  "2023_7_0005" 

2023-07-07 17:40:57.475 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:40:57.475 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-07-07 17:40:57.475 DBG default: SevaCountOnDateModel::SevaCountOnDateModel(QObject*) 

2023-07-07 17:40:57.475 DBG default: hello suman 

2023-07-07 17:40:57.475 DBG default: saveVoucher::saveVoucher(QObject*) 

2023-07-07 17:40:57.475 DBG default: VoucherNumber::VoucherNumber() 

2023-07-07 17:40:57.475 DBG default: virtual QString VoucherNumber::getNextVoucherNumber() 

2023-07-07 17:40:57.475 DBG default: int DBInterface::getLastVoucherNumber() 

2023-07-07 17:40:57.475 DBG default: 3 

2023-07-07 17:40:57.475 DBG default: "4" 

2023-07-07 17:40:57.475 DBG default: VoucherReportModel::VoucherReportModel(QObject*) 

2023-07-07 17:40:57.475 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-07 17:40:57.475 DBG default: QString TrustListModel::getDataLocation() 

2023-07-07 17:40:57.475 DBG qml: str1 = --D:/TempleFiles_suman/Temple-main/bins/Config/Hubablli
2023-07-07 17:40:57.475 DBG qml: str2 = --D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli
2023-07-07 17:40:57.504 DBG qml: The Page Number=== 0
2023-07-07 17:40:57.504 DBG qml: The page number is 0
2023-07-07 17:40:57.504 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 17:40:57.504 DBG qml: Screen screenWidth size =1920
2023-07-07 17:40:57.504 DBG qml: Screen screenHeight size =1000
2023-07-07 17:40:57.504 WRN default: qrc:/ui/Login.qml:37:13: Unable to assign [undefined] to bool
2023-07-07 17:40:57.504 WRN default: qrc:/ui/Login.qml:44:13: Unable to assign [undefined] to bool
2023-07-07 17:40:57.504 WRN default: qrc:/ui/Login.qml:80:17: Unable to assign [undefined] to bool
2023-07-07 17:40:57.504 DBG default: int TrustListModel::getTrustListSize() 

2023-07-07 17:41:01.225 WRN default: qrc:/ui/Login.qml:128:17: QML QQuickTextInput*: Binding loop detected for property "focus"
2023-07-07 17:41:05.392 DBG default: void UserManagement::authorize(QString, QString) "admin" "admin123" 

2023-07-07 17:41:05.392 DBG qml: Credentials are correct
2023-07-07 17:41:05.392 DBG qml: Wrong credentials 0
2023-07-07 17:41:05.405 DBG qml: the accounts enable false
2023-07-07 17:41:05.405 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 17:41:05.405 DBG qml: Screen screenWidth size =1920
2023-07-07 17:41:05.405 DBG qml: Screen screenHeight size =1000
2023-07-07 17:41:05.405 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-07 17:41:05.405 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-07 17:41:05.405 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-07 17:41:05.405 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-07 17:41:05.405 DBG default: The role number is 1 

2023-07-07 17:41:05.405 DBG default: void UserManagement::user_Recieved(int, QString) 

2023-07-07 17:41:05.405 DBG default: The role number recieved 1 

2023-07-07 17:41:06.529 DBG qml: Seva Booking Button Clicked
2023-07-07 17:41:06.529 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.529 DBG default: bool SevaTypeViewModel::init() 

2023-07-07 17:41:06.529 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.529 DBG default: bool SevaTypeViewModel::init()  Number of Seva Types = 25 

2023-07-07 17:41:06.530 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.530 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.530 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.530 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.530 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-07 17:41:06.530 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.530 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.530 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.530 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.530 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:06.531 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:06.531 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594e6e8)) 

2023-07-07 17:41:06.531 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:06.531 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:06.531 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.531 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.531 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.531 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.531 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1 

2023-07-07 17:41:06.531 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.531 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.532 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.532 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.532 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-07 17:41:06.532 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))(2015, SevaName(0x59c5b28))(2016, SevaName(0x59c59e8))) 
(SevaName(0x591d9c0), SevaName(0x591dbf0), SevaName(0x591da10), SevaName(0x591e190), SevaName(0x591dc90), SevaName(0x594d158), SevaName(0x594d9c8), SevaName(0x594d388), SevaName(0x594d928), SevaName(0x594d888), SevaName(0x594dd88), SevaName(0x594e5a8), SevaName(0x594ec38), SevaName(0x594e698), SevaName(0x594e8c8), SevaName(0x594e968), SevaName(0x594ea58), SevaName(0x59c4d68), SevaName(0x59c4688), SevaName(0x59c5808), SevaName(0x59c5b28), SevaName(0x59c59e8)) 

2023-07-07 17:41:06.532 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x591d9c0), SevaName(0x591dbf0), SevaName(0x591da10), SevaName(0x591e190), SevaName(0x591dc90), SevaName(0x594d158), SevaName(0x594d9c8), SevaName(0x594d388), SevaName(0x594d928), SevaName(0x594d888), SevaName(0x594dd88), SevaName(0x594e5a8), SevaName(0x594ec38), SevaName(0x594e698), SevaName(0x594e8c8), SevaName(0x594e968), SevaName(0x594ea58), SevaName(0x59c4d68), SevaName(0x59c4688), SevaName(0x59c5808), SevaName(0x59c5b28), SevaName(0x59c59e8)) 

2023-07-07 17:41:06.532 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-07 17:41:06.532 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x591d9c0))(3, SevaName(0x591dbf0))(4, SevaName(0x591da10))(6, SevaName(0x591e190))(7, SevaName(0x591dc90))(18, SevaName(0x594d158))(37, SevaName(0x594d9c8))(47, SevaName(0x594d388))(48, SevaName(0x594d928))(49, SevaName(0x594d888))(75, SevaName(0x594dd88))(85, SevaName(0x594e5a8))(86, SevaName(0x594ec38))(101, SevaName(0x594e698))(103, SevaName(0x594e8c8))(104, SevaName(0x594e968))(108, SevaName(0x594ea58))(121, SevaName(0x59c4d68))(125, SevaName(0x59c4688))(2000, SevaName(0x59c5808))(2015, SevaName(0x59c5b28))(2016, SevaName(0x59c59e8))) 
(SevaName(0x591d9c0), SevaName(0x591dbf0), SevaName(0x591da10), SevaName(0x591e190), SevaName(0x591dc90), SevaName(0x594d158), SevaName(0x594d9c8), SevaName(0x594d388), SevaName(0x594d928), SevaName(0x594d888), SevaName(0x594dd88), SevaName(0x594e5a8), SevaName(0x594ec38), SevaName(0x594e698), SevaName(0x594e8c8), SevaName(0x594e968), SevaName(0x594ea58), SevaName(0x59c4d68), SevaName(0x59c4688), SevaName(0x59c5808), SevaName(0x59c5b28), SevaName(0x59c59e8)) 

2023-07-07 17:41:06.532 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.533 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.533 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.533 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.533 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 2 

2023-07-07 17:41:06.533 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.533 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.533 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.533 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.533 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-07-07 17:41:06.533 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))) 
(SevaName(0x594db58), SevaName(0x594de78), SevaName(0x594e1e8), SevaName(0x594db08), SevaName(0x594e148), SevaName(0x594e3c8), SevaName(0x594e288), SevaName(0x594dec8), SevaName(0x594e378), SevaName(0x594e328), SevaName(0x594dbf8), SevaName(0x594dc48), SevaName(0x594e2d8), SevaName(0x594e468), SevaName(0x594dce8), SevaName(0x59c4f48)) 

2023-07-07 17:41:06.534 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594db58), SevaName(0x594de78), SevaName(0x594e1e8), SevaName(0x594db08), SevaName(0x594e148), SevaName(0x594e3c8), SevaName(0x594e288), SevaName(0x594dec8), SevaName(0x594e378), SevaName(0x594e328), SevaName(0x594dbf8), SevaName(0x594dc48), SevaName(0x594e2d8), SevaName(0x594e468), SevaName(0x594dce8), SevaName(0x59c4f48)) 

2023-07-07 17:41:06.534 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-07-07 17:41:06.534 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x594db58))(55, SevaName(0x594de78))(56, SevaName(0x594e1e8))(57, SevaName(0x594db08))(58, SevaName(0x594e148))(59, SevaName(0x594e3c8))(60, SevaName(0x594e288))(61, SevaName(0x594dec8))(62, SevaName(0x594e378))(63, SevaName(0x594e328))(64, SevaName(0x594dbf8))(65, SevaName(0x594dc48))(66, SevaName(0x594e2d8))(67, SevaName(0x594e468))(68, SevaName(0x594dce8))(120, SevaName(0x59c4f48))) 
(SevaName(0x594db58), SevaName(0x594de78), SevaName(0x594e1e8), SevaName(0x594db08), SevaName(0x594e148), SevaName(0x594e3c8), SevaName(0x594e288), SevaName(0x594dec8), SevaName(0x594e378), SevaName(0x594e328), SevaName(0x594dbf8), SevaName(0x594dc48), SevaName(0x594e2d8), SevaName(0x594e468), SevaName(0x594dce8), SevaName(0x59c4f48)) 

2023-07-07 17:41:06.534 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.534 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.534 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.534 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.534 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 3 

2023-07-07 17:41:06.534 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.534 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.535 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.535 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.535 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-07-07 17:41:06.535 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))) 
(SevaName(0x594da18), SevaName(0x594da68), SevaName(0x594d428), SevaName(0x594d4c8), SevaName(0x594dab8), SevaName(0x594d658), SevaName(0x594d108), SevaName(0x594d568), SevaName(0x594d338), SevaName(0x594d1f8), SevaName(0x594d7e8), SevaName(0x594d748), SevaName(0x594d8d8), SevaName(0x594d6a8), SevaName(0x594d248), SevaName(0x594d978), SevaName(0x594d608), SevaName(0x594d2e8)) 

2023-07-07 17:41:06.535 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594da18), SevaName(0x594da68), SevaName(0x594d428), SevaName(0x594d4c8), SevaName(0x594dab8), SevaName(0x594d658), SevaName(0x594d108), SevaName(0x594d568), SevaName(0x594d338), SevaName(0x594d1f8), SevaName(0x594d7e8), SevaName(0x594d748), SevaName(0x594d8d8), SevaName(0x594d6a8), SevaName(0x594d248), SevaName(0x594d978), SevaName(0x594d608), SevaName(0x594d2e8)) 

2023-07-07 17:41:06.535 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-07-07 17:41:06.535 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x594da18))(24, SevaName(0x594da68))(25, SevaName(0x594d428))(26, SevaName(0x594d4c8))(27, SevaName(0x594dab8))(28, SevaName(0x594d658))(29, SevaName(0x594d108))(30, SevaName(0x594d568))(31, SevaName(0x594d338))(34, SevaName(0x594d1f8))(35, SevaName(0x594d7e8))(36, SevaName(0x594d748))(38, SevaName(0x594d8d8))(39, SevaName(0x594d6a8))(40, SevaName(0x594d248))(41, SevaName(0x594d978))(43, SevaName(0x594d608))(44, SevaName(0x594d2e8))) 
(SevaName(0x594da18), SevaName(0x594da68), SevaName(0x594d428), SevaName(0x594d4c8), SevaName(0x594dab8), SevaName(0x594d658), SevaName(0x594d108), SevaName(0x594d568), SevaName(0x594d338), SevaName(0x594d1f8), SevaName(0x594d7e8), SevaName(0x594d748), SevaName(0x594d8d8), SevaName(0x594d6a8), SevaName(0x594d248), SevaName(0x594d978), SevaName(0x594d608), SevaName(0x594d2e8)) 

2023-07-07 17:41:06.536 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.536 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.536 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.536 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.536 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 4 

2023-07-07 17:41:06.536 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.536 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.536 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.536 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.536 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-07-07 17:41:06.536 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))) 
(SevaName(0x591dfb0), SevaName(0x591e0a0), SevaName(0x591d830), SevaName(0x594dc98), SevaName(0x594e0f8), SevaName(0x594dd38), SevaName(0x594df68), SevaName(0x594e008)) 

2023-07-07 17:41:06.537 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x591dfb0), SevaName(0x591e0a0), SevaName(0x591d830), SevaName(0x594dc98), SevaName(0x594e0f8), SevaName(0x594dd38), SevaName(0x594df68), SevaName(0x594e008)) 

2023-07-07 17:41:06.537 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-07-07 17:41:06.537 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x591dfb0))(13, SevaName(0x591e0a0))(14, SevaName(0x591d830))(70, SevaName(0x594dc98))(71, SevaName(0x594e0f8))(72, SevaName(0x594dd38))(73, SevaName(0x594df68))(76, SevaName(0x594e008))) 
(SevaName(0x591dfb0), SevaName(0x591e0a0), SevaName(0x591d830), SevaName(0x594dc98), SevaName(0x594e0f8), SevaName(0x594dd38), SevaName(0x594df68), SevaName(0x594e008)) 

2023-07-07 17:41:06.537 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.537 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.537 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.537 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.537 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 5 

2023-07-07 17:41:06.537 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.537 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.537 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.537 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.537 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-07-07 17:41:06.538 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))) 
(SevaName(0x594ddd8), SevaName(0x594dfb8), SevaName(0x594e058)) 

2023-07-07 17:41:06.538 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594ddd8), SevaName(0x594dfb8), SevaName(0x594e058)) 

2023-07-07 17:41:06.538 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-07-07 17:41:06.538 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x594ddd8))(79, SevaName(0x594dfb8))(80, SevaName(0x594e058))) 
(SevaName(0x594ddd8), SevaName(0x594dfb8), SevaName(0x594e058)) 

2023-07-07 17:41:06.538 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.538 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.538 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.538 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.538 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 6 

2023-07-07 17:41:06.538 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.538 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.538 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.538 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.538 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-07-07 17:41:06.539 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))) 
(SevaName(0x594e788), SevaName(0x594ebe8), SevaName(0x594e558), SevaName(0x594e9b8), SevaName(0x594eb48)) 

2023-07-07 17:41:06.539 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594e788), SevaName(0x594ebe8), SevaName(0x594e558), SevaName(0x594e9b8), SevaName(0x594eb48)) 

2023-07-07 17:41:06.539 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-07-07 17:41:06.539 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x594e788))(82, SevaName(0x594ebe8))(83, SevaName(0x594e558))(84, SevaName(0x594e9b8))(89, SevaName(0x594eb48))) 
(SevaName(0x594e788), SevaName(0x594ebe8), SevaName(0x594e558), SevaName(0x594e9b8), SevaName(0x594eb48)) 

2023-07-07 17:41:06.539 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.539 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.539 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.539 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.539 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 7 

2023-07-07 17:41:06.539 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.539 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.539 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.540 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.540 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-07-07 17:41:06.540 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))) 
(SevaName(0x594e0a8), SevaName(0x594eaf8), SevaName(0x594e5f8), SevaName(0x594e828), SevaName(0x594e508), SevaName(0x594ecd8), SevaName(0x594ec88), SevaName(0x594ed28), SevaName(0x594edc8), SevaName(0x594eeb8), SevaName(0x594e648)) 

2023-07-07 17:41:06.540 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594e0a8), SevaName(0x594eaf8), SevaName(0x594e5f8), SevaName(0x594e828), SevaName(0x594e508), SevaName(0x594ecd8), SevaName(0x594ec88), SevaName(0x594ed28), SevaName(0x594edc8), SevaName(0x594eeb8), SevaName(0x594e648)) 

2023-07-07 17:41:06.540 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-07-07 17:41:06.540 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x594e0a8))(90, SevaName(0x594eaf8))(91, SevaName(0x594e5f8))(92, SevaName(0x594e828))(93, SevaName(0x594e508))(94, SevaName(0x594ecd8))(95, SevaName(0x594ec88))(96, SevaName(0x594ed28))(97, SevaName(0x594edc8))(98, SevaName(0x594eeb8))(99, SevaName(0x594e648))) 
(SevaName(0x594e0a8), SevaName(0x594eaf8), SevaName(0x594e5f8), SevaName(0x594e828), SevaName(0x594e508), SevaName(0x594ecd8), SevaName(0x594ec88), SevaName(0x594ed28), SevaName(0x594edc8), SevaName(0x594eeb8), SevaName(0x594e648)) 

2023-07-07 17:41:06.540 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.540 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.540 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.540 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.540 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 8 

2023-07-07 17:41:06.541 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.541 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.541 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.541 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.541 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-07-07 17:41:06.541 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))) 
(SevaName(0x594d518), SevaName(0x594d478), SevaName(0x594eaa8)) 

2023-07-07 17:41:06.541 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594d518), SevaName(0x594d478), SevaName(0x594eaa8)) 

2023-07-07 17:41:06.541 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-07-07 17:41:06.541 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x594d518))(17, SevaName(0x594d478))(109, SevaName(0x594eaa8))) 
(SevaName(0x594d518), SevaName(0x594d478), SevaName(0x594eaa8)) 

2023-07-07 17:41:06.541 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.541 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.541 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.541 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.541 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 9 

2023-07-07 17:41:06.542 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.542 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.542 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.542 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.542 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-07-07 17:41:06.542 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))) 
(SevaName(0x591de70), SevaName(0x591df60), SevaName(0x594d1a8), SevaName(0x594d838), SevaName(0x594e238), SevaName(0x594e418), SevaName(0x594eff8), SevaName(0x594f048), SevaName(0x59c4958), SevaName(0x59c4bd8)) 

2023-07-07 17:41:06.542 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x591de70), SevaName(0x591df60), SevaName(0x594d1a8), SevaName(0x594d838), SevaName(0x594e238), SevaName(0x594e418), SevaName(0x594eff8), SevaName(0x594f048), SevaName(0x59c4958), SevaName(0x59c4bd8)) 

2023-07-07 17:41:06.542 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-07-07 17:41:06.542 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x591de70))(10, SevaName(0x591df60))(19, SevaName(0x594d1a8))(46, SevaName(0x594d838))(52, SevaName(0x594e238))(53, SevaName(0x594e418))(110, SevaName(0x594eff8))(113, SevaName(0x594f048))(123, SevaName(0x59c4958))(127, SevaName(0x59c4bd8))) 
(SevaName(0x591de70), SevaName(0x591df60), SevaName(0x594d1a8), SevaName(0x594d838), SevaName(0x594e238), SevaName(0x594e418), SevaName(0x594eff8), SevaName(0x594f048), SevaName(0x59c4958), SevaName(0x59c4bd8)) 

2023-07-07 17:41:06.542 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.542 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.542 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.542 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.543 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 10 

2023-07-07 17:41:06.543 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.543 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.543 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.543 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.543 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-07-07 17:41:06.543 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))) 
(SevaName(0x594d3d8), SevaName(0x594efa8)) 

2023-07-07 17:41:06.543 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594d3d8), SevaName(0x594efa8)) 

2023-07-07 17:41:06.543 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-07-07 17:41:06.543 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x594d3d8))(112, SevaName(0x594efa8))) 
(SevaName(0x594d3d8), SevaName(0x594efa8)) 

2023-07-07 17:41:06.543 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.543 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.543 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.543 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.543 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 11 

2023-07-07 17:41:06.544 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.544 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.544 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.544 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.544 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-07-07 17:41:06.544 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x591dd30))) 
(SevaName(0x591dd30)) 

2023-07-07 17:41:06.544 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x591dd30)) 

2023-07-07 17:41:06.544 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-07-07 17:41:06.544 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x591dd30))) 
(SevaName(0x591dd30)) 

2023-07-07 17:41:06.544 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.544 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.544 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.544 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.544 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 12 

2023-07-07 17:41:06.544 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.544 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.545 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.545 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.545 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-07-07 17:41:06.545 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x591e1e0))) 
(SevaName(0x591e1e0)) 

2023-07-07 17:41:06.545 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x591e1e0)) 

2023-07-07 17:41:06.545 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-07-07 17:41:06.545 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x591e1e0))) 
(SevaName(0x591e1e0)) 

2023-07-07 17:41:06.545 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.545 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.545 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.545 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.545 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 13 

2023-07-07 17:41:06.545 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.545 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.545 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.545 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.545 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-07-07 17:41:06.545 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x591d970))) 
(SevaName(0x591d970)) 

2023-07-07 17:41:06.545 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x591d970)) 

2023-07-07 17:41:06.546 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-07-07 17:41:06.546 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x591d970))) 
(SevaName(0x591d970)) 

2023-07-07 17:41:06.546 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.546 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.546 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.546 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.546 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 14 

2023-07-07 17:41:06.546 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.546 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.546 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.546 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.546 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-07-07 17:41:06.546 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))(2017, SevaName(0x59c5ad8))) 
(SevaName(0x594d6f8), SevaName(0x594ef08), SevaName(0x59c5ad8)) 

2023-07-07 17:41:06.546 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594d6f8), SevaName(0x594ef08), SevaName(0x59c5ad8)) 

2023-07-07 17:41:06.546 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-07-07 17:41:06.546 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x594d6f8))(111, SevaName(0x594ef08))(2017, SevaName(0x59c5ad8))) 
(SevaName(0x594d6f8), SevaName(0x594ef08), SevaName(0x59c5ad8)) 

2023-07-07 17:41:06.546 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.546 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.546 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.546 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.546 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 15 

2023-07-07 17:41:06.546 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.547 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.547 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.547 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.547 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-07-07 17:41:06.547 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))) 
(SevaName(0x594d298), SevaName(0x594e198), SevaName(0x594e738), SevaName(0x594ea08), SevaName(0x59c4e08)) 

2023-07-07 17:41:06.547 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594d298), SevaName(0x594e198), SevaName(0x594e738), SevaName(0x594ea08), SevaName(0x59c4e08)) 

2023-07-07 17:41:06.547 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-07-07 17:41:06.547 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x594d298))(51, SevaName(0x594e198))(105, SevaName(0x594e738))(106, SevaName(0x594ea08))(124, SevaName(0x59c4e08))) 
(SevaName(0x594d298), SevaName(0x594e198), SevaName(0x594e738), SevaName(0x594ea08), SevaName(0x59c4e08)) 

2023-07-07 17:41:06.547 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.547 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.547 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.547 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.547 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 16 

2023-07-07 17:41:06.547 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.547 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.547 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.547 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.547 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-07-07 17:41:06.547 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))) 
(SevaName(0x594d798), SevaName(0x594e4b8), SevaName(0x594e878), SevaName(0x59c4b88)) 

2023-07-07 17:41:06.547 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594d798), SevaName(0x594e4b8), SevaName(0x594e878), SevaName(0x59c4b88)) 

2023-07-07 17:41:06.547 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-07-07 17:41:06.548 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x594d798))(69, SevaName(0x594e4b8))(100, SevaName(0x594e878))(126, SevaName(0x59c4b88))) 
(SevaName(0x594d798), SevaName(0x594e4b8), SevaName(0x594e878), SevaName(0x59c4b88)) 

2023-07-07 17:41:06.548 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.548 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.548 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.548 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.548 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 18 

2023-07-07 17:41:06.548 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.548 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.548 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.548 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.548 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-07-07 17:41:06.548 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x594df18))) 
(SevaName(0x594df18)) 

2023-07-07 17:41:06.548 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594df18)) 

2023-07-07 17:41:06.548 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-07-07 17:41:06.548 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x594df18))) 
(SevaName(0x594df18)) 

2023-07-07 17:41:06.548 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.548 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.548 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.548 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.548 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 19 

2023-07-07 17:41:06.548 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.548 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.549 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.549 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.549 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-07-07 17:41:06.549 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))) 
(SevaName(0x594e918), SevaName(0x594ed78)) 

2023-07-07 17:41:06.549 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594e918), SevaName(0x594ed78)) 

2023-07-07 17:41:06.549 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-07-07 17:41:06.549 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x594e918))(88, SevaName(0x594ed78))) 
(SevaName(0x594e918), SevaName(0x594ed78)) 

2023-07-07 17:41:06.549 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.549 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.549 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.549 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.549 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 20 

2023-07-07 17:41:06.549 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.549 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.549 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.549 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.549 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-07-07 17:41:06.549 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x594e7d8))) 
(SevaName(0x594e7d8)) 

2023-07-07 17:41:06.549 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594e7d8)) 

2023-07-07 17:41:06.549 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-07-07 17:41:06.549 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x594e7d8))) 
(SevaName(0x594e7d8)) 

2023-07-07 17:41:06.549 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.549 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.549 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.549 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.549 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 22 

2023-07-07 17:41:06.549 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.549 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.549 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.549 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.549 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-07-07 17:41:06.549 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x59c47c8))) 
(SevaName(0x59c47c8)) 

2023-07-07 17:41:06.549 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x59c47c8)) 

2023-07-07 17:41:06.549 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-07-07 17:41:06.549 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x59c47c8))) 
(SevaName(0x59c47c8)) 

2023-07-07 17:41:06.549 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.549 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.549 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.549 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.550 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 25 

2023-07-07 17:41:06.550 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.550 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.550 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.550 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.550 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 25 

2023-07-07 17:41:06.550 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-07 17:41:06.550 DBG default: void SevaListViewModel::initSevaList(int) () 

2023-07-07 17:41:06.550 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 25 

2023-07-07 17:41:06.550 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-07 17:41:06.550 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.550 DBG qml: seveListModel  for if((sevaProxy.getSevaModel(100).getSevaListViewModel/*.getSevaListViewModel*/===0))
2023-07-07 17:41:06.550 DBG qml:  countIfSevaNamesPresentInSevaTypes++ 1
2023-07-07 17:41:06.550 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.550 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.550 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.550 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 26 

2023-07-07 17:41:06.550 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.550 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.550 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.551 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.551 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 26 

2023-07-07 17:41:06.551 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-07 17:41:06.551 DBG default: void SevaListViewModel::initSevaList(int) () 

2023-07-07 17:41:06.551 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 26 

2023-07-07 17:41:06.551 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-07 17:41:06.551 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.551 DBG qml: seveListModel  for if((sevaProxy.getSevaModel(100).getSevaListViewModel/*.getSevaListViewModel*/===0))
2023-07-07 17:41:06.551 DBG qml:  countIfSevaNamesPresentInSevaTypes++ 2
2023-07-07 17:41:06.551 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.551 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.551 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.551 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1000 

2023-07-07 17:41:06.551 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.551 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.551 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.551 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.551 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1000 

2023-07-07 17:41:06.552 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))) 
(SevaName(0x59c4818), SevaName(0x59c4ef8), SevaName(0x59c45e8), SevaName(0x59c4c28), SevaName(0x59c48b8), SevaName(0x59c4e58), SevaName(0x59c4ea8), SevaName(0x59c4f98), SevaName(0x59c4d18), SevaName(0x59c4868), SevaName(0x59c4a98), SevaName(0x59c4c78), SevaName(0x59c4638), SevaName(0x59c49a8), SevaName(0x59c46d8), SevaName(0x59c49f8), SevaName(0x59c4728), SevaName(0x59c5858), SevaName(0x59c5218), SevaName(0x59c5038), SevaName(0x59c5358), SevaName(0x59c55d8), SevaName(0x59c57b8), SevaName(0x59c5268), SevaName(0x59c5628), SevaName(0x59c5128), SevaName(0x59c53f8), SevaName(0x59c53a8), SevaName(0x59c5178), SevaName(0x59c5448), SevaName(0x59c58a8), SevaName(0x59c54e8)) 

2023-07-07 17:41:06.552 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x59c4818), SevaName(0x59c4ef8), SevaName(0x59c45e8), SevaName(0x59c4c28), SevaName(0x59c48b8), SevaName(0x59c4e58), SevaName(0x59c4ea8), SevaName(0x59c4f98), SevaName(0x59c4d18), SevaName(0x59c4868), SevaName(0x59c4a98), SevaName(0x59c4c78), SevaName(0x59c4638), SevaName(0x59c49a8), SevaName(0x59c46d8), SevaName(0x59c49f8), SevaName(0x59c4728), SevaName(0x59c5858), SevaName(0x59c5218), SevaName(0x59c5038), SevaName(0x59c5358), SevaName(0x59c55d8), SevaName(0x59c57b8), SevaName(0x59c5268), SevaName(0x59c5628), SevaName(0x59c5128), SevaName(0x59c53f8), SevaName(0x59c53a8), SevaName(0x59c5178), SevaName(0x59c5448), SevaName(0x59c58a8), SevaName(0x59c54e8)) 

2023-07-07 17:41:06.552 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1000 

2023-07-07 17:41:06.552 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((1001, SevaName(0x59c4818))(1002, SevaName(0x59c4ef8))(1003, SevaName(0x59c45e8))(1004, SevaName(0x59c4c28))(1005, SevaName(0x59c48b8))(1006, SevaName(0x59c4e58))(1007, SevaName(0x59c4ea8))(1008, SevaName(0x59c4f98))(1010, SevaName(0x59c4d18))(1011, SevaName(0x59c4868))(1012, SevaName(0x59c4a98))(1013, SevaName(0x59c4c78))(1014, SevaName(0x59c4638))(1015, SevaName(0x59c49a8))(1016, SevaName(0x59c46d8))(1017, SevaName(0x59c49f8))(1018, SevaName(0x59c4728))(1019, SevaName(0x59c5858))(1020, SevaName(0x59c5218))(1021, SevaName(0x59c5038))(1022, SevaName(0x59c5358))(1023, SevaName(0x59c55d8))(1024, SevaName(0x59c57b8))(1025, SevaName(0x59c5268))(1026, SevaName(0x59c5628))(1027, SevaName(0x59c5128))(1028, SevaName(0x59c53f8))(1029, SevaName(0x59c53a8))(1030, SevaName(0x59c5178))(1031, SevaName(0x59c5448))(1032, SevaName(0x59c58a8))(1033, SevaName(0x59c54e8))) 
(SevaName(0x59c4818), SevaName(0x59c4ef8), SevaName(0x59c45e8), SevaName(0x59c4c28), SevaName(0x59c48b8), SevaName(0x59c4e58), SevaName(0x59c4ea8), SevaName(0x59c4f98), SevaName(0x59c4d18), SevaName(0x59c4868), SevaName(0x59c4a98), SevaName(0x59c4c78), SevaName(0x59c4638), SevaName(0x59c49a8), SevaName(0x59c46d8), SevaName(0x59c49f8), SevaName(0x59c4728), SevaName(0x59c5858), SevaName(0x59c5218), SevaName(0x59c5038), SevaName(0x59c5358), SevaName(0x59c55d8), SevaName(0x59c57b8), SevaName(0x59c5268), SevaName(0x59c5628), SevaName(0x59c5128), SevaName(0x59c53f8), SevaName(0x59c53a8), SevaName(0x59c5178), SevaName(0x59c5448), SevaName(0x59c58a8), SevaName(0x59c54e8)) 

2023-07-07 17:41:06.552 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.552 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.552 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.552 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.552 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 2000 

2023-07-07 17:41:06.552 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.552 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.552 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.552 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.552 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2000 

2023-07-07 17:41:06.553 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))(2006, SevaName(0x59c5538))(2007, SevaName(0x59c5718))(2009, SevaName(0x59c58f8))(2010, SevaName(0x59c5948))(2011, SevaName(0x59c5088))(2012, SevaName(0x59c4fe8))(2013, SevaName(0x59c50d8))(2014, SevaName(0x59c5a38))) 
(SevaName(0x59c5678), SevaName(0x59c56c8), SevaName(0x59c52b8), SevaName(0x59c5308), SevaName(0x59c5498), SevaName(0x59c5538), SevaName(0x59c5718), SevaName(0x59c58f8), SevaName(0x59c5948), SevaName(0x59c5088), SevaName(0x59c4fe8), SevaName(0x59c50d8), SevaName(0x59c5a38)) 

2023-07-07 17:41:06.553 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x59c5678), SevaName(0x59c56c8), SevaName(0x59c52b8), SevaName(0x59c5308), SevaName(0x59c5498), SevaName(0x59c5538), SevaName(0x59c5718), SevaName(0x59c58f8), SevaName(0x59c5948), SevaName(0x59c5088), SevaName(0x59c4fe8), SevaName(0x59c50d8), SevaName(0x59c5a38)) 

2023-07-07 17:41:06.553 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2000 

2023-07-07 17:41:06.553 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2001, SevaName(0x59c5678))(2002, SevaName(0x59c56c8))(2003, SevaName(0x59c52b8))(2004, SevaName(0x59c5308))(2005, SevaName(0x59c5498))(2006, SevaName(0x59c5538))(2007, SevaName(0x59c5718))(2009, SevaName(0x59c58f8))(2010, SevaName(0x59c5948))(2011, SevaName(0x59c5088))(2012, SevaName(0x59c4fe8))(2013, SevaName(0x59c50d8))(2014, SevaName(0x59c5a38))) 
(SevaName(0x59c5678), SevaName(0x59c56c8), SevaName(0x59c52b8), SevaName(0x59c5308), SevaName(0x59c5498), SevaName(0x59c5538), SevaName(0x59c5718), SevaName(0x59c58f8), SevaName(0x59c5948), SevaName(0x59c5088), SevaName(0x59c4fe8), SevaName(0x59c50d8), SevaName(0x59c5a38)) 

2023-07-07 17:41:06.553 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.553 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.553 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.553 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.553 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.553 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.553 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 17:41:06.553 DBG qml:  if of <<< countIfSevaNamesPresentInSevaTypes++ 2
2023-07-07 17:41:06.553 DBG qml: clicked on Sevabooking
2023-07-07 17:41:06.670 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.677 DBG qml: state changedinitial
2023-07-07 17:41:06.682 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-07 17:41:06.682 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Cannot assign to non-existent property "onDefaultDates"
2023-07-07 17:41:06.682 WRN default: qrc:/ui/SevaDateTime.qml:97:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-07 17:41:06.682 WRN default: qrc:/ui/SevaDateTime.qml:91:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-07 17:41:06.762 DBG qml: my seva delegate is created
2023-07-07 17:41:06.763 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:06.763 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:06.763 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:06.763 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:06.763 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 17:41:06.763 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-07 17:41:06.763 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.763 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.763 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.763 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.763 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:06.763 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:06.763 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594e6e8)) 

2023-07-07 17:41:06.763 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:06.763 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:06.763 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.763 DBG qml: --------------- onCurrentIndexChanged: of combo box sevaListView1
2023-07-07 17:41:06.763 DBG qml:  Index =0
2023-07-07 17:41:06.763 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:06.763 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 17:41:06.763 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-07 17:41:06.763 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.763 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.763 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.763 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.763 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:06.763 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:06.763 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594e6e8)) 

2023-07-07 17:41:06.763 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:06.763 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:06.763 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.763 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:06.763 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 17:41:06.763 DBG qml:  Seva Type Changed: 0
2023-07-07 17:41:06.763 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-07 17:41:06.763 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.763 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.763 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.763 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.763 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:06.763 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:06.763 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594e6e8)) 

2023-07-07 17:41:06.763 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:06.763 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:06.764 DBG qml: my seva delegate is created
2023-07-07 17:41:06.764 DBG qml:  Current Index changed0
2023-07-07 17:41:06.764 DBG qml:  VIEW-1 - Index =0
2023-07-07 17:41:06.764 DBG qml:  Seva Selected =0
2023-07-07 17:41:06.764 DBG default: SevaName* SevaViewProxy::getSevaByIndex(int) 0 

2023-07-07 17:41:06.764 DBG default: current.... seva model 

2023-07-07 17:41:06.764 DBG default: current seva model SevaListViewModel(0x11613f08) 

2023-07-07 17:41:06.764 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int) (SevaName(0x594e6e8)) 

2023-07-07 17:41:06.764 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int)  Index requested 1= 0 

2023-07-07 17:41:06.764 DBG qml:  Seva Details =0
2023-07-07 17:41:06.764 DBG default: void SevaName::print()  Seva Name   = "Nithya Archane"
2023-07-07 17:41:06.764 DBG default: void SevaName::print()  Seva ID     = 102
2023-07-07 17:41:06.764 DBG default: void SevaName::print()  Seva Number = 102
2023-07-07 17:41:06.764 DBG default: void SevaName::print()  Seva        = 0
2023-07-07 17:41:06.764 DBG default: void SevaName::print()  Seva Date   = "2021-11-25"
2023-07-07 17:41:06.764 DBG default: void SevaName::print()  Seva Type   = 0
2023-07-07 17:41:06.764 DBG default: void SevaName::print()  Seva Cost   = 0
2023-07-07 17:41:06.764 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-07 17:41:06.764 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-07 17:41:06.764 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-07 17:41:06.764 DBG qml: seva name  = Nithya Archane Seva cost = 0
2023-07-07 17:41:06.764 DBG default: QStringList SevaViewProxy::getGothras() 

2023-07-07 17:41:06.764 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.764 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-07-07 17:41:06.765 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Vashistha", "", "Puthamanasa", "Shrivathsa", "Sankhyayanasa", "Jamadagni", "Harithasa", "Kashyapa", "Maudgalya", "Bharadwaja", "Gargeyyesa", "Mounabharghava", "Dhananjaya", "Kaundinya", "Galava", "Athreyasa", "Vishwamitra", "Kaushika", "Gouthama") 

2023-07-07 17:41:06.765 DBG qml: ********* In setGothras function  *********** = 0
2023-07-07 17:41:06.765 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-07-07 17:41:06.765 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.765 DBG qml: ********* In set nakshatra function  *********** = 0
2023-07-07 17:41:06.765 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:06.765 DBG qml: Current Text =SevaTypeViewModel(0x9e3b8e8)
2023-07-07 17:41:06.765 DBG qml: Model SevaType--------: [object Object]
2023-07-07 17:41:06.765 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:06.765 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 17:41:06.765 DBG qml: Model SevaType: RAMANAVAMI SEVE
2023-07-07 17:41:06.765 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:06.765 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 17:41:06.765 DBG qml: Model SevaType: 0
2023-07-07 17:41:06.765 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:06.765 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:06.765 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:06.765 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 17:41:06.780 DBG qml: Component.onCompleted: of seva booking view
2023-07-07 17:41:06.780 DBG qml: In Component.onCompleted: of SevaPaymenConfirmationDialog
2023-07-07 17:41:06.780 DBG qml: Dialog object is ccreated in SPCD
2023-07-07 17:41:06.780 DBG default: QStringList SevaTypeNamesDataModel::getBankList() 

2023-07-07 17:41:06.780 DBG default: JsonProcessor::JsonProcessor(QObject*) 

2023-07-07 17:41:06.780 DBG default: void JsonProcessor::readBanksFromJsonToList() 

2023-07-07 17:41:06.780 DBG default: file opened 

2023-07-07 17:41:06.780 DBG default: read all 

2023-07-07 17:41:06.780 DBG default: void JsonProcessor::readBanksFromJsonToList() dddddddoooooooooooocccccccc 

2023-07-07 17:41:06.780 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 17:41:06.780 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 17:41:06.780 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 17:41:06.780 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 17:41:06.780 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 17:41:06.780 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 17:41:06.780 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 17:41:06.780 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 17:41:06.780 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 17:41:06.781 DBG default: virtual JsonProcessor::~JsonProcessor() 

2023-07-07 17:41:06.781 DBG qml:  Trying to get the list category
2023-07-07 17:41:06.781 WRN default: qrc:/ui/SevaDateTime.qml:89: ReferenceError: defaultDates is not defined
2023-07-07 17:41:06.781 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 17:41:06.781 DBG qml: Screen screenWidth size =1920
2023-07-07 17:41:06.781 DBG qml: Screen screenHeight size =1000
2023-07-07 17:41:06.781 DBG qml:  Name Status =false
2023-07-07 17:41:06.781 DBG qml:  Mobile Status =false
2023-07-07 17:41:06.781 DBG qml: Component.onCompleted: of seva list view
2023-07-07 17:41:06.781 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:06.781 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 17:41:06.781 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-07 17:41:06.781 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:06.781 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:06.781 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:06.781 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:06.781 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:06.781 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:06.781 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594e6e8)) 

2023-07-07 17:41:06.781 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:06.781 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:06.781 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 17:41:06.781 DBG qml: Component.onCompleted of combo box sevaListView current index =0 1
2023-07-07 17:41:06.781 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 17:41:06.781 DBG qml: Screen screenWidth size =1920
2023-07-07 17:41:06.781 DBG qml: Screen screenHeight size =1000
2023-07-07 17:41:06.782 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.782 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.782 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.782 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.782 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.786 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.789 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.790 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.790 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.790 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.790 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.790 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.790 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.790 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:06.791 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 17:41:07.907 DBG qml: Esc pressed in select seva type view
2023-07-07 17:41:07.908 DBG qml: loading Menu page from main
2023-07-07 17:41:07.918 DBG qml: the accounts enable true
2023-07-07 17:41:07.918 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 17:41:07.919 DBG qml: Screen screenWidth size =1920
2023-07-07 17:41:07.919 DBG qml: Screen screenHeight size =1000
2023-07-07 17:41:07.919 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-07 17:41:07.919 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-07 17:41:07.919 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-07 17:41:07.919 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-07 17:41:08.600 DBG qml: account details button clicked
2023-07-07 17:41:08.600 DBG qml: Clicked on AccountDetails
2023-07-07 17:41:08.684 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:08.684 DBG default: int AccountReportModel::iGrandTotal() const 0 

2023-07-07 17:41:08.684 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:08.698 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-07 17:41:08.849 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-07-07 17:41:08.849 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-07 17:41:08.849 DBG qml: accont report Selected year2015
2023-07-07 17:41:08.850 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-07-07 17:41:08.850 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-07 17:41:08.850 DBG qml: Selected month1
2023-07-07 17:41:08.850 WRN default: qrc:/ui/components/MyReportFilter.qml:312:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.850 WRN default: qrc:/ui/components/MyReportFilter.qml:323:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.899 WRN default: qrc:/ui/components/MyReportFilter.qml:258:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.899 WRN default: qrc:/ui/components/MyReportFilter.qml:268:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.923 WRN default: qrc:/ui/components/MyReportFilter.qml:212:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.924 WRN default: qrc:/ui/components/MyReportFilter.qml:131:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.924 WRN default: qrc:/ui/components/MyReportFilter.qml:169:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.925 WRN default: qrc:/ui/components/MyReportFilter.qml:312:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.925 WRN default: qrc:/ui/components/MyReportFilter.qml:323:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.925 WRN default: qrc:/ui/components/MyReportFilter.qml:258:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.925 WRN default: qrc:/ui/components/MyReportFilter.qml:268:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.925 WRN default: qrc:/ui/components/MyReportFilter.qml:212:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.925 WRN default: qrc:/ui/components/MyReportFilter.qml:131:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.925 WRN default: qrc:/ui/components/MyReportFilter.qml:169:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.925 DBG qml: In Component.onCompleted: of seva report page
2023-07-07 17:41:08.925 DBG qml: In  Component.onCompleted: loader srp
2023-07-07 17:41:08.925 DBG qml: In Component.onCompleted: of seva report page total text 0.00 ?
2023-07-07 17:41:08.929 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-07 17:41:08.929 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-07 17:41:08.929 DBG qml: The month and year initial 1   2015
2023-07-07 17:41:08.929 DBG qml:  Trying to get the list category
2023-07-07 17:41:08.929 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:08.929 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 17:41:08.929 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.929 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.929 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.930 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.930 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 17:41:08.930 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-07 17:41:08.930 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-07 17:41:08.930 DBG qml: 0
2023-07-07 17:41:08.930 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.930 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 17:41:08.930 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-07 17:41:08.930 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-07 17:41:08.930 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.930 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 17:41:08.930 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-07 17:41:08.930 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:08.930 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:08.930 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:08.930 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:08.930 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:08.930 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:08.930 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594e6e8)) 

2023-07-07 17:41:08.930 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:08.930 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:08.930 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-07 17:41:08.930 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-07 17:41:08.930 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-07 17:41:08.930 DBG qml: Seva name selected : Nithya Archane
2023-07-07 17:41:08.930 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-07 17:41:08.930 DBG qml: Seva type selected in report filter : 0
2023-07-07 17:41:08.930 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.930 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.930 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.930 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 17:41:08.930 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-07 17:41:08.930 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 17:41:08.930 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 17:41:08.930 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 17:41:08.930 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x590d558) 

2023-07-07 17:41:08.930 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:08.930 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:08.930 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x594e6e8)) 

2023-07-07 17:41:08.930 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 17:41:08.930 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x594e6e8))) 
(SevaName(0x594e6e8)) 

2023-07-07 17:41:08.930 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-07 17:41:08.930 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-07 17:41:08.930 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-07 17:41:08.930 DBG default: void SevaReport::generateAccReport(ReportFilterElements*) 

2023-07-07 17:41:08.930 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-07 17:41:08.931 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) 0 

2023-07-07 17:41:08.931 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:08.931 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm date "07-07-2023" 

2023-07-07 17:41:08.931 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-07 17:41:08.931 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-07 17:41:08.931 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm ddetails "All" 0 

2023-07-07 17:41:08.931 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) Inside c date acc rep 

2023-07-07 17:41:08.931 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:08.931 DBG default: QString AccountReportModel::FormatDate(QString) "07-07-2023" 

2023-07-07 17:41:08.931 DBG default: QString AccountReportModel::FormatDate(QString) QDate("2023-07-07") 

2023-07-07 17:41:08.931 DBG default: QString AccountReportModel::FormatDate(QString) "2023-07-07" 

2023-07-07 17:41:08.931 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-07 17:41:08.931 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:08.931 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-07-07" 

2023-07-07 17:41:08.931 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:08.931 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-07 17:41:08.931 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-07 17:41:08.931 DBG default: void DBInterface::account_report_cdate_function(QString, int, QString) 

2023-07-07 17:41:08.931 DBG default: "2023-07-07" ^^^^^^^^^^^^^^^^^^^^^^^^^^  "All"    0 

2023-07-07 17:41:08.931 DBG default: First 

2023-07-07 17:41:08.931 DBG default:  Query string = "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME; " 

2023-07-07 17:41:08.931 DBG default: inside cash true 

2023-07-07 17:41:08.931 DBG default:  Query string Acc rep true 

2023-07-07 17:41:08.931 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME; " 

2023-07-07 17:41:08.931 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-07 17:41:08.931 DBG default: suman cheque "1500" 

2023-07-07 17:41:08.931 DBG default: suman neft "5000" 

2023-07-07 17:41:08.931 DBG default: suman upi "150" 

2023-07-07 17:41:08.931 DBG default: "Chataka" 

2023-07-07 17:41:08.931 DBG default: "1" 

2023-07-07 17:41:08.931 DBG default: "800" 

2023-07-07 17:41:08.931 DBG default: "800" 

2023-07-07 17:41:08.931 DBG default: before emitting signal  account_report '''''''' 

2023-07-07 17:41:08.931 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-07 17:41:08.931 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-07 17:41:08.931 DBG default: void AccountReportModel::setIGrandTotal(int) 800 

2023-07-07 17:41:08.931 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:08.931 DBG default: int AccountReportModel::iGrandTotal() const 800 

2023-07-07 17:41:08.932 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 800 

2023-07-07 17:41:08.932 DBG default: after emitting signal  account_report '''''''' 

2023-07-07 17:41:08.932 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME; " 

2023-07-07 17:41:08.932 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-07 17:41:08.932 DBG default: "M Navami Pavamana Homa" 

2023-07-07 17:41:08.932 DBG default: "1" 

2023-07-07 17:41:08.932 DBG default: "5000" 

2023-07-07 17:41:08.932 DBG default: "5000" 

2023-07-07 17:41:08.932 DBG default: before emitting signal  account_report '''''''' 

2023-07-07 17:41:08.932 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-07 17:41:08.932 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 1 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.932 DBG default: void AccountReportModel::setIGrandTotal(int) 5800 

2023-07-07 17:41:08.932 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:08.932 DBG default: int AccountReportModel::iGrandTotal() const 5800 

2023-07-07 17:41:08.932 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 5800 

2023-07-07 17:41:08.932 DBG default: after emitting signal  account_report '''''''' 

2023-07-07 17:41:08.932 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME; " 

2023-07-07 17:41:08.932 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-07 17:41:08.932 DBG default: "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.932 DBG default: "3" 

2023-07-07 17:41:08.932 DBG default: "50" 

2023-07-07 17:41:08.932 DBG default: "150" 

2023-07-07 17:41:08.932 DBG default: before emitting signal  account_report '''''''' 

2023-07-07 17:41:08.932 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-07 17:41:08.932 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 2 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.932 DBG default: void AccountReportModel::setIGrandTotal(int) 5950 

2023-07-07 17:41:08.932 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:08.932 DBG default: int AccountReportModel::iGrandTotal() const 5950 

2023-07-07 17:41:08.932 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 5950 

2023-07-07 17:41:08.932 DBG default: after emitting signal  account_report '''''''' 

2023-07-07 17:41:08.932 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME; " 

2023-07-07 17:41:08.932 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-07 17:41:08.932 DBG default: "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.932 DBG default: "3" 

2023-07-07 17:41:08.932 DBG default: "500" 

2023-07-07 17:41:08.932 DBG default: "1500" 

2023-07-07 17:41:08.932 DBG default: before emitting signal  account_report '''''''' 

2023-07-07 17:41:08.932 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-07 17:41:08.932 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.932 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.933 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.933 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.933 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.933 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.933 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.933 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.933 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.933 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.933 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.933 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.933 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.933 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.933 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.933 DBG default: void AccountReportModel::setIGrandTotal(int) 7450 

2023-07-07 17:41:08.933 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:08.933 DBG default: int AccountReportModel::iGrandTotal() const 7450 

2023-07-07 17:41:08.933 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 7450 

2023-07-07 17:41:08.933 DBG default: after emitting signal  account_report '''''''' 

2023-07-07 17:41:08.933 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-07 17:41:08.933 DBG default: true 

2023-07-07 17:41:08.933 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:08.933 DBG default: "2023-07-07" 

2023-07-07 17:41:08.933 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:08.933 DBG qml: ******** 07-07-2023
2023-07-07 17:41:08.933 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-07 17:41:08.933 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:08.933 DBG qml:   _rip.sSingleDate 207-07-2023
2023-07-07 17:41:08.933 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:08.933 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-07 17:41:08.933 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-07-07 17:41:08.933 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-07 17:41:08.933 DBG qml: accont report Selected year2023
2023-07-07 17:41:08.933 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-07-07 17:41:08.933 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-07 17:41:08.933 DBG qml: Selected month7
2023-07-07 17:41:08.933 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.933 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.933 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.933 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 17:41:08.933 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 1 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 2 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 3 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 4 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 5 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 6 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 7 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 8 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 9 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 10 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 11 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 12 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 13 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 14 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 15 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 16 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 17 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 18 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 19 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 20 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 21 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 22 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.934 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 23 

2023-07-07 17:41:08.935 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.935 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.935 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 17:41:08.935 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 24 

2023-07-07 17:41:08.935 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 17:41:08.935 DBG qml: Screen screenWidth size =1920
2023-07-07 17:41:08.935 DBG qml: Screen screenHeight size =1000
2023-07-07 17:41:08.935 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 17:41:08.935 DBG qml: Screen screenWidth size =1920
2023-07-07 17:41:08.935 DBG qml: Screen screenHeight size =1000
2023-07-07 17:41:08.935 DBG qml: this is admin
2023-07-07 17:41:08.935 WRN default: qrc:/ui/components/MyReportFilter.qml:131:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.935 WRN default: qrc:/ui/components/MyReportFilter.qml:169:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.936 WRN default: qrc:/ui/components/MyReportFilter.qml:212:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.944 WRN default: qrc:/ui/components/MyReportFilter.qml:212:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.944 WRN default: qrc:/ui/components/MyReportFilter.qml:258:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.944 WRN default: qrc:/ui/components/MyReportFilter.qml:268:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.954 WRN default: qrc:/ui/components/MyReportFilter.qml:258:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.954 WRN default: qrc:/ui/components/MyReportFilter.qml:268:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.954 WRN default: qrc:/ui/components/MyReportFilter.qml:312:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.954 WRN default: qrc:/ui/components/MyReportFilter.qml:323:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.954 WRN default: qrc:/ui/components/MyReportFilter.qml:312:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.954 WRN default: qrc:/ui/components/MyReportFilter.qml:323:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-07 17:41:08.958 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.958 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.958 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.960 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.960 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.960 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-07 17:41:08.961 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.961 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.962 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Chataka" 

2023-07-07 17:41:08.962 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.962 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-07-07 17:41:08.962 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.962 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.963 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-07 17:41:08.963 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.963 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-07-07 17:41:08.963 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.963 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.963 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.964 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.964 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 2 

2023-07-07 17:41:08.964 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.964 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.965 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "M Navami Pavamana Homa" 

2023-07-07 17:41:08.965 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.965 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-07 17:41:08.965 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.965 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.966 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-07 17:41:08.966 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.966 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-07 17:41:08.966 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.966 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.966 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.967 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.967 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-07 17:41:08.967 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.967 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.968 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.968 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.968 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.968 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 50 

2023-07-07 17:41:08.968 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.969 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-07 17:41:08.969 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.969 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 150 

2023-07-07 17:41:08.969 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.969 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.969 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.970 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.970 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 4 

2023-07-07 17:41:08.970 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.970 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.971 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.971 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.971 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.971 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 500 

2023-07-07 17:41:08.972 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.972 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-07 17:41:08.972 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:08.972 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:08.972 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1500 

2023-07-07 17:41:11.457 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-07 17:41:11.457 DBG qml: ---------c----------------
2023-07-07 17:41:11.457 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-07-07 17:41:11.457 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-07-07 17:41:11.457 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-07 17:41:11.457 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-07-07 17:41:11.457 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-07-07 17:41:11.457 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:11.458 DBG qml:   _rip.sSingleDate 1 07-07-2023
2023-07-07 17:41:11.458 DBG qml: -------------------------------------
2023-07-07 17:41:11.458 DBG qml: sendReportInputEmitted
2023-07-07 17:41:11.458 DBG qml: In main
2023-07-07 17:41:11.458 DBG default: void SevaReport::generateAccReport(ReportFilterElements*) 

2023-07-07 17:41:11.458 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-07 17:41:11.460 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) 0 

2023-07-07 17:41:11.460 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:11.460 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm date "07-07-2023" 

2023-07-07 17:41:11.460 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-07 17:41:11.460 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-07 17:41:11.460 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm ddetails "All" 0 

2023-07-07 17:41:11.460 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) Inside c date acc rep 

2023-07-07 17:41:11.460 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:11.460 DBG default: QString AccountReportModel::FormatDate(QString) "07-07-2023" 

2023-07-07 17:41:11.461 DBG default: QString AccountReportModel::FormatDate(QString) QDate("2023-07-07") 

2023-07-07 17:41:11.461 DBG default: QString AccountReportModel::FormatDate(QString) "2023-07-07" 

2023-07-07 17:41:11.461 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-07 17:41:11.461 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:11.461 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-07-07" 

2023-07-07 17:41:11.461 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:11.461 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-07 17:41:11.461 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-07 17:41:11.461 DBG default: void DBInterface::account_report_cdate_function(QString, int, QString) 

2023-07-07 17:41:11.461 DBG default: "2023-07-07" ^^^^^^^^^^^^^^^^^^^^^^^^^^  "All"    0 

2023-07-07 17:41:11.461 DBG default: First 

2023-07-07 17:41:11.461 DBG default:  Query string = "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME; " 

2023-07-07 17:41:11.462 DBG default: inside cash true 

2023-07-07 17:41:11.463 DBG default:  Query string Acc rep true 

2023-07-07 17:41:11.463 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME; " 

2023-07-07 17:41:11.463 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-07 17:41:11.463 DBG default: suman cheque "1500" 

2023-07-07 17:41:11.463 DBG default: suman neft "5000" 

2023-07-07 17:41:11.463 DBG default: suman upi "150" 

2023-07-07 17:41:11.463 DBG default: "Chataka" 

2023-07-07 17:41:11.463 DBG default: "1" 

2023-07-07 17:41:11.463 DBG default: "800" 

2023-07-07 17:41:11.463 DBG default: "800" 

2023-07-07 17:41:11.463 DBG default: before emitting signal  account_report '''''''' 

2023-07-07 17:41:11.463 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-07 17:41:11.463 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-07 17:41:11.463 DBG default: void AccountReportModel::setIGrandTotal(int) 800 

2023-07-07 17:41:11.464 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:11.464 DBG default: int AccountReportModel::iGrandTotal() const 800 

2023-07-07 17:41:11.464 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 800 

2023-07-07 17:41:11.464 DBG default: after emitting signal  account_report '''''''' 

2023-07-07 17:41:11.464 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME; " 

2023-07-07 17:41:11.464 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-07 17:41:11.465 DBG default: "M Navami Pavamana Homa" 

2023-07-07 17:41:11.465 DBG default: "1" 

2023-07-07 17:41:11.465 DBG default: "5000" 

2023-07-07 17:41:11.465 DBG default: "5000" 

2023-07-07 17:41:11.465 DBG default: before emitting signal  account_report '''''''' 

2023-07-07 17:41:11.465 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-07 17:41:11.465 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 1 

2023-07-07 17:41:11.465 DBG default: Suman Accounts--- 294328000 

2023-07-07 17:41:11.465 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.465 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.465 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.465 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.465 DBG default: void AccountReportModel::setIGrandTotal(int) 5800 

2023-07-07 17:41:11.465 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:11.465 DBG default: int AccountReportModel::iGrandTotal() const 5800 

2023-07-07 17:41:11.466 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 5800 

2023-07-07 17:41:11.466 DBG default: after emitting signal  account_report '''''''' 

2023-07-07 17:41:11.466 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME; " 

2023-07-07 17:41:11.466 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-07 17:41:11.466 DBG default: "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.466 DBG default: "3" 

2023-07-07 17:41:11.466 DBG default: "50" 

2023-07-07 17:41:11.466 DBG default: "150" 

2023-07-07 17:41:11.466 DBG default: before emitting signal  account_report '''''''' 

2023-07-07 17:41:11.466 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-07 17:41:11.466 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 2 

2023-07-07 17:41:11.466 DBG default: Suman Accounts--- 294328000 

2023-07-07 17:41:11.467 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.467 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.467 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.467 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.467 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.467 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.467 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.467 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.467 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.467 DBG default: void AccountReportModel::setIGrandTotal(int) 5950 

2023-07-07 17:41:11.467 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:11.467 DBG default: int AccountReportModel::iGrandTotal() const 5950 

2023-07-07 17:41:11.467 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 5950 

2023-07-07 17:41:11.467 DBG default: after emitting signal  account_report '''''''' 

2023-07-07 17:41:11.468 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME; " 

2023-07-07 17:41:11.468 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-07 17:41:11.468 DBG default: "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.468 DBG default: "3" 

2023-07-07 17:41:11.468 DBG default: "500" 

2023-07-07 17:41:11.468 DBG default: "1500" 

2023-07-07 17:41:11.468 DBG default: before emitting signal  account_report '''''''' 

2023-07-07 17:41:11.468 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-07 17:41:11.468 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-07-07 17:41:11.468 DBG default: Suman Accounts--- 294328000 

2023-07-07 17:41:11.468 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.468 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.468 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.468 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.468 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.468 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.468 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.468 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.468 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.469 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.469 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.469 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.469 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.469 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.469 DBG default: void AccountReportModel::setIGrandTotal(int) 7450 

2023-07-07 17:41:11.469 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:11.469 DBG default: int AccountReportModel::iGrandTotal() const 7450 

2023-07-07 17:41:11.470 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 7450 

2023-07-07 17:41:11.470 DBG default: after emitting signal  account_report '''''''' 

2023-07-07 17:41:11.470 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-07 17:41:11.470 DBG default: false 

2023-07-07 17:41:11.470 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:11.470 DBG default: "2023-07-07" 

2023-07-07 17:41:11.470 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:11.470 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-07 17:41:11.470 DBG qml: ---------e1----------------
2023-07-07 17:41:11.470 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:11.470 DBG default: int AccountReportModel::iGrandTotal() const 7450 

2023-07-07 17:41:11.520 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:11.520 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:11.520 DBG default: int AccountReportModel::iGrandTotal() const 7450 

2023-07-07 17:41:11.520 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:11.521 WRN default: qrc:/ui/SevaAccountReportForSingleDate.qml:172:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-07 17:41:11.522 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 294328000 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.522 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 294328000 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.522 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.523 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 294328000 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.523 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.528 DBG qml: Component.completed: of SevaAccountReportForSingleDate.qml
2023-07-07 17:41:11.528 DBG qml: In Component.onCompleted: of seva report page single date total text 7450.00 ?
2023-07-07 17:41:11.529 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 294328000 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.529 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.529 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-07 17:41:11.530 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.530 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Chataka" 

2023-07-07 17:41:11.530 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.530 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.531 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-07-07 17:41:11.531 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.531 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.531 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-07 17:41:11.532 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.532 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.533 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.533 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.534 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.534 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.535 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.535 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.535 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.536 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.536 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.536 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.536 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.536 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.536 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.536 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.536 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.536 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.536 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.536 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.536 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.536 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.536 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-07-07 17:41:11.536 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 17:41:11.536 DBG qml: Screen screenWidth size =1920
2023-07-07 17:41:11.536 DBG qml: Screen screenHeight size =1000
2023-07-07 17:41:11.536 WRN default: qrc:/ui/SevaReportPage.qml:253:17: QML Connections: Detected function "onLoadSingleDatePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-07 17:41:11.536 WRN default: qrc:/ui/SevaReportPage.qml:253:17: QML Connections: Detected function "onLoadMonthWisePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-07 17:41:11.536 WRN default: qrc:/ui/SevaReportPage.qml:253:17: QML Connections: Detected function "onLoadDateWiseForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-07 17:41:11.536 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:11.536 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-07 17:41:11.536 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-07 17:41:11.536 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:11.536 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-07 17:41:11.536 DBG qml: ---------e----------------
2023-07-07 17:41:11.536 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:11.536 DBG default: int AccountReportModel::iGrandTotal() const 7450 

2023-07-07 17:41:11.538 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.538 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.538 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.539 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 294341000 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.539 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 2 

2023-07-07 17:41:11.539 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.539 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "M Navami Pavamana Homa" 

2023-07-07 17:41:11.539 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.539 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-07 17:41:11.539 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.539 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.539 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-07 17:41:11.540 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.540 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.540 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.540 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.540 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.541 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.541 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-07 17:41:11.541 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.541 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.541 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.542 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 294335280 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.542 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.543 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-07 17:41:11.543 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.543 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.543 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.543 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 50 

2023-07-07 17:41:11.543 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.543 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.544 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-07 17:41:11.544 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.544 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.544 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.544 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.544 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.544 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.546 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 150 

2023-07-07 17:41:11.546 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.546 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.546 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- 0 

2023-07-07 17:41:11.546 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.547 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 4 

2023-07-07 17:41:11.547 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.547 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.547 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.547 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 500 

2023-07-07 17:41:11.547 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.547 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-07 17:41:11.547 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.547 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.548 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.548 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.549 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.549 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.549 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.549 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.549 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1500 

2023-07-07 17:41:11.550 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.550 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.550 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.550 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-07 17:41:11.550 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.550 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.551 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Chataka" 

2023-07-07 17:41:11.551 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.551 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-07-07 17:41:11.551 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.551 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-07 17:41:11.551 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.551 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.552 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-07-07 17:41:11.552 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.552 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.552 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.552 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 2 

2023-07-07 17:41:11.552 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.552 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.553 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "M Navami Pavamana Homa" 

2023-07-07 17:41:11.553 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.553 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-07 17:41:11.553 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.553 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-07 17:41:11.553 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.553 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.554 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-07 17:41:11.554 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.554 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.554 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.554 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.554 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-07 17:41:11.554 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.555 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.555 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.555 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.555 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 50 

2023-07-07 17:41:11.556 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.556 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-07 17:41:11.556 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.556 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 150 

2023-07-07 17:41:11.556 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.556 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.556 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.557 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.557 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 4 

2023-07-07 17:41:11.557 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.557 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.557 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.557 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 500 

2023-07-07 17:41:11.557 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.557 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.558 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-07 17:41:11.558 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- "Chataka" 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 800 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 2 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 1 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 5000 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 50 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 150 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 4 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 500 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 3 

2023-07-07 17:41:11.558 DBG default: Suman Accounts--- 1500 

2023-07-07 17:41:11.558 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1500 

2023-07-07 17:41:14.585 DBG qml: Rajjjjjjjjjjjjj08-07-2023
2023-07-07 17:41:14.674 DBG qml:  Date selected =08-07-2023
2023-07-07 17:41:15.591 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-07 17:41:15.591 DBG qml: ---------c----------------
2023-07-07 17:41:15.591 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-07-07 17:41:15.591 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-07-07 17:41:15.591 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-07 17:41:15.591 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-07-07 17:41:15.591 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-07-07 17:41:15.591 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:15.591 DBG qml:   _rip.sSingleDate 1 08-07-2023
2023-07-07 17:41:15.592 DBG qml: -------------------------------------
2023-07-07 17:41:15.592 DBG qml: sendReportInputEmitted
2023-07-07 17:41:15.592 DBG qml: In main
2023-07-07 17:41:15.592 DBG default: void SevaReport::generateAccReport(ReportFilterElements*) 

2023-07-07 17:41:15.592 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-07 17:41:15.593 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-07 17:41:15.594 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) 0 

2023-07-07 17:41:15.594 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:15.595 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm date "08-07-2023" 

2023-07-07 17:41:15.595 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-07 17:41:15.595 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-07 17:41:15.595 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm ddetails "All" 0 

2023-07-07 17:41:15.595 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) Inside c date acc rep 

2023-07-07 17:41:15.595 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:15.595 DBG default: QString AccountReportModel::FormatDate(QString) "08-07-2023" 

2023-07-07 17:41:15.595 DBG default: QString AccountReportModel::FormatDate(QString) QDate("2023-07-08") 

2023-07-07 17:41:15.595 DBG default: QString AccountReportModel::FormatDate(QString) "2023-07-08" 

2023-07-07 17:41:15.595 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-07 17:41:15.595 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:15.595 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-07-08" 

2023-07-07 17:41:15.595 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:15.595 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-07 17:41:15.595 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-07 17:41:15.595 DBG default: void DBInterface::account_report_cdate_function(QString, int, QString) 

2023-07-07 17:41:15.595 DBG default: "2023-07-08" ^^^^^^^^^^^^^^^^^^^^^^^^^^  "All"    0 

2023-07-07 17:41:15.595 DBG default: First 

2023-07-07 17:41:15.595 DBG default:  Query string = "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-08' Group by sevabooking.SEVANAME; " 

2023-07-07 17:41:15.596 DBG default: inside cash true 

2023-07-07 17:41:15.596 DBG default:  Query string Acc rep true 

2023-07-07 17:41:15.596 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-07 17:41:15.597 DBG default: false 

2023-07-07 17:41:15.597 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-07 17:41:15.597 DBG default: "2023-07-08" 

2023-07-07 17:41:15.597 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:15.597 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-07 17:41:15.597 DBG qml: ---------d1----------------
2023-07-07 17:41:15.597 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:15.597 DBG default: int AccountReportModel::iGrandTotal() const 0 

2023-07-07 17:41:15.597 DBG qml:  Component.onDestruction of SevaAccountReportForSingleDate.qml
2023-07-07 17:41:15.597 DBG default: void SevaReport::resetAccDateRangeModel() 

2023-07-07 17:41:15.597 DBG default: void AccountReportDateRangeModel::resetAccDateRangeModel() 

2023-07-07 17:41:15.602 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:15.602 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:15.602 DBG default: int AccountReportModel::iGrandTotal() const 0 

2023-07-07 17:41:15.603 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:15.604 WRN default: qrc:/ui/SevaAccountReportForSingleDate.qml:172:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-07 17:41:15.606 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-07 17:41:15.613 DBG qml: Component.completed: of SevaAccountReportForSingleDate.qml
2023-07-07 17:41:15.613 DBG qml: In Component.onCompleted: of seva report page single date total text 0.00 ?
2023-07-07 17:41:15.618 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 17:41:15.618 DBG qml: Screen screenWidth size =1920
2023-07-07 17:41:15.618 DBG qml: Screen screenHeight size =1000
2023-07-07 17:41:15.618 WRN default: qrc:/ui/SevaReportPage.qml:253:17: QML Connections: Detected function "onLoadSingleDatePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-07 17:41:15.618 WRN default: qrc:/ui/SevaReportPage.qml:253:17: QML Connections: Detected function "onLoadMonthWisePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-07 17:41:15.618 WRN default: qrc:/ui/SevaReportPage.qml:253:17: QML Connections: Detected function "onLoadDateWiseForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-07 17:41:15.618 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:15.619 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-07 17:41:15.619 DBG qml:  if of sevaProxy.sevaReport.accountReportModel.getAccountReportQryListSize()===0
2023-07-07 17:41:15.619 DBG qml: In onSendError
2023-07-07 17:41:15.619 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-07 17:41:15.619 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:15.619 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-07 17:41:15.619 DBG qml: ---------d----------------
2023-07-07 17:41:15.619 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 17:41:15.619 DBG default: int AccountReportModel::iGrandTotal() const 0 

2023-07-07 17:41:19.668 DBG qml: Closing the report
2023-07-07 17:41:19.668 DBG qml: reset Model
2023-07-07 17:41:19.668 DBG default: void SevaReport::resetAccModel() 

2023-07-07 17:41:19.668 DBG default: void AccountReportModel::resetAccModel() 

2023-07-07 17:41:19.668 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-07 17:41:19.668 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-07 17:41:19.668 DBG qml:  Component.onDestruction of SevaAccountReportForSingleDate.qml
2023-07-07 17:41:19.668 DBG default: void SevaReport::resetAccDateRangeModel() 

2023-07-07 17:41:19.668 DBG default: void AccountReportDateRangeModel::resetAccDateRangeModel() 

