2023-05-02 14:34:46.659 WRN default: Invalid QML element name " AccReportDateRangeElement"
2023-05-02 14:34:46.660 WRN default: Invalid QML element name " AccReportMonthRangeElement"
2023-05-02 14:34:46.660 WRN default: Invalid QML element name " BookingReportDateRangeElement"
2023-05-02 14:34:46.660 WRN default: Invalid QML element name " BookingReportMonthRangeElement"
2023-05-02 14:34:46.662 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-05-02 14:34:46.662 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() In static getTrustListModelInstance of TrustListModel inside if 

2023-05-02 14:34:46.662 DBG default: TrustListModel::TrustListModel() 

2023-05-02 14:34:46.662 DBG default: void TrustListModel::init() 

2023-05-02 14:34:46.662 DBG default: TrustConfiguration::TrustConfiguration(QObject*) 

2023-05-02 14:34:46.662 DBG default: void TrustConfiguration::readTrustsFromJsonToList() path  "D:/TempleFile/Ramamndira_2023/Temple-main/bins" 

2023-05-02 14:34:46.662 DBG default: file opened 

2023-05-02 14:34:46.662 DBG default: read all 

2023-05-02 14:34:46.662 DBG default: void TrustConfiguration::readTrustsFromJsonToList() dddddddoooooooooooocccccccc 

2023-05-02 14:34:46.662 DBG default: Trust::Trust(QObject*) 

2023-05-02 14:34:46.985 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-02 14:34:46.985 DBG qml: Screen screenWidth size =1920
2023-05-02 14:34:46.985 DBG qml: Screen screenHeight size =1000
2023-05-02 14:34:47.011 DBG qml: screen height= 1080
2023-05-02 14:34:47.011 DBG qml: screen width= 1920
2023-05-02 14:34:47.011 DBG qml: Screen MyStyles-screecnWidth size =1920
2023-05-02 14:34:47.011 DBG qml: Screen MyStyles-screenHeight size =1000
2023-05-02 14:34:47.012 DBG qml: screen density  == 6.228183399741848
2023-05-02 14:34:47.012 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-02 14:34:47.012 DBG qml: Screen screenWidth size =1920
2023-05-02 14:34:47.012 DBG qml: Screen screenHeight size =1000
2023-05-02 14:34:52.086 DBG default: int TrustListModel::getTrustListSize() 

2023-05-02 14:34:52.086 DBG default: int TrustListModel::getTrustListSize() 

2023-05-02 14:34:52.086 DBG qml: in else--------------
2023-05-02 14:34:52.086 DBG qml: in else------trustName--------Hubablli
2023-05-02 14:34:52.086 DBG qml: in else-------trustCode-------Hubablli
2023-05-02 14:34:52.086 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) 

2023-05-02 14:34:52.086 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) m_currentConfigLocation  "D:/TempleFile/Ramamndira_2023/Temple-main/bins/Config/Hubablli" 

2023-05-02 14:34:52.086 DBG default: Inside lamda 

2023-05-02 14:34:52.086 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) 

2023-05-02 14:34:52.086 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) m_currentDataLocation  "D:/TempleFile/Ramamndira_2023/Temple-main/bins/Data/Hubablli" 

2023-05-02 14:34:52.086 DBG default: Inside lamda 

2023-05-02 14:34:52.086 DBG default: QString TrustListModel::getConfigLocation() 

2023-05-02 14:34:52.087 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-05-02 14:34:52.087 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-05-02 14:34:52.087 DBG default: Creating the DataBase Connection  

2023-05-02 14:34:52.091 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-05-02 14:34:52.091 DBG default: QString TrustListModel::getDataLocation() 

2023-05-02 14:34:52.091 DBG default: DBInterface::DBInterface(QObject*) ******************* DB "D:/TempleFile/Ramamndira_2023/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-05-02 14:34:52.091 DBG default: Database is opened  "D:/TempleFile/Ramamndira_2023/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-05-02 14:34:52.091 DBG default: SevaTypeJsonProcessor::SevaTypeJsonProcessor(QObject*) 

2023-05-02 14:34:52.091 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate() 

2023-05-02 14:34:52.091 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-05-02 14:34:52.091 DBG default: QString TrustListModel::getConfigLocation() 

2023-05-02 14:34:52.091 DBG default: file opened 

2023-05-02 14:34:52.091 DBG default: read all 

2023-05-02 14:34:52.091 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-05-02 14:34:52.091 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  1000 

2023-05-02 14:34:52.091 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 1000 

2023-05-02 14:34:52.092 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  1000 already exist in DB 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-05-02 14:34:52.092 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  2000 

2023-05-02 14:34:52.092 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 2000 

2023-05-02 14:34:52.092 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  2000 already exist in DB 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::printSevaTypeNames() 

2023-05-02 14:34:52.092 DBG default: 1000 :  "Regular Seva" , 1000 , "Raj" 

2023-05-02 14:34:52.092 DBG default: 2000 :  "Aradhana Seva" , 2000 , "Abhi" 

2023-05-02 14:34:52.092 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-05-02 14:34:52.092 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-05-02 14:34:52.092 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-05-02 14:34:52.092 DBG default: QString TrustListModel::getConfigLocation() 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  path "D:/TempleFile/Ramamndira_2023/Temple-main/bins/Config/Hubablli/SevaNames.json" 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() file opened 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() read all 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Udayaasthamaana Seva" 

2023-05-02 14:34:52.092 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.092 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1001 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.092 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Udayaasthamaana Seva"  sevaId=  1001 

2023-05-02 14:34:52.092 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1001 

2023-05-02 14:34:52.092 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1001 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Seva" 

2023-05-02 14:34:52.092 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.092 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1002 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.092 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Seva"  sevaId=  1002 

2023-05-02 14:34:52.092 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1002 

2023-05-02 14:34:52.092 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1002 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Samarpana Seva" 

2023-05-02 14:34:52.092 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.092 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1003 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.092 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.092 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Samarpana Seva"  sevaId=  1003 

2023-05-02 14:34:52.093 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1003 

2023-05-02 14:34:52.093 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1003 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakaabhisheka" 

2023-05-02 14:34:52.093 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.093 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1004 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.093 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakaabhisheka"  sevaId=  1004 

2023-05-02 14:34:52.093 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1004 

2023-05-02 14:34:52.093 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1004 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Godhana" 

2023-05-02 14:34:52.093 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.093 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1005 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.093 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Godhana"  sevaId=  1005 

2023-05-02 14:34:52.093 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1005 

2023-05-02 14:34:52.093 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1005 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mahaa Pooja" 

2023-05-02 14:34:52.093 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.093 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1006 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.093 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mahaa Pooja"  sevaId=  1006 

2023-05-02 14:34:52.093 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1006 

2023-05-02 14:34:52.093 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1006 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ksheeraabhisheka" 

2023-05-02 14:34:52.093 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.093 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1007 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.093 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ksheeraabhisheka"  sevaId=  1007 

2023-05-02 14:34:52.093 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1007 

2023-05-02 14:34:52.093 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1007 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Madhu Abhisheka" 

2023-05-02 14:34:52.093 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.093 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1008 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.093 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Madhu Abhisheka"  sevaId=  1008 

2023-05-02 14:34:52.093 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1008 

2023-05-02 14:34:52.093 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1008 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Yella Homagala Seva" 

2023-05-02 14:34:52.093 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.093 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1010 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.093 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.094 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Yella Homagala Seva"  sevaId=  1010 

2023-05-02 14:34:52.094 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1010 

2023-05-02 14:34:52.094 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1010 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Naivedhya/Hasthodaka" 

2023-05-02 14:34:52.094 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.094 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1011 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.094 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Naivedhya/Hasthodaka"  sevaId=  1011 

2023-05-02 14:34:52.094 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1011 

2023-05-02 14:34:52.094 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1011 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Phala - Panchaamrutha" 

2023-05-02 14:34:52.094 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.094 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1012 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.094 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Phala - Panchaamrutha"  sevaId=  1012 

2023-05-02 14:34:52.094 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1012 

2023-05-02 14:34:52.094 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1012 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ganapathi Abhisheka" 

2023-05-02 14:34:52.094 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.094 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1013 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.094 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ganapathi Abhisheka"  sevaId=  1013 

2023-05-02 14:34:52.094 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1013 

2023-05-02 14:34:52.094 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1013 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Nagadevara Abhisheka" 

2023-05-02 14:34:52.094 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.094 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1014 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.094 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Nagadevara Abhisheka"  sevaId=  1014 

2023-05-02 14:34:52.094 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1014 

2023-05-02 14:34:52.094 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1014 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Abhisheka" 

2023-05-02 14:34:52.094 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.094 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1015 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.094 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Abhisheka"  sevaId=  1015 

2023-05-02 14:34:52.094 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1015 

2023-05-02 14:34:52.094 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1015 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.094 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rathothsava" 

2023-05-02 14:34:52.095 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.095 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1016 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.095 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rathothsava"  sevaId=  1016 

2023-05-02 14:34:52.095 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1016 

2023-05-02 14:34:52.095 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1016 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Huggi Naivedhya" 

2023-05-02 14:34:52.095 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.095 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1017 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.095 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Huggi Naivedhya"  sevaId=  1017 

2023-05-02 14:34:52.095 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1017 

2023-05-02 14:34:52.095 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1017 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pongal Naivedhya" 

2023-05-02 14:34:52.095 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.095 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1018 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.095 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pongal Naivedhya"  sevaId=  1018 

2023-05-02 14:34:52.095 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1018 

2023-05-02 14:34:52.095 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1018 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Grahana Shanthi" 

2023-05-02 14:34:52.095 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.095 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1019 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.095 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Grahana Shanthi"  sevaId=  1019 

2023-05-02 14:34:52.095 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1019 

2023-05-02 14:34:52.095 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1019 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika - Rathothsava" 

2023-05-02 14:34:52.095 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.095 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1020 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.095 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika - Rathothsava"  sevaId=  1020 

2023-05-02 14:34:52.095 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1020 

2023-05-02 14:34:52.095 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1020 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika Seva" 

2023-05-02 14:34:52.095 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.095 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1021 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.095 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.095 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika Seva"  sevaId=  1021 

2023-05-02 14:34:52.096 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1021 

2023-05-02 14:34:52.096 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1021 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sri Sathya Narayana Pooja" 

2023-05-02 14:34:52.096 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.096 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1022 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.096 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sri Sathya Narayana Pooja"  sevaId=  1022 

2023-05-02 14:34:52.096 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1022 

2023-05-02 14:34:52.096 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1022 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Tulsi Archane" 

2023-05-02 14:34:52.096 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.096 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1023 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.096 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Tulsi Archane"  sevaId=  1023 

2023-05-02 14:34:52.096 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1023 

2023-05-02 14:34:52.096 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1023 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Chataka Shraadha" 

2023-05-02 14:34:52.096 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.096 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1024 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.096 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Chataka Shraadha"  sevaId=  1024 

2023-05-02 14:34:52.096 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1024 

2023-05-02 14:34:52.096 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1024 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sankalpa Shraadha" 

2023-05-02 14:34:52.096 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.096 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1025 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.096 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sankalpa Shraadha"  sevaId=  1025 

2023-05-02 14:34:52.096 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1025 

2023-05-02 14:34:52.096 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1025 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Vaahana Pooja" 

2023-05-02 14:34:52.096 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.096 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1026 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.096 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Vaahana Pooja"  sevaId=  1026 

2023-05-02 14:34:52.096 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1026 

2023-05-02 14:34:52.096 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1026 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Archane Seva" 

2023-05-02 14:34:52.096 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.096 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1027 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.096 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.096 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Archane Seva"  sevaId=  1027 

2023-05-02 14:34:52.097 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1027 

2023-05-02 14:34:52.097 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1027 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Lakshmi Pooja" 

2023-05-02 14:34:52.097 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.097 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1028 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.097 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Lakshmi Pooja"  sevaId=  1028 

2023-05-02 14:34:52.097 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1028 

2023-05-02 14:34:52.097 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1028 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Devarige Thailaabhisheka" 

2023-05-02 14:34:52.097 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.097 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1029 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.097 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Devarige Thailaabhisheka"  sevaId=  1029 

2023-05-02 14:34:52.097 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1029 

2023-05-02 14:34:52.097 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1029 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pavamaana Homa" 

2023-05-02 14:34:52.097 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.097 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1030 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.097 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pavamaana Homa"  sevaId=  1030 

2023-05-02 14:34:52.097 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1030 

2023-05-02 14:34:52.097 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1030 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Gana Homa" 

2023-05-02 14:34:52.097 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.097 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1031 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.097 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Gana Homa"  sevaId=  1031 

2023-05-02 14:34:52.097 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1031 

2023-05-02 14:34:52.097 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1031 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mruthyunjaya Homa" 

2023-05-02 14:34:52.097 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.097 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1032 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.097 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mruthyunjaya Homa"  sevaId=  1032 

2023-05-02 14:34:52.097 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1032 

2023-05-02 14:34:52.097 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1032 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rudraabhisheka" 

2023-05-02 14:34:52.097 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.097 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1033 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.097 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.098 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rudraabhisheka"  sevaId=  1033 

2023-05-02 14:34:52.098 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1033 

2023-05-02 14:34:52.098 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1033 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Sampurna Seva" 

2023-05-02 14:34:52.098 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.098 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2001 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.098 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Sampurna Seva"  sevaId=  2001 

2023-05-02 14:34:52.098 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2001 

2023-05-02 14:34:52.098 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2001 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Anna Santharpane Seva" 

2023-05-02 14:34:52.098 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.098 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2002 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.098 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Anna Santharpane Seva"  sevaId=  2002 

2023-05-02 14:34:52.098 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2002 

2023-05-02 14:34:52.098 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2002 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva(Huvina Alankara)" 

2023-05-02 14:34:52.098 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.098 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2003 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.098 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva(Huvina Alankara)"  sevaId=  2003 

2023-05-02 14:34:52.098 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2003 

2023-05-02 14:34:52.098 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2003 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva" 

2023-05-02 14:34:52.098 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.098 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2004 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.098 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva"  sevaId=  2004 

2023-05-02 14:34:52.098 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2004 

2023-05-02 14:34:52.098 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2004 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Noothana Vastra Seva" 

2023-05-02 14:34:52.098 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.098 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2005 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.098 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Noothana Vastra Seva"  sevaId=  2005 

2023-05-02 14:34:52.098 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2005 

2023-05-02 14:34:52.098 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2005 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.098 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva seva" 

2023-05-02 14:34:52.098 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.098 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2006 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.099 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva seva"  sevaId=  2006 

2023-05-02 14:34:52.099 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2006 

2023-05-02 14:34:52.099 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2006 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakabhisheka Seva" 

2023-05-02 14:34:52.099 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.099 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2007 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.099 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakabhisheka Seva"  sevaId=  2007 

2023-05-02 14:34:52.099 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2007 

2023-05-02 14:34:52.099 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2007 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Hasthodaka Seva(Prathidina)" 

2023-05-02 14:34:52.099 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.099 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2009 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.099 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Hasthodaka Seva(Prathidina)"  sevaId=  2009 

2023-05-02 14:34:52.099 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2009 

2023-05-02 14:34:52.099 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2009 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "MahaPooje" 

2023-05-02 14:34:52.099 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.099 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2010 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.099 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "MahaPooje"  sevaId=  2010 

2023-05-02 14:34:52.099 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2010 

2023-05-02 14:34:52.099 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2010 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ashtothara Seva(Prathidina)" 

2023-05-02 14:34:52.099 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.099 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2011 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.099 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ashtothara Seva(Prathidina)"  sevaId=  2011 

2023-05-02 14:34:52.099 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2011 

2023-05-02 14:34:52.099 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2011 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.099 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Paadakaradhane" 

2023-05-02 14:34:52.099 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.099 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2012 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.100 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Paadakaradhane"  sevaId=  2012 

2023-05-02 14:34:52.100 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2012 

2023-05-02 14:34:52.100 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2012 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "GanaHoma" 

2023-05-02 14:34:52.100 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.100 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2013 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.100 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "GanaHoma"  sevaId=  2013 

2023-05-02 14:34:52.100 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2013 

2023-05-02 14:34:52.100 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2013 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "PhalaPanchamrutha Seva" 

2023-05-02 14:34:52.100 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-02 14:34:52.100 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2014 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-02 14:34:52.100 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "PhalaPanchamrutha Seva"  sevaId=  2014 

2023-05-02 14:34:52.100 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2014 

2023-05-02 14:34:52.100 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2014 

2023-05-02 14:34:52.100 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-05-02 14:34:52.100 DBG default: void SevaTypeJsonProcessor::printSevasNames() 

2023-05-02 14:34:52.100 DBG default: 1001 :  "Udayaasthamaana Seva" , 1001 , 1 , 1000 , 5000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1002 :  "Sarva Seva" , 1002 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1003 :  "Sarva Samarpana Seva" , 1003 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1004 :  "Kanakaabhisheka" , 1004 , 1 , 1000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1005 :  "Godhana" , 1005 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1006 :  "Mahaa Pooja" , 1006 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1007 :  "Ksheeraabhisheka" , 1007 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1008 :  "Madhu Abhisheka" , 1008 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1010 :  "Yella Homagala Seva" , 1010 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1011 :  "Naivedhya/Hasthodaka" , 1011 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1012 :  "Phala - Panchaamrutha" , 1012 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1013 :  "Ganapathi Abhisheka" , 1013 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1014 :  "Nagadevara Abhisheka" , 1014 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1015 :  "Navagraha Abhisheka" , 1015 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1016 :  "Rathothsava" , 1016 , 1 , 1000 , 1000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1017 :  "Huggi Naivedhya" , 1017 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1018 :  "Pongal Naivedhya" , 1018 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1019 :  "Grahana Shanthi" , 1019 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1020 :  "Kaarthika - Rathothsava" , 1020 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1021 :  "Kaarthika Seva" , 1021 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1022 :  "Sri Sathya Narayana Pooja" , 1022 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1023 :  "Tulsi Archane" , 1023 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1024 :  "Chataka Shraadha" , 1024 , 1 , 1000 , 600 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1025 :  "Sankalpa Shraadha" , 1025 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1026 :  "Vaahana Pooja" , 1026 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1027 :  "Archane Seva" , 1027 , 1 , 1000 , 25 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1028 :  "Lakshmi Pooja" , 1028 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1029 :  "Navagraha Devarige Thailaabhisheka" , 1029 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1030 :  "Pavamaana Homa" , 1030 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1031 :  "Gana Homa" , 1031 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1032 :  "Mruthyunjaya Homa" , 1032 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 1033 :  "Rudraabhisheka" , 1033 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 2001 :  "Ondu Dinada Sampurna Seva" , 2001 , 1 , 2000 , 25001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 2002 :  "Ondu Dinada Anna Santharpane Seva" , 2002 , 1 , 2000 , 20001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 2003 :  "Alankara Seva(Huvina Alankara)" , 2003 , 1 , 2000 , 10001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.100 DBG default: 2004 :  "Alankara Seva" , 2004 , 1 , 2000 , 5001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.101 DBG default: 2005 :  "Noothana Vastra Seva" , 2005 , 1 , 2000 , 4000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.101 DBG default: 2006 :  "Sarva seva" , 2006 , 1 , 2000 , 2501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.101 DBG default: 2007 :  "Kanakabhisheka Seva" , 2007 , 1 , 2000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.101 DBG default: 2009 :  "Hasthodaka Seva(Prathidina)" , 2009 , 1 , 2000 , 1001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.101 DBG default: 2010 :  "MahaPooje" , 2010 , 1 , 2000 , 800 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.101 DBG default: 2011 :  "Ashtothara Seva(Prathidina)" , 2011 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.101 DBG default: 2012 :  "Paadakaradhane" , 2012 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.101 DBG default: 2013 :  "GanaHoma" , 2013 , 1 , 2000 , 101 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.101 DBG default: 2014 :  "PhalaPanchamrutha Seva" , 2014 , 1 , 2000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-02 14:34:52.101 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-05-02 14:34:52.101 DBG default: Creating the SevaTypeNamesDataModel  

2023-05-02 14:34:52.101 DBG default: SevaBookingConformationDataModel::SevaBookingConformationDataModel(QObject*) 

2023-05-02 14:34:52.101 DBG default: JsonWriter::JsonWriter(QObject*) 

2023-05-02 14:34:52.101 DBG default: SevaTypeNamesDataModel::SevaTypeNamesDataModel(QObject*) 

2023-05-02 14:34:52.101 DBG default: void SevaTypeNamesDataModel::connectSignals() 

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::querySevaTypes() 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 3 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 4 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 5 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 6 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 7 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 8 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 9 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 10 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 11 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 12 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 13 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 14 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 15 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 16 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 0 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 18 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 19 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 20 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 25 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 22 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1000 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2000 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 26 

2023-05-02 14:34:52.101 DBG default: bool DBInterface::querySevaType() querying seva type done 

2023-05-02 14:34:52.101 DBG default: bool SevaTypeNamesDataModel::querySevaNames() 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka"  Type = 1  SevaID = 2 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka"  Type = 1  SevaID = 3 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dwadashi Hasthodaka"  Type = 1  SevaID = 4 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi Homa"  Type = 9  SevaID = 5 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))), QMap((5, SevaName(0x9296fe8))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Panchamrutha/Abhisheka"  Type = 1  SevaID = 6 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))), QMap((5, SevaName(0x9296fe8))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Samanya Kanike"  Type = 1  SevaID = 7 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))), QMap((5, SevaName(0x9296fe8))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shop Kanike"  Type = 11  SevaID = 9 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))), QMap((5, SevaName(0x9296fe8))), QMap((9, SevaName(0x92978a8))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya thaila seva"  Type = 9  SevaID = 10 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))), QMap((9, SevaName(0x92978a8))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Building Fund"  Type = 12  SevaID = 11 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankar Pankthi"  Type = 4  SevaID = 12 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))), QMap((12, SevaName(0x92977b8))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Aradhna Kanike"  Type = 4  SevaID = 13 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadhana "  Type = 4  SevaID = 14 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hundi Collections"  Type = 13  SevaID = 15 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Khara Huggi"  Type = 8  SevaID = 16 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sweet Huggi"  Type = 8  SevaID = 17 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thatte Hasthodaka"  Type = 1  SevaID = 18 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Advance Recovered"  Type = 9  SevaID = 19 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PP - Rent"  Type = 14  SevaID = 20 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Annadana Seva"  Type = 3  SevaID = 23 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((23, SevaName(0x92c2258))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa"  Type = 3  SevaID = 24 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa Sankalp"  Type = 3  SevaID = 25 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachna Seva-All days"  Type = 3  SevaID = 26 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachana seva- 1 day"  Type = 3  SevaID = 27 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami  Annadana Sankalpa Seva"  Type = 3  SevaID = 28 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Hoovina Alankara seva"  Type = 3  SevaID = 29 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navmi Sarva seva"  Type = 3  SevaID = 30 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sumadhwavijaya Parayana seva"  Type = 3  SevaID = 31 

2023-05-02 14:34:52.102 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Prakarosthava"  Type = 3  SevaID = 34 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Seva"  Type = 3  SevaID = 35 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Gruha Padapooja"  Type = 3  SevaID = 36 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Serva Seva"  Type = 1  SevaID = 37 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Kanike"  Type = 3  SevaID = 38 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Annadana seva "  Type = 3  SevaID = 39 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pandith Sanman"  Type = 3  SevaID = 40 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M  Navami Panchamurtha "  Type = 3  SevaID = 41 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Shanthi Homa"  Type = 15  SevaID = 42 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Padapooja"  Type = 3  SevaID = 43 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Madhu Abhiseka"  Type = 3  SevaID = 44 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gopaladasara Aradhane"  Type = 16  SevaID = 45 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Additional Sweets"  Type = 9  SevaID = 46 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina alankara Seva"  Type = 1  SevaID = 47 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prasada Seve"  Type = 1  SevaID = 48 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka- 2 Hasthodaka"  Type = 1  SevaID = 49 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sathyanarayana Pooje"  Type = 10  SevaID = 50 

2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.103 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "AYUSH HOMA"  Type = 15  SevaID = 51 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILA ABHYANJANA"  Type = 9  SevaID = 52 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharana"  Type = 9  SevaID = 53 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI  SAMPOORNA SEVE"  Type = 2  SevaID = 54 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI SANKLAPA SEVE"  Type = 2  SevaID = 55 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA"  Type = 2  SevaID = 56 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA SANKALPA"  Type = 2  SevaID = 57 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SITA RAMA KALYANOTSVA"  Type = 2  SevaID = 58 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMA KALYANOTSAVA SANKALPAA"  Type = 2  SevaID = 59 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA PRAVACHANA SEVE "  Type = 2  SevaID = 60 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "YELLA DINAGALA PRAVACHANA SEVE"  Type = 2  SevaID = 61 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "HOOVINA ALANKARA"  Type = 2  SevaID = 62 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi"  Type = 2  SevaID = 63 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA SANJE PRASADA SEVE"  Type = 2  SevaID = 64 

2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.104 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "VISHESHA PANCHAMRUTA"  Type = 2  SevaID = 65 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRAKAROTSVA"  Type = 2  SevaID = 66 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILABYAJANA SEVE"  Type = 2  SevaID = 67 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ARCHANE"  Type = 2  SevaID = 68 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Raghavendra Swamy Aradhane"  Type = 16  SevaID = 69 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Abhisheka Madhu/Panchamrutha"  Type = 4  SevaID = 70 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtottara"  Type = 4  SevaID = 71 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara"  Type = 4  SevaID = 72 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 4  SevaID = 73 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Deepalankarana Seve"  Type = 7  SevaID = 74 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tarakari Seve"  Type = 1  SevaID = 75 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seva"  Type = 4  SevaID = 76 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Bhiksha kanike"  Type = 18  SevaID = 77 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "hastodaka P P"  Type = 5  SevaID = 78 

2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))))
2023-05-02 14:34:52.105 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka P P"  Type = 5  SevaID = 79 

2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))))
2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa  P P"  Type = 5  SevaID = 80 

2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))))
2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Nanda Deepa for 9 days"  Type = 6  SevaID = 81 

2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))))
2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Nanda Deepa for  9 days"  Type = 6  SevaID = 82 

2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))))
2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Deepa for 1 day"  Type = 6  SevaID = 83 

2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))))
2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Deepa for 1 day"  Type = 6  SevaID = 84 

2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))))
2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seve"  Type = 1  SevaID = 85 

2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))))
2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadana Kanike"  Type = 1  SevaID = 86 

2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))))
2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana"  Type = 19  SevaID = 87 

2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))))
2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana for one day"  Type = 19  SevaID = 88 

2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana Seva for one day"  Type = 6  SevaID = 89 

2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.106 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nitya Deepaseve"  Type = 7  SevaID = 90 

2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjana"  Type = 7  SevaID = 91 

2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Seve"  Type = 7  SevaID = 92 

2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Laksha Deepostava"  Type = 7  SevaID = 93 

2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Pratyekavagi "  Type = 7  SevaID = 94 

2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulasi Damodara Vivaha sankalpa"  Type = 7  SevaID = 95 

2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sampoorna Seve "  Type = 7  SevaID = 96 

2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sankalpa Seve "  Type = 7  SevaID = 97 

2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Hoovina Alankara "  Type = 7  SevaID = 98 

2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha Abhisheka "  Type = 7  SevaID = 99 

2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vijaya Dasara Aradhane"  Type = 16  SevaID = 100 

2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.107 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarotsva"  Type = 1  SevaID = 101 

2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 0  SevaID = 102 

2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 1  SevaID = 103 

2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtotthara Kanike"  Type = 1  SevaID = 104 

2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Santhana Gopala Krishna Homa"  Type = 15  SevaID = 105 

2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamana Homa"  Type = 15  SevaID = 106 

2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))))
2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shashwatha Seva Pooje"  Type = 20  SevaID = 107 

2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))))
2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Regular"  Type = 1  SevaID = 108 

2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))))
2023-05-02 14:34:52.108 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Seva"  Type = 8  SevaID = 109 

2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))))
2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mosaranna Naivedya"  Type = 9  SevaID = 110 

2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))))
2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Poorna Pragna Hall Kanike"  Type = 14  SevaID = 111 

2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))), QMap((50, SevaName(0x92c2e88))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))))
2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pratyeka Sathyanarayana Pooja"  Type = 10  SevaID = 112 

2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))))
2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chikka Adige"  Type = 9  SevaID = 113 

2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))))
2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha"  Type = 21  SevaID = 114 

2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))))
2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjan seve"  Type = 21  SevaID = 115 

2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))))
2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri SeethaRamanjaneyarige Nuthana Vastra Dharane pratidevarige."  Type = 21  SevaID = 116 

2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))))
2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 21  SevaID = 117 

2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))))
2023-05-02 14:34:52.109 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane"  Type = 21  SevaID = 118 

2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))))
2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara seve"  Type = 21  SevaID = 119 

2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))))
2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ramanavami Kanike"  Type = 2  SevaID = 120 

2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))))
2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Villeydhele Hara"  Type = 1  SevaID = 121 

2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))))
2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gandha Lepana "  Type = 22  SevaID = 122 

2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))))
2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phalahara Pooja"  Type = 9  SevaID = 123 

2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))))
2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 15  SevaID = 124 

2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))))
2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Monthly"  Type = 1  SevaID = 125 

2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))))
2023-05-02 14:34:52.110 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Jayathirtha Aradhane Kanike"  Type = 16  SevaID = 126 

2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))))
2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Oldarticals sold"  Type = 9  SevaID = 127 

2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))))
2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Udayaasthamaana Seva"  Type = 1000  SevaID = 1001 

2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))))
2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Seva"  Type = 1000  SevaID = 1002 

2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))))
2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Samarpana Seva"  Type = 1000  SevaID = 1003 

2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))))
2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakaabhisheka"  Type = 1000  SevaID = 1004 

2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))))
2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Godhana"  Type = 1000  SevaID = 1005 

2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))))
2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mahaa Pooja"  Type = 1000  SevaID = 1006 

2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))))
2023-05-02 14:34:52.111 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ksheeraabhisheka"  Type = 1000  SevaID = 1007 

2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))))
2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Madhu Abhisheka"  Type = 1000  SevaID = 1008 

2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))))
2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Yella Homagala Seva"  Type = 1000  SevaID = 1010 

2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))))
2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Naivedhya/Hasthodaka"  Type = 1000  SevaID = 1011 

2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))))
2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phala - Panchaamrutha"  Type = 1000  SevaID = 1012 

2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))))
2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ganapathi Abhisheka"  Type = 1000  SevaID = 1013 

2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))))
2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nagadevara Abhisheka"  Type = 1000  SevaID = 1014 

2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))))
2023-05-02 14:34:52.112 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Abhisheka"  Type = 1000  SevaID = 1015 

2023-05-02 14:34:52.113 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))))
2023-05-02 14:34:52.113 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rathothsava"  Type = 1000  SevaID = 1016 

2023-05-02 14:34:52.113 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))))
2023-05-02 14:34:52.113 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Naivedhya"  Type = 1000  SevaID = 1017 

2023-05-02 14:34:52.113 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))))
2023-05-02 14:34:52.113 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pongal Naivedhya"  Type = 1000  SevaID = 1018 

2023-05-02 14:34:52.113 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))))
2023-05-02 14:34:52.113 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi"  Type = 1000  SevaID = 1019 

2023-05-02 14:34:52.113 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))))
2023-05-02 14:34:52.113 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika - Rathothsava"  Type = 1000  SevaID = 1020 

2023-05-02 14:34:52.113 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))))
2023-05-02 14:34:52.113 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika Seva"  Type = 1000  SevaID = 1021 

2023-05-02 14:34:52.113 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))))
2023-05-02 14:34:52.114 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri Sathya Narayana Pooja"  Type = 1000  SevaID = 1022 

2023-05-02 14:34:52.114 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))))
2023-05-02 14:34:52.114 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulsi Archane"  Type = 1000  SevaID = 1023 

2023-05-02 14:34:52.114 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))))
2023-05-02 14:34:52.114 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka Shraadha"  Type = 1000  SevaID = 1024 

2023-05-02 14:34:52.114 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))))
2023-05-02 14:34:52.114 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa Shraadha"  Type = 1000  SevaID = 1025 

2023-05-02 14:34:52.114 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))))
2023-05-02 14:34:52.114 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vaahana Pooja"  Type = 1000  SevaID = 1026 

2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))))
2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane Seva"  Type = 1000  SevaID = 1027 

2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))))
2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Lakshmi Pooja"  Type = 1000  SevaID = 1028 

2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))))
2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Devarige Thailaabhisheka"  Type = 1000  SevaID = 1029 

2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))))
2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamaana Homa"  Type = 1000  SevaID = 1030 

2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))))
2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gana Homa"  Type = 1000  SevaID = 1031 

2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))))
2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mruthyunjaya Homa"  Type = 1000  SevaID = 1032 

2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))))
2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rudraabhisheka"  Type = 1000  SevaID = 1033 

2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))))
2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Sampurna Seva"  Type = 2000  SevaID = 2001 

2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))), QMap((2001, SevaName(0x92d8130))))
2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Anna Santharpane Seva"  Type = 2000  SevaID = 2002 

2023-05-02 14:34:52.115 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))), QMap((2001, SevaName(0x92d8130))(2002, SevaName(0x92d82c0))))
2023-05-02 14:34:52.116 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva(Huvina Alankara)"  Type = 2000  SevaID = 2003 

2023-05-02 14:34:52.116 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))), QMap((2001, SevaName(0x92d8130))(2002, SevaName(0x92d82c0))(2003, SevaName(0x92d7a50))))
2023-05-02 14:34:52.116 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva"  Type = 2000  SevaID = 2004 

2023-05-02 14:34:52.116 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))), QMap((2001, SevaName(0x92d8130))(2002, SevaName(0x92d82c0))(2003, SevaName(0x92d7a50))(2004, SevaName(0x92d7b40))))
2023-05-02 14:34:52.116 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Noothana Vastra Seva"  Type = 2000  SevaID = 2005 

2023-05-02 14:34:52.116 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))), QMap((2001, SevaName(0x92d8130))(2002, SevaName(0x92d82c0))(2003, SevaName(0x92d7a50))(2004, SevaName(0x92d7b40))(2005, SevaName(0x92d8270))))
2023-05-02 14:34:52.116 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva seva"  Type = 2000  SevaID = 2006 

2023-05-02 14:34:52.117 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))), QMap((2001, SevaName(0x92d8130))(2002, SevaName(0x92d82c0))(2003, SevaName(0x92d7a50))(2004, SevaName(0x92d7b40))(2005, SevaName(0x92d8270))(2006, SevaName(0x92d8090))))
2023-05-02 14:34:52.117 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakabhisheka Seva"  Type = 2000  SevaID = 2007 

2023-05-02 14:34:52.117 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))), QMap((2001, SevaName(0x92d8130))(2002, SevaName(0x92d82c0))(2003, SevaName(0x92d7a50))(2004, SevaName(0x92d7b40))(2005, SevaName(0x92d8270))(2006, SevaName(0x92d8090))(2007, SevaName(0x92d8220))))
2023-05-02 14:34:52.117 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Seva(Prathidina)"  Type = 2000  SevaID = 2009 

2023-05-02 14:34:52.118 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))), QMap((2001, SevaName(0x92d8130))(2002, SevaName(0x92d82c0))(2003, SevaName(0x92d7a50))(2004, SevaName(0x92d7b40))(2005, SevaName(0x92d8270))(2006, SevaName(0x92d8090))(2007, SevaName(0x92d8220))(2009, SevaName(0x92d7b90))))
2023-05-02 14:34:52.118 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "MahaPooje"  Type = 2000  SevaID = 2010 

2023-05-02 14:34:52.118 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))), QMap((2001, SevaName(0x92d8130))(2002, SevaName(0x92d82c0))(2003, SevaName(0x92d7a50))(2004, SevaName(0x92d7b40))(2005, SevaName(0x92d8270))(2006, SevaName(0x92d8090))(2007, SevaName(0x92d8220))(2009, SevaName(0x92d7b90))(2010, SevaName(0x92d7be0))))
2023-05-02 14:34:52.118 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtothara Seva(Prathidina)"  Type = 2000  SevaID = 2011 

2023-05-02 14:34:52.119 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))), QMap((2001, SevaName(0x92d8130))(2002, SevaName(0x92d82c0))(2003, SevaName(0x92d7a50))(2004, SevaName(0x92d7b40))(2005, SevaName(0x92d8270))(2006, SevaName(0x92d8090))(2007, SevaName(0x92d8220))(2009, SevaName(0x92d7b90))(2010, SevaName(0x92d7be0))(2011, SevaName(0x92d8180))))
2023-05-02 14:34:52.119 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Paadakaradhane"  Type = 2000  SevaID = 2012 

2023-05-02 14:34:52.119 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))), QMap((2001, SevaName(0x92d8130))(2002, SevaName(0x92d82c0))(2003, SevaName(0x92d7a50))(2004, SevaName(0x92d7b40))(2005, SevaName(0x92d8270))(2006, SevaName(0x92d8090))(2007, SevaName(0x92d8220))(2009, SevaName(0x92d7b90))(2010, SevaName(0x92d7be0))(2011, SevaName(0x92d8180))(2012, SevaName(0x92d8360))))
2023-05-02 14:34:52.119 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 2000  SevaID = 2013 

2023-05-02 14:34:52.120 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))), QMap((2001, SevaName(0x92d8130))(2002, SevaName(0x92d82c0))(2003, SevaName(0x92d7a50))(2004, SevaName(0x92d7b40))(2005, SevaName(0x92d8270))(2006, SevaName(0x92d8090))(2007, SevaName(0x92d8220))(2009, SevaName(0x92d7b90))(2010, SevaName(0x92d7be0))(2011, SevaName(0x92d8180))(2012, SevaName(0x92d8360))(2013, SevaName(0x92d7d20))))
2023-05-02 14:34:52.120 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PhalaPanchamrutha Seva"  Type = 2000  SevaID = 2014 

2023-05-02 14:34:52.120 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x9304710))), QMap((2, SevaName(0x9297538))(3, SevaName(0x9296f48))(4, SevaName(0x9296f98))(6, SevaName(0x9297088))(7, SevaName(0x9297808))(18, SevaName(0x92c2578))(37, SevaName(0x92c25c8))(47, SevaName(0x92c2208))(48, SevaName(0x92c2c58))(49, SevaName(0x92c2b18))(75, SevaName(0x9303c70))(85, SevaName(0x9303ef0))(86, SevaName(0x9303b30))(101, SevaName(0x93048a0))(103, SevaName(0x93044e0))(104, SevaName(0x9304620))(108, SevaName(0x93042b0))(121, SevaName(0x93049e0))(125, SevaName(0x9305430))), QMap((54, SevaName(0x92c2938))(55, SevaName(0x92c2d48))(56, SevaName(0x92c2de8))(57, SevaName(0x92c2cf8))(58, SevaName(0x92c2ac8))(59, SevaName(0x92c29d8))(60, SevaName(0x92c2e38))(61, SevaName(0x92c2a28))(62, SevaName(0x92c2b68))(63, SevaName(0x92c2bb8))(64, SevaName(0x92c2ca8))(65, SevaName(0x9303ea0))(66, SevaName(0x9303fe0))(67, SevaName(0x93037c0))(68, SevaName(0x93038b0))(120, SevaName(0x93048f0))), QMap((23, SevaName(0x92c2258))(24, SevaName(0x92c2758))(25, SevaName(0x92c22f8))(26, SevaName(0x92c2898))(27, SevaName(0x92c2398))(28, SevaName(0x92c22a8))(29, SevaName(0x92c27a8))(30, SevaName(0x92c23e8))(31, SevaName(0x92c1fd8))(34, SevaName(0x92c27f8))(35, SevaName(0x92c2708))(36, SevaName(0x92c2488))(38, SevaName(0x92c2668))(39, SevaName(0x92c26b8))(40, SevaName(0x92c21b8))(41, SevaName(0x92c2848))(43, SevaName(0x92c1f38))(44, SevaName(0x92c2028))), QMap((12, SevaName(0x92977b8))(13, SevaName(0x92c24d8))(14, SevaName(0x92c2618))(70, SevaName(0x9303e00))(71, SevaName(0x9303950))(72, SevaName(0x9303c20))(73, SevaName(0x93039a0))(76, SevaName(0x93039f0))), QMap((78, SevaName(0x9303810))(79, SevaName(0x9303900))(80, SevaName(0x9303d10))), QMap((81, SevaName(0x9303d60))(82, SevaName(0x9303860))(83, SevaName(0x9303720))(84, SevaName(0x9303ae0))(89, SevaName(0x9303cc0))), QMap((74, SevaName(0x9303770))(90, SevaName(0x9303f40))(91, SevaName(0x9303db0))(92, SevaName(0x9303f90))(93, SevaName(0x9304080))(94, SevaName(0x9304580))(95, SevaName(0x9304120))(96, SevaName(0x9304210))(97, SevaName(0x9304440))(98, SevaName(0x9304170))(99, SevaName(0x9304260))), QMap((16, SevaName(0x92c2168))(17, SevaName(0x92c1f88))(109, SevaName(0x93041c0))), QMap((5, SevaName(0x9296fe8))(10, SevaName(0x9297858))(19, SevaName(0x92c2078))(46, SevaName(0x92c2118))(52, SevaName(0x92c2988))(53, SevaName(0x92c2c08))(110, SevaName(0x9304350))(113, SevaName(0x9304300))(123, SevaName(0x9304a80))(127, SevaName(0x9304c10))), QMap((50, SevaName(0x92c2e88))(112, SevaName(0x93043a0))), QMap((9, SevaName(0x92978a8))), QMap((11, SevaName(0x92978f8))), QMap((15, SevaName(0x92c2528))), QMap((20, SevaName(0x92c2348))(111, SevaName(0x93045d0))), QMap((42, SevaName(0x92c28e8))(51, SevaName(0x92c2a78))(105, SevaName(0x9304530))(106, SevaName(0x9304850))(124, SevaName(0x93052f0))), QMap((45, SevaName(0x92c20c8))(69, SevaName(0x9304030))(100, SevaName(0x9304670))(126, SevaName(0x9304e90))), QMap((77, SevaName(0x9303a40))), QMap((87, SevaName(0x9303bd0))(88, SevaName(0x9303b80))), QMap((107, SevaName(0x9304940))), QMap((114, SevaName(0x93046c0))(115, SevaName(0x93043f0))(116, SevaName(0x9304990))(117, SevaName(0x9304760))(118, SevaName(0x93047b0))(119, SevaName(0x9304800))), QMap((122, SevaName(0x9304a30))), QMap((1001, SevaName(0x93052a0))(1002, SevaName(0x9304f30))(1003, SevaName(0x93050c0))(1004, SevaName(0x9305250))(1005, SevaName(0x93053e0))(1006, SevaName(0x9304df0))(1007, SevaName(0x9304cb0))(1008, SevaName(0x9304ee0))(1010, SevaName(0x9304f80))(1011, SevaName(0x9304fd0))(1012, SevaName(0x9304d00))(1013, SevaName(0x9305480))(1014, SevaName(0x9305020))(1015, SevaName(0x9305070))(1016, SevaName(0x9305110))(1017, SevaName(0x9304c60))(1018, SevaName(0x9304d50))(1019, SevaName(0x9305340))(1020, SevaName(0x9305160))(1021, SevaName(0x9304da0))(1022, SevaName(0x93051b0))(1023, SevaName(0x9305200))(1024, SevaName(0x9305390))(1025, SevaName(0x9304b20))(1026, SevaName(0x9304b70))(1027, SevaName(0x9304bc0))(1028, SevaName(0x9305610))(1029, SevaName(0x9305570))(1030, SevaName(0x93054d0))(1031, SevaName(0x9305520))(1032, SevaName(0x93055c0))(1033, SevaName(0x92d7cd0))), QMap((2001, SevaName(0x92d8130))(2002, SevaName(0x92d82c0))(2003, SevaName(0x92d7a50))(2004, SevaName(0x92d7b40))(2005, SevaName(0x92d8270))(2006, SevaName(0x92d8090))(2007, SevaName(0x92d8220))(2009, SevaName(0x92d7b90))(2010, SevaName(0x92d7be0))(2011, SevaName(0x92d8180))(2012, SevaName(0x92d8360))(2013, SevaName(0x92d7d20))(2014, SevaName(0x92d83b0))))
2023-05-02 14:34:52.120 DBG default: bool DBInterface::querySevaNames() querying seva names done 

2023-05-02 14:34:52.120 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-02 14:34:52.120 DBG default: UserManagement::UserManagement(QObject*) 

2023-05-02 14:34:52.120 DBG default: The role number recieved -1 

2023-05-02 14:34:52.120 DBG default: SevaDetailsTableView::SevaDetailsTableView(QObject*) 

2023-05-02 14:34:52.125 DBG default: AccountReportModel::AccountReportModel(QObject*) 

2023-05-02 14:34:52.125 DBG default: AccountReportDateRangeModel::AccountReportDateRangeModel(QObject*) 

2023-05-02 14:34:52.125 DBG default: AccountReportMonthWiseModel::AccountReportMonthWiseModel(QObject*) 

2023-05-02 14:34:52.125 DBG default: BookingReportDateRangeModel::BookingReportDateRangeModel(QObject*) 

2023-05-02 14:34:52.125 DBG default: BookingReportMonthWiseModel::BookingReportMonthWiseModel(QObject*) 

2023-05-02 14:34:52.125 DBG default: SevaBookingTableModel::SevaBookingTableModel(QObject*) 

2023-05-02 14:34:52.125 DBG default: SevaBookingSearchModel::SevaBookingSearchModel(QObject*) 

2023-05-02 14:34:52.125 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-05-02 14:34:52.125 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-05-02 14:34:52.125 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-05-02 14:34:52.125 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-05-02 14:34:52.125 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Date = 2  Mon = 5  Year = 2023
2023-05-02 14:34:52.125 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-02 14:34:52.125 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-02 14:34:52.125 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "1" 

2023-05-02 14:34:52.125 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-02 14:34:52.125 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-02 14:34:52.125 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "2" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "3" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "4" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "5" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "6" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "7" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "7" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "7" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "7" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "7" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "8" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "9" 

2023-05-02 14:34:52.126 WRN default: QSqlQuery::value: not positioned on a valid record
2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastReceiptNumber()  Size =  -1  receiptNo ID =  9  Value =  QVariant(Invalid) 

2023-05-02 14:34:52.126 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Last ReceiptNo from DB = 10  Generated = "2023_5_0010" 

2023-05-02 14:34:52.126 DBG default: QString SevaViewProxy::getNextReceiptNumber()  r number =  "2023_5_0010" 

2023-05-02 14:34:52.126 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-02 14:34:52.126 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-05-02 14:34:52.126 DBG default: SevaCountOnDateModel::SevaCountOnDateModel(QObject*) 

2023-05-02 14:34:52.126 DBG default: saveVoucher::saveVoucher(QObject*) 

2023-05-02 14:34:52.126 DBG default: virtual QString VoucherNumber::getNextVoucherNumber() 

2023-05-02 14:34:52.126 DBG default: int DBInterface::getLastVoucherNumber() 

2023-05-02 14:34:52.126 DBG default: 0 

2023-05-02 14:34:52.126 DBG default: "1" 

2023-05-02 14:34:52.126 DBG default: VoucherReportModel::VoucherReportModel(QObject*) 

2023-05-02 14:34:52.126 DBG default: QString TrustListModel::getConfigLocation() 

2023-05-02 14:34:52.126 DBG default: QString TrustListModel::getDataLocation() 

2023-05-02 14:34:52.126 DBG qml: str1 = --D:/TempleFile/Ramamndira_2023/Temple-main/bins/Config/Hubablli
2023-05-02 14:34:52.126 DBG qml: str2 = --D:/TempleFile/Ramamndira_2023/Temple-main/bins/Data/Hubablli
2023-05-02 14:34:52.159 DBG qml: The Page Number=== 0
2023-05-02 14:34:52.159 DBG qml: The page number is 0
2023-05-02 14:34:52.159 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-02 14:34:52.159 DBG qml: Screen screenWidth size =1920
2023-05-02 14:34:52.159 DBG qml: Screen screenHeight size =1000
2023-05-02 14:34:52.159 WRN default: qrc:/ui/Login.qml:37:13: Unable to assign [undefined] to bool
2023-05-02 14:34:52.159 WRN default: qrc:/ui/Login.qml:44:13: Unable to assign [undefined] to bool
2023-05-02 14:34:52.159 WRN default: qrc:/ui/Login.qml:80:17: Unable to assign [undefined] to bool
2023-05-02 14:34:52.159 DBG default: int TrustListModel::getTrustListSize() 

2023-05-02 14:34:59.276 DBG default: void UserManagement::authorize(QString, QString) "admin" "admin123" 

2023-05-02 14:34:59.276 DBG qml: Credentials are correct
2023-05-02 14:34:59.276 DBG qml: Wrong credentials 0
2023-05-02 14:34:59.286 DBG qml: the accounts enable false
2023-05-02 14:34:59.286 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-02 14:34:59.286 DBG qml: Screen screenWidth size =1920
2023-05-02 14:34:59.286 DBG qml: Screen screenHeight size =1000
2023-05-02 14:34:59.286 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-02 14:34:59.286 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-02 14:34:59.286 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-02 14:34:59.286 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-02 14:34:59.286 DBG default: The role number is 1 

2023-05-02 14:34:59.286 DBG default: The role number recieved 1 

2023-05-02 14:35:00.396 DBG qml: booking report button clicked
2023-05-02 14:35:00.396 DBG qml: Clicked on Bookingreport
2023-05-02 14:35:00.510 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-05-02 14:35:00.518 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-02 14:35:00.518 DBG default: 0 

2023-05-02 14:35:00.718 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-05-02 14:35:00.718 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-02 14:35:00.718 DBG qml: Selected year2015
2023-05-02 14:35:00.725 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-05-02 14:35:00.725 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-02 14:35:00.725 DBG qml: Selected month1
2023-05-02 14:35:00.726 WRN default: qrc:/ui/components/MyBookingFilter.qml:331:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.726 WRN default: qrc:/ui/components/MyBookingFilter.qml:342:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.771 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.771 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.788 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.790 WRN default: qrc:/ui/components/MyBookingFilter.qml:127:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.790 WRN default: qrc:/ui/components/MyBookingFilter.qml:165:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.791 WRN default: qrc:/ui/components/MyBookingFilter.qml:331:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.791 WRN default: qrc:/ui/components/MyBookingFilter.qml:342:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.791 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.791 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.791 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.791 WRN default: qrc:/ui/components/MyBookingFilter.qml:127:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.791 WRN default: qrc:/ui/components/MyBookingFilter.qml:165:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.791 DBG qml: In Component.onCompleted: of booking report page
2023-05-02 14:35:00.791 DBG qml: In  Component.onCompleted: loader brp
2023-05-02 14:35:00.796 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-05-02 14:35:00.796 DBG qml: In  Component.onCompleted: of table view of brp function() { [native code] }
2023-05-02 14:35:00.796 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-02 14:35:00.796 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-02 14:35:00.796 DBG qml: The month and year initial 1   2015
2023-05-02 14:35:00.796 DBG qml:  Trying to get the list category
2023-05-02 14:35:00.796 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-02 14:35:00.796 DBG default: bool SevaTypeViewModel::init() 

2023-05-02 14:35:00.796 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-02 14:35:00.796 DBG default: bool SevaTypeViewModel::init()  Number of Seva Types = 25 

2023-05-02 14:35:00.796 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-02 14:35:00.796 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-02 14:35:00.796 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-02 14:35:00.796 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-02 14:35:00.796 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-02 14:35:00.796 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-02 14:35:00.796 DBG default: void ReportFilterElements::setISevaType(int) 

2023-05-02 14:35:00.796 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-02 14:35:00.796 DBG qml: 0
2023-05-02 14:35:00.796 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-02 14:35:00.796 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-02 14:35:00.796 DBG default: void ReportFilterElements::setISevaType(int) 

2023-05-02 14:35:00.796 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-02 14:35:00.796 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-02 14:35:00.796 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-02 14:35:00.796 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-02 14:35:00.796 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-02 14:35:00.796 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-02 14:35:00.796 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-02 14:35:00.796 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x925ba50) 

2023-05-02 14:35:00.796 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-02 14:35:00.796 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x9304710))) 
(SevaName(0x9304710)) 

2023-05-02 14:35:00.796 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9304710)) 

2023-05-02 14:35:00.796 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-02 14:35:00.796 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x9304710))) 
(SevaName(0x9304710)) 

2023-05-02 14:35:00.796 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-05-02 14:35:00.796 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-02 14:35:00.796 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-02 14:35:00.796 DBG qml: Seva name selected : Nithya Archane
2023-05-02 14:35:00.796 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-02 14:35:00.796 DBG qml: Seva type selected in report filter : 0
2023-05-02 14:35:00.796 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-02 14:35:00.796 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-02 14:35:00.796 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-02 14:35:00.796 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-02 14:35:00.797 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-02 14:35:00.797 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-02 14:35:00.797 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-02 14:35:00.797 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-02 14:35:00.797 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x925ba50) 

2023-05-02 14:35:00.797 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-02 14:35:00.797 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x9304710))) 
(SevaName(0x9304710)) 

2023-05-02 14:35:00.797 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9304710)) 

2023-05-02 14:35:00.797 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-02 14:35:00.797 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x9304710))) 
(SevaName(0x9304710)) 

2023-05-02 14:35:00.797 DBG default: void ReportFilterElements::setISevaType(int) 

2023-05-02 14:35:00.797 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-05-02 14:35:00.797 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-05-02 14:35:00.797 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-02 14:35:00.797 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-02 14:35:00.797 DBG qml:   _rip.sSingleDate 202-05-2023
2023-05-02 14:35:00.797 DBG default: void SevaReport::generateBookReport(ReportFilterElements*) 

2023-05-02 14:35:00.797 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-02 14:35:00.797 DBG default: 0 

2023-05-02 14:35:00.797 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 0 

2023-05-02 14:35:00.797 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 

2023-05-02 14:35:00.797 DBG default: Selected Type  0 

2023-05-02 14:35:00.797 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-02 14:35:00.797 DBG default: Selected Month  1 

2023-05-02 14:35:00.797 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-02 14:35:00.797 DBG default: Selected Year  2015 

2023-05-02 14:35:00.797 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-02 14:35:00.797 DBG default: Selected date  "02-05-2023" 

2023-05-02 14:35:00.797 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) Inside c date book rep 

2023-05-02 14:35:00.797 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-02 14:35:00.797 DBG default: QString BookingReportModel::FormatDate(QString) "02-05-2023" 

2023-05-02 14:35:00.797 DBG default: QString BookingReportModel::FormatDate(QString) QDate("2023-05-02") 

2023-05-02 14:35:00.797 DBG default: QString BookingReportModel::FormatDate(QString) "2023-05-02" 

2023-05-02 14:35:00.797 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-05-02 14:35:00.797 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-02 14:35:00.797 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-05-02" 

2023-05-02 14:35:00.797 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-02 14:35:00.797 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-02 14:35:00.797 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-02 14:35:00.798 DBG default: 
Changed format is:  "2023-05-02" 

2023-05-02 14:35:00.798 DBG default: In type 0:  

2023-05-02 14:35:00.798 DBG default:  Query string = "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-02';" 

2023-05-02 14:35:00.798 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-05-02 14:35:00.798 DBG default:  Query string = true 

2023-05-02 14:35:00.798 DBG default:  Query prepared successfully = true 

2023-05-02 14:35:00.798 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-05-02 14:35:00.798 DBG default:  Query string =2222222222222 "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-02';" 

2023-05-02 14:35:00.798 DBG default:  Query string =@@@@@@@@@@@@@ QSqlError("", "", "") 

2023-05-02 14:35:00.798 DBG default: bool ReportFilterElements::bDatewise() const 

2023-05-02 14:35:00.798 DBG default: true 

2023-05-02 14:35:00.798 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-02 14:35:00.798 DBG default: "2023-05-02" 

2023-05-02 14:35:00.798 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-05-02 14:35:00.798 DBG default: int BookingReportModel::getBookingReportQryListSize() 

2023-05-02 14:35:00.798 DBG qml: Component.completed:if of mft.qml
2023-05-02 14:35:00.798 DBG qml: In onSendError
2023-05-02 14:35:00.798 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-02 14:35:00.798 DBG qml: Screen screenWidth size =1920
2023-05-02 14:35:00.798 DBG qml: Screen screenHeight size =1000
2023-05-02 14:35:00.798 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-02 14:35:00.798 DBG qml: Screen screenWidth size =1920
2023-05-02 14:35:00.798 DBG qml: Screen screenHeight size =1000
2023-05-02 14:35:00.798 WRN default: qrc:/ui/MenuPage.qml:158:9: QML DisplayDialog: cannot find any window to open popup in.
2023-05-02 14:35:00.799 WRN default: qrc:/ui/components/MyBookingFilter.qml:127:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.799 WRN default: qrc:/ui/components/MyBookingFilter.qml:165:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.799 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.806 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.806 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.806 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.811 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.811 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.811 WRN default: qrc:/ui/components/MyBookingFilter.qml:331:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.811 WRN default: qrc:/ui/components/MyBookingFilter.qml:342:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.811 WRN default: qrc:/ui/components/MyBookingFilter.qml:331:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:00.811 WRN default: qrc:/ui/components/MyBookingFilter.qml:342:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-02 14:35:01.845 DBG qml: Ok clicked
2023-05-02 14:35:03.157 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-05-02 14:35:03.157 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-05-02 14:35:03.157 DBG qml: _month.currentIndex+1 01
2023-05-02 14:35:03.157 DBG qml: _year._data 2015
2023-05-02 14:35:06.716 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-05-02 14:35:06.716 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-02 14:35:06.716 DBG qml: Selected month5
2023-05-02 14:35:06.717 DBG qml:  Activated Index =4
2023-05-02 14:35:06.717 DBG qml: Selected Text =May
2023-05-02 14:35:06.717 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-05-02 14:35:06.717 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-02 14:35:06.717 DBG qml: Selected month5
2023-05-02 14:35:09.268 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-05-02 14:35:09.269 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-02 14:35:09.269 DBG qml: Selected year2023
2023-05-02 14:35:09.270 DBG qml:  Activated Index =8
2023-05-02 14:35:09.270 DBG qml: Selected Text =2023
2023-05-02 14:35:09.270 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-05-02 14:35:09.270 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-02 14:35:09.270 DBG qml: Selected year2023
2023-05-02 14:35:11.691 DBG qml: Closing the report
2023-05-02 14:35:11.691 DBG qml: reset DateRangeModel
2023-05-02 14:35:11.692 DBG default: void BookingReportModel::resetBookingModel() 

2023-05-02 14:35:11.692 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-02 14:35:11.692 DBG default: 0 

