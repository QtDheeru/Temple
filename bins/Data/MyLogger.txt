2023-05-08 17:06:50.756 WRN default: Invalid QML element name " AccReportDateRangeElement"
2023-05-08 17:06:50.757 WRN default: Invalid QML element name " AccReportMonthRangeElement"
2023-05-08 17:06:50.757 WRN default: Invalid QML element name " BookingReportDateRangeElement"
2023-05-08 17:06:50.757 WRN default: Invalid QML element name " BookingReportMonthRangeElement"
2023-05-08 17:06:50.759 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-05-08 17:06:50.759 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() In static getTrustListModelInstance of TrustListModel inside if 

2023-05-08 17:06:50.759 DBG default: TrustListModel::TrustListModel() 

2023-05-08 17:06:50.759 DBG default: void TrustListModel::init() 

2023-05-08 17:06:50.759 DBG default: TrustConfiguration::TrustConfiguration(QObject*) 

2023-05-08 17:06:50.759 DBG default: void TrustConfiguration::readTrustsFromJsonToList() path  "D:/TempleFile/Ramamndira_2023/Temple-main/bins" 

2023-05-08 17:06:50.759 DBG default: file opened 

2023-05-08 17:06:50.759 DBG default: read all 

2023-05-08 17:06:50.760 DBG default: void TrustConfiguration::readTrustsFromJsonToList() dddddddoooooooooooocccccccc 

2023-05-08 17:06:50.760 DBG default: Trust::Trust(QObject*) 

2023-05-08 17:06:51.115 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:06:51.115 DBG qml: Screen screenWidth size =1920
2023-05-08 17:06:51.115 DBG qml: Screen screenHeight size =1000
2023-05-08 17:06:51.141 DBG qml: screen height= 1080
2023-05-08 17:06:51.141 DBG qml: screen width= 1920
2023-05-08 17:06:51.141 DBG qml: Screen MyStyles-screecnWidth size =1920
2023-05-08 17:06:51.141 DBG qml: Screen MyStyles-screenHeight size =1000
2023-05-08 17:06:51.141 DBG qml: screen density  == 6.228183399741848
2023-05-08 17:06:51.141 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:06:51.141 DBG qml: Screen screenWidth size =1920
2023-05-08 17:06:51.141 DBG qml: Screen screenHeight size =1000
2023-05-08 17:06:56.240 DBG default: int TrustListModel::getTrustListSize() 

2023-05-08 17:06:56.240 DBG default: int TrustListModel::getTrustListSize() 

2023-05-08 17:06:56.240 DBG qml: in else--------------
2023-05-08 17:06:56.241 DBG qml: in else------trustName--------Hubablli
2023-05-08 17:06:56.241 DBG qml: in else-------trustCode-------Hubablli
2023-05-08 17:06:56.241 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) 

2023-05-08 17:06:56.241 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) m_currentConfigLocation  "D:/TempleFile/Ramamndira_2023/Temple-main/bins/Config/Hubablli" 

2023-05-08 17:06:56.241 DBG default: Inside lamda 

2023-05-08 17:06:56.241 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) 

2023-05-08 17:06:56.241 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) m_currentDataLocation  "D:/TempleFile/Ramamndira_2023/Temple-main/bins/Data/Hubablli" 

2023-05-08 17:06:56.241 DBG default: Inside lamda 

2023-05-08 17:06:56.241 DBG default: QString TrustListModel::getConfigLocation() 

2023-05-08 17:06:56.241 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-05-08 17:06:56.241 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-05-08 17:06:56.241 DBG default: Creating the DataBase Connection  

2023-05-08 17:06:56.244 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-05-08 17:06:56.244 DBG default: QString TrustListModel::getDataLocation() 

2023-05-08 17:06:56.245 DBG default: DBInterface::DBInterface(QObject*) ******************* DB "D:/TempleFile/Ramamndira_2023/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-05-08 17:06:56.245 DBG default: Database is opened  "D:/TempleFile/Ramamndira_2023/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-05-08 17:06:56.245 DBG default: Sevabboking table not created
2023-05-08 17:06:56.245 DBG default: person details creation failed
2023-05-08 17:06:56.245 DBG default: SevaTypeJsonProcessor::SevaTypeJsonProcessor(QObject*) 

2023-05-08 17:06:56.245 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate() 

2023-05-08 17:06:56.245 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-05-08 17:06:56.245 DBG default: QString TrustListModel::getConfigLocation() 

2023-05-08 17:06:56.246 DBG default: file opened 

2023-05-08 17:06:56.246 DBG default: read all 

2023-05-08 17:06:56.246 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-05-08 17:06:56.246 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  1000 

2023-05-08 17:06:56.246 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 1000 

2023-05-08 17:06:56.246 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  1000 already exist in DB 

2023-05-08 17:06:56.246 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-05-08 17:06:56.246 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  2000 

2023-05-08 17:06:56.246 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 2000 

2023-05-08 17:06:56.246 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  2000 already exist in DB 

2023-05-08 17:06:56.246 DBG default: void SevaTypeJsonProcessor::printSevaTypeNames() 

2023-05-08 17:06:56.246 DBG default: 1000 :  "Regular Seva" , 1000 , "Raj" 

2023-05-08 17:06:56.246 DBG default: 2000 :  "Aradhana Seva" , 2000 , "Abhi" 

2023-05-08 17:06:56.246 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-05-08 17:06:56.246 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-05-08 17:06:56.246 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-05-08 17:06:56.246 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-05-08 17:06:56.246 DBG default: QString TrustListModel::getConfigLocation() 

2023-05-08 17:06:56.246 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  path "D:/TempleFile/Ramamndira_2023/Temple-main/bins/Config/Hubablli/SevaNames.json" 

2023-05-08 17:06:56.246 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-05-08 17:06:56.246 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() file opened 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() read all 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Udayaasthamaana Seva" 

2023-05-08 17:06:56.247 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.247 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1001 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.247 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Udayaasthamaana Seva"  sevaId=  1001 

2023-05-08 17:06:56.247 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1001 

2023-05-08 17:06:56.247 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1001 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Seva" 

2023-05-08 17:06:56.247 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.247 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1002 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.247 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Seva"  sevaId=  1002 

2023-05-08 17:06:56.247 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1002 

2023-05-08 17:06:56.247 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1002 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Samarpana Seva" 

2023-05-08 17:06:56.247 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.247 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1003 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.247 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Samarpana Seva"  sevaId=  1003 

2023-05-08 17:06:56.247 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1003 

2023-05-08 17:06:56.247 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1003 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakaabhisheka" 

2023-05-08 17:06:56.247 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.247 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1004 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.247 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.248 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakaabhisheka"  sevaId=  1004 

2023-05-08 17:06:56.248 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1004 

2023-05-08 17:06:56.248 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1004 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Godhana" 

2023-05-08 17:06:56.248 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.248 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1005 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.248 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Godhana"  sevaId=  1005 

2023-05-08 17:06:56.248 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1005 

2023-05-08 17:06:56.248 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1005 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mahaa Pooja" 

2023-05-08 17:06:56.248 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.248 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1006 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.248 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mahaa Pooja"  sevaId=  1006 

2023-05-08 17:06:56.248 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1006 

2023-05-08 17:06:56.248 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1006 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ksheeraabhisheka" 

2023-05-08 17:06:56.248 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.248 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1007 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.248 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ksheeraabhisheka"  sevaId=  1007 

2023-05-08 17:06:56.248 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1007 

2023-05-08 17:06:56.248 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1007 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Madhu Abhisheka" 

2023-05-08 17:06:56.248 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.248 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1008 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.248 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Madhu Abhisheka"  sevaId=  1008 

2023-05-08 17:06:56.248 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1008 

2023-05-08 17:06:56.248 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1008 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Yella Homagala Seva" 

2023-05-08 17:06:56.248 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.248 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1010 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.248 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.249 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Yella Homagala Seva"  sevaId=  1010 

2023-05-08 17:06:56.249 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1010 

2023-05-08 17:06:56.249 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1010 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Naivedhya/Hasthodaka" 

2023-05-08 17:06:56.249 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.249 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1011 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.249 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Naivedhya/Hasthodaka"  sevaId=  1011 

2023-05-08 17:06:56.249 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1011 

2023-05-08 17:06:56.249 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1011 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Phala - Panchaamrutha" 

2023-05-08 17:06:56.249 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.249 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1012 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.249 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Phala - Panchaamrutha"  sevaId=  1012 

2023-05-08 17:06:56.249 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1012 

2023-05-08 17:06:56.249 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1012 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ganapathi Abhisheka" 

2023-05-08 17:06:56.249 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.249 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1013 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.249 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ganapathi Abhisheka"  sevaId=  1013 

2023-05-08 17:06:56.249 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1013 

2023-05-08 17:06:56.249 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1013 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Nagadevara Abhisheka" 

2023-05-08 17:06:56.249 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.249 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1014 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.249 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Nagadevara Abhisheka"  sevaId=  1014 

2023-05-08 17:06:56.249 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1014 

2023-05-08 17:06:56.249 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1014 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Abhisheka" 

2023-05-08 17:06:56.249 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.249 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1015 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.249 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.250 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Abhisheka"  sevaId=  1015 

2023-05-08 17:06:56.250 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1015 

2023-05-08 17:06:56.250 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1015 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rathothsava" 

2023-05-08 17:06:56.250 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.250 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1016 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.250 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rathothsava"  sevaId=  1016 

2023-05-08 17:06:56.250 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1016 

2023-05-08 17:06:56.250 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1016 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Huggi Naivedhya" 

2023-05-08 17:06:56.250 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.250 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1017 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.250 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Huggi Naivedhya"  sevaId=  1017 

2023-05-08 17:06:56.250 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1017 

2023-05-08 17:06:56.250 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1017 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pongal Naivedhya" 

2023-05-08 17:06:56.250 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.250 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1018 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.250 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pongal Naivedhya"  sevaId=  1018 

2023-05-08 17:06:56.250 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1018 

2023-05-08 17:06:56.250 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1018 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Grahana Shanthi" 

2023-05-08 17:06:56.250 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.250 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1019 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.250 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Grahana Shanthi"  sevaId=  1019 

2023-05-08 17:06:56.250 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1019 

2023-05-08 17:06:56.250 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1019 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika - Rathothsava" 

2023-05-08 17:06:56.250 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.250 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1020 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.250 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.251 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika - Rathothsava"  sevaId=  1020 

2023-05-08 17:06:56.251 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1020 

2023-05-08 17:06:56.251 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1020 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika Seva" 

2023-05-08 17:06:56.251 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.251 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1021 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.251 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika Seva"  sevaId=  1021 

2023-05-08 17:06:56.251 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1021 

2023-05-08 17:06:56.251 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1021 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sri Sathya Narayana Pooja" 

2023-05-08 17:06:56.251 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.251 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1022 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.251 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sri Sathya Narayana Pooja"  sevaId=  1022 

2023-05-08 17:06:56.251 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1022 

2023-05-08 17:06:56.251 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1022 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Tulsi Archane" 

2023-05-08 17:06:56.251 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.251 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1023 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.251 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Tulsi Archane"  sevaId=  1023 

2023-05-08 17:06:56.251 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1023 

2023-05-08 17:06:56.251 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1023 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Chataka Shraadha" 

2023-05-08 17:06:56.251 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.251 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1024 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.251 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Chataka Shraadha"  sevaId=  1024 

2023-05-08 17:06:56.251 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1024 

2023-05-08 17:06:56.251 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1024 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sankalpa Shraadha" 

2023-05-08 17:06:56.251 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.251 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1025 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.251 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.252 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sankalpa Shraadha"  sevaId=  1025 

2023-05-08 17:06:56.252 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1025 

2023-05-08 17:06:56.252 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1025 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Vaahana Pooja" 

2023-05-08 17:06:56.252 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.252 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1026 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.252 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Vaahana Pooja"  sevaId=  1026 

2023-05-08 17:06:56.252 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1026 

2023-05-08 17:06:56.252 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1026 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Archane Seva" 

2023-05-08 17:06:56.252 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.252 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1027 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.252 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Archane Seva"  sevaId=  1027 

2023-05-08 17:06:56.252 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1027 

2023-05-08 17:06:56.252 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1027 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Lakshmi Pooja" 

2023-05-08 17:06:56.252 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.252 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1028 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.252 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Lakshmi Pooja"  sevaId=  1028 

2023-05-08 17:06:56.252 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1028 

2023-05-08 17:06:56.252 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1028 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Devarige Thailaabhisheka" 

2023-05-08 17:06:56.252 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.252 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1029 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.252 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Devarige Thailaabhisheka"  sevaId=  1029 

2023-05-08 17:06:56.252 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1029 

2023-05-08 17:06:56.252 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1029 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pavamaana Homa" 

2023-05-08 17:06:56.252 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.252 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1030 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.252 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pavamaana Homa"  sevaId=  1030 

2023-05-08 17:06:56.252 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1030 

2023-05-08 17:06:56.252 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1030 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.252 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Gana Homa" 

2023-05-08 17:06:56.252 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.253 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1031 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.253 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Gana Homa"  sevaId=  1031 

2023-05-08 17:06:56.253 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1031 

2023-05-08 17:06:56.253 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1031 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mruthyunjaya Homa" 

2023-05-08 17:06:56.253 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.253 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1032 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.253 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mruthyunjaya Homa"  sevaId=  1032 

2023-05-08 17:06:56.253 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1032 

2023-05-08 17:06:56.253 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1032 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rudraabhisheka" 

2023-05-08 17:06:56.253 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.253 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1033 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.253 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rudraabhisheka"  sevaId=  1033 

2023-05-08 17:06:56.253 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1033 

2023-05-08 17:06:56.253 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1033 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Sampurna Seva" 

2023-05-08 17:06:56.253 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.253 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2001 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.253 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Sampurna Seva"  sevaId=  2001 

2023-05-08 17:06:56.253 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2001 

2023-05-08 17:06:56.253 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2001 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Anna Santharpane Seva" 

2023-05-08 17:06:56.253 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.253 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2002 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.253 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Anna Santharpane Seva"  sevaId=  2002 

2023-05-08 17:06:56.253 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2002 

2023-05-08 17:06:56.253 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2002 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva(Huvina Alankara)" 

2023-05-08 17:06:56.253 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.253 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.253 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2003 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.254 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva(Huvina Alankara)"  sevaId=  2003 

2023-05-08 17:06:56.254 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2003 

2023-05-08 17:06:56.254 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2003 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva" 

2023-05-08 17:06:56.254 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.254 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2004 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.254 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva"  sevaId=  2004 

2023-05-08 17:06:56.254 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2004 

2023-05-08 17:06:56.254 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2004 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Noothana Vastra Seva" 

2023-05-08 17:06:56.254 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.254 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2005 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.254 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Noothana Vastra Seva"  sevaId=  2005 

2023-05-08 17:06:56.254 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2005 

2023-05-08 17:06:56.254 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2005 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva seva" 

2023-05-08 17:06:56.254 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.254 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2006 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.254 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva seva"  sevaId=  2006 

2023-05-08 17:06:56.254 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2006 

2023-05-08 17:06:56.254 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2006 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakabhisheka Seva" 

2023-05-08 17:06:56.254 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.254 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2007 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.254 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakabhisheka Seva"  sevaId=  2007 

2023-05-08 17:06:56.254 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2007 

2023-05-08 17:06:56.254 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2007 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Hasthodaka Seva(Prathidina)" 

2023-05-08 17:06:56.254 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.254 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2009 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.254 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Hasthodaka Seva(Prathidina)"  sevaId=  2009 

2023-05-08 17:06:56.254 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2009 

2023-05-08 17:06:56.254 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2009 

2023-05-08 17:06:56.254 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "MahaPooje" 

2023-05-08 17:06:56.255 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.255 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2010 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.255 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "MahaPooje"  sevaId=  2010 

2023-05-08 17:06:56.255 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2010 

2023-05-08 17:06:56.255 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2010 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ashtothara Seva(Prathidina)" 

2023-05-08 17:06:56.255 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.255 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2011 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.255 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ashtothara Seva(Prathidina)"  sevaId=  2011 

2023-05-08 17:06:56.255 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2011 

2023-05-08 17:06:56.255 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2011 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Paadakaradhane" 

2023-05-08 17:06:56.255 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.255 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2012 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.255 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Paadakaradhane"  sevaId=  2012 

2023-05-08 17:06:56.255 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2012 

2023-05-08 17:06:56.255 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2012 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "GanaHoma" 

2023-05-08 17:06:56.255 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.255 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2013 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.255 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "GanaHoma"  sevaId=  2013 

2023-05-08 17:06:56.255 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2013 

2023-05-08 17:06:56.255 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2013 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "PhalaPanchamrutha Seva" 

2023-05-08 17:06:56.255 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-05-08 17:06:56.255 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2014 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-05-08 17:06:56.255 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "PhalaPanchamrutha Seva"  sevaId=  2014 

2023-05-08 17:06:56.255 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2014 

2023-05-08 17:06:56.255 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2014 

2023-05-08 17:06:56.255 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-05-08 17:06:56.255 DBG default: void SevaTypeJsonProcessor::printSevasNames() 

2023-05-08 17:06:56.255 DBG default: 1001 :  "Udayaasthamaana Seva" , 1001 , 1 , 1000 , 5000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.255 DBG default: 1002 :  "Sarva Seva" , 1002 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.255 DBG default: 1003 :  "Sarva Samarpana Seva" , 1003 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1004 :  "Kanakaabhisheka" , 1004 , 1 , 1000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1005 :  "Godhana" , 1005 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1006 :  "Mahaa Pooja" , 1006 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1007 :  "Ksheeraabhisheka" , 1007 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1008 :  "Madhu Abhisheka" , 1008 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1010 :  "Yella Homagala Seva" , 1010 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1011 :  "Naivedhya/Hasthodaka" , 1011 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1012 :  "Phala - Panchaamrutha" , 1012 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1013 :  "Ganapathi Abhisheka" , 1013 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1014 :  "Nagadevara Abhisheka" , 1014 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1015 :  "Navagraha Abhisheka" , 1015 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1016 :  "Rathothsava" , 1016 , 1 , 1000 , 1000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1017 :  "Huggi Naivedhya" , 1017 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1018 :  "Pongal Naivedhya" , 1018 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1019 :  "Grahana Shanthi" , 1019 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1020 :  "Kaarthika - Rathothsava" , 1020 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1021 :  "Kaarthika Seva" , 1021 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1022 :  "Sri Sathya Narayana Pooja" , 1022 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1023 :  "Tulsi Archane" , 1023 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1024 :  "Chataka Shraadha" , 1024 , 1 , 1000 , 600 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1025 :  "Sankalpa Shraadha" , 1025 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1026 :  "Vaahana Pooja" , 1026 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1027 :  "Archane Seva" , 1027 , 1 , 1000 , 25 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1028 :  "Lakshmi Pooja" , 1028 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1029 :  "Navagraha Devarige Thailaabhisheka" , 1029 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1030 :  "Pavamaana Homa" , 1030 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1031 :  "Gana Homa" , 1031 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1032 :  "Mruthyunjaya Homa" , 1032 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 1033 :  "Rudraabhisheka" , 1033 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 2001 :  "Ondu Dinada Sampurna Seva" , 2001 , 1 , 2000 , 25001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 2002 :  "Ondu Dinada Anna Santharpane Seva" , 2002 , 1 , 2000 , 20001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 2003 :  "Alankara Seva(Huvina Alankara)" , 2003 , 1 , 2000 , 10001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 2004 :  "Alankara Seva" , 2004 , 1 , 2000 , 5001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 2005 :  "Noothana Vastra Seva" , 2005 , 1 , 2000 , 4000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 2006 :  "Sarva seva" , 2006 , 1 , 2000 , 2501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 2007 :  "Kanakabhisheka Seva" , 2007 , 1 , 2000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 2009 :  "Hasthodaka Seva(Prathidina)" , 2009 , 1 , 2000 , 1001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 2010 :  "MahaPooje" , 2010 , 1 , 2000 , 800 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 2011 :  "Ashtothara Seva(Prathidina)" , 2011 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 2012 :  "Paadakaradhane" , 2012 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 2013 :  "GanaHoma" , 2013 , 1 , 2000 , 101 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: 2014 :  "PhalaPanchamrutha Seva" , 2014 , 1 , 2000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-05-08 17:06:56.256 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-05-08 17:06:56.256 DBG default: Creating the SevaTypeNamesDataModel  

2023-05-08 17:06:56.256 DBG default: SevaBookingConformationDataModel::SevaBookingConformationDataModel(QObject*) 

2023-05-08 17:06:56.256 DBG default: JsonWriter::JsonWriter(QObject*) 

2023-05-08 17:06:56.257 DBG default: SevaTypeNamesDataModel::SevaTypeNamesDataModel(QObject*) 

2023-05-08 17:06:56.257 DBG default: void SevaTypeNamesDataModel::connectSignals() 

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::querySevaTypes() 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 3 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 4 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 5 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 6 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 7 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 8 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 9 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 10 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 11 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 12 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 13 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 14 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 15 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 16 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 0 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 18 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 19 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 20 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 25 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 22 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1000 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2000 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 26 

2023-05-08 17:06:56.257 DBG default: bool DBInterface::querySevaType() querying seva type done 

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::querySevaNames() 

2023-05-08 17:06:56.257 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka"  Type = 1  SevaID = 2 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka"  Type = 1  SevaID = 3 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dwadashi Hasthodaka"  Type = 1  SevaID = 4 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi Homa"  Type = 9  SevaID = 5 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))), QMap((5, SevaName(0x9176da8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Panchamrutha/Abhisheka"  Type = 1  SevaID = 6 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))), QMap((5, SevaName(0x9176da8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Samanya Kanike"  Type = 1  SevaID = 7 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))), QMap((5, SevaName(0x9176da8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shop Kanike"  Type = 11  SevaID = 9 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))), QMap((5, SevaName(0x9176da8))), QMap((9, SevaName(0x9176df8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya thaila seva"  Type = 9  SevaID = 10 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))), QMap((9, SevaName(0x9176df8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Building Fund"  Type = 12  SevaID = 11 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankar Pankthi"  Type = 4  SevaID = 12 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))), QMap((12, SevaName(0x91d7cd8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Aradhna Kanike"  Type = 4  SevaID = 13 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadhana "  Type = 4  SevaID = 14 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hundi Collections"  Type = 13  SevaID = 15 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Khara Huggi"  Type = 8  SevaID = 16 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sweet Huggi"  Type = 8  SevaID = 17 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thatte Hasthodaka"  Type = 1  SevaID = 18 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Advance Recovered"  Type = 9  SevaID = 19 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PP - Rent"  Type = 14  SevaID = 20 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Annadana Seva"  Type = 3  SevaID = 23 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((23, SevaName(0x91d7d28))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa"  Type = 3  SevaID = 24 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa Sankalp"  Type = 3  SevaID = 25 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachna Seva-All days"  Type = 3  SevaID = 26 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachana seva- 1 day"  Type = 3  SevaID = 27 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami  Annadana Sankalpa Seva"  Type = 3  SevaID = 28 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Hoovina Alankara seva"  Type = 3  SevaID = 29 

2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.258 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navmi Sarva seva"  Type = 3  SevaID = 30 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sumadhwavijaya Parayana seva"  Type = 3  SevaID = 31 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Prakarosthava"  Type = 3  SevaID = 34 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Seva"  Type = 3  SevaID = 35 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Gruha Padapooja"  Type = 3  SevaID = 36 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Serva Seva"  Type = 1  SevaID = 37 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Kanike"  Type = 3  SevaID = 38 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Annadana seva "  Type = 3  SevaID = 39 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pandith Sanman"  Type = 3  SevaID = 40 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M  Navami Panchamurtha "  Type = 3  SevaID = 41 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Shanthi Homa"  Type = 15  SevaID = 42 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Padapooja"  Type = 3  SevaID = 43 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Madhu Abhiseka"  Type = 3  SevaID = 44 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gopaladasara Aradhane"  Type = 16  SevaID = 45 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Additional Sweets"  Type = 9  SevaID = 46 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina alankara Seva"  Type = 1  SevaID = 47 

2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.259 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prasada Seve"  Type = 1  SevaID = 48 

2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka- 2 Hasthodaka"  Type = 1  SevaID = 49 

2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sathyanarayana Pooje"  Type = 10  SevaID = 50 

2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "AYUSH HOMA"  Type = 15  SevaID = 51 

2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILA ABHYANJANA"  Type = 9  SevaID = 52 

2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharana"  Type = 9  SevaID = 53 

2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI  SAMPOORNA SEVE"  Type = 2  SevaID = 54 

2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI SANKLAPA SEVE"  Type = 2  SevaID = 55 

2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA"  Type = 2  SevaID = 56 

2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA SANKALPA"  Type = 2  SevaID = 57 

2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SITA RAMA KALYANOTSVA"  Type = 2  SevaID = 58 

2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMA KALYANOTSAVA SANKALPAA"  Type = 2  SevaID = 59 

2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA PRAVACHANA SEVE "  Type = 2  SevaID = 60 

2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.260 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "YELLA DINAGALA PRAVACHANA SEVE"  Type = 2  SevaID = 61 

2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "HOOVINA ALANKARA"  Type = 2  SevaID = 62 

2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi"  Type = 2  SevaID = 63 

2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA SANJE PRASADA SEVE"  Type = 2  SevaID = 64 

2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "VISHESHA PANCHAMRUTA"  Type = 2  SevaID = 65 

2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRAKAROTSVA"  Type = 2  SevaID = 66 

2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILABYAJANA SEVE"  Type = 2  SevaID = 67 

2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ARCHANE"  Type = 2  SevaID = 68 

2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))))
2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Raghavendra Swamy Aradhane"  Type = 16  SevaID = 69 

2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))))
2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Abhisheka Madhu/Panchamrutha"  Type = 4  SevaID = 70 

2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))))
2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtottara"  Type = 4  SevaID = 71 

2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))))
2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara"  Type = 4  SevaID = 72 

2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))))
2023-05-08 17:06:56.261 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 4  SevaID = 73 

2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))))
2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Deepalankarana Seve"  Type = 7  SevaID = 74 

2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))))
2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tarakari Seve"  Type = 1  SevaID = 75 

2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))))
2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seva"  Type = 4  SevaID = 76 

2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))))
2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Bhiksha kanike"  Type = 18  SevaID = 77 

2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))))
2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "hastodaka P P"  Type = 5  SevaID = 78 

2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))))
2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka P P"  Type = 5  SevaID = 79 

2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))))
2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa  P P"  Type = 5  SevaID = 80 

2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))))
2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Nanda Deepa for 9 days"  Type = 6  SevaID = 81 

2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))))
2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Nanda Deepa for  9 days"  Type = 6  SevaID = 82 

2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))))
2023-05-08 17:06:56.262 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Deepa for 1 day"  Type = 6  SevaID = 83 

2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))))
2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Deepa for 1 day"  Type = 6  SevaID = 84 

2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))))
2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seve"  Type = 1  SevaID = 85 

2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))))
2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadana Kanike"  Type = 1  SevaID = 86 

2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))))
2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana"  Type = 19  SevaID = 87 

2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))))
2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana for one day"  Type = 19  SevaID = 88 

2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana Seva for one day"  Type = 6  SevaID = 89 

2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nitya Deepaseve"  Type = 7  SevaID = 90 

2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjana"  Type = 7  SevaID = 91 

2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Seve"  Type = 7  SevaID = 92 

2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.263 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Laksha Deepostava"  Type = 7  SevaID = 93 

2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Pratyekavagi "  Type = 7  SevaID = 94 

2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulasi Damodara Vivaha sankalpa"  Type = 7  SevaID = 95 

2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sampoorna Seve "  Type = 7  SevaID = 96 

2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sankalpa Seve "  Type = 7  SevaID = 97 

2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Hoovina Alankara "  Type = 7  SevaID = 98 

2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha Abhisheka "  Type = 7  SevaID = 99 

2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vijaya Dasara Aradhane"  Type = 16  SevaID = 100 

2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarotsva"  Type = 1  SevaID = 101 

2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.264 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 0  SevaID = 102 

2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 1  SevaID = 103 

2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtotthara Kanike"  Type = 1  SevaID = 104 

2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Santhana Gopala Krishna Homa"  Type = 15  SevaID = 105 

2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamana Homa"  Type = 15  SevaID = 106 

2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))))
2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shashwatha Seva Pooje"  Type = 20  SevaID = 107 

2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))))
2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Regular"  Type = 1  SevaID = 108 

2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))))
2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Seva"  Type = 8  SevaID = 109 

2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))))
2023-05-08 17:06:56.265 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mosaranna Naivedya"  Type = 9  SevaID = 110 

2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))))
2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Poorna Pragna Hall Kanike"  Type = 14  SevaID = 111 

2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))), QMap((50, SevaName(0x91d8318))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))))
2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pratyeka Sathyanarayana Pooja"  Type = 10  SevaID = 112 

2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))))
2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chikka Adige"  Type = 9  SevaID = 113 

2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))))
2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha"  Type = 21  SevaID = 114 

2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))))
2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjan seve"  Type = 21  SevaID = 115 

2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))))
2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri SeethaRamanjaneyarige Nuthana Vastra Dharane pratidevarige."  Type = 21  SevaID = 116 

2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))))
2023-05-08 17:06:56.266 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 21  SevaID = 117 

2023-05-08 17:06:56.267 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))))
2023-05-08 17:06:56.267 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane"  Type = 21  SevaID = 118 

2023-05-08 17:06:56.267 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))))
2023-05-08 17:06:56.267 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara seve"  Type = 21  SevaID = 119 

2023-05-08 17:06:56.267 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))))
2023-05-08 17:06:56.267 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ramanavami Kanike"  Type = 2  SevaID = 120 

2023-05-08 17:06:56.267 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))))
2023-05-08 17:06:56.267 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Villeydhele Hara"  Type = 1  SevaID = 121 

2023-05-08 17:06:56.267 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))))
2023-05-08 17:06:56.267 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gandha Lepana "  Type = 22  SevaID = 122 

2023-05-08 17:06:56.267 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))))
2023-05-08 17:06:56.267 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phalahara Pooja"  Type = 9  SevaID = 123 

2023-05-08 17:06:56.267 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))))
2023-05-08 17:06:56.268 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 15  SevaID = 124 

2023-05-08 17:06:56.268 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))))
2023-05-08 17:06:56.268 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Monthly"  Type = 1  SevaID = 125 

2023-05-08 17:06:56.268 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))))
2023-05-08 17:06:56.268 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Jayathirtha Aradhane Kanike"  Type = 16  SevaID = 126 

2023-05-08 17:06:56.268 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))))
2023-05-08 17:06:56.268 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Oldarticals sold"  Type = 9  SevaID = 127 

2023-05-08 17:06:56.268 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))))
2023-05-08 17:06:56.268 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Udayaasthamaana Seva"  Type = 1000  SevaID = 1001 

2023-05-08 17:06:56.268 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))))
2023-05-08 17:06:56.269 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Seva"  Type = 1000  SevaID = 1002 

2023-05-08 17:06:56.269 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))))
2023-05-08 17:06:56.269 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Samarpana Seva"  Type = 1000  SevaID = 1003 

2023-05-08 17:06:56.269 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))))
2023-05-08 17:06:56.269 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakaabhisheka"  Type = 1000  SevaID = 1004 

2023-05-08 17:06:56.269 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))))
2023-05-08 17:06:56.269 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Godhana"  Type = 1000  SevaID = 1005 

2023-05-08 17:06:56.269 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))))
2023-05-08 17:06:56.269 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mahaa Pooja"  Type = 1000  SevaID = 1006 

2023-05-08 17:06:56.269 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))))
2023-05-08 17:06:56.269 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ksheeraabhisheka"  Type = 1000  SevaID = 1007 

2023-05-08 17:06:56.269 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))))
2023-05-08 17:06:56.269 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Madhu Abhisheka"  Type = 1000  SevaID = 1008 

2023-05-08 17:06:56.270 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))))
2023-05-08 17:06:56.270 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Yella Homagala Seva"  Type = 1000  SevaID = 1010 

2023-05-08 17:06:56.270 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))))
2023-05-08 17:06:56.270 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Naivedhya/Hasthodaka"  Type = 1000  SevaID = 1011 

2023-05-08 17:06:56.270 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))))
2023-05-08 17:06:56.270 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phala - Panchaamrutha"  Type = 1000  SevaID = 1012 

2023-05-08 17:06:56.270 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))))
2023-05-08 17:06:56.270 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ganapathi Abhisheka"  Type = 1000  SevaID = 1013 

2023-05-08 17:06:56.270 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))))
2023-05-08 17:06:56.270 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nagadevara Abhisheka"  Type = 1000  SevaID = 1014 

2023-05-08 17:06:56.270 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))))
2023-05-08 17:06:56.270 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Abhisheka"  Type = 1000  SevaID = 1015 

2023-05-08 17:06:56.271 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))))
2023-05-08 17:06:56.271 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rathothsava"  Type = 1000  SevaID = 1016 

2023-05-08 17:06:56.271 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))))
2023-05-08 17:06:56.271 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Naivedhya"  Type = 1000  SevaID = 1017 

2023-05-08 17:06:56.271 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))))
2023-05-08 17:06:56.271 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pongal Naivedhya"  Type = 1000  SevaID = 1018 

2023-05-08 17:06:56.271 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))))
2023-05-08 17:06:56.271 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi"  Type = 1000  SevaID = 1019 

2023-05-08 17:06:56.271 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))))
2023-05-08 17:06:56.271 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika - Rathothsava"  Type = 1000  SevaID = 1020 

2023-05-08 17:06:56.271 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))))
2023-05-08 17:06:56.271 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika Seva"  Type = 1000  SevaID = 1021 

2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))))
2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri Sathya Narayana Pooja"  Type = 1000  SevaID = 1022 

2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))))
2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulsi Archane"  Type = 1000  SevaID = 1023 

2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))))
2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka Shraadha"  Type = 1000  SevaID = 1024 

2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))))
2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa Shraadha"  Type = 1000  SevaID = 1025 

2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))))
2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vaahana Pooja"  Type = 1000  SevaID = 1026 

2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))))
2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane Seva"  Type = 1000  SevaID = 1027 

2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))))
2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Lakshmi Pooja"  Type = 1000  SevaID = 1028 

2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))))
2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Devarige Thailaabhisheka"  Type = 1000  SevaID = 1029 

2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))))
2023-05-08 17:06:56.272 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamaana Homa"  Type = 1000  SevaID = 1030 

2023-05-08 17:06:56.273 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))))
2023-05-08 17:06:56.273 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gana Homa"  Type = 1000  SevaID = 1031 

2023-05-08 17:06:56.273 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))))
2023-05-08 17:06:56.273 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mruthyunjaya Homa"  Type = 1000  SevaID = 1032 

2023-05-08 17:06:56.273 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))))
2023-05-08 17:06:56.273 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rudraabhisheka"  Type = 1000  SevaID = 1033 

2023-05-08 17:06:56.273 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))))
2023-05-08 17:06:56.273 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Sampurna Seva"  Type = 2000  SevaID = 2001 

2023-05-08 17:06:56.273 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))), QMap((2001, SevaName(0x91de1e0))))
2023-05-08 17:06:56.273 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Anna Santharpane Seva"  Type = 2000  SevaID = 2002 

2023-05-08 17:06:56.273 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))), QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))))
2023-05-08 17:06:56.274 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva(Huvina Alankara)"  Type = 2000  SevaID = 2003 

2023-05-08 17:06:56.274 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))), QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))(2003, SevaName(0x91de230))))
2023-05-08 17:06:56.274 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva"  Type = 2000  SevaID = 2004 

2023-05-08 17:06:56.274 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))), QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))(2003, SevaName(0x91de230))(2004, SevaName(0x91de190))))
2023-05-08 17:06:56.274 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Noothana Vastra Seva"  Type = 2000  SevaID = 2005 

2023-05-08 17:06:56.274 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))), QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))(2003, SevaName(0x91de230))(2004, SevaName(0x91de190))(2005, SevaName(0x91ddf60))))
2023-05-08 17:06:56.274 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva seva"  Type = 2000  SevaID = 2006 

2023-05-08 17:06:56.274 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))), QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))(2003, SevaName(0x91de230))(2004, SevaName(0x91de190))(2005, SevaName(0x91ddf60))(2006, SevaName(0x91de280))))
2023-05-08 17:06:56.274 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakabhisheka Seva"  Type = 2000  SevaID = 2007 

2023-05-08 17:06:56.274 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))), QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))(2003, SevaName(0x91de230))(2004, SevaName(0x91de190))(2005, SevaName(0x91ddf60))(2006, SevaName(0x91de280))(2007, SevaName(0x91de2d0))))
2023-05-08 17:06:56.274 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Seva(Prathidina)"  Type = 2000  SevaID = 2009 

2023-05-08 17:06:56.275 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))), QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))(2003, SevaName(0x91de230))(2004, SevaName(0x91de190))(2005, SevaName(0x91ddf60))(2006, SevaName(0x91de280))(2007, SevaName(0x91de2d0))(2009, SevaName(0x91ddfb0))))
2023-05-08 17:06:56.275 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "MahaPooje"  Type = 2000  SevaID = 2010 

2023-05-08 17:06:56.275 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))), QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))(2003, SevaName(0x91de230))(2004, SevaName(0x91de190))(2005, SevaName(0x91ddf60))(2006, SevaName(0x91de280))(2007, SevaName(0x91de2d0))(2009, SevaName(0x91ddfb0))(2010, SevaName(0x91de370))))
2023-05-08 17:06:56.275 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtothara Seva(Prathidina)"  Type = 2000  SevaID = 2011 

2023-05-08 17:06:56.275 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))), QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))(2003, SevaName(0x91de230))(2004, SevaName(0x91de190))(2005, SevaName(0x91ddf60))(2006, SevaName(0x91de280))(2007, SevaName(0x91de2d0))(2009, SevaName(0x91ddfb0))(2010, SevaName(0x91de370))(2011, SevaName(0x91de0a0))))
2023-05-08 17:06:56.275 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Paadakaradhane"  Type = 2000  SevaID = 2012 

2023-05-08 17:06:56.275 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))), QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))(2003, SevaName(0x91de230))(2004, SevaName(0x91de190))(2005, SevaName(0x91ddf60))(2006, SevaName(0x91de280))(2007, SevaName(0x91de2d0))(2009, SevaName(0x91ddfb0))(2010, SevaName(0x91de370))(2011, SevaName(0x91de0a0))(2012, SevaName(0x91de000))))
2023-05-08 17:06:56.275 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 2000  SevaID = 2013 

2023-05-08 17:06:56.275 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))), QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))(2003, SevaName(0x91de230))(2004, SevaName(0x91de190))(2005, SevaName(0x91ddf60))(2006, SevaName(0x91de280))(2007, SevaName(0x91de2d0))(2009, SevaName(0x91ddfb0))(2010, SevaName(0x91de370))(2011, SevaName(0x91de0a0))(2012, SevaName(0x91de000))(2013, SevaName(0x91de050))))
2023-05-08 17:06:56.275 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PhalaPanchamrutha Seva"  Type = 2000  SevaID = 2014 

2023-05-08 17:06:56.276 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x91d9038))), QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))), QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))), QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))), QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))), QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))), QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))), QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))), QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))), QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))), QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))), QMap((9, SevaName(0x9176df8))), QMap((11, SevaName(0x9177118))), QMap((15, SevaName(0x91d7508))), QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))), QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))), QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))), QMap((77, SevaName(0x91d8ef8))), QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))), QMap((107, SevaName(0x91d9358))), QMap((114, SevaName(0x9200330))(115, SevaName(0x91fff70))(116, SevaName(0x9200380))(117, SevaName(0x92003d0))(118, SevaName(0x9200420))(119, SevaName(0x91fffc0))), QMap((122, SevaName(0x9200060))), QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))), QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))(2003, SevaName(0x91de230))(2004, SevaName(0x91de190))(2005, SevaName(0x91ddf60))(2006, SevaName(0x91de280))(2007, SevaName(0x91de2d0))(2009, SevaName(0x91ddfb0))(2010, SevaName(0x91de370))(2011, SevaName(0x91de0a0))(2012, SevaName(0x91de000))(2013, SevaName(0x91de050))(2014, SevaName(0x91de0f0))))
2023-05-08 17:06:56.276 DBG default: bool DBInterface::querySevaNames() querying seva names done 

2023-05-08 17:06:56.276 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:06:56.276 DBG default: UserManagement::UserManagement(QObject*) 

2023-05-08 17:06:56.276 DBG default: The role number recieved -1 

2023-05-08 17:06:56.276 DBG default: SevaDetailsTableView::SevaDetailsTableView(QObject*) 

2023-05-08 17:06:56.283 DBG default: AccountReportModel::AccountReportModel(QObject*) 

2023-05-08 17:06:56.283 DBG default: AccountReportDateRangeModel::AccountReportDateRangeModel(QObject*) 

2023-05-08 17:06:56.283 DBG default: AccountReportMonthWiseModel::AccountReportMonthWiseModel(QObject*) 

2023-05-08 17:06:56.283 DBG default: BookingReportDateRangeModel::BookingReportDateRangeModel(QObject*) 

2023-05-08 17:06:56.283 DBG default: The connect status true 

2023-05-08 17:06:56.283 DBG default: BookingReportMonthWiseModel::BookingReportMonthWiseModel(QObject*) 

2023-05-08 17:06:56.283 DBG default: SevaBookingTableModel::SevaBookingTableModel(QObject*) 

2023-05-08 17:06:56.283 DBG default: SevaBookingSearchModel::SevaBookingSearchModel(QObject*) 

2023-05-08 17:06:56.283 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-05-08 17:06:56.283 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-05-08 17:06:56.283 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-05-08 17:06:56.283 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-05-08 17:06:56.283 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Date = 8  Mon = 5  Year = 2023
2023-05-08 17:06:56.283 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-08 17:06:56.283 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-08 17:06:56.283 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "1" 

2023-05-08 17:06:56.283 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-08 17:06:56.283 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-08 17:06:56.283 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "2" 

2023-05-08 17:06:56.283 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-08 17:06:56.283 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-08 17:06:56.283 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "3" 

2023-05-08 17:06:56.283 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-05-08 17:06:56.283 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-05-08 17:06:56.283 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "4" 

2023-05-08 17:06:56.283 WRN default: QSqlQuery::value: not positioned on a valid record
2023-05-08 17:06:56.283 DBG default: int DBInterface::getLastReceiptNumber()  Size =  -1  receiptNo ID =  4  Value =  QVariant(Invalid) 

2023-05-08 17:06:56.283 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Last ReceiptNo from DB = 5  Generated = "2023_5_0005" 

2023-05-08 17:06:56.283 DBG default: QString SevaViewProxy::getNextReceiptNumber()  r number =  "2023_5_0005" 

2023-05-08 17:06:56.283 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:06:56.283 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-05-08 17:06:56.283 DBG default: SevaCountOnDateModel::SevaCountOnDateModel(QObject*) 

2023-05-08 17:06:56.283 DBG default: saveVoucher::saveVoucher(QObject*) 

2023-05-08 17:06:56.284 DBG default: virtual QString VoucherNumber::getNextVoucherNumber() 

2023-05-08 17:06:56.284 DBG default: int DBInterface::getLastVoucherNumber() 

2023-05-08 17:06:56.284 DBG default: 0 

2023-05-08 17:06:56.284 DBG default: "1" 

2023-05-08 17:06:56.284 DBG default: VoucherReportModel::VoucherReportModel(QObject*) 

2023-05-08 17:06:56.284 DBG default: QString TrustListModel::getConfigLocation() 

2023-05-08 17:06:56.284 DBG default: QString TrustListModel::getDataLocation() 

2023-05-08 17:06:56.284 DBG qml: str1 = --D:/TempleFile/Ramamndira_2023/Temple-main/bins/Config/Hubablli
2023-05-08 17:06:56.284 DBG qml: str2 = --D:/TempleFile/Ramamndira_2023/Temple-main/bins/Data/Hubablli
2023-05-08 17:06:56.316 DBG qml: The Page Number=== 0
2023-05-08 17:06:56.316 DBG qml: The page number is 0
2023-05-08 17:06:56.316 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:06:56.316 DBG qml: Screen screenWidth size =1920
2023-05-08 17:06:56.316 DBG qml: Screen screenHeight size =1000
2023-05-08 17:06:56.316 WRN default: qrc:/ui/Login.qml:37:13: Unable to assign [undefined] to bool
2023-05-08 17:06:56.316 WRN default: qrc:/ui/Login.qml:44:13: Unable to assign [undefined] to bool
2023-05-08 17:06:56.316 WRN default: qrc:/ui/Login.qml:80:17: Unable to assign [undefined] to bool
2023-05-08 17:06:56.316 DBG default: int TrustListModel::getTrustListSize() 

2023-05-08 17:07:05.039 DBG default: void UserManagement::authorize(QString, QString) "admin" "admin123" 

2023-05-08 17:07:05.039 DBG qml: Credentials are correct
2023-05-08 17:07:05.039 DBG qml: Wrong credentials 0
2023-05-08 17:07:05.048 DBG qml: the accounts enable false
2023-05-08 17:07:05.049 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:07:05.049 DBG qml: Screen screenWidth size =1920
2023-05-08 17:07:05.049 DBG qml: Screen screenHeight size =1000
2023-05-08 17:07:05.049 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:05.049 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:05.049 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:05.049 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:05.049 DBG default: The role number is 1 

2023-05-08 17:07:05.049 DBG default: The role number recieved 1 

2023-05-08 17:07:07.326 DBG qml: booking report button clicked
2023-05-08 17:07:07.326 DBG qml: Clicked on Bookingreport
2023-05-08 17:07:07.415 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-05-08 17:07:07.424 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.424 DBG default: 0 

2023-05-08 17:07:07.625 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-05-08 17:07:07.625 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-08 17:07:07.625 DBG qml: Selected year2015
2023-05-08 17:07:07.633 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-05-08 17:07:07.633 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:07:07.633 DBG qml: Selected month1
2023-05-08 17:07:07.635 WRN default: qrc:/ui/components/MyBookingFilter.qml:330:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.635 WRN default: qrc:/ui/components/MyBookingFilter.qml:341:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.686 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.686 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.709 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.711 WRN default: qrc:/ui/components/MyBookingFilter.qml:127:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.711 WRN default: qrc:/ui/components/MyBookingFilter.qml:165:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.711 WRN default: qrc:/ui/components/MyBookingFilter.qml:330:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.711 WRN default: qrc:/ui/components/MyBookingFilter.qml:341:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.711 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.711 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.711 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.711 WRN default: qrc:/ui/components/MyBookingFilter.qml:127:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.711 WRN default: qrc:/ui/components/MyBookingFilter.qml:165:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.712 DBG qml: In Component.onCompleted: of booking report page
2023-05-08 17:07:07.712 DBG qml: In  Component.onCompleted: loader brp
2023-05-08 17:07:07.717 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-05-08 17:07:07.717 DBG qml: In  Component.onCompleted: of table view of brp function() { [native code] }
2023-05-08 17:07:07.717 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:07:07.717 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-08 17:07:07.717 DBG qml: The month and year initial 1   2015
2023-05-08 17:07:07.717 DBG qml:  Trying to get the list category
2023-05-08 17:07:07.717 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:07.717 DBG default: bool SevaTypeViewModel::init() 

2023-05-08 17:07:07.717 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:07.717 DBG default: bool SevaTypeViewModel::init()  Number of Seva Types = 25 

2023-05-08 17:07:07.717 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:07.717 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:07.717 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:07.717 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:07.717 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:07.717 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:07:07.717 DBG default: void ReportFilterElements::setISevaType(int) 

2023-05-08 17:07:07.717 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:07:07.717 DBG qml: 0
2023-05-08 17:07:07.717 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:07.717 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:07:07.717 DBG default: void ReportFilterElements::setISevaType(int) 

2023-05-08 17:07:07.717 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:07:07.717 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:07.717 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:07:07.717 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-08 17:07:07.717 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:07.717 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:07.717 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:07.717 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:07.717 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:07.717 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:07.717 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9038)) 

2023-05-08 17:07:07.717 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:07.717 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:07.717 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-05-08 17:07:07.717 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:07:07.717 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:07:07.717 DBG qml: Seva name selected : Nithya Archane
2023-05-08 17:07:07.717 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:07:07.717 DBG qml: Seva type selected in report filter : 0
2023-05-08 17:07:07.717 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:07.717 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:07.717 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:07.717 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:07:07.718 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-08 17:07:07.718 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:07.718 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:07.718 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:07.718 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:07.718 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:07.718 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:07.718 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9038)) 

2023-05-08 17:07:07.718 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:07.718 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:07.718 DBG default: void ReportFilterElements::setISevaType(int) 

2023-05-08 17:07:07.718 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-05-08 17:07:07.718 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-05-08 17:07:07.718 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:07.718 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:07.718 DBG qml:   _rip.sSingleDate 208-05-2023
2023-05-08 17:07:07.718 DBG default: void SevaReport::generateBookReport(ReportFilterElements*) 

2023-05-08 17:07:07.718 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.718 DBG default: 0 

2023-05-08 17:07:07.718 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 0 

2023-05-08 17:07:07.718 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 

2023-05-08 17:07:07.718 DBG default: Selected Type  0 

2023-05-08 17:07:07.718 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:07:07.718 DBG default: Selected Month  1 

2023-05-08 17:07:07.718 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-08 17:07:07.718 DBG default: Selected Year  2015 

2023-05-08 17:07:07.718 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:07.718 DBG default: Selected date  "08-05-2023" 

2023-05-08 17:07:07.718 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) Inside c date book rep 

2023-05-08 17:07:07.718 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:07.718 DBG default: QString BookingReportModel::FormatDate(QString) "08-05-2023" 

2023-05-08 17:07:07.718 DBG default: QString BookingReportModel::FormatDate(QString) QDate("2023-05-08") 

2023-05-08 17:07:07.718 DBG default: QString BookingReportModel::FormatDate(QString) "2023-05-08" 

2023-05-08 17:07:07.718 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-05-08 17:07:07.718 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:07.718 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-05-08" 

2023-05-08 17:07:07.718 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:07:07.718 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:07:07.718 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:07.718 DBG default: 
Changed format is:  "2023-05-08" 

2023-05-08 17:07:07.718 DBG default: In type 0:  

2023-05-08 17:07:07.718 DBG default:  Query string = "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:07.718 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-05-08 17:07:07.718 DBG default:  Query string = true 

2023-05-08 17:07:07.718 DBG default:  Query prepared successfully = true 

2023-05-08 17:07:07.718 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-05-08 17:07:07.718 DBG default:  Query string =2222222222222 "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:07.718 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:07.718 DBG default: 999999999999999999999999 "Nithya Archane" 

2023-05-08 17:07:07.718 DBG default: 88888888888888888888888888 0 

2023-05-08 17:07:07.718 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:07.718 DBG default: 999999999999999999999999 "Nithya Archane" 

2023-05-08 17:07:07.718 DBG default: 88888888888888888888888888 0 

2023-05-08 17:07:07.718 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:07.718 DBG default: 999999999999999999999999 "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:07:07.718 DBG default: 88888888888888888888888888 0 

2023-05-08 17:07:07.718 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:07.718 DBG default: 999999999999999999999999 "Poorna Pragna Hall Kanike" 

2023-05-08 17:07:07.718 DBG default: 88888888888888888888888888 0 

2023-05-08 17:07:07.718 DBG default: query while/********** 

2023-05-08 17:07:07.718 DBG default: query while/******1**** 

2023-05-08 17:07:07.718 DBG default: query while/*****2***** 

2023-05-08 17:07:07.718 DBG default: query while/*****3***** true 

2023-05-08 17:07:07.718 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Nithya Archane' and SEVATYPE = '0';" 

2023-05-08 17:07:07.718 DBG default: query ifeee/*****5***** 

2023-05-08 17:07:07.719 DBG default: query while/*****5***** 

2023-05-08 17:07:07.719 DBG default: query while/********** 

2023-05-08 17:07:07.719 DBG default: query while/******1**** 

2023-05-08 17:07:07.719 DBG default: query while/*****2***** 

2023-05-08 17:07:07.719 DBG default: query while/*****3***** true 

2023-05-08 17:07:07.719 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Nithya Archane' and SEVATYPE = '0';" 

2023-05-08 17:07:07.719 DBG default: query ifeee/*****5***** 

2023-05-08 17:07:07.719 DBG default: query while/*****5***** 

2023-05-08 17:07:07.719 DBG default: query while/********** 

2023-05-08 17:07:07.719 DBG default: query while/******1**** 

2023-05-08 17:07:07.719 DBG default: query while/*****2***** 

2023-05-08 17:07:07.719 DBG default: query while/*****3***** true 

2023-05-08 17:07:07.719 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi' and SEVATYPE = '2';" 

2023-05-08 17:07:07.719 DBG default: query ifeee/*****5***** 

2023-05-08 17:07:07.719 DBG default: query while/*****5***** 

2023-05-08 17:07:07.719 DBG default: query while/********** 

2023-05-08 17:07:07.719 DBG default: query while/******1**** 

2023-05-08 17:07:07.719 DBG default: query while/*****2***** 

2023-05-08 17:07:07.719 DBG default: query while/*****3***** true 

2023-05-08 17:07:07.719 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Poorna Pragna Hall Kanike' and SEVATYPE = '14';" 

2023-05-08 17:07:07.719 DBG default: query ifeee/*****5***** 

2023-05-08 17:07:07.719 DBG default: query while/*****5***** 

2023-05-08 17:07:07.719 DBG default:  Query string =@@@@@@@@@@@@@ QSqlError("", "", "") 

2023-05-08 17:07:07.719 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:07.719 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-05-08 17:07:07.719 DBG default: name-- "Suman N" 

2023-05-08 17:07:07.719 DBG default: gothra-- "Kashyapa" 

2023-05-08 17:07:07.719 DBG default: nakshatra-- "Ashwini" 

2023-05-08 17:07:07.719 DBG default: seva-- "Nithya Archane" 

2023-05-08 17:07:07.719 DBG default: mobile-- "9481914363" 

2023-05-08 17:07:07.719 DBG default: note-- "paid" 

2023-05-08 17:07:07.719 DBG default: prasada-- "0" 

2023-05-08 17:07:07.719 DBG default: before emitting signal  booking_report '''''''' 

2023-05-08 17:07:07.719 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-05-08 17:07:07.719 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.719 DBG default: 0 

2023-05-08 17:07:07.719 DBG default: "Suman N" 

2023-05-08 17:07:07.719 DBG default: "Kashyapa" 

2023-05-08 17:07:07.719 DBG default: "Ashwini" 

2023-05-08 17:07:07.719 DBG default: "Nithya Archane" 

2023-05-08 17:07:07.719 DBG default: "9481914363" 

2023-05-08 17:07:07.719 DBG default: "paid" 

2023-05-08 17:07:07.719 DBG default: after emitting signal  booking_report '''''''' 

2023-05-08 17:07:07.719 DBG default: after increment 1 

2023-05-08 17:07:07.719 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:07.719 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-05-08 17:07:07.719 DBG default: name-- "Dheerendra Purohit" 

2023-05-08 17:07:07.719 DBG default: gothra-- "Kashyapa" 

2023-05-08 17:07:07.719 DBG default: nakshatra-- "Ashwini" 

2023-05-08 17:07:07.719 DBG default: seva-- "Nithya Archane" 

2023-05-08 17:07:07.719 DBG default: mobile-- "9900541516" 

2023-05-08 17:07:07.719 DBG default: note-- "paid" 

2023-05-08 17:07:07.719 DBG default: prasada-- "0" 

2023-05-08 17:07:07.719 DBG default: before emitting signal  booking_report '''''''' 

2023-05-08 17:07:07.719 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-05-08 17:07:07.719 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.719 DBG default: 1 

2023-05-08 17:07:07.719 DBG default: "Dheerendra Purohit" 

2023-05-08 17:07:07.719 DBG default: "Kashyapa" 

2023-05-08 17:07:07.719 DBG default: "Ashwini" 

2023-05-08 17:07:07.719 DBG default: "Nithya Archane" 

2023-05-08 17:07:07.719 DBG default: "9900541516" 

2023-05-08 17:07:07.719 DBG default: "paid" 

2023-05-08 17:07:07.719 DBG default: after emitting signal  booking_report '''''''' 

2023-05-08 17:07:07.719 DBG default: after increment 2 

2023-05-08 17:07:07.719 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:07.719 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-05-08 17:07:07.719 DBG default: name-- "Prasanna Rao" 

2023-05-08 17:07:07.719 DBG default: gothra-- "Kashyapa" 

2023-05-08 17:07:07.719 DBG default: nakshatra-- "Ashwini" 

2023-05-08 17:07:07.719 DBG default: seva-- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:07:07.719 DBG default: mobile-- "9448493423" 

2023-05-08 17:07:07.719 DBG default: note-- "" 

2023-05-08 17:07:07.719 DBG default: prasada-- "2" 

2023-05-08 17:07:07.719 DBG default: before emitting signal  booking_report '''''''' 

2023-05-08 17:07:07.719 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-05-08 17:07:07.719 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.719 DBG default: 2 

2023-05-08 17:07:07.719 DBG default: "Prasanna Rao" 

2023-05-08 17:07:07.719 DBG default: "Kashyapa" 

2023-05-08 17:07:07.719 DBG default: "Ashwini" 

2023-05-08 17:07:07.719 DBG default: "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:07:07.719 DBG default: "9448493423" 

2023-05-08 17:07:07.719 DBG default: "" 

2023-05-08 17:07:07.719 DBG default: after emitting signal  booking_report '''''''' 

2023-05-08 17:07:07.719 DBG default: after increment 3 

2023-05-08 17:07:07.719 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:07.719 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-05-08 17:07:07.719 DBG default: name-- "Manikantha" 

2023-05-08 17:07:07.720 DBG default: gothra-- "Kashyapa" 

2023-05-08 17:07:07.720 DBG default: nakshatra-- "Ashwini" 

2023-05-08 17:07:07.720 DBG default: seva-- "Poorna Pragna Hall Kanike" 

2023-05-08 17:07:07.720 DBG default: mobile-- "1234567890" 

2023-05-08 17:07:07.720 DBG default: note-- "" 

2023-05-08 17:07:07.720 DBG default: prasada-- "14" 

2023-05-08 17:07:07.720 DBG default: before emitting signal  booking_report '''''''' 

2023-05-08 17:07:07.720 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-05-08 17:07:07.720 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.720 DBG default: 3 

2023-05-08 17:07:07.720 DBG default: "Manikantha" 

2023-05-08 17:07:07.720 DBG default: "Kashyapa" 

2023-05-08 17:07:07.720 DBG default: "Ashwini" 

2023-05-08 17:07:07.720 DBG default: "Poorna Pragna Hall Kanike" 

2023-05-08 17:07:07.720 DBG default: "1234567890" 

2023-05-08 17:07:07.720 DBG default: "" 

2023-05-08 17:07:07.720 DBG default: after emitting signal  booking_report '''''''' 

2023-05-08 17:07:07.720 DBG default: after increment 4 

2023-05-08 17:07:07.720 DBG default: bool ReportFilterElements::bDatewise() const 

2023-05-08 17:07:07.720 DBG default: true 

2023-05-08 17:07:07.720 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:07.720 DBG default: "2023-05-08" 

2023-05-08 17:07:07.720 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-05-08 17:07:07.720 DBG default: int BookingReportModel::getBookingReportQryListSize() 

2023-05-08 17:07:07.720 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:07:07.720 DBG qml: Screen screenWidth size =1920
2023-05-08 17:07:07.720 DBG qml: Screen screenHeight size =1000
2023-05-08 17:07:07.720 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:07:07.720 DBG qml: Screen screenWidth size =1920
2023-05-08 17:07:07.720 DBG qml: Screen screenHeight size =1000
2023-05-08 17:07:07.720 WRN default: qrc:/ui/MenuPage.qml:158:9: QML DisplayDialog: cannot find any window to open popup in.
2023-05-08 17:07:07.721 WRN default: qrc:/ui/components/MyBookingFilter.qml:127:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.721 WRN default: qrc:/ui/components/MyBookingFilter.qml:165:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.722 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.730 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.730 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.730 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.736 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.736 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.736 WRN default: qrc:/ui/components/MyBookingFilter.qml:330:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.736 WRN default: qrc:/ui/components/MyBookingFilter.qml:341:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.737 WRN default: qrc:/ui/components/MyBookingFilter.qml:330:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.737 WRN default: qrc:/ui/components/MyBookingFilter.qml:341:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:07:07.740 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.740 DBG default: 4 

2023-05-08 17:07:07.740 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.740 DBG default: 4 

2023-05-08 17:07:07.740 DBG default: virtual QHash<int, QByteArray> BookingReportModel::roleNames() const 

2023-05-08 17:07:07.742 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.742 DBG default: 4 

2023-05-08 17:07:07.742 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.742 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.742 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-05-08 17:07:07.745 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.745 DBG default: 4 

2023-05-08 17:07:07.745 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.745 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.745 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-05-08 17:07:07.745 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.745 DBG default: 4 

2023-05-08 17:07:07.745 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.745 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.745 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-05-08 17:07:07.745 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.745 DBG default: 4 

2023-05-08 17:07:07.745 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.745 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.745 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Nithya Archane" 

2023-05-08 17:07:07.745 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.745 DBG default: 4 

2023-05-08 17:07:07.745 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.745 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.745 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-05-08 17:07:07.745 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.745 DBG default: 4 

2023-05-08 17:07:07.745 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.745 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.745 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-05-08 17:07:07.746 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.746 DBG default: 4 

2023-05-08 17:07:07.746 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.746 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.746 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-05-08 17:07:07.746 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.746 DBG default: 4 

2023-05-08 17:07:07.746 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.746 DBG default: 4 

2023-05-08 17:07:07.746 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.746 DBG default: 4 

2023-05-08 17:07:07.746 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.746 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.746 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dheerendra Purohit" 

2023-05-08 17:07:07.747 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.747 DBG default: 4 

2023-05-08 17:07:07.747 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.747 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.747 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-05-08 17:07:07.747 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.747 DBG default: 4 

2023-05-08 17:07:07.747 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.747 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.747 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-05-08 17:07:07.747 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.747 DBG default: 4 

2023-05-08 17:07:07.747 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.747 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.747 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Nithya Archane" 

2023-05-08 17:07:07.747 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.747 DBG default: 4 

2023-05-08 17:07:07.747 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.747 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.747 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-05-08 17:07:07.747 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.747 DBG default: 4 

2023-05-08 17:07:07.747 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.747 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.747 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9900541516" 

2023-05-08 17:07:07.748 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.748 DBG default: 4 

2023-05-08 17:07:07.748 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.748 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.748 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-05-08 17:07:07.748 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.748 DBG default: 4 

2023-05-08 17:07:07.748 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.748 DBG default: 4 

2023-05-08 17:07:07.748 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.748 DBG default: 4 

2023-05-08 17:07:07.748 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.748 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.748 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Prasanna Rao" 

2023-05-08 17:07:07.748 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.748 DBG default: 4 

2023-05-08 17:07:07.748 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.748 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.748 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-05-08 17:07:07.748 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.748 DBG default: 4 

2023-05-08 17:07:07.749 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.749 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.749 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-05-08 17:07:07.749 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.749 DBG default: 4 

2023-05-08 17:07:07.749 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.749 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.749 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:07:07.749 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.749 DBG default: 4 

2023-05-08 17:07:07.749 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.749 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.749 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-05-08 17:07:07.749 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.749 DBG default: 4 

2023-05-08 17:07:07.749 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.749 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.749 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9448493423" 

2023-05-08 17:07:07.749 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.749 DBG default: 4 

2023-05-08 17:07:07.749 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.749 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.749 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-05-08 17:07:07.749 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.749 DBG default: 4 

2023-05-08 17:07:07.749 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.749 DBG default: 4 

2023-05-08 17:07:07.749 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.749 DBG default: 4 

2023-05-08 17:07:07.749 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.749 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.749 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Manikantha" 

2023-05-08 17:07:07.750 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.750 DBG default: 4 

2023-05-08 17:07:07.750 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.750 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.750 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-05-08 17:07:07.750 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.750 DBG default: 4 

2023-05-08 17:07:07.750 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.750 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.750 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-05-08 17:07:07.750 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.750 DBG default: 4 

2023-05-08 17:07:07.750 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.750 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.750 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Poorna Pragna Hall Kanike" 

2023-05-08 17:07:07.751 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.751 DBG default: 4 

2023-05-08 17:07:07.751 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.751 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.751 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-05-08 17:07:07.751 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.751 DBG default: 4 

2023-05-08 17:07:07.751 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.751 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.751 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "1234567890" 

2023-05-08 17:07:07.751 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:07.751 DBG default: 4 

2023-05-08 17:07:07.751 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:07.751 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:07.751 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-05-08 17:07:09.214 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-05-08 17:07:09.214 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-05-08 17:07:09.214 DBG qml: _month.currentIndex+1 01
2023-05-08 17:07:09.214 DBG qml: _year._data 2015
2023-05-08 17:07:14.336 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-05-08 17:07:14.337 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:07:14.337 DBG qml: Selected month5
2023-05-08 17:07:14.338 DBG qml:  Activated Index =4
2023-05-08 17:07:14.338 DBG qml: Selected Text =May
2023-05-08 17:07:14.338 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-05-08 17:07:14.338 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:07:14.338 DBG qml: Selected month5
2023-05-08 17:07:16.463 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-05-08 17:07:16.463 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-08 17:07:16.463 DBG qml: Selected year2023
2023-05-08 17:07:16.464 DBG qml:  Activated Index =8
2023-05-08 17:07:16.464 DBG qml: Selected Text =2023
2023-05-08 17:07:16.464 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-05-08 17:07:16.464 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-08 17:07:16.464 DBG qml: Selected year2023
2023-05-08 17:07:17.455 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:07:17.455 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:07:17.455 DBG qml: I am hereeee
2023-05-08 17:07:17.455 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-05-08 17:07:17.455 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-05-08 17:07:17.455 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-05-08 17:07:17.455 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-05-08 17:07:17.455 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-05-08 17:07:17.455 DBG qml: ---------11----------------
2023-05-08 17:07:17.455 DBG qml: In onLoadDateWiseBookingPage
2023-05-08 17:07:17.474 WRN default: qrc:/ui/SevaBookingReportOnDateRange.qml:276:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-05-08 17:07:17.475 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:07:17.479 DBG qml: Component.completed: of SevaBookingReportOnDateRange.qml
2023-05-08 17:07:17.481 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:07:17.481 DBG qml: Screen screenWidth size =1920
2023-05-08 17:07:17.481 DBG qml: Screen screenHeight size =1000
2023-05-08 17:07:17.481 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadDateWiseBookingPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:07:17.481 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadDateWiseBookingForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:07:17.481 DBG qml: ---------12----------------
2023-05-08 17:07:17.481 DBG qml: In onSendBookingReportDateRangeInputForWholeMonth
2023-05-08 17:07:17.481 DBG qml: In main
2023-05-08 17:07:17.481 DBG default: void SevaReport::generateBookingReportForEachDateForWholeMonth(ReportFilterElements*) 

2023-05-08 17:07:17.481 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) 

2023-05-08 17:07:17.481 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:07:17.481 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) 0 

2023-05-08 17:07:17.481 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:17.481 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) elm date "08-05-2023" 

2023-05-08 17:07:17.481 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:07:17.481 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:07:17.481 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetails "All" 0 

2023-05-08 17:07:17.481 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetailqqqqqqqqqqqqqqqqqs 2 

2023-05-08 17:07:17.481 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-08 17:07:17.481 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:07:17.481 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:07:17.481 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:07:17.481 DBG default: void DBInterface::booking_report_eachDateDataRangeForMonth_function(QString, int, int, int) The suman monthe 5 2023 

2023-05-08 17:07:17.481 DBG default:  Query string = "select RECEIPT_DATE,sum(QUANTITY) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='5' Group by sevabooking.RECEIPT_DATE;" 

2023-05-08 17:07:17.481 DBG default: Query in while 

2023-05-08 17:07:17.481 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='5' Group by sevabooking.RECEIPT_DATE;" 

2023-05-08 17:07:17.481 DBG default: BookingReportDateRangeElement::BookingReportDateRangeElement(QObject*) 

2023-05-08 17:07:17.481 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-05-08" 

2023-05-08 17:07:17.481 DBG default: In while of db **********query_other1.value(1).toInt()***************** 7 

2023-05-08 17:07:17.481 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) suman insert sevaRow for report 

2023-05-08 17:07:17.481 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) ------------ 

2023-05-08 17:07:17.481 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:07:17.481 DBG default: int BookingReportDateRangeModel::getBookingReportDateRangeQryList() 

2023-05-08 17:07:17.481 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:17.481 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:17.481 DBG default: virtual QHash<int, QByteArray> BookingReportDateRangeModel::roleNames() const 

2023-05-08 17:07:17.482 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:17.482 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:17.482 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:17.482 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-05-08 17:07:17.482 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:17.482 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:17.482 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:17.482 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-05-08" 

2023-05-08 17:07:17.482 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:17.482 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:17.482 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:17.482 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 7 

2023-05-08 17:07:19.336 DBG qml: mouse clicked left styleData.selected true
2023-05-08 17:07:19.336 DBG qml: clicked cell in table view  0
2023-05-08 17:07:19.336 DBG qml: clicked cell in table view coordinates =  QPointF(201, 41)
2023-05-08 17:07:19.336 DBG qml: clicked cell in table view clickIndex =  0
2023-05-08 17:07:19.336 DBG qml: clicked cell in table view  0
2023-05-08 17:07:19.336 DBG qml: clicked cell in table view  0
2023-05-08 17:07:19.336 DBG qml: Left 0
2023-05-08 17:07:19.336 DBG default: BookingReportDateRangeElement* BookingReportDateRangeModel::getBookingReportDateRangeElementAt(int) 

2023-05-08 17:07:19.336 DBG default: BookingReportDateRangeElement* BookingReportDateRangeModel::getBookingReportDateRangeElementAt(int) I am index  0 

2023-05-08 17:07:19.336 DBG default: BookingReportDateRangeElement* BookingReportDateRangeModel::getBookingReportDateRangeElementAt(int) "2023-05-08" 

2023-05-08 17:07:19.336 DBG default: BookingReportDateRangeElement* BookingReportDateRangeModel::getBookingReportDateRangeElementAt(int) 7 

2023-05-08 17:07:19.336 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:19.337 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:19.337 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:19.337 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:19.337 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.337 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.337 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-05-08 17:07:19.337 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:19.337 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.337 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.337 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-05-08" 

2023-05-08 17:07:19.337 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:19.337 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.337 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.337 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 7 

2023-05-08 17:07:19.338 DBG qml: /////////////////////////////2023-05-08
2023-05-08 17:07:19.338 DBG qml: In   1111111111onLoadSingleDateBookingPage(obj.date) 2023-05-08
2023-05-08 17:07:19.338 DBG qml:  Component.onDestruction of SevaBookingReportOnDateRange.qml
2023-05-08 17:07:19.341 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-05-08 17:07:19.342 WRN default: qrc:/ui/SevaBookingReportForSingleDate.qml:176:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-05-08 17:07:19.342 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.342 DBG default: 4 

2023-05-08 17:07:19.342 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.342 DBG default: 4 

2023-05-08 17:07:19.342 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.342 DBG default: 4 

2023-05-08 17:07:19.342 DBG default: virtual QHash<int, QByteArray> BookingReportModel::roleNames() const 

2023-05-08 17:07:19.345 DBG qml: Component.completed: of SevaAccountReportForSingleDate.qml
2023-05-08 17:07:19.346 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.346 DBG default: 4 

2023-05-08 17:07:19.346 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.346 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.346 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-05-08 17:07:19.347 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.347 DBG default: 4 

2023-05-08 17:07:19.347 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-05-08 17:07:19.347 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.347 DBG default: 4 

2023-05-08 17:07:19.347 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-05-08 17:07:19.348 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.348 DBG default: 4 

2023-05-08 17:07:19.348 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.348 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.348 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Nithya Archane" 

2023-05-08 17:07:19.348 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.348 DBG default: 4 

2023-05-08 17:07:19.348 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.348 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.348 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-05-08 17:07:19.350 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.350 DBG default: 4 

2023-05-08 17:07:19.350 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.350 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.350 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-05-08 17:07:19.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.351 DBG default: 4 

2023-05-08 17:07:19.351 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-05-08 17:07:19.351 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:07:19.351 DBG qml: Screen screenWidth size =1920
2023-05-08 17:07:19.351 DBG qml: Screen screenHeight size =1000
2023-05-08 17:07:19.351 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadSingleDateBookingPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:07:19.351 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadMonthWiseBookingPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:07:19.351 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadDateWiseBookingForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:07:19.351 DBG qml: ******** 08-05-2023
2023-05-08 17:07:19.351 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-05-08 17:07:19.351 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-05-08 17:07:19.351 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-05-08 17:07:19.351 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-05-08 17:07:19.351 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-05-08 17:07:19.351 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:07:19.351 DBG default: void ReportFilterElements::setISevaType(int) 

2023-05-08 17:07:19.351 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:07:19.351 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-05-08 17:07:19.351 DBG default: bool ReportFilterElements::bSevawise() const 

2023-05-08 17:07:19.351 DBG qml: In Loader of booking report page _rip.bSevawisetrue
2023-05-08 17:07:19.351 DBG default: bool ReportFilterElements::bDatewise() const 

2023-05-08 17:07:19.351 DBG qml: In Loader of booking report page _rip.bDatewisefalse
2023-05-08 17:07:19.351 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:19.351 DBG qml: In Loader of booking report page _rip.sSingleDate08-05-2023
2023-05-08 17:07:19.351 DBG default: const QString& ReportFilterElements::sStartDate() const 

2023-05-08 17:07:19.351 DBG qml: In Loader of booking report page  _rip.sStartDatenull
2023-05-08 17:07:19.351 DBG default: const QString& ReportFilterElements::sEndDate() const 

2023-05-08 17:07:19.351 DBG qml: In Loader of booking report page    _rip.sEndDate null
2023-05-08 17:07:19.351 DBG qml: In Loader of booking report page     _rip.iSelectedType0
2023-05-08 17:07:19.351 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:07:19.351 DBG qml: In Loader of booking report page    _rip.iSevaType 0
2023-05-08 17:07:19.351 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:07:19.351 DBG qml: In Loader of booking report page    _rip.sSevaNameAll
2023-05-08 17:07:19.351 DBG qml: In main
2023-05-08 17:07:19.351 DBG default: void SevaReport::generateBookReport(ReportFilterElements*) 

2023-05-08 17:07:19.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.351 DBG default: 0 

2023-05-08 17:07:19.352 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.352 DBG default: 0 

2023-05-08 17:07:19.352 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 0 

2023-05-08 17:07:19.352 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 

2023-05-08 17:07:19.352 DBG default: Selected Type  0 

2023-05-08 17:07:19.352 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:07:19.352 DBG default: Selected Month  0 

2023-05-08 17:07:19.352 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-08 17:07:19.352 DBG default: Selected Year  0 

2023-05-08 17:07:19.352 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:19.352 DBG default: Selected date  "08-05-2023" 

2023-05-08 17:07:19.352 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) Inside c date book rep 

2023-05-08 17:07:19.352 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:19.352 DBG default: QString BookingReportModel::FormatDate(QString) "08-05-2023" 

2023-05-08 17:07:19.352 DBG default: QString BookingReportModel::FormatDate(QString) QDate("2023-05-08") 

2023-05-08 17:07:19.352 DBG default: QString BookingReportModel::FormatDate(QString) "2023-05-08" 

2023-05-08 17:07:19.352 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-05-08 17:07:19.352 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:19.352 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-05-08" 

2023-05-08 17:07:19.352 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:07:19.352 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:07:19.352 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:19.352 DBG default: 
Changed format is:  "2023-05-08" 

2023-05-08 17:07:19.352 DBG default: In type 0:  

2023-05-08 17:07:19.352 DBG default:  Query string = "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:19.352 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-05-08 17:07:19.352 DBG default:  Query string = true 

2023-05-08 17:07:19.352 DBG default:  Query prepared successfully = true 

2023-05-08 17:07:19.352 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-05-08 17:07:19.352 DBG default:  Query string =2222222222222 "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:19.352 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:19.352 DBG default: 999999999999999999999999 "Nithya Archane" 

2023-05-08 17:07:19.352 DBG default: 88888888888888888888888888 0 

2023-05-08 17:07:19.352 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:19.352 DBG default: 999999999999999999999999 "Nithya Archane" 

2023-05-08 17:07:19.352 DBG default: 88888888888888888888888888 0 

2023-05-08 17:07:19.352 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:19.352 DBG default: 999999999999999999999999 "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:07:19.352 DBG default: 88888888888888888888888888 0 

2023-05-08 17:07:19.352 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:19.352 DBG default: 999999999999999999999999 "Poorna Pragna Hall Kanike" 

2023-05-08 17:07:19.352 DBG default: 88888888888888888888888888 0 

2023-05-08 17:07:19.352 DBG default: query while/********** 

2023-05-08 17:07:19.353 DBG default: query while/******1**** 

2023-05-08 17:07:19.353 DBG default: query while/*****2***** 

2023-05-08 17:07:19.353 DBG default: query while/*****3***** true 

2023-05-08 17:07:19.353 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Nithya Archane' and SEVATYPE = '0';" 

2023-05-08 17:07:19.353 DBG default: query ifeee/*****5***** 

2023-05-08 17:07:19.353 DBG default: query while/*****5***** 

2023-05-08 17:07:19.353 DBG default: query while/********** 

2023-05-08 17:07:19.353 DBG default: query while/******1**** 

2023-05-08 17:07:19.353 DBG default: query while/*****2***** 

2023-05-08 17:07:19.353 DBG default: query while/*****3***** true 

2023-05-08 17:07:19.353 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Nithya Archane' and SEVATYPE = '0';" 

2023-05-08 17:07:19.353 DBG default: query ifeee/*****5***** 

2023-05-08 17:07:19.353 DBG default: query while/*****5***** 

2023-05-08 17:07:19.353 DBG default: query while/********** 

2023-05-08 17:07:19.353 DBG default: query while/******1**** 

2023-05-08 17:07:19.353 DBG default: query while/*****2***** 

2023-05-08 17:07:19.353 DBG default: query while/*****3***** true 

2023-05-08 17:07:19.353 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi' and SEVATYPE = '2';" 

2023-05-08 17:07:19.353 DBG default: query ifeee/*****5***** 

2023-05-08 17:07:19.353 DBG default: query while/*****5***** 

2023-05-08 17:07:19.353 DBG default: query while/********** 

2023-05-08 17:07:19.353 DBG default: query while/******1**** 

2023-05-08 17:07:19.353 DBG default: query while/*****2***** 

2023-05-08 17:07:19.353 DBG default: query while/*****3***** true 

2023-05-08 17:07:19.353 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Poorna Pragna Hall Kanike' and SEVATYPE = '14';" 

2023-05-08 17:07:19.353 DBG default: query ifeee/*****5***** 

2023-05-08 17:07:19.353 DBG default: query while/*****5***** 

2023-05-08 17:07:19.353 DBG default:  Query string =@@@@@@@@@@@@@ QSqlError("", "", "") 

2023-05-08 17:07:19.353 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:19.353 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-05-08 17:07:19.353 DBG default: name-- "Suman N" 

2023-05-08 17:07:19.353 DBG default: gothra-- "Kashyapa" 

2023-05-08 17:07:19.353 DBG default: nakshatra-- "Ashwini" 

2023-05-08 17:07:19.353 DBG default: seva-- "Nithya Archane" 

2023-05-08 17:07:19.353 DBG default: mobile-- "9481914363" 

2023-05-08 17:07:19.353 DBG default: note-- "paid" 

2023-05-08 17:07:19.353 DBG default: prasada-- "0" 

2023-05-08 17:07:19.353 DBG default: before emitting signal  booking_report '''''''' 

2023-05-08 17:07:19.353 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-05-08 17:07:19.353 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.353 DBG default: 0 

2023-05-08 17:07:19.353 DBG default: "Suman N" 

2023-05-08 17:07:19.353 DBG default: "Kashyapa" 

2023-05-08 17:07:19.353 DBG default: "Ashwini" 

2023-05-08 17:07:19.353 DBG default: "Nithya Archane" 

2023-05-08 17:07:19.353 DBG default: "9481914363" 

2023-05-08 17:07:19.353 DBG default: "paid" 

2023-05-08 17:07:19.353 DBG default: after emitting signal  booking_report '''''''' 

2023-05-08 17:07:19.353 DBG default: after increment 1 

2023-05-08 17:07:19.353 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:19.353 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-05-08 17:07:19.353 DBG default: name-- "Dheerendra Purohit" 

2023-05-08 17:07:19.353 DBG default: gothra-- "Kashyapa" 

2023-05-08 17:07:19.353 DBG default: nakshatra-- "Ashwini" 

2023-05-08 17:07:19.353 DBG default: seva-- "Nithya Archane" 

2023-05-08 17:07:19.353 DBG default: mobile-- "9900541516" 

2023-05-08 17:07:19.353 DBG default: note-- "paid" 

2023-05-08 17:07:19.353 DBG default: prasada-- "0" 

2023-05-08 17:07:19.353 DBG default: before emitting signal  booking_report '''''''' 

2023-05-08 17:07:19.353 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-05-08 17:07:19.353 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.353 DBG default: 1 

2023-05-08 17:07:19.353 DBG default: "Dheerendra Purohit" 

2023-05-08 17:07:19.353 DBG default: "Kashyapa" 

2023-05-08 17:07:19.353 DBG default: "Ashwini" 

2023-05-08 17:07:19.353 DBG default: "Nithya Archane" 

2023-05-08 17:07:19.353 DBG default: "9900541516" 

2023-05-08 17:07:19.353 DBG default: "paid" 

2023-05-08 17:07:19.353 DBG default: after emitting signal  booking_report '''''''' 

2023-05-08 17:07:19.353 DBG default: after increment 2 

2023-05-08 17:07:19.353 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:19.353 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-05-08 17:07:19.353 DBG default: name-- "Prasanna Rao" 

2023-05-08 17:07:19.353 DBG default: gothra-- "Kashyapa" 

2023-05-08 17:07:19.353 DBG default: nakshatra-- "Ashwini" 

2023-05-08 17:07:19.353 DBG default: seva-- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:07:19.353 DBG default: mobile-- "9448493423" 

2023-05-08 17:07:19.353 DBG default: note-- "" 

2023-05-08 17:07:19.353 DBG default: prasada-- "2" 

2023-05-08 17:07:19.353 DBG default: before emitting signal  booking_report '''''''' 

2023-05-08 17:07:19.353 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-05-08 17:07:19.353 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.353 DBG default: 2 

2023-05-08 17:07:19.353 DBG default: "Prasanna Rao" 

2023-05-08 17:07:19.353 DBG default: "Kashyapa" 

2023-05-08 17:07:19.353 DBG default: "Ashwini" 

2023-05-08 17:07:19.353 DBG default: "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:07:19.353 DBG default: "9448493423" 

2023-05-08 17:07:19.353 DBG default: "" 

2023-05-08 17:07:19.353 DBG default: after emitting signal  booking_report '''''''' 

2023-05-08 17:07:19.353 DBG default: after increment 3 

2023-05-08 17:07:19.353 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,NOTE,sevabooking.SEVATYPE from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-05-08';" 

2023-05-08 17:07:19.353 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-05-08 17:07:19.353 DBG default: name-- "Manikantha" 

2023-05-08 17:07:19.353 DBG default: gothra-- "Kashyapa" 

2023-05-08 17:07:19.353 DBG default: nakshatra-- "Ashwini" 

2023-05-08 17:07:19.353 DBG default: seva-- "Poorna Pragna Hall Kanike" 

2023-05-08 17:07:19.353 DBG default: mobile-- "1234567890" 

2023-05-08 17:07:19.353 DBG default: note-- "" 

2023-05-08 17:07:19.353 DBG default: prasada-- "14" 

2023-05-08 17:07:19.353 DBG default: before emitting signal  booking_report '''''''' 

2023-05-08 17:07:19.353 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-05-08 17:07:19.354 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.354 DBG default: 3 

2023-05-08 17:07:19.354 DBG default: "Manikantha" 

2023-05-08 17:07:19.354 DBG default: "Kashyapa" 

2023-05-08 17:07:19.354 DBG default: "Ashwini" 

2023-05-08 17:07:19.354 DBG default: "Poorna Pragna Hall Kanike" 

2023-05-08 17:07:19.354 DBG default: "1234567890" 

2023-05-08 17:07:19.354 DBG default: "" 

2023-05-08 17:07:19.354 DBG default: after emitting signal  booking_report '''''''' 

2023-05-08 17:07:19.354 DBG default: after increment 4 

2023-05-08 17:07:19.354 DBG default: bool ReportFilterElements::bDatewise() const 

2023-05-08 17:07:19.354 DBG default: false 

2023-05-08 17:07:19.354 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:07:19.354 DBG default: "2023-05-08" 

2023-05-08 17:07:19.354 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.355 DBG default: 4 

2023-05-08 17:07:19.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.355 DBG default: 4 

2023-05-08 17:07:19.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.355 DBG default: 4 

2023-05-08 17:07:19.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-05-08 17:07:19.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.355 DBG default: 4 

2023-05-08 17:07:19.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-05-08 17:07:19.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.355 DBG default: 4 

2023-05-08 17:07:19.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-05-08 17:07:19.356 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.356 DBG default: 4 

2023-05-08 17:07:19.356 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Nithya Archane" 

2023-05-08 17:07:19.356 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.356 DBG default: 4 

2023-05-08 17:07:19.356 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-05-08 17:07:19.356 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.356 DBG default: 4 

2023-05-08 17:07:19.356 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-05-08 17:07:19.356 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.356 DBG default: 4 

2023-05-08 17:07:19.356 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-05-08 17:07:19.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.357 DBG default: 4 

2023-05-08 17:07:19.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.357 DBG default: 4 

2023-05-08 17:07:19.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.357 DBG default: 4 

2023-05-08 17:07:19.357 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dheerendra Purohit" 

2023-05-08 17:07:19.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.357 DBG default: 4 

2023-05-08 17:07:19.357 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-05-08 17:07:19.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: 4 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: 4 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Nithya Archane" 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: 4 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: 4 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9900541516" 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: 4 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: 4 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: 4 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: 4 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Prasanna Rao" 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: 4 

2023-05-08 17:07:19.358 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: 4 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: 4 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: 4 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: 4 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9448493423" 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: 4 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: 4 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: 4 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: 4 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Manikantha" 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: 4 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: 4 

2023-05-08 17:07:19.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: 4 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Poorna Pragna Hall Kanike" 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: 4 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: 4 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "1234567890" 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: 4 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: 4 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: 4 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: 4 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: 4 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: 4 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: 4 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Nithya Archane" 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: 4 

2023-05-08 17:07:19.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-05-08 17:07:19.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.361 DBG default: 4 

2023-05-08 17:07:19.361 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-05-08 17:07:19.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.361 DBG default: 4 

2023-05-08 17:07:19.361 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-05-08 17:07:19.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.361 DBG default: 4 

2023-05-08 17:07:19.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.361 DBG default: 4 

2023-05-08 17:07:19.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.361 DBG default: 4 

2023-05-08 17:07:19.361 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dheerendra Purohit" 

2023-05-08 17:07:19.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.361 DBG default: 4 

2023-05-08 17:07:19.361 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-05-08 17:07:19.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.361 DBG default: 4 

2023-05-08 17:07:19.361 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: 4 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Nithya Archane" 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: 4 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: 4 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9900541516" 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: 4 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: 4 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: 4 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: 4 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Prasanna Rao" 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: 4 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: 4 

2023-05-08 17:07:19.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-05-08 17:07:19.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.363 DBG default: 4 

2023-05-08 17:07:19.363 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:07:19.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.363 DBG default: 4 

2023-05-08 17:07:19.363 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-05-08 17:07:19.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.363 DBG default: 4 

2023-05-08 17:07:19.363 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9448493423" 

2023-05-08 17:07:19.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.363 DBG default: 4 

2023-05-08 17:07:19.363 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-05-08 17:07:19.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.363 DBG default: 4 

2023-05-08 17:07:19.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.363 DBG default: 4 

2023-05-08 17:07:19.364 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.364 DBG default: 4 

2023-05-08 17:07:19.364 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Manikantha" 

2023-05-08 17:07:19.364 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.364 DBG default: 4 

2023-05-08 17:07:19.364 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-05-08 17:07:19.364 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.364 DBG default: 4 

2023-05-08 17:07:19.364 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-05-08 17:07:19.364 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.364 DBG default: 4 

2023-05-08 17:07:19.364 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Poorna Pragna Hall Kanike" 

2023-05-08 17:07:19.365 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.365 DBG default: 4 

2023-05-08 17:07:19.365 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-05-08 17:07:19.365 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.365 DBG default: 4 

2023-05-08 17:07:19.365 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "1234567890" 

2023-05-08 17:07:19.365 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:19.365 DBG default: 4 

2023-05-08 17:07:19.365 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:19.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:19.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-05-08 17:07:48.181 DBG qml: Esc pressed in SevaAccountReportForSingleDate 
2023-05-08 17:07:48.181 DBG qml: In onLoadDateWiseBookingPage
2023-05-08 17:07:48.182 DBG qml:  Component.onDestruction of SevaAccountReportForSingleDate.qml
2023-05-08 17:07:48.182 DBG default: void SevaReport::resetBookingDateRangeModel() 

2023-05-08 17:07:48.182 DBG default: void BookingReportDateRangeModel::resetBookingDateRangeModel() 

2023-05-08 17:07:48.186 WRN default: qrc:/ui/SevaBookingReportOnDateRange.qml:276:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-05-08 17:07:48.187 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:48.187 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:48.187 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:48.187 DBG default: virtual QHash<int, QByteArray> BookingReportDateRangeModel::roleNames() const 

2023-05-08 17:07:48.190 DBG qml: Component.completed: of SevaBookingReportOnDateRange.qml
2023-05-08 17:07:48.190 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:48.190 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:48.190 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:48.190 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-05-08 17:07:48.190 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:48.190 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:48.190 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:48.190 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-05-08" 

2023-05-08 17:07:48.192 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:07:48.192 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-05-08 17:07:48.192 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-05-08 17:07:48.192 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 7 

2023-05-08 17:07:48.192 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:07:48.192 DBG qml: Screen screenWidth size =1920
2023-05-08 17:07:48.192 DBG qml: Screen screenHeight size =1000
2023-05-08 17:07:48.192 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadDateWiseBookingPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:07:48.192 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadDateWiseBookingForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:07:48.938 DBG qml: Esc pressed in  seva booking report on Date Range pageMay
2023-05-08 17:07:48.938 DBG qml: Esc pressed in  seva booking report on Date Range page loadMenuPage();
2023-05-08 17:07:48.938 DBG qml: In onLoadMenuPage
2023-05-08 17:07:48.938 DBG qml: loading Menu page from main
2023-05-08 17:07:48.938 DBG qml: Closing the report
2023-05-08 17:07:48.939 DBG qml: reset DateRangeModel
2023-05-08 17:07:48.939 DBG default: void BookingReportModel::resetBookingModel() 

2023-05-08 17:07:48.939 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-05-08 17:07:48.939 DBG default: 0 

2023-05-08 17:07:48.940 DBG qml:  Component.onDestruction of SevaBookingReportOnDateRange.qml
2023-05-08 17:07:48.951 DBG qml: the accounts enable true
2023-05-08 17:07:48.951 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:07:48.951 DBG qml: Screen screenWidth size =1920
2023-05-08 17:07:48.951 DBG qml: Screen screenHeight size =1000
2023-05-08 17:07:48.951 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:48.951 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:48.951 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:48.951 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:49.839 DBG qml: loading from main
2023-05-08 17:07:49.862 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:49.862 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:49.862 DBG qml: admin button clicked
2023-05-08 17:07:49.862 DBG qml: this is admin
2023-05-08 17:07:51.206 DBG qml: User Management button clicked
2023-05-08 17:07:51.206 DBG qml: User Management loading
2023-05-08 17:07:51.240 DBG qml: focus changed
2023-05-08 17:07:51.240 DBG qml: focus changed
2023-05-08 17:07:51.242 WRN default: qrc:/ui/Admin/UserManagement.qml:150:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-05-08 17:07:51.587 DBG qml: loading Menu page from main
2023-05-08 17:07:51.594 DBG qml: the accounts enable true
2023-05-08 17:07:51.595 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:07:51.595 DBG qml: Screen screenWidth size =1920
2023-05-08 17:07:51.595 DBG qml: Screen screenHeight size =1000
2023-05-08 17:07:51.595 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:51.595 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:51.595 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:51.595 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:07:52.494 DBG qml: Seva Booking Button Clicked
2023-05-08 17:07:52.494 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.494 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.494 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.494 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.494 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.494 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-08 17:07:52.494 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.494 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.494 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.494 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.494 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:52.494 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:52.494 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9038)) 

2023-05-08 17:07:52.494 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:52.495 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:52.495 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.495 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.495 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.495 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.495 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1 

2023-05-08 17:07:52.495 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.495 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.495 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.495 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.495 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-05-08 17:07:52.495 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))) 
(SevaName(0x9176cb8), SevaName(0x9176c18), SevaName(0x9176d58), SevaName(0x91771b8), SevaName(0x9177208), SevaName(0x91d7558), SevaName(0x91d7828), SevaName(0x91d8368), SevaName(0x91d8188), SevaName(0x91d8548), SevaName(0x91d7fa8), SevaName(0x91d8f48), SevaName(0x91d8ea8), SevaName(0x91d8e08), SevaName(0x91d9088), SevaName(0x91d90d8), SevaName(0x91d9308), SevaName(0x9200100), SevaName(0x92001a0)) 

2023-05-08 17:07:52.495 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9176cb8), SevaName(0x9176c18), SevaName(0x9176d58), SevaName(0x91771b8), SevaName(0x9177208), SevaName(0x91d7558), SevaName(0x91d7828), SevaName(0x91d8368), SevaName(0x91d8188), SevaName(0x91d8548), SevaName(0x91d7fa8), SevaName(0x91d8f48), SevaName(0x91d8ea8), SevaName(0x91d8e08), SevaName(0x91d9088), SevaName(0x91d90d8), SevaName(0x91d9308), SevaName(0x9200100), SevaName(0x92001a0)) 

2023-05-08 17:07:52.495 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-05-08 17:07:52.495 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x9176cb8))(3, SevaName(0x9176c18))(4, SevaName(0x9176d58))(6, SevaName(0x91771b8))(7, SevaName(0x9177208))(18, SevaName(0x91d7558))(37, SevaName(0x91d7828))(47, SevaName(0x91d8368))(48, SevaName(0x91d8188))(49, SevaName(0x91d8548))(75, SevaName(0x91d7fa8))(85, SevaName(0x91d8f48))(86, SevaName(0x91d8ea8))(101, SevaName(0x91d8e08))(103, SevaName(0x91d9088))(104, SevaName(0x91d90d8))(108, SevaName(0x91d9308))(121, SevaName(0x9200100))(125, SevaName(0x92001a0))) 
(SevaName(0x9176cb8), SevaName(0x9176c18), SevaName(0x9176d58), SevaName(0x91771b8), SevaName(0x9177208), SevaName(0x91d7558), SevaName(0x91d7828), SevaName(0x91d8368), SevaName(0x91d8188), SevaName(0x91d8548), SevaName(0x91d7fa8), SevaName(0x91d8f48), SevaName(0x91d8ea8), SevaName(0x91d8e08), SevaName(0x91d9088), SevaName(0x91d90d8), SevaName(0x91d9308), SevaName(0x9200100), SevaName(0x92001a0)) 

2023-05-08 17:07:52.495 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.495 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.495 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.495 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.495 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 2 

2023-05-08 17:07:52.495 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.495 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.495 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.495 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.495 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-05-08 17:07:52.495 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))) 
(SevaName(0x91d7eb8), SevaName(0x91d7ff8), SevaName(0x91d85e8), SevaName(0x91d8138), SevaName(0x91d8098), SevaName(0x91d8688), SevaName(0x91d84f8), SevaName(0x91d86d8), SevaName(0x91d83b8), SevaName(0x91d8638), SevaName(0x91d8228), SevaName(0x91d8278), SevaName(0x91d8728), SevaName(0x91d82c8), SevaName(0x91d87c8), SevaName(0x9200010)) 

2023-05-08 17:07:52.495 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d7eb8), SevaName(0x91d7ff8), SevaName(0x91d85e8), SevaName(0x91d8138), SevaName(0x91d8098), SevaName(0x91d8688), SevaName(0x91d84f8), SevaName(0x91d86d8), SevaName(0x91d83b8), SevaName(0x91d8638), SevaName(0x91d8228), SevaName(0x91d8278), SevaName(0x91d8728), SevaName(0x91d82c8), SevaName(0x91d87c8), SevaName(0x9200010)) 

2023-05-08 17:07:52.495 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-05-08 17:07:52.495 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x91d7eb8))(55, SevaName(0x91d7ff8))(56, SevaName(0x91d85e8))(57, SevaName(0x91d8138))(58, SevaName(0x91d8098))(59, SevaName(0x91d8688))(60, SevaName(0x91d84f8))(61, SevaName(0x91d86d8))(62, SevaName(0x91d83b8))(63, SevaName(0x91d8638))(64, SevaName(0x91d8228))(65, SevaName(0x91d8278))(66, SevaName(0x91d8728))(67, SevaName(0x91d82c8))(68, SevaName(0x91d87c8))(120, SevaName(0x9200010))) 
(SevaName(0x91d7eb8), SevaName(0x91d7ff8), SevaName(0x91d85e8), SevaName(0x91d8138), SevaName(0x91d8098), SevaName(0x91d8688), SevaName(0x91d84f8), SevaName(0x91d86d8), SevaName(0x91d83b8), SevaName(0x91d8638), SevaName(0x91d8228), SevaName(0x91d8278), SevaName(0x91d8728), SevaName(0x91d82c8), SevaName(0x91d87c8), SevaName(0x9200010)) 

2023-05-08 17:07:52.495 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.495 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.495 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.495 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.495 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 3 

2023-05-08 17:07:52.495 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.495 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.495 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.495 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.495 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-05-08 17:07:52.495 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))) 
(SevaName(0x91d7d28), SevaName(0x91d7dc8), SevaName(0x91d75f8), SevaName(0x91d77d8), SevaName(0x91d7738), SevaName(0x91d7d78), SevaName(0x91d7be8), SevaName(0x91d7698), SevaName(0x91d7788), SevaName(0x91d7e18), SevaName(0x91d7c38), SevaName(0x91d76e8), SevaName(0x91d7878), SevaName(0x91d78c8), SevaName(0x91d7aa8), SevaName(0x91d7918), SevaName(0x91d79b8), SevaName(0x91d7af8)) 

2023-05-08 17:07:52.495 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d7d28), SevaName(0x91d7dc8), SevaName(0x91d75f8), SevaName(0x91d77d8), SevaName(0x91d7738), SevaName(0x91d7d78), SevaName(0x91d7be8), SevaName(0x91d7698), SevaName(0x91d7788), SevaName(0x91d7e18), SevaName(0x91d7c38), SevaName(0x91d76e8), SevaName(0x91d7878), SevaName(0x91d78c8), SevaName(0x91d7aa8), SevaName(0x91d7918), SevaName(0x91d79b8), SevaName(0x91d7af8)) 

2023-05-08 17:07:52.495 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-05-08 17:07:52.495 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x91d7d28))(24, SevaName(0x91d7dc8))(25, SevaName(0x91d75f8))(26, SevaName(0x91d77d8))(27, SevaName(0x91d7738))(28, SevaName(0x91d7d78))(29, SevaName(0x91d7be8))(30, SevaName(0x91d7698))(31, SevaName(0x91d7788))(34, SevaName(0x91d7e18))(35, SevaName(0x91d7c38))(36, SevaName(0x91d76e8))(38, SevaName(0x91d7878))(39, SevaName(0x91d78c8))(40, SevaName(0x91d7aa8))(41, SevaName(0x91d7918))(43, SevaName(0x91d79b8))(44, SevaName(0x91d7af8))) 
(SevaName(0x91d7d28), SevaName(0x91d7dc8), SevaName(0x91d75f8), SevaName(0x91d77d8), SevaName(0x91d7738), SevaName(0x91d7d78), SevaName(0x91d7be8), SevaName(0x91d7698), SevaName(0x91d7788), SevaName(0x91d7e18), SevaName(0x91d7c38), SevaName(0x91d76e8), SevaName(0x91d7878), SevaName(0x91d78c8), SevaName(0x91d7aa8), SevaName(0x91d7918), SevaName(0x91d79b8), SevaName(0x91d7af8)) 

2023-05-08 17:07:52.495 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.496 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.496 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.496 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.496 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 4 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.496 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))) 
(SevaName(0x91d7cd8), SevaName(0x91d7648), SevaName(0x91d74b8), SevaName(0x91d7f08), SevaName(0x91d8408), SevaName(0x91d84a8), SevaName(0x91d8868), SevaName(0x91d8048)) 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d7cd8), SevaName(0x91d7648), SevaName(0x91d74b8), SevaName(0x91d7f08), SevaName(0x91d8408), SevaName(0x91d84a8), SevaName(0x91d8868), SevaName(0x91d8048)) 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x91d7cd8))(13, SevaName(0x91d7648))(14, SevaName(0x91d74b8))(70, SevaName(0x91d7f08))(71, SevaName(0x91d8408))(72, SevaName(0x91d84a8))(73, SevaName(0x91d8868))(76, SevaName(0x91d8048))) 
(SevaName(0x91d7cd8), SevaName(0x91d7648), SevaName(0x91d74b8), SevaName(0x91d7f08), SevaName(0x91d8408), SevaName(0x91d84a8), SevaName(0x91d8868), SevaName(0x91d8048)) 

2023-05-08 17:07:52.496 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.496 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.496 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.496 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.496 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 5 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.496 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))) 
(SevaName(0x91d8ae8), SevaName(0x91d8908), SevaName(0x91d8e58)) 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d8ae8), SevaName(0x91d8908), SevaName(0x91d8e58)) 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x91d8ae8))(79, SevaName(0x91d8908))(80, SevaName(0x91d8e58))) 
(SevaName(0x91d8ae8), SevaName(0x91d8908), SevaName(0x91d8e58)) 

2023-05-08 17:07:52.496 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.496 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.496 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.496 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.496 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 6 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.496 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))) 
(SevaName(0x91d9128), SevaName(0x91d89f8), SevaName(0x91d8a48), SevaName(0x91d8fe8), SevaName(0x91d8cc8)) 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9128), SevaName(0x91d89f8), SevaName(0x91d8a48), SevaName(0x91d8fe8), SevaName(0x91d8cc8)) 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x91d9128))(82, SevaName(0x91d89f8))(83, SevaName(0x91d8a48))(84, SevaName(0x91d8fe8))(89, SevaName(0x91d8cc8))) 
(SevaName(0x91d9128), SevaName(0x91d89f8), SevaName(0x91d8a48), SevaName(0x91d8fe8), SevaName(0x91d8cc8)) 

2023-05-08 17:07:52.496 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.496 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.496 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.496 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.496 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 7 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.496 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))) 
(SevaName(0x91d7f58), SevaName(0x91d8b38), SevaName(0x91d8c78), SevaName(0x91d8db8), SevaName(0x91d8958), SevaName(0x91d8a98), SevaName(0x91d88b8), SevaName(0x91d89a8), SevaName(0x91d8f98), SevaName(0x91d8b88), SevaName(0x91d8bd8)) 

2023-05-08 17:07:52.496 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d7f58), SevaName(0x91d8b38), SevaName(0x91d8c78), SevaName(0x91d8db8), SevaName(0x91d8958), SevaName(0x91d8a98), SevaName(0x91d88b8), SevaName(0x91d89a8), SevaName(0x91d8f98), SevaName(0x91d8b88), SevaName(0x91d8bd8)) 

2023-05-08 17:07:52.496 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x91d7f58))(90, SevaName(0x91d8b38))(91, SevaName(0x91d8c78))(92, SevaName(0x91d8db8))(93, SevaName(0x91d8958))(94, SevaName(0x91d8a98))(95, SevaName(0x91d88b8))(96, SevaName(0x91d89a8))(97, SevaName(0x91d8f98))(98, SevaName(0x91d8b88))(99, SevaName(0x91d8bd8))) 
(SevaName(0x91d7f58), SevaName(0x91d8b38), SevaName(0x91d8c78), SevaName(0x91d8db8), SevaName(0x91d8958), SevaName(0x91d8a98), SevaName(0x91d88b8), SevaName(0x91d89a8), SevaName(0x91d8f98), SevaName(0x91d8b88), SevaName(0x91d8bd8)) 

2023-05-08 17:07:52.497 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.497 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.497 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.497 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.497 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 8 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.497 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))) 
(SevaName(0x91d7c88), SevaName(0x91d7a58), SevaName(0x91d93a8)) 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d7c88), SevaName(0x91d7a58), SevaName(0x91d93a8)) 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x91d7c88))(17, SevaName(0x91d7a58))(109, SevaName(0x91d93a8))) 
(SevaName(0x91d7c88), SevaName(0x91d7a58), SevaName(0x91d93a8)) 

2023-05-08 17:07:52.497 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.497 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.497 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.497 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.497 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 9 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.497 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))) 
(SevaName(0x9176da8), SevaName(0x91770c8), SevaName(0x91d7b98), SevaName(0x91d7b48), SevaName(0x91d8598), SevaName(0x91d8458), SevaName(0x91d92b8), SevaName(0x91fff20), SevaName(0x9200290), SevaName(0x91ffb10)) 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9176da8), SevaName(0x91770c8), SevaName(0x91d7b98), SevaName(0x91d7b48), SevaName(0x91d8598), SevaName(0x91d8458), SevaName(0x91d92b8), SevaName(0x91fff20), SevaName(0x9200290), SevaName(0x91ffb10)) 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x9176da8))(10, SevaName(0x91770c8))(19, SevaName(0x91d7b98))(46, SevaName(0x91d7b48))(52, SevaName(0x91d8598))(53, SevaName(0x91d8458))(110, SevaName(0x91d92b8))(113, SevaName(0x91fff20))(123, SevaName(0x9200290))(127, SevaName(0x91ffb10))) 
(SevaName(0x9176da8), SevaName(0x91770c8), SevaName(0x91d7b98), SevaName(0x91d7b48), SevaName(0x91d8598), SevaName(0x91d8458), SevaName(0x91d92b8), SevaName(0x91fff20), SevaName(0x9200290), SevaName(0x91ffb10)) 

2023-05-08 17:07:52.497 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.497 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.497 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.497 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.497 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 10 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.497 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))) 
(SevaName(0x91d8318), SevaName(0x9200240)) 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d8318), SevaName(0x9200240)) 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x91d8318))(112, SevaName(0x9200240))) 
(SevaName(0x91d8318), SevaName(0x9200240)) 

2023-05-08 17:07:52.497 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.497 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.497 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.497 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.497 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 11 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.497 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x9176df8))) 
(SevaName(0x9176df8)) 

2023-05-08 17:07:52.497 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9176df8)) 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-05-08 17:07:52.497 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x9176df8))) 
(SevaName(0x9176df8)) 

2023-05-08 17:07:52.497 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.498 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.498 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.498 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.498 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 12 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.498 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x9177118))) 
(SevaName(0x9177118)) 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9177118)) 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x9177118))) 
(SevaName(0x9177118)) 

2023-05-08 17:07:52.498 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.498 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.498 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.498 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.498 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 13 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.498 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x91d7508))) 
(SevaName(0x91d7508)) 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d7508)) 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x91d7508))) 
(SevaName(0x91d7508)) 

2023-05-08 17:07:52.498 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.498 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.498 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.498 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.498 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 14 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.498 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))) 
(SevaName(0x91d75a8), SevaName(0x91ffed0)) 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d75a8), SevaName(0x91ffed0)) 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x91d75a8))(111, SevaName(0x91ffed0))) 
(SevaName(0x91d75a8), SevaName(0x91ffed0)) 

2023-05-08 17:07:52.498 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.498 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.498 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.498 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.498 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 15 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.498 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))) 
(SevaName(0x91d7968), SevaName(0x91d8778), SevaName(0x91d9178), SevaName(0x91d93f8), SevaName(0x9200150)) 

2023-05-08 17:07:52.498 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d7968), SevaName(0x91d8778), SevaName(0x91d9178), SevaName(0x91d93f8), SevaName(0x9200150)) 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-05-08 17:07:52.498 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x91d7968))(51, SevaName(0x91d8778))(105, SevaName(0x91d9178))(106, SevaName(0x91d93f8))(124, SevaName(0x9200150))) 
(SevaName(0x91d7968), SevaName(0x91d8778), SevaName(0x91d9178), SevaName(0x91d93f8), SevaName(0x9200150)) 

2023-05-08 17:07:52.498 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.499 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 16 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.499 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))) 
(SevaName(0x91d7a08), SevaName(0x91d8818), SevaName(0x91d8c28), SevaName(0x92002e0)) 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d7a08), SevaName(0x91d8818), SevaName(0x91d8c28), SevaName(0x92002e0)) 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x91d7a08))(69, SevaName(0x91d8818))(100, SevaName(0x91d8c28))(126, SevaName(0x92002e0))) 
(SevaName(0x91d7a08), SevaName(0x91d8818), SevaName(0x91d8c28), SevaName(0x92002e0)) 

2023-05-08 17:07:52.499 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.499 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 18 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.499 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x91d8ef8))) 
(SevaName(0x91d8ef8)) 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d8ef8)) 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x91d8ef8))) 
(SevaName(0x91d8ef8)) 

2023-05-08 17:07:52.499 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.499 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 19 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.499 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))) 
(SevaName(0x91d9218), SevaName(0x91d9268)) 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9218), SevaName(0x91d9268)) 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x91d9218))(88, SevaName(0x91d9268))) 
(SevaName(0x91d9218), SevaName(0x91d9268)) 

2023-05-08 17:07:52.499 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.499 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 20 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.499 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x91d9358))) 
(SevaName(0x91d9358)) 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9358)) 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x91d9358))) 
(SevaName(0x91d9358)) 

2023-05-08 17:07:52.499 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.499 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.499 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 22 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.499 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.499 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.499 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x9200060))) 
(SevaName(0x9200060)) 

2023-05-08 17:07:52.500 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9200060)) 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x9200060))) 
(SevaName(0x9200060)) 

2023-05-08 17:07:52.500 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.500 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.500 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.500 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.500 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 25 

2023-05-08 17:07:52.500 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.500 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.500 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.500 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 25 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-05-08 17:07:52.500 DBG default: void SevaListViewModel::initSevaList(int) () 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 25 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-05-08 17:07:52.500 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.500 DBG qml: seveListModel  for if((sevaProxy.getSevaModel(100).getSevaListViewModel/*.getSevaListViewModel*/===0))
2023-05-08 17:07:52.500 DBG qml:  countIfSevaNamesPresentInSevaTypes++ 1
2023-05-08 17:07:52.500 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.500 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.500 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.500 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 26 

2023-05-08 17:07:52.500 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.500 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.500 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.500 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 26 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-05-08 17:07:52.500 DBG default: void SevaListViewModel::initSevaList(int) () 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 26 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-05-08 17:07:52.500 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.500 DBG qml: seveListModel  for if((sevaProxy.getSevaModel(100).getSevaListViewModel/*.getSevaListViewModel*/===0))
2023-05-08 17:07:52.500 DBG qml:  countIfSevaNamesPresentInSevaTypes++ 2
2023-05-08 17:07:52.500 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.500 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.500 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.500 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1000 

2023-05-08 17:07:52.500 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.500 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.500 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.500 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1000 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))) 
(SevaName(0x91ff660), SevaName(0x91ffb60), SevaName(0x91ff520), SevaName(0x91ff840), SevaName(0x91ff610), SevaName(0x91ffca0), SevaName(0x91ffc50), SevaName(0x91ff570), SevaName(0x91ffe80), SevaName(0x91ff4d0), SevaName(0x91ff9d0), SevaName(0x91ffa70), SevaName(0x91ffcf0), SevaName(0x91ff750), SevaName(0x91ff890), SevaName(0x91ffd40), SevaName(0x91ffbb0), SevaName(0x91ffc00), SevaName(0x91ffa20), SevaName(0x91ffac0), SevaName(0x91ffd90), SevaName(0x91ffde0), SevaName(0x91ffe30), SevaName(0x91ff6b0), SevaName(0x91ff700), SevaName(0x91ff7a0), SevaName(0x91ff5c0), SevaName(0x91ff7f0), SevaName(0x91ff930), SevaName(0x91ff980), SevaName(0x91de140), SevaName(0x91de410)) 

2023-05-08 17:07:52.500 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91ff660), SevaName(0x91ffb60), SevaName(0x91ff520), SevaName(0x91ff840), SevaName(0x91ff610), SevaName(0x91ffca0), SevaName(0x91ffc50), SevaName(0x91ff570), SevaName(0x91ffe80), SevaName(0x91ff4d0), SevaName(0x91ff9d0), SevaName(0x91ffa70), SevaName(0x91ffcf0), SevaName(0x91ff750), SevaName(0x91ff890), SevaName(0x91ffd40), SevaName(0x91ffbb0), SevaName(0x91ffc00), SevaName(0x91ffa20), SevaName(0x91ffac0), SevaName(0x91ffd90), SevaName(0x91ffde0), SevaName(0x91ffe30), SevaName(0x91ff6b0), SevaName(0x91ff700), SevaName(0x91ff7a0), SevaName(0x91ff5c0), SevaName(0x91ff7f0), SevaName(0x91ff930), SevaName(0x91ff980), SevaName(0x91de140), SevaName(0x91de410)) 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1000 

2023-05-08 17:07:52.500 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((1001, SevaName(0x91ff660))(1002, SevaName(0x91ffb60))(1003, SevaName(0x91ff520))(1004, SevaName(0x91ff840))(1005, SevaName(0x91ff610))(1006, SevaName(0x91ffca0))(1007, SevaName(0x91ffc50))(1008, SevaName(0x91ff570))(1010, SevaName(0x91ffe80))(1011, SevaName(0x91ff4d0))(1012, SevaName(0x91ff9d0))(1013, SevaName(0x91ffa70))(1014, SevaName(0x91ffcf0))(1015, SevaName(0x91ff750))(1016, SevaName(0x91ff890))(1017, SevaName(0x91ffd40))(1018, SevaName(0x91ffbb0))(1019, SevaName(0x91ffc00))(1020, SevaName(0x91ffa20))(1021, SevaName(0x91ffac0))(1022, SevaName(0x91ffd90))(1023, SevaName(0x91ffde0))(1024, SevaName(0x91ffe30))(1025, SevaName(0x91ff6b0))(1026, SevaName(0x91ff700))(1027, SevaName(0x91ff7a0))(1028, SevaName(0x91ff5c0))(1029, SevaName(0x91ff7f0))(1030, SevaName(0x91ff930))(1031, SevaName(0x91ff980))(1032, SevaName(0x91de140))(1033, SevaName(0x91de410))) 
(SevaName(0x91ff660), SevaName(0x91ffb60), SevaName(0x91ff520), SevaName(0x91ff840), SevaName(0x91ff610), SevaName(0x91ffca0), SevaName(0x91ffc50), SevaName(0x91ff570), SevaName(0x91ffe80), SevaName(0x91ff4d0), SevaName(0x91ff9d0), SevaName(0x91ffa70), SevaName(0x91ffcf0), SevaName(0x91ff750), SevaName(0x91ff890), SevaName(0x91ffd40), SevaName(0x91ffbb0), SevaName(0x91ffc00), SevaName(0x91ffa20), SevaName(0x91ffac0), SevaName(0x91ffd90), SevaName(0x91ffde0), SevaName(0x91ffe30), SevaName(0x91ff6b0), SevaName(0x91ff700), SevaName(0x91ff7a0), SevaName(0x91ff5c0), SevaName(0x91ff7f0), SevaName(0x91ff930), SevaName(0x91ff980), SevaName(0x91de140), SevaName(0x91de410)) 

2023-05-08 17:07:52.500 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.500 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.501 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.501 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.501 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 2000 

2023-05-08 17:07:52.501 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.501 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.501 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.501 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.501 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2000 

2023-05-08 17:07:52.501 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))(2003, SevaName(0x91de230))(2004, SevaName(0x91de190))(2005, SevaName(0x91ddf60))(2006, SevaName(0x91de280))(2007, SevaName(0x91de2d0))(2009, SevaName(0x91ddfb0))(2010, SevaName(0x91de370))(2011, SevaName(0x91de0a0))(2012, SevaName(0x91de000))(2013, SevaName(0x91de050))(2014, SevaName(0x91de0f0))) 
(SevaName(0x91de1e0), SevaName(0x91ddf10), SevaName(0x91de230), SevaName(0x91de190), SevaName(0x91ddf60), SevaName(0x91de280), SevaName(0x91de2d0), SevaName(0x91ddfb0), SevaName(0x91de370), SevaName(0x91de0a0), SevaName(0x91de000), SevaName(0x91de050), SevaName(0x91de0f0)) 

2023-05-08 17:07:52.501 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91de1e0), SevaName(0x91ddf10), SevaName(0x91de230), SevaName(0x91de190), SevaName(0x91ddf60), SevaName(0x91de280), SevaName(0x91de2d0), SevaName(0x91ddfb0), SevaName(0x91de370), SevaName(0x91de0a0), SevaName(0x91de000), SevaName(0x91de050), SevaName(0x91de0f0)) 

2023-05-08 17:07:52.501 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2000 

2023-05-08 17:07:52.501 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2001, SevaName(0x91de1e0))(2002, SevaName(0x91ddf10))(2003, SevaName(0x91de230))(2004, SevaName(0x91de190))(2005, SevaName(0x91ddf60))(2006, SevaName(0x91de280))(2007, SevaName(0x91de2d0))(2009, SevaName(0x91ddfb0))(2010, SevaName(0x91de370))(2011, SevaName(0x91de0a0))(2012, SevaName(0x91de000))(2013, SevaName(0x91de050))(2014, SevaName(0x91de0f0))) 
(SevaName(0x91de1e0), SevaName(0x91ddf10), SevaName(0x91de230), SevaName(0x91de190), SevaName(0x91ddf60), SevaName(0x91de280), SevaName(0x91de2d0), SevaName(0x91ddfb0), SevaName(0x91de370), SevaName(0x91de0a0), SevaName(0x91de000), SevaName(0x91de050), SevaName(0x91de0f0)) 

2023-05-08 17:07:52.501 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.501 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.501 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.501 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.501 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.501 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.501 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-05-08 17:07:52.501 DBG qml:  if of <<< countIfSevaNamesPresentInSevaTypes++ 2
2023-05-08 17:07:52.501 DBG qml: clicked on Sevabooking
2023-05-08 17:07:52.518 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.526 DBG qml: state changedinitial
2023-05-08 17:07:52.530 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-05-08 17:07:52.530 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Cannot assign to non-existent property "onDefaultDates"
2023-05-08 17:07:52.530 WRN default: qrc:/ui/SevaDateTime.qml:97:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-05-08 17:07:52.530 WRN default: qrc:/ui/SevaDateTime.qml:91:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-05-08 17:07:52.586 DBG qml: my seva delegate is created
2023-05-08 17:07:52.586 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:52.586 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:52.586 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:52.586 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:52.586 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:07:52.586 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-08 17:07:52.586 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.586 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.586 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.586 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.586 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:52.586 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:52.586 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9038)) 

2023-05-08 17:07:52.586 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:52.586 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:52.586 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.586 DBG qml: --------------- onCurrentIndexChanged: of combo box sevaListView1
2023-05-08 17:07:52.586 DBG qml:  Index =0
2023-05-08 17:07:52.586 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:52.586 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:07:52.586 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-08 17:07:52.586 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.586 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.586 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.586 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.586 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:52.586 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:52.586 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9038)) 

2023-05-08 17:07:52.586 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:52.586 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:52.586 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.586 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:52.586 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:07:52.586 DBG qml:  Seva Type Changed: 0
2023-05-08 17:07:52.586 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-08 17:07:52.586 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.586 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.586 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.586 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.586 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:52.586 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:52.586 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9038)) 

2023-05-08 17:07:52.586 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:52.586 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:52.587 DBG qml: my seva delegate is created
2023-05-08 17:07:52.587 DBG qml:  Current Index changed0
2023-05-08 17:07:52.587 DBG qml:  VIEW-1 - Index =0
2023-05-08 17:07:52.587 DBG qml:  Seva Selected =0
2023-05-08 17:07:52.587 DBG default: SevaName* SevaViewProxy::getSevaByIndex(int) 0 

2023-05-08 17:07:52.587 DBG default: current.... seva model 

2023-05-08 17:07:52.587 DBG default: current seva model SevaListViewModel(0x18cdc5d0) 

2023-05-08 17:07:52.587 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int) (SevaName(0x91d9038)) 

2023-05-08 17:07:52.587 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int)  Index requested 1= 0 

2023-05-08 17:07:52.587 DBG qml:  Seva Details =0
2023-05-08 17:07:52.587 DBG default: void SevaName::print()  Seva Name   = "Nithya Archane"
2023-05-08 17:07:52.587 DBG default: void SevaName::print()  Seva ID     = 102
2023-05-08 17:07:52.587 DBG default: void SevaName::print()  Seva Number = 102
2023-05-08 17:07:52.587 DBG default: void SevaName::print()  Seva        = 0
2023-05-08 17:07:52.587 DBG default: void SevaName::print()  Seva Date   = "2021-11-25"
2023-05-08 17:07:52.587 DBG default: void SevaName::print()  Seva Type   = 0
2023-05-08 17:07:52.587 DBG default: void SevaName::print()  Seva Cost   = 0
2023-05-08 17:07:52.587 DBG default: void SevaName::print()  Seva Count  = 1
2023-05-08 17:07:52.587 DBG default: void SevaName::print()  Additional Cost = 0
2023-05-08 17:07:52.587 DBG default: void SevaName::print()  Seva Time  = ""
2023-05-08 17:07:52.587 DBG qml: seva name  = Nithya Archane Seva cost = 0
2023-05-08 17:07:52.587 DBG default: QStringList SevaViewProxy::getGothras() 

2023-05-08 17:07:52.587 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.587 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-05-08 17:07:52.587 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Kashyapa") 

2023-05-08 17:07:52.587 DBG qml: ********* In setGothras function  *********** = 0
2023-05-08 17:07:52.587 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-05-08 17:07:52.587 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.587 DBG qml: ********* In set nakshatra function  *********** = 0
2023-05-08 17:07:52.587 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:07:52.587 DBG qml: Current Text =SevaTypeViewModel(0x1aa4e440)
2023-05-08 17:07:52.587 DBG qml: Model SevaType--------: [object Object]
2023-05-08 17:07:52.587 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:52.587 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:07:52.587 DBG qml: Model SevaType: RAMANAVAMI SEVE
2023-05-08 17:07:52.587 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:52.587 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:07:52.587 DBG qml: Model SevaType: 0
2023-05-08 17:07:52.587 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:52.587 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:52.587 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:52.587 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:07:52.601 DBG qml: Component.onCompleted: of seva booking view
2023-05-08 17:07:52.601 DBG qml: In Component.onCompleted: of SevaPaymenConfirmationDialog
2023-05-08 17:07:52.601 DBG qml: Dialog object is ccreated in SPCD
2023-05-08 17:07:52.601 DBG default: QStringList SevaTypeNamesDataModel::getBankList() 

2023-05-08 17:07:52.601 DBG default: JsonProcessor::JsonProcessor(QObject*) 

2023-05-08 17:07:52.601 DBG default: void JsonProcessor::readBanksFromJsonToList() 

2023-05-08 17:07:52.601 DBG default: file opened 

2023-05-08 17:07:52.601 DBG default: read all 

2023-05-08 17:07:52.601 DBG default: void JsonProcessor::readBanksFromJsonToList() dddddddoooooooooooocccccccc 

2023-05-08 17:07:52.601 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:07:52.601 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:07:52.601 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:07:52.601 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:07:52.601 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:07:52.601 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:07:52.601 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:07:52.601 DBG default: virtual JsonProcessor::~JsonProcessor() 

2023-05-08 17:07:52.601 DBG qml:  Trying to get the list category
2023-05-08 17:07:52.601 WRN default: qrc:/ui/SevaDateTime.qml:89: ReferenceError: defaultDates is not defined
2023-05-08 17:07:52.601 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:07:52.601 DBG qml: Screen screenWidth size =1920
2023-05-08 17:07:52.601 DBG qml: Screen screenHeight size =1000
2023-05-08 17:07:52.601 DBG qml:  Name Status =false
2023-05-08 17:07:52.601 DBG qml:  Mobile Status =false
2023-05-08 17:07:52.602 DBG qml: Component.onCompleted: of seva list view
2023-05-08 17:07:52.602 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:07:52.602 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:07:52.602 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-08 17:07:52.602 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:07:52.602 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:07:52.602 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:07:52.602 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:07:52.602 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:52.602 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:52.602 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9038)) 

2023-05-08 17:07:52.602 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:07:52.602 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:07:52.602 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:07:52.602 DBG qml: Component.onCompleted of combo box sevaListView current index =0 1
2023-05-08 17:07:52.602 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:07:52.602 DBG qml: Screen screenWidth size =1920
2023-05-08 17:07:52.602 DBG qml: Screen screenHeight size =1000
2023-05-08 17:07:52.603 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.603 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.603 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.603 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.603 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.605 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.609 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.609 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.609 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.609 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.610 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.610 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.610 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.610 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:52.610 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:07:53.733 DBG qml: show all button clicked
2023-05-08 17:07:53.733 DBG qml: Show all Data
2023-05-08 17:07:53.733 DBG default: bool SevaViewProxy::showAllData() 

2023-05-08 17:07:53.733 DBG default: void AllViewReports::clearModel()  clear data called 

2023-05-08 17:07:53.733 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^1111111^^^^^^^^^^^^^^^^^^ 

2023-05-08 17:07:53.733 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^222222^^^^^^^^^^^^^^^^^^ 

2023-05-08 17:07:53.733 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^3333333^^^^^^^^^^^^^^^^^^   -1 

2023-05-08 17:07:53.734 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-05-08 17:07:53.734 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-05-08 17:07:53.734 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-05-08 17:07:53.734 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-05-08 17:07:53.734 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-05-08 17:07:53.734 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  0 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  SNO      = "1" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  SName    = "Nithya Archane" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  Person   = "1" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  SevaType = "0" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-05-08 17:07:53.734 DBG default:  Name = "Suman N"
2023-05-08 17:07:53.734 DBG default:  Nakshatra  "Ashwini"
2023-05-08 17:07:53.734 DBG default:  Gothra  "Kashyapa" 

2023-05-08 17:07:53.734 DBG default:  Mobile  "9481914363" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 0 0 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 0 0 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 0 1 

2023-05-08 17:07:53.734 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  0 0 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 1 2 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 1 1 

2023-05-08 17:07:53.734 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  0 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 1 3 

2023-05-08 17:07:53.734 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 1 

2023-05-08 17:07:53.734 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  0 

2023-05-08 17:07:53.734 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-05-08 17:07:53.734 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-05-08 17:07:53.734 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-05-08 17:07:53.734 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-05-08 17:07:53.734 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-05-08 17:07:53.734 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  1 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  SNO      = "2" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  SName    = "Nithya Archane" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  Person   = "2" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  SevaType = "0" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-05-08 17:07:53.734 DBG default:  Name = "Dheerendra Purohit"
2023-05-08 17:07:53.734 DBG default:  Nakshatra  "Ashwini"
2023-05-08 17:07:53.734 DBG default:  Gothra  "Kashyapa" 

2023-05-08 17:07:53.734 DBG default:  Mobile  "9900541516" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 1 4 

2023-05-08 17:07:53.734 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  1 1 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 2 5 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 2 2 

2023-05-08 17:07:53.734 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  1 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 2 6 

2023-05-08 17:07:53.734 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 2 

2023-05-08 17:07:53.734 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  1 

2023-05-08 17:07:53.734 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-05-08 17:07:53.734 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-05-08 17:07:53.734 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-05-08 17:07:53.734 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-05-08 17:07:53.734 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-05-08 17:07:53.734 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  2 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  SNO      = "3" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  SName    = "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  Person   = "3" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  SevaType = "2" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-05-08 17:07:53.734 DBG default:  Name = "Prasanna Rao"
2023-05-08 17:07:53.734 DBG default:  Nakshatra  "Ashwini"
2023-05-08 17:07:53.734 DBG default:  Gothra  "Kashyapa" 

2023-05-08 17:07:53.734 DBG default:  Mobile  "9448493423" 

2023-05-08 17:07:53.734 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 2 7 

2023-05-08 17:07:53.734 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  2 2 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 3 8 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 3 3 

2023-05-08 17:07:53.734 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  2 

2023-05-08 17:07:53.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 3 9 

2023-05-08 17:07:53.734 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 3 

2023-05-08 17:07:53.734 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  2 

2023-05-08 17:07:53.734 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-05-08 17:07:53.734 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-05-08 17:07:53.735 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-05-08 17:07:53.735 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-05-08 17:07:53.735 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-05-08 17:07:53.735 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  3 

2023-05-08 17:07:53.735 DBG default: void SevaBookingElement::print()  SNO      = "4" 

2023-05-08 17:07:53.735 DBG default: void SevaBookingElement::print()  SName    = "Poorna Pragna Hall Kanike" 

2023-05-08 17:07:53.735 DBG default: void SevaBookingElement::print()  Person   = "4" 

2023-05-08 17:07:53.735 DBG default: void SevaBookingElement::print()  SevaType = "14" 

2023-05-08 17:07:53.735 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-05-08 17:07:53.735 DBG default:  Name = "Manikantha"
2023-05-08 17:07:53.735 DBG default:  Nakshatra  "Ashwini"
2023-05-08 17:07:53.735 DBG default:  Gothra  "Kashyapa" 

2023-05-08 17:07:53.735 DBG default:  Mobile  "1234567890" 

2023-05-08 17:07:53.735 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-05-08 17:07:53.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 3 10 

2023-05-08 17:07:53.735 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  3 3 

2023-05-08 17:07:53.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 11 

2023-05-08 17:07:53.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 4 

2023-05-08 17:07:53.735 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  3 

2023-05-08 17:07:53.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 12 

2023-05-08 17:07:53.735 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 4 

2023-05-08 17:07:53.735 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  3 

2023-05-08 17:07:53.735 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^3333333^^^^^^^^^^^^^^^^^^ 

2023-05-08 17:07:53.735 DBG default: bool SevaViewProxy::showAllData() 

2023-05-08 17:07:53.739 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-05-08 17:07:53.753 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 13 

2023-05-08 17:07:53.753 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 5 

2023-05-08 17:07:53.753 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 0 row column role 0 0 257 

2023-05-08 17:07:53.754 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 14 

2023-05-08 17:07:53.754 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 6 

2023-05-08 17:07:53.754 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1 row column role 0 0 258 

2023-05-08 17:07:53.754 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 15 

2023-05-08 17:07:53.754 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 7 

2023-05-08 17:07:53.754 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2 row column role 0 0 259 

2023-05-08 17:07:53.755 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 16 

2023-05-08 17:07:53.755 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 8 

2023-05-08 17:07:53.755 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3 row column role 0 0 260 

2023-05-08 17:07:53.755 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 17 

2023-05-08 17:07:53.755 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 9 

2023-05-08 17:07:53.755 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4 row column role 0 0 261 

2023-05-08 17:07:53.755 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 18 

2023-05-08 17:07:53.755 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 10 

2023-05-08 17:07:53.755 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 5 row column role 0 0 262 

2023-05-08 17:07:53.756 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 19 

2023-05-08 17:07:53.756 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 11 

2023-05-08 17:07:53.756 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 6 row column role 0 0 263 

2023-05-08 17:07:53.756 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 20 

2023-05-08 17:07:53.756 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 12 

2023-05-08 17:07:53.756 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 7 row column role 0 0 264 

2023-05-08 17:07:53.758 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 21 

2023-05-08 17:07:53.758 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 13 

2023-05-08 17:07:53.758 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 8 row column role 0 0 265 

2023-05-08 17:07:53.758 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 22 

2023-05-08 17:07:53.758 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 14 

2023-05-08 17:07:53.758 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 9 row column role 0 0 266 

2023-05-08 17:07:53.758 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 23 

2023-05-08 17:07:53.758 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 15 

2023-05-08 17:07:53.758 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 10 row column role 0 0 267 

2023-05-08 17:07:53.759 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 24 

2023-05-08 17:07:53.759 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 16 

2023-05-08 17:07:53.759 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 11 row column role 0 0 268 

2023-05-08 17:07:53.759 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 25 

2023-05-08 17:07:53.759 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 17 

2023-05-08 17:07:53.759 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 12 row column role 0 0 269 

2023-05-08 17:07:53.759 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 26 

2023-05-08 17:07:53.759 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 18 

2023-05-08 17:07:53.759 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 13 row column role 0 0 270 

2023-05-08 17:07:53.760 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 27 

2023-05-08 17:07:53.760 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 19 

2023-05-08 17:07:53.760 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 14 row column role 0 0 271 

2023-05-08 17:07:53.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 28 

2023-05-08 17:07:53.761 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 20 

2023-05-08 17:07:53.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 15 row column role 0 0 272 

2023-05-08 17:07:53.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 29 

2023-05-08 17:07:53.761 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 21 

2023-05-08 17:07:53.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 16 row column role 0 0 273 

2023-05-08 17:07:53.762 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 30 

2023-05-08 17:07:53.762 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 22 

2023-05-08 17:07:53.762 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 17 row column role 0 0 274 

2023-05-08 17:07:53.762 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 31 

2023-05-08 17:07:53.762 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 23 

2023-05-08 17:07:53.762 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 18 row column role 0 0 275 

2023-05-08 17:07:53.762 DBG qml: Seva All view Page is created
2023-05-08 17:07:53.762 WRN default: qrc:/ui/SevaBookingView.qml:379:9: QML Connections: Detected function "onLoadMenuPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:07:53.765 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 32 

2023-05-08 17:07:53.765 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 24 

2023-05-08 17:07:53.765 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 19 row column role 1 0 257 

2023-05-08 17:07:53.766 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 33 

2023-05-08 17:07:53.766 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 25 

2023-05-08 17:07:53.766 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 20 row column role 1 0 258 

2023-05-08 17:07:53.766 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 34 

2023-05-08 17:07:53.766 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 26 

2023-05-08 17:07:53.766 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 21 row column role 1 0 259 

2023-05-08 17:07:53.766 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 35 

2023-05-08 17:07:53.766 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 27 

2023-05-08 17:07:53.766 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 22 row column role 1 0 260 

2023-05-08 17:07:53.766 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 36 

2023-05-08 17:07:53.766 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 28 

2023-05-08 17:07:53.766 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 23 row column role 1 0 261 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 37 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 29 

2023-05-08 17:07:53.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 24 row column role 1 0 262 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 38 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 30 

2023-05-08 17:07:53.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 25 row column role 1 0 263 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 39 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 31 

2023-05-08 17:07:53.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 26 row column role 1 0 264 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 40 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 32 

2023-05-08 17:07:53.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 27 row column role 1 0 265 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 41 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 33 

2023-05-08 17:07:53.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 28 row column role 1 0 266 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 42 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 34 

2023-05-08 17:07:53.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 29 row column role 1 0 267 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 43 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 35 

2023-05-08 17:07:53.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 30 row column role 1 0 268 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 44 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 36 

2023-05-08 17:07:53.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 31 row column role 1 0 269 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 45 

2023-05-08 17:07:53.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 37 

2023-05-08 17:07:53.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 32 row column role 1 0 270 

2023-05-08 17:07:53.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 46 

2023-05-08 17:07:53.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 38 

2023-05-08 17:07:53.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 33 row column role 1 0 271 

2023-05-08 17:07:53.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 47 

2023-05-08 17:07:53.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 39 

2023-05-08 17:07:53.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 34 row column role 1 0 272 

2023-05-08 17:07:53.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 48 

2023-05-08 17:07:53.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 40 

2023-05-08 17:07:53.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 35 row column role 1 0 273 

2023-05-08 17:07:53.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 49 

2023-05-08 17:07:53.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 41 

2023-05-08 17:07:53.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 36 row column role 1 0 274 

2023-05-08 17:07:53.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 50 

2023-05-08 17:07:53.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 42 

2023-05-08 17:07:53.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 37 row column role 1 0 275 

2023-05-08 17:07:53.769 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 51 

2023-05-08 17:07:53.769 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 43 

2023-05-08 17:07:53.769 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 38 row column role 2 0 257 

2023-05-08 17:07:53.769 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 52 

2023-05-08 17:07:53.769 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 44 

2023-05-08 17:07:53.769 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 39 row column role 2 0 258 

2023-05-08 17:07:53.769 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 53 

2023-05-08 17:07:53.769 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 45 

2023-05-08 17:07:53.769 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 40 row column role 2 0 259 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 54 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 46 

2023-05-08 17:07:53.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 41 row column role 2 0 260 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 55 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 47 

2023-05-08 17:07:53.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 42 row column role 2 0 261 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 56 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 48 

2023-05-08 17:07:53.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 43 row column role 2 0 262 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 57 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 49 

2023-05-08 17:07:53.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 44 row column role 2 0 263 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 58 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 50 

2023-05-08 17:07:53.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 45 row column role 2 0 264 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 59 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 51 

2023-05-08 17:07:53.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 46 row column role 2 0 265 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 60 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 52 

2023-05-08 17:07:53.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 47 row column role 2 0 266 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 61 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 53 

2023-05-08 17:07:53.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 48 row column role 2 0 267 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 62 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 54 

2023-05-08 17:07:53.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 49 row column role 2 0 268 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 63 

2023-05-08 17:07:53.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 55 

2023-05-08 17:07:53.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 50 row column role 2 0 269 

2023-05-08 17:07:53.771 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 64 

2023-05-08 17:07:53.771 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 56 

2023-05-08 17:07:53.771 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 51 row column role 2 0 270 

2023-05-08 17:07:53.771 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 65 

2023-05-08 17:07:53.771 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 57 

2023-05-08 17:07:53.771 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 52 row column role 2 0 271 

2023-05-08 17:07:53.771 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 66 

2023-05-08 17:07:53.771 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 58 

2023-05-08 17:07:53.771 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 53 row column role 2 0 272 

2023-05-08 17:07:53.771 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 67 

2023-05-08 17:07:53.771 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 59 

2023-05-08 17:07:53.771 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 54 row column role 2 0 273 

2023-05-08 17:07:53.771 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 68 

2023-05-08 17:07:53.771 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 60 

2023-05-08 17:07:53.771 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 55 row column role 2 0 274 

2023-05-08 17:07:53.771 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 69 

2023-05-08 17:07:53.771 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 61 

2023-05-08 17:07:53.772 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 56 row column role 2 0 275 

2023-05-08 17:07:53.774 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 70 

2023-05-08 17:07:53.774 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 62 

2023-05-08 17:07:53.774 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 57 row column role 3 0 257 

2023-05-08 17:07:53.774 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 71 

2023-05-08 17:07:53.774 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 63 

2023-05-08 17:07:53.774 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 58 row column role 3 0 258 

2023-05-08 17:07:53.774 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 72 

2023-05-08 17:07:53.774 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 64 

2023-05-08 17:07:53.774 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 59 row column role 3 0 259 

2023-05-08 17:07:53.774 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 73 

2023-05-08 17:07:53.774 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 65 

2023-05-08 17:07:53.774 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 60 row column role 3 0 260 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 74 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 66 

2023-05-08 17:07:53.775 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 61 row column role 3 0 261 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 75 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 67 

2023-05-08 17:07:53.775 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 62 row column role 3 0 262 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 76 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 68 

2023-05-08 17:07:53.775 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 63 row column role 3 0 263 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 77 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 69 

2023-05-08 17:07:53.775 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 64 row column role 3 0 264 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 78 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 70 

2023-05-08 17:07:53.775 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 65 row column role 3 0 265 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 79 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 71 

2023-05-08 17:07:53.775 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 66 row column role 3 0 266 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 80 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 72 

2023-05-08 17:07:53.775 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 67 row column role 3 0 267 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 81 

2023-05-08 17:07:53.775 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 73 

2023-05-08 17:07:53.775 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 68 row column role 3 0 268 

2023-05-08 17:07:53.776 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 82 

2023-05-08 17:07:53.776 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 74 

2023-05-08 17:07:53.776 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 69 row column role 3 0 269 

2023-05-08 17:07:53.776 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 83 

2023-05-08 17:07:53.776 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 75 

2023-05-08 17:07:53.776 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 70 row column role 3 0 270 

2023-05-08 17:07:53.776 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 84 

2023-05-08 17:07:53.776 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 76 

2023-05-08 17:07:53.776 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 71 row column role 3 0 271 

2023-05-08 17:07:53.777 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 85 

2023-05-08 17:07:53.777 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 77 

2023-05-08 17:07:53.777 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 72 row column role 3 0 272 

2023-05-08 17:07:53.777 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 86 

2023-05-08 17:07:53.777 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 78 

2023-05-08 17:07:53.777 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 73 row column role 3 0 273 

2023-05-08 17:07:53.777 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 87 

2023-05-08 17:07:53.777 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 79 

2023-05-08 17:07:53.777 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 74 row column role 3 0 274 

2023-05-08 17:07:53.777 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 88 

2023-05-08 17:07:53.777 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 80 

2023-05-08 17:07:53.777 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 75 row column role 3 0 275 

2023-05-08 17:08:20.182 DBG qml:  Keys.onEscapePressed: Seva All view Page 
2023-05-08 17:08:20.182 DBG qml:  In onLoadSevaBookingView
2023-05-08 17:08:20.194 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:08:20.197 DBG qml: state changedinitial
2023-05-08 17:08:20.199 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-05-08 17:08:20.199 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Cannot assign to non-existent property "onDefaultDates"
2023-05-08 17:08:20.199 WRN default: qrc:/ui/SevaDateTime.qml:97:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-05-08 17:08:20.199 WRN default: qrc:/ui/SevaDateTime.qml:91:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-05-08 17:08:20.244 DBG qml: my seva delegate is created
2023-05-08 17:08:20.244 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:20.244 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:20.244 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:20.244 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:20.245 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:08:20.245 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-08 17:08:20.245 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:08:20.245 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:08:20.245 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:08:20.245 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:08:20.245 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:08:20.245 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:08:20.245 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9038)) 

2023-05-08 17:08:20.245 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:08:20.245 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:08:20.245 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:08:20.245 DBG qml: --------------- onCurrentIndexChanged: of combo box sevaListView1
2023-05-08 17:08:20.245 DBG qml:  Index =0
2023-05-08 17:08:20.245 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:20.245 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:08:20.245 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-08 17:08:20.245 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:08:20.245 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:08:20.245 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:08:20.245 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:08:20.245 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:08:20.245 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:08:20.245 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9038)) 

2023-05-08 17:08:20.245 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:08:20.245 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:08:20.245 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:08:20.245 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:20.245 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:08:20.245 DBG qml:  Seva Type Changed: 0
2023-05-08 17:08:20.245 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-08 17:08:20.245 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:08:20.245 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:08:20.245 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:08:20.245 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:08:20.245 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:08:20.245 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:08:20.245 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9038)) 

2023-05-08 17:08:20.245 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:08:20.245 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:08:20.245 DBG qml: my seva delegate is created
2023-05-08 17:08:20.245 DBG qml:  Current Index changed0
2023-05-08 17:08:20.246 DBG qml:  VIEW-1 - Index =0
2023-05-08 17:08:20.246 DBG qml:  Seva Selected =0
2023-05-08 17:08:20.246 DBG default: SevaName* SevaViewProxy::getSevaByIndex(int) 0 

2023-05-08 17:08:20.246 DBG default: current.... seva model 

2023-05-08 17:08:20.246 DBG default: current seva model SevaListViewModel(0x1af244b8) 

2023-05-08 17:08:20.246 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int) (SevaName(0x91d9038)) 

2023-05-08 17:08:20.246 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int)  Index requested 1= 0 

2023-05-08 17:08:20.246 DBG qml:  Seva Details =0
2023-05-08 17:08:20.246 DBG default: void SevaName::print()  Seva Name   = "Nithya Archane"
2023-05-08 17:08:20.246 DBG default: void SevaName::print()  Seva ID     = 102
2023-05-08 17:08:20.246 DBG default: void SevaName::print()  Seva Number = 102
2023-05-08 17:08:20.246 DBG default: void SevaName::print()  Seva        = 0
2023-05-08 17:08:20.246 DBG default: void SevaName::print()  Seva Date   = "2021-11-25"
2023-05-08 17:08:20.246 DBG default: void SevaName::print()  Seva Type   = 0
2023-05-08 17:08:20.246 DBG default: void SevaName::print()  Seva Cost   = 0
2023-05-08 17:08:20.246 DBG default: void SevaName::print()  Seva Count  = 1
2023-05-08 17:08:20.246 DBG default: void SevaName::print()  Additional Cost = 0
2023-05-08 17:08:20.246 DBG default: void SevaName::print()  Seva Time  = ""
2023-05-08 17:08:20.246 DBG qml: seva name  = Nithya Archane Seva cost = 0
2023-05-08 17:08:20.246 DBG default: QStringList SevaViewProxy::getGothras() 

2023-05-08 17:08:20.246 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:08:20.246 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-05-08 17:08:20.246 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Kashyapa") 

2023-05-08 17:08:20.246 DBG qml: ********* In setGothras function  *********** = 0
2023-05-08 17:08:20.247 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-05-08 17:08:20.247 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:08:20.247 DBG qml: ********* In set nakshatra function  *********** = 0
2023-05-08 17:08:20.247 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:08:20.247 DBG qml: Current Text =SevaTypeViewModel(0x1aa4e440)
2023-05-08 17:08:20.247 DBG qml: Model SevaType--------: [object Object]
2023-05-08 17:08:20.247 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:20.247 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:08:20.247 DBG qml: Model SevaType: RAMANAVAMI SEVE
2023-05-08 17:08:20.247 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:20.247 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:08:20.247 DBG qml: Model SevaType: 0
2023-05-08 17:08:20.247 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:20.247 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:20.247 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:20.247 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:08:20.254 DBG qml: Component.onCompleted: of seva booking view
2023-05-08 17:08:20.254 DBG qml: In Component.onCompleted: of SevaPaymenConfirmationDialog
2023-05-08 17:08:20.254 DBG qml: Dialog object is ccreated in SPCD
2023-05-08 17:08:20.254 DBG default: QStringList SevaTypeNamesDataModel::getBankList() 

2023-05-08 17:08:20.254 DBG default: JsonProcessor::JsonProcessor(QObject*) 

2023-05-08 17:08:20.254 DBG default: void JsonProcessor::readBanksFromJsonToList() 

2023-05-08 17:08:20.254 DBG default: file opened 

2023-05-08 17:08:20.254 DBG default: read all 

2023-05-08 17:08:20.254 DBG default: void JsonProcessor::readBanksFromJsonToList() dddddddoooooooooooocccccccc 

2023-05-08 17:08:20.254 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:08:20.254 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:08:20.254 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:08:20.254 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:08:20.254 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:08:20.254 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:08:20.254 DBG default: BankDetails::BankDetails(QObject*) 

2023-05-08 17:08:20.254 DBG default: virtual JsonProcessor::~JsonProcessor() 

2023-05-08 17:08:20.254 DBG qml:  Trying to get the list category
2023-05-08 17:08:20.254 WRN default: qrc:/ui/SevaDateTime.qml:89: ReferenceError: defaultDates is not defined
2023-05-08 17:08:20.254 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:08:20.254 DBG qml: Screen screenWidth size =1920
2023-05-08 17:08:20.254 DBG qml: Screen screenHeight size =1000
2023-05-08 17:08:20.255 DBG qml:  Name Status =false
2023-05-08 17:08:20.255 DBG qml:  Mobile Status =false
2023-05-08 17:08:20.255 DBG qml: Component.onCompleted: of seva list view
2023-05-08 17:08:20.255 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:20.255 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:08:20.255 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-08 17:08:20.255 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:08:20.255 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:08:20.255 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:08:20.255 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:08:20.255 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:08:20.255 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:08:20.255 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9038)) 

2023-05-08 17:08:20.255 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:08:20.255 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:08:20.255 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-05-08 17:08:20.255 DBG qml: Component.onCompleted of combo box sevaListView current index =0 1
2023-05-08 17:08:20.255 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:08:20.255 DBG qml: Screen screenWidth size =1920
2023-05-08 17:08:20.255 DBG qml: Screen screenHeight size =1000
2023-05-08 17:08:20.255 WRN default: qrc:/ui/SevaBookingView.qml:379:9: QML Connections: Detected function "onLoadSevaBookingView" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:08:20.257 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.257 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.257 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.258 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.258 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.261 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.264 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.264 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.264 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.264 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.264 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.264 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.264 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.264 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:20.265 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-05-08 17:08:21.584 DBG qml: Esc pressed in select seva type view
2023-05-08 17:08:21.584 DBG qml:  In onLoadMenuPage
2023-05-08 17:08:21.584 DBG qml: loading Menu page from main
2023-05-08 17:08:21.590 DBG qml: the accounts enable true
2023-05-08 17:08:21.590 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:08:21.590 DBG qml: Screen screenWidth size =1920
2023-05-08 17:08:21.590 DBG qml: Screen screenHeight size =1000
2023-05-08 17:08:21.590 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:08:21.590 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:08:21.590 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:08:21.590 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-05-08 17:08:22.542 DBG qml: account details button clicked
2023-05-08 17:08:22.542 DBG qml: Clicked on AccountDetails
2023-05-08 17:08:22.550 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:08:22.550 DBG default: int AccountReportModel::iGrandTotal() const 0 

2023-05-08 17:08:22.550 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:08:22.559 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:08:22.563 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-05-08 17:08:22.563 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-08 17:08:22.563 DBG qml: Selected year2015
2023-05-08 17:08:22.563 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-05-08 17:08:22.563 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:08:22.563 DBG qml: Selected month1
2023-05-08 17:08:22.564 WRN default: qrc:/ui/components/MyReportFilter.qml:332:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.564 WRN default: qrc:/ui/components/MyReportFilter.qml:343:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.599 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.599 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.616 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.617 WRN default: qrc:/ui/components/MyReportFilter.qml:126:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.617 WRN default: qrc:/ui/components/MyReportFilter.qml:164:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.617 WRN default: qrc:/ui/components/MyReportFilter.qml:332:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.617 WRN default: qrc:/ui/components/MyReportFilter.qml:343:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.617 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.617 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.617 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.617 WRN default: qrc:/ui/components/MyReportFilter.qml:126:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.617 WRN default: qrc:/ui/components/MyReportFilter.qml:164:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.618 DBG qml: In Component.onCompleted: of seva report page
2023-05-08 17:08:22.618 DBG qml: In  Component.onCompleted: loader srp
2023-05-08 17:08:22.618 DBG qml: In Component.onCompleted: of seva report page total text 0.00 ?
2023-05-08 17:08:22.619 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:08:22.619 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-08 17:08:22.619 DBG qml: The month and year initial 1   2015
2023-05-08 17:08:22.619 DBG qml:  Trying to get the list category
2023-05-08 17:08:22.619 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:08:22.619 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-05-08 17:08:22.619 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:22.619 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:22.619 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:22.619 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:22.619 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:08:22.619 DBG default: void ReportFilterElements::setISevaType(int) 

2023-05-08 17:08:22.619 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:08:22.619 DBG qml: 0
2023-05-08 17:08:22.619 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:22.619 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:08:22.619 DBG default: void ReportFilterElements::setISevaType(int) 

2023-05-08 17:08:22.619 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:08:22.619 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:22.619 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:08:22.619 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-08 17:08:22.619 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:08:22.619 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:08:22.619 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:08:22.619 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:08:22.619 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:08:22.619 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:08:22.619 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9038)) 

2023-05-08 17:08:22.619 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:08:22.619 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:08:22.619 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-05-08 17:08:22.619 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:08:22.619 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:08:22.619 DBG qml: Seva name selected : Nithya Archane
2023-05-08 17:08:22.619 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:08:22.619 DBG qml: Seva type selected in report filter : 0
2023-05-08 17:08:22.619 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:22.619 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:22.619 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-05-08 17:08:22.619 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-05-08 17:08:22.619 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-05-08 17:08:22.619 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-05-08 17:08:22.619 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-05-08 17:08:22.619 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-05-08 17:08:22.619 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9139be0) 

2023-05-08 17:08:22.619 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:08:22.619 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:08:22.619 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x91d9038)) 

2023-05-08 17:08:22.619 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-05-08 17:08:22.619 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x91d9038))) 
(SevaName(0x91d9038)) 

2023-05-08 17:08:22.620 DBG default: void ReportFilterElements::setISevaType(int) 

2023-05-08 17:08:22.620 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-05-08 17:08:22.620 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-05-08 17:08:22.620 DBG default: void SevaReport::generateAccReport(ReportFilterElements*) 

2023-05-08 17:08:22.620 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:08:22.620 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) 0 

2023-05-08 17:08:22.620 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:22.620 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm date "08-05-2023" 

2023-05-08 17:08:22.620 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:08:22.620 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:08:22.620 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm ddetails "All" 0 

2023-05-08 17:08:22.620 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) Inside c date acc rep 

2023-05-08 17:08:22.620 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:22.620 DBG default: QString AccountReportModel::FormatDate(QString) "08-05-2023" 

2023-05-08 17:08:22.620 DBG default: QString AccountReportModel::FormatDate(QString) QDate("2023-05-08") 

2023-05-08 17:08:22.620 DBG default: QString AccountReportModel::FormatDate(QString) "2023-05-08" 

2023-05-08 17:08:22.620 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-05-08 17:08:22.620 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:22.620 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-05-08" 

2023-05-08 17:08:22.620 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:22.620 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:08:22.620 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:08:22.620 DBG default: "2023-05-08" ^^^^^^^^^^^^^^^^^^^^^^^^^^  "All"    0 

2023-05-08 17:08:22.620 DBG default: First 

2023-05-08 17:08:22.620 DBG default:  Query string = "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-05-08' Group by sevabooking.SEVANAME; " 

2023-05-08 17:08:22.620 DBG default:  Query string Acc rep true 

2023-05-08 17:08:22.620 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-05-08' Group by sevabooking.SEVANAME; " 

2023-05-08 17:08:22.620 DBG default: "Nithya Archane" 

2023-05-08 17:08:22.620 DBG default: "4" 

2023-05-08 17:08:22.620 DBG default: "100" 

2023-05-08 17:08:22.620 DBG default: "800" 

2023-05-08 17:08:22.620 DBG default: before emitting signal  account_report '''''''' 

2023-05-08 17:08:22.620 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-05-08 17:08:22.620 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:08:22.620 DBG default: void AccountReportModel::setIGrandTotal(int) 800 

2023-05-08 17:08:22.620 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:08:22.620 DBG default: int AccountReportModel::iGrandTotal() const 800 

2023-05-08 17:08:22.621 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 800 

2023-05-08 17:08:22.621 DBG default: after emitting signal  account_report '''''''' 

2023-05-08 17:08:22.621 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-05-08' Group by sevabooking.SEVANAME; " 

2023-05-08 17:08:22.621 DBG default: "Poorna Pragna Hall Kanike" 

2023-05-08 17:08:22.621 DBG default: "1" 

2023-05-08 17:08:22.621 DBG default: "7500" 

2023-05-08 17:08:22.621 DBG default: "7500" 

2023-05-08 17:08:22.621 DBG default: before emitting signal  account_report '''''''' 

2023-05-08 17:08:22.621 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-05-08 17:08:22.621 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:22.621 DBG default: void AccountReportModel::setIGrandTotal(int) 8300 

2023-05-08 17:08:22.621 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:08:22.621 DBG default: int AccountReportModel::iGrandTotal() const 8300 

2023-05-08 17:08:22.621 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 8300 

2023-05-08 17:08:22.621 DBG default: after emitting signal  account_report '''''''' 

2023-05-08 17:08:22.621 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-05-08' Group by sevabooking.SEVANAME; " 

2023-05-08 17:08:22.621 DBG default: "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:08:22.621 DBG default: "2" 

2023-05-08 17:08:22.621 DBG default: "500" 

2023-05-08 17:08:22.621 DBG default: "1000" 

2023-05-08 17:08:22.621 DBG default: before emitting signal  account_report '''''''' 

2023-05-08 17:08:22.621 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-05-08 17:08:22.621 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 2 

2023-05-08 17:08:22.621 DBG default: void AccountReportModel::setIGrandTotal(int) 9300 

2023-05-08 17:08:22.621 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:08:22.621 DBG default: int AccountReportModel::iGrandTotal() const 9300 

2023-05-08 17:08:22.621 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 9300 

2023-05-08 17:08:22.621 DBG default: after emitting signal  account_report '''''''' 

2023-05-08 17:08:22.621 DBG default: bool ReportFilterElements::bDatewise() const 

2023-05-08 17:08:22.621 DBG default: false 

2023-05-08 17:08:22.621 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:22.621 DBG default: "2023-05-08" 

2023-05-08 17:08:22.621 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:22.621 DBG qml: ******** 08-05-2023
2023-05-08 17:08:22.621 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-05-08 17:08:22.621 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:22.621 DBG qml:   _rip.sSingleDate 208-05-2023
2023-05-08 17:08:22.621 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:08:22.621 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-05-08 17:08:22.621 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:08:22.621 DBG qml: Screen screenWidth size =1920
2023-05-08 17:08:22.621 DBG qml: Screen screenHeight size =1000
2023-05-08 17:08:22.621 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:08:22.621 DBG qml: Screen screenWidth size =1920
2023-05-08 17:08:22.621 DBG qml: Screen screenHeight size =1000
2023-05-08 17:08:22.621 DBG qml: this is admin
2023-05-08 17:08:22.621 WRN default: qrc:/ui/components/MyReportFilter.qml:126:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.621 WRN default: qrc:/ui/components/MyReportFilter.qml:164:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.622 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.629 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.629 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.629 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.635 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.635 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.635 WRN default: qrc:/ui/components/MyReportFilter.qml:332:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.635 WRN default: qrc:/ui/components/MyReportFilter.qml:343:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.635 WRN default: qrc:/ui/components/MyReportFilter.qml:332:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.635 WRN default: qrc:/ui/components/MyReportFilter.qml:343:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-05-08 17:08:22.638 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.638 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Nithya Archane" 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 100 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 4 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 2 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Poorna Pragna Hall Kanike" 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 7500 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 7500 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.639 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.640 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.640 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-05-08 17:08:22.640 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.640 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:08:22.640 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.640 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 500 

2023-05-08 17:08:22.640 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.640 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 2 

2023-05-08 17:08:22.640 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:22.640 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1000 

2023-05-08 17:08:24.264 DBG qml: Hello currentMonth===== 5
2023-05-08 17:08:24.264 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-05-08 17:08:24.264 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:08:24.264 DBG qml: Suman month---- 05
2023-05-08 17:08:24.264 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-05-08 17:08:24.264 DBG qml: _month.currentIndex+1 01
2023-05-08 17:08:24.264 DBG qml: _year._data 0
2023-05-08 17:08:25.639 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-05-08 17:08:25.639 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:08:25.639 DBG qml: Selected month5
2023-05-08 17:08:25.639 DBG qml:  Activated Index =4
2023-05-08 17:08:25.639 DBG qml: Selected Text =May
2023-05-08 17:08:25.640 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-05-08 17:08:25.640 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:08:25.640 DBG qml: Selected month5
2023-05-08 17:08:27.206 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-05-08 17:08:27.206 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-08 17:08:27.206 DBG qml: Selected year2023
2023-05-08 17:08:27.208 DBG qml:  Activated Index =8
2023-05-08 17:08:27.208 DBG qml: Selected Text =2023
2023-05-08 17:08:27.208 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-05-08 17:08:27.208 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-08 17:08:27.208 DBG qml: Selected year2023
2023-05-08 17:08:27.982 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:08:27.983 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:08:27.983 DBG qml: I am hereeee
2023-05-08 17:08:27.983 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-05-08 17:08:27.983 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-05-08 17:08:27.983 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-05-08 17:08:27.983 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-05-08 17:08:27.983 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-05-08 17:08:27.983 DBG qml: In onLoadDateWisePage
2023-05-08 17:08:27.985 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:08:27.987 DBG qml: Component.completed: of SevaAccountReportOnDateRange.qml
2023-05-08 17:08:27.989 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:08:27.989 DBG qml: Screen screenWidth size =1920
2023-05-08 17:08:27.989 DBG qml: Screen screenHeight size =1000
2023-05-08 17:08:27.989 WRN default: qrc:/ui/SevaReportPage.qml:348:17: QML Connections: Detected function "onLoadDateWisePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:08:27.989 WRN default: qrc:/ui/SevaReportPage.qml:348:17: QML Connections: Detected function "onLoadDateWiseForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:08:27.989 DBG qml: ---------11----------------
2023-05-08 17:08:27.989 DBG qml: ---------12----------------
2023-05-08 17:08:27.989 DBG qml: In onSendReportDateRangeInputForWholeMonth
2023-05-08 17:08:27.989 DBG qml: In main
2023-05-08 17:08:27.989 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:08:27.989 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) 0 

2023-05-08 17:08:27.989 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:27.989 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) elm date "08-05-2023" 

2023-05-08 17:08:27.989 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:08:27.989 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:08:27.989 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetails "All" 0 

2023-05-08 17:08:27.989 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetailqqqqqqqqqqqqqqqqqs 2 

2023-05-08 17:08:27.989 DBG default: const QString& ReportFilterElements::sYear() const 

2023-05-08 17:08:27.989 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-05-08 17:08:27.989 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:08:27.989 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:08:27.989 DBG default:  Query string = "select RECEIPT_DATE,sum(QUANTITY),sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='5' Group by sevabooking.RECEIPT_DATE;" 

2023-05-08 17:08:27.989 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY),sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='5' Group by sevabooking.RECEIPT_DATE;" 

2023-05-08 17:08:27.989 DBG default: AccountReportDateRangeElement::AccountReportDateRangeElement(QObject*) 

2023-05-08 17:08:27.989 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-05-08" 

2023-05-08 17:08:27.989 DBG default: In while of db **********query_other1.value(1).toInt()***************** 7 

2023-05-08 17:08:27.989 DBG default: In while of db **************query_other1.value(2).toFloat()************* 9300 

2023-05-08 17:08:27.989 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) ------------ 

2023-05-08 17:08:27.989 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:08:27.989 DBG default: void AccountReportDateRangeModel::setIGrandTotal(int) 9300 

2023-05-08 17:08:27.990 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) 9300 

2023-05-08 17:08:27.990 DBG default: int AccountReportDateRangeModel::getAccountReportDateRangeQryListSize() 

2023-05-08 17:08:27.990 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:08:27.990 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-05-08 17:08:27.990 DBG qml: ---------e----------------
2023-05-08 17:08:27.990 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:08:27.990 DBG default: int AccountReportModel::iGrandTotal() const 9300 

2023-05-08 17:08:27.990 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:27.990 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:27.990 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:27.990 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-05-08 17:08:27.990 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:27.991 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-05-08" 

2023-05-08 17:08:27.991 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:27.991 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 7 

2023-05-08 17:08:27.991 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:27.991 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 9300 

2023-05-08 17:08:29.255 DBG qml: mouse clicked left styleData.selected true
2023-05-08 17:08:29.255 DBG qml: clicked cell in table view  0
2023-05-08 17:08:29.255 DBG qml: clicked cell in table view coordinates =  QPointF(231, 42)
2023-05-08 17:08:29.255 DBG qml: clicked cell in table view clickIndex =  0
2023-05-08 17:08:29.255 DBG qml: clicked cell in table view  0
2023-05-08 17:08:29.255 DBG qml: clicked cell in table view  0
2023-05-08 17:08:29.255 DBG qml: Left 0
2023-05-08 17:08:29.255 DBG default: AccountReportDateRangeElement* AccountReportDateRangeModel::getAccountReportDateRangeElementAt(int) I am index  0 

2023-05-08 17:08:29.255 DBG default: AccountReportDateRangeElement* AccountReportDateRangeModel::getAccountReportDateRangeElementAt(int) "2023-05-08" 

2023-05-08 17:08:29.255 DBG default: AccountReportDateRangeElement* AccountReportDateRangeModel::getAccountReportDateRangeElementAt(int) 7 

2023-05-08 17:08:29.255 DBG default: AccountReportDateRangeElement* AccountReportDateRangeModel::getAccountReportDateRangeElementAt(int) 9300 

2023-05-08 17:08:29.255 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:29.255 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:29.255 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:29.256 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:29.256 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-05-08 17:08:29.256 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:29.256 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-05-08" 

2023-05-08 17:08:29.256 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:29.256 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 7 

2023-05-08 17:08:29.256 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:29.256 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 9300 

2023-05-08 17:08:29.256 DBG qml: /////////////////////////////2023-05-08
2023-05-08 17:08:29.257 DBG qml: In   1111111111onLoadSingleDatePage(obj.date) 2023-05-08
2023-05-08 17:08:29.257 DBG qml:  Component.onDestruction of SevaAccountReportOnDateRange.qml
2023-05-08 17:08:29.275 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:08:29.275 DBG default: int AccountReportModel::iGrandTotal() const 9300 

2023-05-08 17:08:29.275 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:08:29.276 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.276 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.276 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.279 DBG qml: Component.completed: of SevaAccountReportForSingleDate.qml
2023-05-08 17:08:29.279 DBG qml: In Component.onCompleted: of seva report page single date total text 9300.00 ?
2023-05-08 17:08:29.279 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.279 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-05-08 17:08:29.281 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.281 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Nithya Archane" 

2023-05-08 17:08:29.281 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.281 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 100 

2023-05-08 17:08:29.282 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.282 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 4 

2023-05-08 17:08:29.283 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.283 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-05-08 17:08:29.283 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-05-08 17:08:29.283 DBG qml: Screen screenWidth size =1920
2023-05-08 17:08:29.283 DBG qml: Screen screenHeight size =1000
2023-05-08 17:08:29.283 WRN default: qrc:/ui/SevaReportPage.qml:348:17: QML Connections: Detected function "onLoadSingleDatePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:08:29.283 WRN default: qrc:/ui/SevaReportPage.qml:348:17: QML Connections: Detected function "onLoadMonthWisePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:08:29.283 WRN default: qrc:/ui/SevaReportPage.qml:348:17: QML Connections: Detected function "onLoadDateWiseForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-05-08 17:08:29.283 DBG qml: ******** 08-05-2023
2023-05-08 17:08:29.283 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-05-08 17:08:29.283 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-05-08 17:08:29.283 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-05-08 17:08:29.283 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-05-08 17:08:29.283 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-05-08 17:08:29.283 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:08:29.283 DBG default: void ReportFilterElements::setISevaType(int) 

2023-05-08 17:08:29.283 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:08:29.283 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-05-08 17:08:29.283 DBG default: bool ReportFilterElements::bSevawise() const 

2023-05-08 17:08:29.283 DBG qml: In Loader of seva report page _rip.bSevawisetrue
2023-05-08 17:08:29.283 DBG default: bool ReportFilterElements::bDatewise() const 

2023-05-08 17:08:29.283 DBG qml: In Loader of seva report page _rip.bDatewisefalse
2023-05-08 17:08:29.283 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:29.283 DBG qml: In Loader of seva report page _rip.sSingleDate08-05-2023
2023-05-08 17:08:29.283 DBG default: const QString& ReportFilterElements::sStartDate() const 

2023-05-08 17:08:29.283 DBG qml: In Loader of seva report page  _rip.sStartDatenull
2023-05-08 17:08:29.283 DBG default: const QString& ReportFilterElements::sEndDate() const 

2023-05-08 17:08:29.283 DBG qml: In Loader of seva report page    _rip.sEndDate null
2023-05-08 17:08:29.283 DBG qml: In Loader of seva report page     _rip.iSelectedType0
2023-05-08 17:08:29.283 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:08:29.283 DBG qml: In Loader of seva report page    _rip.iSevaType 0
2023-05-08 17:08:29.283 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:08:29.283 DBG qml: In Loader of seva report page    _rip.sSevaNameAll
2023-05-08 17:08:29.283 DBG qml: In main
2023-05-08 17:08:29.283 DBG default: void SevaReport::generateAccReport(ReportFilterElements*) 

2023-05-08 17:08:29.283 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:08:29.283 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:08:29.283 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) 0 

2023-05-08 17:08:29.283 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:29.283 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm date "08-05-2023" 

2023-05-08 17:08:29.283 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:08:29.283 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:08:29.283 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm ddetails "All" 0 

2023-05-08 17:08:29.283 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) Inside c date acc rep 

2023-05-08 17:08:29.283 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:29.283 DBG default: QString AccountReportModel::FormatDate(QString) "08-05-2023" 

2023-05-08 17:08:29.284 DBG default: QString AccountReportModel::FormatDate(QString) QDate("2023-05-08") 

2023-05-08 17:08:29.284 DBG default: QString AccountReportModel::FormatDate(QString) "2023-05-08" 

2023-05-08 17:08:29.284 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-05-08 17:08:29.284 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:29.284 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-05-08" 

2023-05-08 17:08:29.284 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:29.284 DBG default: int ReportFilterElements::iSevaType() const 

2023-05-08 17:08:29.284 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-05-08 17:08:29.284 DBG default: "2023-05-08" ^^^^^^^^^^^^^^^^^^^^^^^^^^  "All"    0 

2023-05-08 17:08:29.284 DBG default: First 

2023-05-08 17:08:29.284 DBG default:  Query string = "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-05-08' Group by sevabooking.SEVANAME; " 

2023-05-08 17:08:29.284 DBG default:  Query string Acc rep true 

2023-05-08 17:08:29.284 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-05-08' Group by sevabooking.SEVANAME; " 

2023-05-08 17:08:29.284 DBG default: "Nithya Archane" 

2023-05-08 17:08:29.284 DBG default: "4" 

2023-05-08 17:08:29.284 DBG default: "100" 

2023-05-08 17:08:29.284 DBG default: "800" 

2023-05-08 17:08:29.284 DBG default: before emitting signal  account_report '''''''' 

2023-05-08 17:08:29.284 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-05-08 17:08:29.284 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:08:29.284 DBG default: void AccountReportModel::setIGrandTotal(int) 800 

2023-05-08 17:08:29.284 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:08:29.284 DBG default: int AccountReportModel::iGrandTotal() const 800 

2023-05-08 17:08:29.284 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 800 

2023-05-08 17:08:29.284 DBG default: after emitting signal  account_report '''''''' 

2023-05-08 17:08:29.284 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-05-08' Group by sevabooking.SEVANAME; " 

2023-05-08 17:08:29.284 DBG default: "Poorna Pragna Hall Kanike" 

2023-05-08 17:08:29.284 DBG default: "1" 

2023-05-08 17:08:29.284 DBG default: "7500" 

2023-05-08 17:08:29.284 DBG default: "7500" 

2023-05-08 17:08:29.284 DBG default: before emitting signal  account_report '''''''' 

2023-05-08 17:08:29.284 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-05-08 17:08:29.284 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 1 

2023-05-08 17:08:29.284 DBG default: void AccountReportModel::setIGrandTotal(int) 8300 

2023-05-08 17:08:29.284 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:08:29.284 DBG default: int AccountReportModel::iGrandTotal() const 8300 

2023-05-08 17:08:29.284 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 8300 

2023-05-08 17:08:29.284 DBG default: after emitting signal  account_report '''''''' 

2023-05-08 17:08:29.284 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-05-08' Group by sevabooking.SEVANAME; " 

2023-05-08 17:08:29.284 DBG default: "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:08:29.284 DBG default: "2" 

2023-05-08 17:08:29.284 DBG default: "500" 

2023-05-08 17:08:29.284 DBG default: "1000" 

2023-05-08 17:08:29.284 DBG default: before emitting signal  account_report '''''''' 

2023-05-08 17:08:29.284 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-05-08 17:08:29.284 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 2 

2023-05-08 17:08:29.284 DBG default: void AccountReportModel::setIGrandTotal(int) 9300 

2023-05-08 17:08:29.284 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-05-08 17:08:29.284 DBG default: int AccountReportModel::iGrandTotal() const 9300 

2023-05-08 17:08:29.285 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 9300 

2023-05-08 17:08:29.285 DBG default: after emitting signal  account_report '''''''' 

2023-05-08 17:08:29.285 DBG default: bool ReportFilterElements::bDatewise() const 

2023-05-08 17:08:29.285 DBG default: false 

2023-05-08 17:08:29.285 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-05-08 17:08:29.285 DBG default: "2023-05-08" 

2023-05-08 17:08:29.285 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.285 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.285 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.285 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-05-08 17:08:29.286 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.286 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Nithya Archane" 

2023-05-08 17:08:29.286 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.286 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 100 

2023-05-08 17:08:29.286 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.286 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 4 

2023-05-08 17:08:29.286 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.286 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-05-08 17:08:29.286 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.286 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.286 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.286 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 2 

2023-05-08 17:08:29.286 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.286 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Poorna Pragna Hall Kanike" 

2023-05-08 17:08:29.286 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.286 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 7500 

2023-05-08 17:08:29.286 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.286 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-05-08 17:08:29.286 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.286 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 7500 

2023-05-08 17:08:29.286 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.286 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.287 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.287 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-05-08 17:08:29.287 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.287 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:08:29.287 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.287 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 500 

2023-05-08 17:08:29.287 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.287 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 2 

2023-05-08 17:08:29.287 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.287 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1000 

2023-05-08 17:08:29.287 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.287 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.287 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.287 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-05-08 17:08:29.288 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.288 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Nithya Archane" 

2023-05-08 17:08:29.288 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.288 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 100 

2023-05-08 17:08:29.288 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.288 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 4 

2023-05-08 17:08:29.288 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.288 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-05-08 17:08:29.288 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.288 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.288 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.288 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 2 

2023-05-08 17:08:29.289 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.289 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Poorna Pragna Hall Kanike" 

2023-05-08 17:08:29.289 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.289 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 7500 

2023-05-08 17:08:29.289 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.289 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-05-08 17:08:29.289 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.289 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 7500 

2023-05-08 17:08:29.289 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.289 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.289 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.289 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-05-08 17:08:29.290 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.290 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-05-08 17:08:29.290 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.291 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 500 

2023-05-08 17:08:29.291 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.291 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 2 

2023-05-08 17:08:29.291 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-05-08 17:08:29.291 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1000 

2023-05-08 17:08:36.609 DBG qml: Closing the report
2023-05-08 17:08:36.609 DBG qml: reset Model
2023-05-08 17:08:36.609 DBG default: void SevaReport::resetAccModel() 

2023-05-08 17:08:36.609 DBG default: void AccountReportModel::resetAccModel() 

2023-05-08 17:08:36.609 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:08:36.610 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-05-08 17:08:36.611 DBG qml:  Component.onDestruction of SevaAccountReportForSingleDate.qml
2023-05-08 17:08:36.611 DBG default: void SevaReport::resetAccDateRangeModel() 

2023-05-08 17:08:36.611 DBG default: void AccountReportDateRangeModel::resetAccDateRangeModel() 

