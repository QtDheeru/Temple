2023-06-01 17:09:49.559 WRN default: Invalid QML element name " AccReportDateRangeElement"
2023-06-01 17:09:49.562 WRN default: Invalid QML element name " AccReportMonthRangeElement"
2023-06-01 17:09:49.562 WRN default: Invalid QML element name " BookingReportDateRangeElement"
2023-06-01 17:09:49.562 WRN default: Invalid QML element name " BookingReportMonthRangeElement"
2023-06-01 17:09:49.581 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-06-01 17:09:49.581 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() In static getTrustListModelInstance of TrustListModel inside if 

2023-06-01 17:09:49.581 DBG default: TrustListModel::TrustListModel() 

2023-06-01 17:09:49.581 DBG default: void TrustListModel::init() 

2023-06-01 17:09:49.581 DBG default: TrustConfiguration::TrustConfiguration(QObject*) 

2023-06-01 17:09:49.581 DBG default: void TrustConfiguration::readTrustsFromJsonToList() path  "D:/TempleFiles/Temple-main/bins" 

2023-06-01 17:09:49.587 DBG default: file opened 

2023-06-01 17:09:49.587 DBG default: read all 

2023-06-01 17:09:49.587 DBG default: void TrustConfiguration::readTrustsFromJsonToList() dddddddoooooooooooocccccccc 

2023-06-01 17:09:49.587 DBG default: Trust::Trust(QObject*) 

2023-06-01 17:09:52.757 WRN qt.qpa.fonts: Unable to open default EUDC font: "EUDC.TTE"
2023-06-01 17:09:53.307 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-06-01 17:09:53.307 DBG qml: Screen screenWidth size =1920
2023-06-01 17:09:53.307 DBG qml: Screen screenHeight size =1000
2023-06-01 17:09:53.362 DBG qml: screen height= 1080
2023-06-01 17:09:53.362 DBG qml: screen width= 1920
2023-06-01 17:09:53.362 DBG qml: Screen MyStyles-screecnWidth size =1920
2023-06-01 17:09:53.362 DBG qml: Screen MyStyles-screenHeight size =1000
2023-06-01 17:09:53.362 DBG qml: screen density  == 6.228183399741848
2023-06-01 17:09:53.362 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-06-01 17:09:53.362 DBG qml: Screen screenWidth size =1920
2023-06-01 17:09:53.362 DBG qml: Screen screenHeight size =1000
2023-06-01 17:09:58.531 DBG default: int TrustListModel::getTrustListSize() 

2023-06-01 17:09:58.532 DBG default: int TrustListModel::getTrustListSize() 

2023-06-01 17:09:58.532 DBG qml: in else--------------
2023-06-01 17:09:58.532 DBG qml: in else------trustName--------Hubablli
2023-06-01 17:09:58.532 DBG qml: in else-------trustCode-------Hubablli
2023-06-01 17:09:58.533 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) 

2023-06-01 17:09:58.533 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) m_currentConfigLocation  "D:/TempleFiles/Temple-main/bins/Config/Hubablli" 

2023-06-01 17:09:58.533 DBG default: Inside lamda 

2023-06-01 17:09:58.533 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) 

2023-06-01 17:09:58.533 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) m_currentDataLocation  "D:/TempleFiles/Temple-main/bins/Data/Hubablli" 

2023-06-01 17:09:58.533 DBG default: Inside lamda 

2023-06-01 17:09:58.533 DBG default: QString TrustListModel::getConfigLocation() 

2023-06-01 17:09:58.552 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-06-01 17:09:58.552 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-06-01 17:09:58.553 DBG default: Creating the DataBase Connection  

2023-06-01 17:09:58.572 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-06-01 17:09:58.572 DBG default: QString TrustListModel::getDataLocation() 

2023-06-01 17:09:58.577 DBG default: DBInterface::DBInterface(QObject*) ******************* DB "D:/TempleFiles/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-06-01 17:09:58.577 DBG default: Database is opened  "D:/TempleFiles/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-06-01 17:09:58.580 DBG default: Sevabboking table not created
2023-06-01 17:09:58.580 DBG default: person details creation failed
2023-06-01 17:09:58.580 DBG default: SevaTypeJsonProcessor::SevaTypeJsonProcessor(QObject*) 

2023-06-01 17:09:58.581 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate() 

2023-06-01 17:09:58.581 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-06-01 17:09:58.581 DBG default: QString TrustListModel::getConfigLocation() 

2023-06-01 17:09:58.587 DBG default: file opened 

2023-06-01 17:09:58.587 DBG default: read all 

2023-06-01 17:09:58.587 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-06-01 17:09:58.587 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  1000 

2023-06-01 17:09:58.587 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 1000 

2023-06-01 17:09:58.587 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  1000 already exist in DB 

2023-06-01 17:09:58.587 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-06-01 17:09:58.587 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  2000 

2023-06-01 17:09:58.587 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 2000 

2023-06-01 17:09:58.587 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  2000 already exist in DB 

2023-06-01 17:09:58.587 DBG default: void SevaTypeJsonProcessor::printSevaTypeNames() 

2023-06-01 17:09:58.587 DBG default: 1000 :  "Regular Seva" , 1000 , "Raj" 

2023-06-01 17:09:58.587 DBG default: 2000 :  "Aradhana Seva" , 2000 , "Abhi" 

2023-06-01 17:09:58.587 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-06-01 17:09:58.588 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-06-01 17:09:58.588 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-06-01 17:09:58.588 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-06-01 17:09:58.588 DBG default: QString TrustListModel::getConfigLocation() 

2023-06-01 17:09:58.588 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  path "D:/TempleFiles/Temple-main/bins/Config/Hubablli/SevaNames.json" 

2023-06-01 17:09:58.588 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-06-01 17:09:58.593 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() file opened 

2023-06-01 17:09:58.593 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() read all 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Udayaasthamaana Seva" 

2023-06-01 17:09:58.594 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.594 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1001 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.594 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Udayaasthamaana Seva"  sevaId=  1001 

2023-06-01 17:09:58.594 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1001 

2023-06-01 17:09:58.594 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1001 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Seva" 

2023-06-01 17:09:58.594 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.594 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1002 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.594 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.594 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Seva"  sevaId=  1002 

2023-06-01 17:09:58.595 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1002 

2023-06-01 17:09:58.595 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1002 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Samarpana Seva" 

2023-06-01 17:09:58.595 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.595 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1003 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.595 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Samarpana Seva"  sevaId=  1003 

2023-06-01 17:09:58.595 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1003 

2023-06-01 17:09:58.595 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1003 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakaabhisheka" 

2023-06-01 17:09:58.595 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.595 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1004 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.595 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakaabhisheka"  sevaId=  1004 

2023-06-01 17:09:58.595 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1004 

2023-06-01 17:09:58.595 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1004 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.595 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Godhana" 

2023-06-01 17:09:58.595 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.595 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.596 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1005 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.597 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Godhana"  sevaId=  1005 

2023-06-01 17:09:58.597 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1005 

2023-06-01 17:09:58.597 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1005 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mahaa Pooja" 

2023-06-01 17:09:58.597 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.597 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1006 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.597 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mahaa Pooja"  sevaId=  1006 

2023-06-01 17:09:58.597 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1006 

2023-06-01 17:09:58.597 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1006 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ksheeraabhisheka" 

2023-06-01 17:09:58.597 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.597 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1007 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.597 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.597 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ksheeraabhisheka"  sevaId=  1007 

2023-06-01 17:09:58.598 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1007 

2023-06-01 17:09:58.598 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1007 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Madhu Abhisheka" 

2023-06-01 17:09:58.598 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.598 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1008 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.598 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Madhu Abhisheka"  sevaId=  1008 

2023-06-01 17:09:58.598 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1008 

2023-06-01 17:09:58.598 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1008 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Yella Homagala Seva" 

2023-06-01 17:09:58.598 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.598 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1010 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.598 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Yella Homagala Seva"  sevaId=  1010 

2023-06-01 17:09:58.598 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1010 

2023-06-01 17:09:58.598 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1010 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Naivedhya/Hasthodaka" 

2023-06-01 17:09:58.598 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.598 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1011 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.598 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.599 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Naivedhya/Hasthodaka"  sevaId=  1011 

2023-06-01 17:09:58.599 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1011 

2023-06-01 17:09:58.599 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1011 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Phala - Panchaamrutha" 

2023-06-01 17:09:58.599 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.599 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1012 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.599 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Phala - Panchaamrutha"  sevaId=  1012 

2023-06-01 17:09:58.599 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1012 

2023-06-01 17:09:58.599 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1012 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ganapathi Abhisheka" 

2023-06-01 17:09:58.599 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.599 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1013 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.599 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ganapathi Abhisheka"  sevaId=  1013 

2023-06-01 17:09:58.599 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1013 

2023-06-01 17:09:58.599 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1013 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Nagadevara Abhisheka" 

2023-06-01 17:09:58.599 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.599 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1014 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.599 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.600 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Nagadevara Abhisheka"  sevaId=  1014 

2023-06-01 17:09:58.600 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1014 

2023-06-01 17:09:58.600 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1014 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Abhisheka" 

2023-06-01 17:09:58.600 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.600 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1015 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.600 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Abhisheka"  sevaId=  1015 

2023-06-01 17:09:58.600 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1015 

2023-06-01 17:09:58.600 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1015 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rathothsava" 

2023-06-01 17:09:58.600 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.600 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1016 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.600 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rathothsava"  sevaId=  1016 

2023-06-01 17:09:58.600 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1016 

2023-06-01 17:09:58.600 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1016 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Huggi Naivedhya" 

2023-06-01 17:09:58.600 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.600 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1017 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.600 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.601 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Huggi Naivedhya"  sevaId=  1017 

2023-06-01 17:09:58.601 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1017 

2023-06-01 17:09:58.601 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1017 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pongal Naivedhya" 

2023-06-01 17:09:58.601 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.601 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1018 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.601 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pongal Naivedhya"  sevaId=  1018 

2023-06-01 17:09:58.601 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1018 

2023-06-01 17:09:58.601 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1018 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Grahana Shanthi" 

2023-06-01 17:09:58.601 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.601 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1019 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.601 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Grahana Shanthi"  sevaId=  1019 

2023-06-01 17:09:58.601 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1019 

2023-06-01 17:09:58.601 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1019 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika - Rathothsava" 

2023-06-01 17:09:58.601 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.601 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1020 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.601 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.601 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika - Rathothsava"  sevaId=  1020 

2023-06-01 17:09:58.602 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1020 

2023-06-01 17:09:58.602 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1020 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika Seva" 

2023-06-01 17:09:58.602 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.602 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1021 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.602 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika Seva"  sevaId=  1021 

2023-06-01 17:09:58.602 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1021 

2023-06-01 17:09:58.602 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1021 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sri Sathya Narayana Pooja" 

2023-06-01 17:09:58.602 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.602 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1022 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.602 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sri Sathya Narayana Pooja"  sevaId=  1022 

2023-06-01 17:09:58.602 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1022 

2023-06-01 17:09:58.602 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1022 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Tulsi Archane" 

2023-06-01 17:09:58.602 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.602 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1023 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.602 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.602 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Tulsi Archane"  sevaId=  1023 

2023-06-01 17:09:58.603 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1023 

2023-06-01 17:09:58.603 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1023 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Chataka Shraadha" 

2023-06-01 17:09:58.603 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.603 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1024 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.603 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Chataka Shraadha"  sevaId=  1024 

2023-06-01 17:09:58.603 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1024 

2023-06-01 17:09:58.603 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1024 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sankalpa Shraadha" 

2023-06-01 17:09:58.603 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.603 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1025 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.603 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sankalpa Shraadha"  sevaId=  1025 

2023-06-01 17:09:58.603 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1025 

2023-06-01 17:09:58.603 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1025 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Vaahana Pooja" 

2023-06-01 17:09:58.603 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.603 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1026 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.603 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.604 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Vaahana Pooja"  sevaId=  1026 

2023-06-01 17:09:58.604 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1026 

2023-06-01 17:09:58.604 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1026 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Archane Seva" 

2023-06-01 17:09:58.604 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.604 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1027 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.604 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Archane Seva"  sevaId=  1027 

2023-06-01 17:09:58.604 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1027 

2023-06-01 17:09:58.604 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1027 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Lakshmi Pooja" 

2023-06-01 17:09:58.604 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.604 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1028 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.604 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Lakshmi Pooja"  sevaId=  1028 

2023-06-01 17:09:58.604 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1028 

2023-06-01 17:09:58.604 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1028 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.604 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Devarige Thailaabhisheka" 

2023-06-01 17:09:58.605 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.605 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1029 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.605 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Devarige Thailaabhisheka"  sevaId=  1029 

2023-06-01 17:09:58.605 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1029 

2023-06-01 17:09:58.605 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1029 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pavamaana Homa" 

2023-06-01 17:09:58.605 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.605 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1030 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.605 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pavamaana Homa"  sevaId=  1030 

2023-06-01 17:09:58.605 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1030 

2023-06-01 17:09:58.605 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1030 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Gana Homa" 

2023-06-01 17:09:58.605 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.605 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1031 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.605 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Gana Homa"  sevaId=  1031 

2023-06-01 17:09:58.605 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1031 

2023-06-01 17:09:58.605 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1031 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mruthyunjaya Homa" 

2023-06-01 17:09:58.605 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.605 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.605 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1032 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.606 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mruthyunjaya Homa"  sevaId=  1032 

2023-06-01 17:09:58.606 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1032 

2023-06-01 17:09:58.606 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1032 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rudraabhisheka" 

2023-06-01 17:09:58.606 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.606 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1033 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.606 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rudraabhisheka"  sevaId=  1033 

2023-06-01 17:09:58.606 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1033 

2023-06-01 17:09:58.606 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1033 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Sampurna Seva" 

2023-06-01 17:09:58.606 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.606 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2001 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.606 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Sampurna Seva"  sevaId=  2001 

2023-06-01 17:09:58.606 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2001 

2023-06-01 17:09:58.606 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2001 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Anna Santharpane Seva" 

2023-06-01 17:09:58.606 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.606 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2002 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.606 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.607 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Anna Santharpane Seva"  sevaId=  2002 

2023-06-01 17:09:58.607 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2002 

2023-06-01 17:09:58.607 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2002 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva(Huvina Alankara)" 

2023-06-01 17:09:58.607 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.607 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2003 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.607 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva(Huvina Alankara)"  sevaId=  2003 

2023-06-01 17:09:58.607 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2003 

2023-06-01 17:09:58.607 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2003 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva" 

2023-06-01 17:09:58.607 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.607 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2004 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.607 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva"  sevaId=  2004 

2023-06-01 17:09:58.607 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2004 

2023-06-01 17:09:58.607 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2004 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Noothana Vastra Seva" 

2023-06-01 17:09:58.607 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.607 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.607 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2005 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.608 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Noothana Vastra Seva"  sevaId=  2005 

2023-06-01 17:09:58.608 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2005 

2023-06-01 17:09:58.608 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2005 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva seva" 

2023-06-01 17:09:58.608 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.608 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2006 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.608 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva seva"  sevaId=  2006 

2023-06-01 17:09:58.608 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2006 

2023-06-01 17:09:58.608 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2006 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakabhisheka Seva" 

2023-06-01 17:09:58.608 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.608 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2007 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.608 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakabhisheka Seva"  sevaId=  2007 

2023-06-01 17:09:58.608 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2007 

2023-06-01 17:09:58.608 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2007 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Hasthodaka Seva(Prathidina)" 

2023-06-01 17:09:58.608 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.608 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2009 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.608 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.608 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Hasthodaka Seva(Prathidina)"  sevaId=  2009 

2023-06-01 17:09:58.609 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2009 

2023-06-01 17:09:58.609 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2009 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "MahaPooje" 

2023-06-01 17:09:58.609 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.609 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2010 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.609 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "MahaPooje"  sevaId=  2010 

2023-06-01 17:09:58.609 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2010 

2023-06-01 17:09:58.609 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2010 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ashtothara Seva(Prathidina)" 

2023-06-01 17:09:58.609 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.609 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2011 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.609 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ashtothara Seva(Prathidina)"  sevaId=  2011 

2023-06-01 17:09:58.609 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2011 

2023-06-01 17:09:58.609 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2011 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Paadakaradhane" 

2023-06-01 17:09:58.609 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.609 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2012 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.609 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Paadakaradhane"  sevaId=  2012 

2023-06-01 17:09:58.609 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2012 

2023-06-01 17:09:58.609 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2012 

2023-06-01 17:09:58.609 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "GanaHoma" 

2023-06-01 17:09:58.610 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.610 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2013 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.610 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "GanaHoma"  sevaId=  2013 

2023-06-01 17:09:58.610 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2013 

2023-06-01 17:09:58.610 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2013 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "PhalaPanchamrutha Seva" 

2023-06-01 17:09:58.610 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-06-01 17:09:58.610 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2014 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-06-01 17:09:58.610 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "PhalaPanchamrutha Seva"  sevaId=  2014 

2023-06-01 17:09:58.610 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2014 

2023-06-01 17:09:58.610 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2014 

2023-06-01 17:09:58.610 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-06-01 17:09:58.610 DBG default: void SevaTypeJsonProcessor::printSevasNames() 

2023-06-01 17:09:58.610 DBG default: 1001 :  "Udayaasthamaana Seva" , 1001 , 1 , 1000 , 5000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1002 :  "Sarva Seva" , 1002 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1003 :  "Sarva Samarpana Seva" , 1003 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1004 :  "Kanakaabhisheka" , 1004 , 1 , 1000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1005 :  "Godhana" , 1005 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1006 :  "Mahaa Pooja" , 1006 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1007 :  "Ksheeraabhisheka" , 1007 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1008 :  "Madhu Abhisheka" , 1008 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1010 :  "Yella Homagala Seva" , 1010 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1011 :  "Naivedhya/Hasthodaka" , 1011 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1012 :  "Phala - Panchaamrutha" , 1012 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1013 :  "Ganapathi Abhisheka" , 1013 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1014 :  "Nagadevara Abhisheka" , 1014 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1015 :  "Navagraha Abhisheka" , 1015 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1016 :  "Rathothsava" , 1016 , 1 , 1000 , 1000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1017 :  "Huggi Naivedhya" , 1017 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.610 DBG default: 1018 :  "Pongal Naivedhya" , 1018 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.611 DBG default: 1019 :  "Grahana Shanthi" , 1019 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.611 DBG default: 1020 :  "Kaarthika - Rathothsava" , 1020 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.611 DBG default: 1021 :  "Kaarthika Seva" , 1021 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.611 DBG default: 1022 :  "Sri Sathya Narayana Pooja" , 1022 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 1023 :  "Tulsi Archane" , 1023 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 1024 :  "Chataka Shraadha" , 1024 , 1 , 1000 , 600 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 1025 :  "Sankalpa Shraadha" , 1025 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 1026 :  "Vaahana Pooja" , 1026 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 1027 :  "Archane Seva" , 1027 , 1 , 1000 , 25 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 1028 :  "Lakshmi Pooja" , 1028 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 1029 :  "Navagraha Devarige Thailaabhisheka" , 1029 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 1030 :  "Pavamaana Homa" , 1030 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 1031 :  "Gana Homa" , 1031 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 1032 :  "Mruthyunjaya Homa" , 1032 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 1033 :  "Rudraabhisheka" , 1033 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 2001 :  "Ondu Dinada Sampurna Seva" , 2001 , 1 , 2000 , 25001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 2002 :  "Ondu Dinada Anna Santharpane Seva" , 2002 , 1 , 2000 , 20001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 2003 :  "Alankara Seva(Huvina Alankara)" , 2003 , 1 , 2000 , 10001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 2004 :  "Alankara Seva" , 2004 , 1 , 2000 , 5001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 2005 :  "Noothana Vastra Seva" , 2005 , 1 , 2000 , 4000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 2006 :  "Sarva seva" , 2006 , 1 , 2000 , 2501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 2007 :  "Kanakabhisheka Seva" , 2007 , 1 , 2000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 2009 :  "Hasthodaka Seva(Prathidina)" , 2009 , 1 , 2000 , 1001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 2010 :  "MahaPooje" , 2010 , 1 , 2000 , 800 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 2011 :  "Ashtothara Seva(Prathidina)" , 2011 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 2012 :  "Paadakaradhane" , 2012 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 2013 :  "GanaHoma" , 2013 , 1 , 2000 , 101 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: 2014 :  "PhalaPanchamrutha Seva" , 2014 , 1 , 2000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-06-01 17:09:58.612 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-06-01 17:09:58.612 DBG default: Creating the SevaTypeNamesDataModel  

2023-06-01 17:09:58.612 DBG default: SevaBookingConformationDataModel::SevaBookingConformationDataModel(QObject*) 

2023-06-01 17:09:58.612 DBG default: JsonWriter::JsonWriter(QObject*) 

2023-06-01 17:09:58.612 DBG default: SevaTypeNamesDataModel::SevaTypeNamesDataModel(QObject*) 

2023-06-01 17:09:58.612 DBG default: void SevaTypeNamesDataModel::connectSignals() 

2023-06-01 17:09:58.612 DBG default: bool SevaTypeNamesDataModel::querySevaTypes() 

2023-06-01 17:09:58.612 DBG default: bool DBInterface::querySevaType() 

2023-06-01 17:09:58.612 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.612 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.612 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1 

2023-06-01 17:09:58.612 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.612 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.612 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2 

2023-06-01 17:09:58.612 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.612 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.612 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 3 

2023-06-01 17:09:58.612 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.612 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.612 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 4 

2023-06-01 17:09:58.612 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.612 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 5 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 6 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 7 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 8 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 9 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 10 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 11 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 12 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 13 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 14 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 15 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 16 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 0 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 18 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 19 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 20 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 25 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 22 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1000 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2000 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 26 

2023-06-01 17:09:58.613 DBG default: bool DBInterface::querySevaType() querying seva type done 

2023-06-01 17:09:58.613 DBG default: bool SevaTypeNamesDataModel::querySevaNames() 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka"  Type = 1  SevaID = 2 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka"  Type = 1  SevaID = 3 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dwadashi Hasthodaka"  Type = 1  SevaID = 4 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi Homa"  Type = 9  SevaID = 5 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))), QMap((5, SevaName(0x9487c08))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Panchamrutha/Abhisheka"  Type = 1  SevaID = 6 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))), QMap((5, SevaName(0x9487c08))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Samanya Kanike"  Type = 1  SevaID = 7 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))), QMap((5, SevaName(0x9487c08))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shop Kanike"  Type = 11  SevaID = 9 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))), QMap((5, SevaName(0x9487c08))), QMap((9, SevaName(0x9487cf8))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya thaila seva"  Type = 9  SevaID = 10 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))), QMap((9, SevaName(0x9487cf8))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Building Fund"  Type = 12  SevaID = 11 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankar Pankthi"  Type = 4  SevaID = 12 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))), QMap((12, SevaName(0x94878e8))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Aradhna Kanike"  Type = 4  SevaID = 13 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadhana "  Type = 4  SevaID = 14 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hundi Collections"  Type = 13  SevaID = 15 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Khara Huggi"  Type = 8  SevaID = 16 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sweet Huggi"  Type = 8  SevaID = 17 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thatte Hasthodaka"  Type = 1  SevaID = 18 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Advance Recovered"  Type = 9  SevaID = 19 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PP - Rent"  Type = 14  SevaID = 20 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Annadana Seva"  Type = 3  SevaID = 23 

2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((23, SevaName(0x94874d8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.614 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa"  Type = 3  SevaID = 24 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa Sankalp"  Type = 3  SevaID = 25 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachna Seva-All days"  Type = 3  SevaID = 26 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachana seva- 1 day"  Type = 3  SevaID = 27 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami  Annadana Sankalpa Seva"  Type = 3  SevaID = 28 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Hoovina Alankara seva"  Type = 3  SevaID = 29 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navmi Sarva seva"  Type = 3  SevaID = 30 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sumadhwavijaya Parayana seva"  Type = 3  SevaID = 31 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Prakarosthava"  Type = 3  SevaID = 34 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Seva"  Type = 3  SevaID = 35 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Gruha Padapooja"  Type = 3  SevaID = 36 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Serva Seva"  Type = 1  SevaID = 37 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Kanike"  Type = 3  SevaID = 38 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Annadana seva "  Type = 3  SevaID = 39 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pandith Sanman"  Type = 3  SevaID = 40 

2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.615 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M  Navami Panchamurtha "  Type = 3  SevaID = 41 

2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))))
2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Shanthi Homa"  Type = 15  SevaID = 42 

2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))))
2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Padapooja"  Type = 3  SevaID = 43 

2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))))
2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Madhu Abhiseka"  Type = 3  SevaID = 44 

2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))))
2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gopaladasara Aradhane"  Type = 16  SevaID = 45 

2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Additional Sweets"  Type = 9  SevaID = 46 

2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina alankara Seva"  Type = 1  SevaID = 47 

2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prasada Seve"  Type = 1  SevaID = 48 

2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka- 2 Hasthodaka"  Type = 1  SevaID = 49 

2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sathyanarayana Pooje"  Type = 10  SevaID = 50 

2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "AYUSH HOMA"  Type = 15  SevaID = 51 

2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILA ABHYANJANA"  Type = 9  SevaID = 52 

2023-06-01 17:09:58.616 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharana"  Type = 9  SevaID = 53 

2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI  SAMPOORNA SEVE"  Type = 2  SevaID = 54 

2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI SANKLAPA SEVE"  Type = 2  SevaID = 55 

2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA"  Type = 2  SevaID = 56 

2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA SANKALPA"  Type = 2  SevaID = 57 

2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SITA RAMA KALYANOTSVA"  Type = 2  SevaID = 58 

2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMA KALYANOTSAVA SANKALPAA"  Type = 2  SevaID = 59 

2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA PRAVACHANA SEVE "  Type = 2  SevaID = 60 

2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "YELLA DINAGALA PRAVACHANA SEVE"  Type = 2  SevaID = 61 

2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.617 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "HOOVINA ALANKARA"  Type = 2  SevaID = 62 

2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi"  Type = 2  SevaID = 63 

2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA SANJE PRASADA SEVE"  Type = 2  SevaID = 64 

2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "VISHESHA PANCHAMRUTA"  Type = 2  SevaID = 65 

2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRAKAROTSVA"  Type = 2  SevaID = 66 

2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILABYAJANA SEVE"  Type = 2  SevaID = 67 

2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ARCHANE"  Type = 2  SevaID = 68 

2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))))
2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Raghavendra Swamy Aradhane"  Type = 16  SevaID = 69 

2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))))
2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Abhisheka Madhu/Panchamrutha"  Type = 4  SevaID = 70 

2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))))
2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtottara"  Type = 4  SevaID = 71 

2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))))
2023-06-01 17:09:58.618 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara"  Type = 4  SevaID = 72 

2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))))
2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 4  SevaID = 73 

2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))))
2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Deepalankarana Seve"  Type = 7  SevaID = 74 

2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))))
2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tarakari Seve"  Type = 1  SevaID = 75 

2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))))
2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seva"  Type = 4  SevaID = 76 

2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))))
2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Bhiksha kanike"  Type = 18  SevaID = 77 

2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))))
2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "hastodaka P P"  Type = 5  SevaID = 78 

2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))))
2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka P P"  Type = 5  SevaID = 79 

2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))))
2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa  P P"  Type = 5  SevaID = 80 

2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))))
2023-06-01 17:09:58.619 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Nanda Deepa for 9 days"  Type = 6  SevaID = 81 

2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))))
2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Nanda Deepa for  9 days"  Type = 6  SevaID = 82 

2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))))
2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Deepa for 1 day"  Type = 6  SevaID = 83 

2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))))
2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Deepa for 1 day"  Type = 6  SevaID = 84 

2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))))
2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seve"  Type = 1  SevaID = 85 

2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))))
2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadana Kanike"  Type = 1  SevaID = 86 

2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))))
2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana"  Type = 19  SevaID = 87 

2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))))
2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana for one day"  Type = 19  SevaID = 88 

2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.620 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana Seva for one day"  Type = 6  SevaID = 89 

2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nitya Deepaseve"  Type = 7  SevaID = 90 

2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjana"  Type = 7  SevaID = 91 

2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Seve"  Type = 7  SevaID = 92 

2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Laksha Deepostava"  Type = 7  SevaID = 93 

2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Pratyekavagi "  Type = 7  SevaID = 94 

2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulasi Damodara Vivaha sankalpa"  Type = 7  SevaID = 95 

2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sampoorna Seve "  Type = 7  SevaID = 96 

2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.621 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sankalpa Seve "  Type = 7  SevaID = 97 

2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Hoovina Alankara "  Type = 7  SevaID = 98 

2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha Abhisheka "  Type = 7  SevaID = 99 

2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vijaya Dasara Aradhane"  Type = 16  SevaID = 100 

2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarotsva"  Type = 1  SevaID = 101 

2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 0  SevaID = 102 

2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 1  SevaID = 103 

2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtotthara Kanike"  Type = 1  SevaID = 104 

2023-06-01 17:09:58.622 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.623 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Santhana Gopala Krishna Homa"  Type = 15  SevaID = 105 

2023-06-01 17:09:58.623 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.623 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamana Homa"  Type = 15  SevaID = 106 

2023-06-01 17:09:58.623 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))))
2023-06-01 17:09:58.623 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shashwatha Seva Pooje"  Type = 20  SevaID = 107 

2023-06-01 17:09:58.623 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))))
2023-06-01 17:09:58.623 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Regular"  Type = 1  SevaID = 108 

2023-06-01 17:09:58.623 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))))
2023-06-01 17:09:58.623 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Seva"  Type = 8  SevaID = 109 

2023-06-01 17:09:58.623 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))))
2023-06-01 17:09:58.623 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mosaranna Naivedya"  Type = 9  SevaID = 110 

2023-06-01 17:09:58.623 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))))
2023-06-01 17:09:58.623 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Poorna Pragna Hall Kanike"  Type = 14  SevaID = 111 

2023-06-01 17:09:58.624 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))), QMap((50, SevaName(0x9487668))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))))
2023-06-01 17:09:58.624 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pratyeka Sathyanarayana Pooja"  Type = 10  SevaID = 112 

2023-06-01 17:09:58.625 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))))
2023-06-01 17:09:58.625 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chikka Adige"  Type = 9  SevaID = 113 

2023-06-01 17:09:58.625 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))))
2023-06-01 17:09:58.625 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha"  Type = 21  SevaID = 114 

2023-06-01 17:09:58.625 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))))
2023-06-01 17:09:58.625 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjan seve"  Type = 21  SevaID = 115 

2023-06-01 17:09:58.625 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))))
2023-06-01 17:09:58.625 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri SeethaRamanjaneyarige Nuthana Vastra Dharane pratidevarige."  Type = 21  SevaID = 116 

2023-06-01 17:09:58.625 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))))
2023-06-01 17:09:58.625 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 21  SevaID = 117 

2023-06-01 17:09:58.625 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))))
2023-06-01 17:09:58.625 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane"  Type = 21  SevaID = 118 

2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))))
2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara seve"  Type = 21  SevaID = 119 

2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))))
2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ramanavami Kanike"  Type = 2  SevaID = 120 

2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))))
2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Villeydhele Hara"  Type = 1  SevaID = 121 

2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))))
2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gandha Lepana "  Type = 22  SevaID = 122 

2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))))
2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phalahara Pooja"  Type = 9  SevaID = 123 

2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))))
2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 15  SevaID = 124 

2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))))
2023-06-01 17:09:58.626 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Monthly"  Type = 1  SevaID = 125 

2023-06-01 17:09:58.627 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))))
2023-06-01 17:09:58.627 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Jayathirtha Aradhane Kanike"  Type = 16  SevaID = 126 

2023-06-01 17:09:58.627 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))))
2023-06-01 17:09:58.627 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Oldarticals sold"  Type = 9  SevaID = 127 

2023-06-01 17:09:58.627 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))))
2023-06-01 17:09:58.627 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Udayaasthamaana Seva"  Type = 1000  SevaID = 1001 

2023-06-01 17:09:58.627 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))))
2023-06-01 17:09:58.627 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Seva"  Type = 1000  SevaID = 1002 

2023-06-01 17:09:58.627 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))))
2023-06-01 17:09:58.627 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Samarpana Seva"  Type = 1000  SevaID = 1003 

2023-06-01 17:09:58.627 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))))
2023-06-01 17:09:58.627 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakaabhisheka"  Type = 1000  SevaID = 1004 

2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))))
2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Godhana"  Type = 1000  SevaID = 1005 

2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))))
2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mahaa Pooja"  Type = 1000  SevaID = 1006 

2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))))
2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ksheeraabhisheka"  Type = 1000  SevaID = 1007 

2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))))
2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Madhu Abhisheka"  Type = 1000  SevaID = 1008 

2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))))
2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Yella Homagala Seva"  Type = 1000  SevaID = 1010 

2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))))
2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Naivedhya/Hasthodaka"  Type = 1000  SevaID = 1011 

2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))))
2023-06-01 17:09:58.628 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phala - Panchaamrutha"  Type = 1000  SevaID = 1012 

2023-06-01 17:09:58.629 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))))
2023-06-01 17:09:58.629 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ganapathi Abhisheka"  Type = 1000  SevaID = 1013 

2023-06-01 17:09:58.629 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))))
2023-06-01 17:09:58.629 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nagadevara Abhisheka"  Type = 1000  SevaID = 1014 

2023-06-01 17:09:58.629 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))))
2023-06-01 17:09:58.629 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Abhisheka"  Type = 1000  SevaID = 1015 

2023-06-01 17:09:58.629 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))))
2023-06-01 17:09:58.629 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rathothsava"  Type = 1000  SevaID = 1016 

2023-06-01 17:09:58.629 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))))
2023-06-01 17:09:58.629 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Naivedhya"  Type = 1000  SevaID = 1017 

2023-06-01 17:09:58.629 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))))
2023-06-01 17:09:58.629 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pongal Naivedhya"  Type = 1000  SevaID = 1018 

2023-06-01 17:09:58.630 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))))
2023-06-01 17:09:58.630 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi"  Type = 1000  SevaID = 1019 

2023-06-01 17:09:58.630 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))))
2023-06-01 17:09:58.630 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika - Rathothsava"  Type = 1000  SevaID = 1020 

2023-06-01 17:09:58.630 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))))
2023-06-01 17:09:58.630 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika Seva"  Type = 1000  SevaID = 1021 

2023-06-01 17:09:58.630 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))))
2023-06-01 17:09:58.630 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri Sathya Narayana Pooja"  Type = 1000  SevaID = 1022 

2023-06-01 17:09:58.630 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))))
2023-06-01 17:09:58.630 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulsi Archane"  Type = 1000  SevaID = 1023 

2023-06-01 17:09:58.631 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))))
2023-06-01 17:09:58.631 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka Shraadha"  Type = 1000  SevaID = 1024 

2023-06-01 17:09:58.631 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))))
2023-06-01 17:09:58.631 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa Shraadha"  Type = 1000  SevaID = 1025 

2023-06-01 17:09:58.631 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))))
2023-06-01 17:09:58.631 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vaahana Pooja"  Type = 1000  SevaID = 1026 

2023-06-01 17:09:58.631 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))))
2023-06-01 17:09:58.631 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane Seva"  Type = 1000  SevaID = 1027 

2023-06-01 17:09:58.631 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))))
2023-06-01 17:09:58.631 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Lakshmi Pooja"  Type = 1000  SevaID = 1028 

2023-06-01 17:09:58.631 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))))
2023-06-01 17:09:58.632 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Devarige Thailaabhisheka"  Type = 1000  SevaID = 1029 

2023-06-01 17:09:58.632 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))))
2023-06-01 17:09:58.632 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamaana Homa"  Type = 1000  SevaID = 1030 

2023-06-01 17:09:58.632 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))))
2023-06-01 17:09:58.632 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gana Homa"  Type = 1000  SevaID = 1031 

2023-06-01 17:09:58.632 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))))
2023-06-01 17:09:58.632 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mruthyunjaya Homa"  Type = 1000  SevaID = 1032 

2023-06-01 17:09:58.632 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))))
2023-06-01 17:09:58.632 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rudraabhisheka"  Type = 1000  SevaID = 1033 

2023-06-01 17:09:58.632 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))))
2023-06-01 17:09:58.633 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Sampurna Seva"  Type = 2000  SevaID = 2001 

2023-06-01 17:09:58.633 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))))
2023-06-01 17:09:58.633 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Anna Santharpane Seva"  Type = 2000  SevaID = 2002 

2023-06-01 17:09:58.633 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))))
2023-06-01 17:09:58.633 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva(Huvina Alankara)"  Type = 2000  SevaID = 2003 

2023-06-01 17:09:58.633 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))))
2023-06-01 17:09:58.633 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva"  Type = 2000  SevaID = 2004 

2023-06-01 17:09:58.633 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))(2004, SevaName(0x94c0838))))
2023-06-01 17:09:58.633 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Noothana Vastra Seva"  Type = 2000  SevaID = 2005 

2023-06-01 17:09:58.634 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))(2004, SevaName(0x94c0838))(2005, SevaName(0x94c0568))))
2023-06-01 17:09:58.634 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva seva"  Type = 2000  SevaID = 2006 

2023-06-01 17:09:58.635 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))(2004, SevaName(0x94c0838))(2005, SevaName(0x94c0568))(2006, SevaName(0x94c0388))))
2023-06-01 17:09:58.635 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakabhisheka Seva"  Type = 2000  SevaID = 2007 

2023-06-01 17:09:58.637 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))(2004, SevaName(0x94c0838))(2005, SevaName(0x94c0568))(2006, SevaName(0x94c0388))(2007, SevaName(0x94c05b8))))
2023-06-01 17:09:58.638 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Seva(Prathidina)"  Type = 2000  SevaID = 2009 

2023-06-01 17:09:58.638 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))(2004, SevaName(0x94c0838))(2005, SevaName(0x94c0568))(2006, SevaName(0x94c0388))(2007, SevaName(0x94c05b8))(2009, SevaName(0x94c0298))))
2023-06-01 17:09:58.638 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "MahaPooje"  Type = 2000  SevaID = 2010 

2023-06-01 17:09:58.639 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))(2004, SevaName(0x94c0838))(2005, SevaName(0x94c0568))(2006, SevaName(0x94c0388))(2007, SevaName(0x94c05b8))(2009, SevaName(0x94c0298))(2010, SevaName(0x94c0888))))
2023-06-01 17:09:58.639 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtothara Seva(Prathidina)"  Type = 2000  SevaID = 2011 

2023-06-01 17:09:58.640 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))(2004, SevaName(0x94c0838))(2005, SevaName(0x94c0568))(2006, SevaName(0x94c0388))(2007, SevaName(0x94c05b8))(2009, SevaName(0x94c0298))(2010, SevaName(0x94c0888))(2011, SevaName(0x94c0108))))
2023-06-01 17:09:58.640 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Paadakaradhane"  Type = 2000  SevaID = 2012 

2023-06-01 17:09:58.641 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))(2004, SevaName(0x94c0838))(2005, SevaName(0x94c0568))(2006, SevaName(0x94c0388))(2007, SevaName(0x94c05b8))(2009, SevaName(0x94c0298))(2010, SevaName(0x94c0888))(2011, SevaName(0x94c0108))(2012, SevaName(0x94c02e8))))
2023-06-01 17:09:58.641 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 2000  SevaID = 2013 

2023-06-01 17:09:58.642 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))(2004, SevaName(0x94c0838))(2005, SevaName(0x94c0568))(2006, SevaName(0x94c0388))(2007, SevaName(0x94c05b8))(2009, SevaName(0x94c0298))(2010, SevaName(0x94c0888))(2011, SevaName(0x94c0108))(2012, SevaName(0x94c02e8))(2013, SevaName(0x94c0798))))
2023-06-01 17:09:58.642 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PhalaPanchamrutha Seva"  Type = 2000  SevaID = 2014 

2023-06-01 17:09:58.642 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))(2004, SevaName(0x94c0838))(2005, SevaName(0x94c0568))(2006, SevaName(0x94c0388))(2007, SevaName(0x94c05b8))(2009, SevaName(0x94c0298))(2010, SevaName(0x94c0888))(2011, SevaName(0x94c0108))(2012, SevaName(0x94c02e8))(2013, SevaName(0x94c0798))(2014, SevaName(0x94c06f8))))
2023-06-01 17:09:58.642 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ChatakaN"  Type = 1  SevaID = 2015 

2023-06-01 17:09:58.642 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))(2015, SevaName(0x94c0608))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))(2004, SevaName(0x94c0838))(2005, SevaName(0x94c0568))(2006, SevaName(0x94c0388))(2007, SevaName(0x94c05b8))(2009, SevaName(0x94c0298))(2010, SevaName(0x94c0888))(2011, SevaName(0x94c0108))(2012, SevaName(0x94c02e8))(2013, SevaName(0x94c0798))(2014, SevaName(0x94c06f8))))
2023-06-01 17:09:58.642 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SankalpaN"  Type = 1  SevaID = 2016 

2023-06-01 17:09:58.642 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))(2015, SevaName(0x94c0608))(2016, SevaName(0x94bfed8))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))(2004, SevaName(0x94c0838))(2005, SevaName(0x94c0568))(2006, SevaName(0x94c0388))(2007, SevaName(0x94c05b8))(2009, SevaName(0x94c0298))(2010, SevaName(0x94c0888))(2011, SevaName(0x94c0108))(2012, SevaName(0x94c02e8))(2013, SevaName(0x94c0798))(2014, SevaName(0x94c06f8))))
2023-06-01 17:09:58.642 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Poornapragna Hall Kanike N "  Type = 14  SevaID = 2017 

2023-06-01 17:09:58.642 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x94c7010))), QMap((2, SevaName(0x9487bb8))(3, SevaName(0x9487c58))(4, SevaName(0x94879d8))(6, SevaName(0x9487898))(7, SevaName(0x9487ca8))(18, SevaName(0x9487ac8))(37, SevaName(0x9487488))(47, SevaName(0x9487708))(48, SevaName(0x9487258))(49, SevaName(0x9487618))(75, SevaName(0x94c6110))(85, SevaName(0x94c6d40))(86, SevaName(0x94c6e30))(101, SevaName(0x94c69d0))(103, SevaName(0x94c6b10))(104, SevaName(0x94c6ca0))(108, SevaName(0x94c7240))(121, SevaName(0x94c7560))(125, SevaName(0x94c7470))(2015, SevaName(0x94c0608))(2016, SevaName(0x94bfed8))), QMap((54, SevaName(0x9487398))(55, SevaName(0x94c6890))(56, SevaName(0x94c6700))(57, SevaName(0x94c6200))(58, SevaName(0x94c6520))(59, SevaName(0x94c62a0))(60, SevaName(0x94c6390))(61, SevaName(0x94c6750))(62, SevaName(0x94c67a0))(63, SevaName(0x94c62f0))(64, SevaName(0x94c5f30))(65, SevaName(0x94c64d0))(66, SevaName(0x94c67f0))(67, SevaName(0x94c5ee0))(68, SevaName(0x94c6840))(120, SevaName(0x94c7ba0))), QMap((23, SevaName(0x94874d8))(24, SevaName(0x94873e8))(25, SevaName(0x9487438))(26, SevaName(0x94870c8))(27, SevaName(0x94872a8))(28, SevaName(0x9487848))(29, SevaName(0x9486e98))(30, SevaName(0x9487118))(31, SevaName(0x9487528))(34, SevaName(0x9486ee8))(35, SevaName(0x94872f8))(36, SevaName(0x9487168))(38, SevaName(0x9487578))(39, SevaName(0x94875c8))(40, SevaName(0x9487758))(41, SevaName(0x94871b8))(43, SevaName(0x9487208))(44, SevaName(0x94877a8))), QMap((12, SevaName(0x94878e8))(13, SevaName(0x9487938))(14, SevaName(0x9487d98))(70, SevaName(0x94c6570))(71, SevaName(0x94c5f80))(72, SevaName(0x94c5fd0))(73, SevaName(0x94c6020))(76, SevaName(0x94c6160))), QMap((78, SevaName(0x94c65c0))(79, SevaName(0x94c6250))(80, SevaName(0x94c66b0))), QMap((81, SevaName(0x94c6340))(82, SevaName(0x94c63e0))(83, SevaName(0x94c6480))(84, SevaName(0x94c6610))(89, SevaName(0x94c6980))), QMap((74, SevaName(0x94c60c0))(90, SevaName(0x94c6b60))(91, SevaName(0x94c6bb0))(92, SevaName(0x94c6c00))(93, SevaName(0x94c6c50))(94, SevaName(0x94c6fc0))(95, SevaName(0x94c6e80))(96, SevaName(0x94c6ac0))(97, SevaName(0x94c6de0))(98, SevaName(0x94c6ed0))(99, SevaName(0x94c6d90))), QMap((16, SevaName(0x9487de8))(17, SevaName(0x9487988))(109, SevaName(0x94c7290))), QMap((5, SevaName(0x9487c08))(10, SevaName(0x9487a28))(19, SevaName(0x9487b68))(46, SevaName(0x9486fd8))(52, SevaName(0x94877f8))(53, SevaName(0x9487348))(110, SevaName(0x94c68e0))(113, SevaName(0x94c7970))(123, SevaName(0x94c7a60))(127, SevaName(0x94c75b0))), QMap((50, SevaName(0x9487668))(112, SevaName(0x94c6cf0))), QMap((9, SevaName(0x9487cf8))), QMap((11, SevaName(0x9487d48))), QMap((15, SevaName(0x9487b18))), QMap((20, SevaName(0x9487078))(111, SevaName(0x94c6a70))(2017, SevaName(0x94c07e8))), QMap((42, SevaName(0x9486f38))(51, SevaName(0x9487028))(105, SevaName(0x94c7100))(106, SevaName(0x94c7150))(124, SevaName(0x94c7ab0))), QMap((45, SevaName(0x9486f88))(69, SevaName(0x94c6070))(100, SevaName(0x94c70b0))(126, SevaName(0x94c7330))), QMap((77, SevaName(0x94c61b0))), QMap((87, SevaName(0x94c6930))(88, SevaName(0x94c6f20))), QMap((107, SevaName(0x94c71f0))), QMap((114, SevaName(0x94c77e0))(115, SevaName(0x94c7740))(116, SevaName(0x94c7880))(117, SevaName(0x94c7790))(118, SevaName(0x94c72e0))(119, SevaName(0x94c74c0))), QMap((122, SevaName(0x94c7510))), QMap((1001, SevaName(0x94c79c0))(1002, SevaName(0x94c7830))(1003, SevaName(0x94c7600))(1004, SevaName(0x94c78d0))(1005, SevaName(0x94c7b50))(1006, SevaName(0x94c7650))(1007, SevaName(0x94c7bf0))(1008, SevaName(0x94c7c40))(1010, SevaName(0x94c7920))(1011, SevaName(0x94c7a10))(1012, SevaName(0x94c76a0))(1013, SevaName(0x94c7c90))(1014, SevaName(0x94c7380))(1015, SevaName(0x94c73d0))(1016, SevaName(0x94c76f0))(1017, SevaName(0x94c7420))(1018, SevaName(0x94c7d80))(1019, SevaName(0x94c7ce0))(1020, SevaName(0x94c7e20))(1021, SevaName(0x94c7d30))(1022, SevaName(0x94c1d78))(1023, SevaName(0x94c1dc8))(1024, SevaName(0x94c1e18))(1025, SevaName(0x94c1cd8))(1026, SevaName(0x94c1d28))(1027, SevaName(0x94c0428))(1028, SevaName(0x94c0338))(1029, SevaName(0x94c0248))(1030, SevaName(0x94c0658))(1031, SevaName(0x94bff28))(1032, SevaName(0x94c04c8))(1033, SevaName(0x94c0478))), QMap((2001, SevaName(0x94c0518))(2002, SevaName(0x94c06a8))(2003, SevaName(0x94c03d8))(2004, SevaName(0x94c0838))(2005, SevaName(0x94c0568))(2006, SevaName(0x94c0388))(2007, SevaName(0x94c05b8))(2009, SevaName(0x94c0298))(2010, SevaName(0x94c0888))(2011, SevaName(0x94c0108))(2012, SevaName(0x94c02e8))(2013, SevaName(0x94c0798))(2014, SevaName(0x94c06f8))))
2023-06-01 17:09:58.642 DBG default: bool DBInterface::querySevaNames() querying seva names done 

2023-06-01 17:09:58.643 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-06-01 17:09:58.643 DBG default: UserManagement::UserManagement(QObject*) 

2023-06-01 17:09:58.643 DBG default: The role number recieved -1 

2023-06-01 17:09:58.643 DBG default: SevaDetailsTableView::SevaDetailsTableView(QObject*) 

2023-06-01 17:09:58.651 DBG default: hello suman 

2023-06-01 17:09:58.651 DBG default: AccountReportModel::AccountReportModel(QObject*) 

2023-06-01 17:09:58.651 DBG default: BookingReportModel::BookingReportModel(QObject*) 

2023-06-01 17:09:58.651 DBG default: AccountReportDateRangeModel::AccountReportDateRangeModel(QObject*) 

2023-06-01 17:09:58.651 DBG default: AccountReportMonthWiseModel::AccountReportMonthWiseModel(QObject*) 

2023-06-01 17:09:58.651 DBG default: BookingReportDateRangeModel::BookingReportDateRangeModel(QObject*) 

2023-06-01 17:09:58.651 DBG default: The connect status true 

2023-06-01 17:09:58.651 DBG default: BookingReportMonthWiseModel::BookingReportMonthWiseModel(QObject*) 

2023-06-01 17:09:58.651 DBG default: SevaBookingTableModel::SevaBookingTableModel(QObject*) 

2023-06-01 17:09:58.651 DBG default: SevaBookingSearchModel::SevaBookingSearchModel(QObject*) 

2023-06-01 17:09:58.652 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-06-01 17:09:58.652 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-06-01 17:09:58.652 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-06-01 17:09:58.652 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-06-01 17:09:58.652 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Date = 1  Mon = 6  Year = 2023
2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "1" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "2" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "3" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "4" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "4" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "5" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "6" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "6" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "7" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "8" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "9" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "10" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "11" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "11" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "12" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "12" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "13" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "13" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "14" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "15" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "16" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "17" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "18" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "18" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "19" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "20" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "21" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "22" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "23" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "24" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "25" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "25" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "26" 

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.652 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "27" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "28" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "29" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "30" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "31" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "32" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "33" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "34" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "35" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "36" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "37" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "38" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "39" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "40" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "41" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "42" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "42" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "43" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "44" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "45" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "46" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "47" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "48" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "49" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "50" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "51" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "52" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "53" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "54" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "55" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "55" 

2023-06-01 17:09:58.653 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "56" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "56" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "57" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "58" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "59" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "60" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "61" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "62" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "62" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "63" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "64" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "65" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "66" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "67" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "67" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "68" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "69" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "70" 

2023-06-01 17:09:58.654 WRN default: QSqlQuery::value: not positioned on a valid record
2023-06-01 17:09:58.654 DBG default: int DBInterface::getLastReceiptNumber()  Size =  -1  receiptNo ID =  70  Value =  QVariant(Invalid) 

2023-06-01 17:09:58.654 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Last ReceiptNo from DB = 71  Generated = "2023_6_0071" 

2023-06-01 17:09:58.654 DBG default: QString SevaViewProxy::getNextReceiptNumber()  r number =  "2023_6_0071" 

2023-06-01 17:09:58.654 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-06-01 17:09:58.654 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-06-01 17:09:58.655 DBG default: SevaCountOnDateModel::SevaCountOnDateModel(QObject*) 

2023-06-01 17:09:58.655 DBG default: hello suman 

2023-06-01 17:09:58.655 DBG default: saveVoucher::saveVoucher(QObject*) 

2023-06-01 17:09:58.655 DBG default: VoucherNumber::VoucherNumber() 

2023-06-01 17:09:58.655 DBG default: virtual QString VoucherNumber::getNextVoucherNumber() 

2023-06-01 17:09:58.655 DBG default: int DBInterface::getLastVoucherNumber() 

2023-06-01 17:09:58.655 DBG default: 3 

2023-06-01 17:09:58.655 DBG default: "4" 

2023-06-01 17:09:58.655 DBG default: VoucherReportModel::VoucherReportModel(QObject*) 

2023-06-01 17:09:58.655 DBG default: QString TrustListModel::getConfigLocation() 

2023-06-01 17:09:58.655 DBG default: QString TrustListModel::getDataLocation() 

2023-06-01 17:09:58.656 DBG qml: str1 = --D:/TempleFiles/Temple-main/bins/Config/Hubablli
2023-06-01 17:09:58.656 DBG qml: str2 = --D:/TempleFiles/Temple-main/bins/Data/Hubablli
2023-06-01 17:09:58.785 DBG qml: The Page Number=== 0
2023-06-01 17:09:58.785 DBG qml: The page number is 0
2023-06-01 17:09:58.785 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-06-01 17:09:58.785 DBG qml: Screen screenWidth size =1920
2023-06-01 17:09:58.785 DBG qml: Screen screenHeight size =1000
2023-06-01 17:09:58.785 WRN default: qrc:/ui/Login.qml:37:13: Unable to assign [undefined] to bool
2023-06-01 17:09:58.785 WRN default: qrc:/ui/Login.qml:44:13: Unable to assign [undefined] to bool
2023-06-01 17:09:58.785 WRN default: qrc:/ui/Login.qml:80:17: Unable to assign [undefined] to bool
2023-06-01 17:09:58.785 DBG default: int TrustListModel::getTrustListSize() 

2023-06-01 17:10:04.009 WRN default: qrc:/ui/Login.qml:128:17: QML QQuickTextInput*: Binding loop detected for property "focus"
2023-06-01 17:10:07.236 DBG default: void UserManagement::authorize(QString, QString) "admin" "admin123" 

2023-06-01 17:10:07.237 DBG qml: Credentials are correct
2023-06-01 17:10:07.237 DBG qml: Wrong credentials 0
2023-06-01 17:10:07.321 DBG qml: the accounts enable false
2023-06-01 17:10:07.321 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-06-01 17:10:07.321 DBG qml: Screen screenWidth size =1920
2023-06-01 17:10:07.321 DBG qml: Screen screenHeight size =1000
2023-06-01 17:10:07.321 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-06-01 17:10:07.321 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-06-01 17:10:07.321 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-06-01 17:10:07.321 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-06-01 17:10:07.321 DBG default: The role number is 1 

2023-06-01 17:10:07.321 DBG default: void UserManagement::user_Recieved(int, QString) 

2023-06-01 17:10:07.321 DBG default: The role number recieved 1 

2023-06-01 17:10:08.484 DBG qml: booking report button clicked
2023-06-01 17:10:08.484 DBG qml: Clicked on Bookingreport
2023-06-01 17:10:09.029 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-06-01 17:10:09.050 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:09.050 DBG default: 0 

2023-06-01 17:10:09.238 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-06-01 17:10:09.238 DBG default: const QString& ReportFilterElements::sYear() const 

2023-06-01 17:10:09.238 DBG qml:  bookings Selected year2015
2023-06-01 17:10:09.240 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-06-01 17:10:09.240 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-06-01 17:10:09.240 DBG qml: Selected month1
2023-06-01 17:10:09.241 WRN default: qrc:/ui/components/MyBookingFilter.qml:331:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.241 WRN default: qrc:/ui/components/MyBookingFilter.qml:342:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.308 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.308 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.331 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.336 WRN default: qrc:/ui/components/MyBookingFilter.qml:127:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.336 WRN default: qrc:/ui/components/MyBookingFilter.qml:165:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.337 WRN default: qrc:/ui/components/MyBookingFilter.qml:331:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.337 WRN default: qrc:/ui/components/MyBookingFilter.qml:342:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.337 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.337 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.337 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.337 WRN default: qrc:/ui/components/MyBookingFilter.qml:127:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.337 WRN default: qrc:/ui/components/MyBookingFilter.qml:165:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.337 DBG qml: In Component.onCompleted: of booking report page
2023-06-01 17:10:09.337 DBG qml: In  Component.onCompleted: loader brp
2023-06-01 17:10:09.342 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-06-01 17:10:09.342 DBG qml: In  Component.onCompleted: of table view of brp function() { [native code] }
2023-06-01 17:10:09.342 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-06-01 17:10:09.342 DBG default: const QString& ReportFilterElements::sYear() const 

2023-06-01 17:10:09.342 DBG qml: The month and year initial 1   2015
2023-06-01 17:10:09.342 DBG qml:  Trying to get the list category
2023-06-01 17:10:09.342 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-06-01 17:10:09.342 DBG default: bool SevaTypeViewModel::init() 

2023-06-01 17:10:09.342 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-06-01 17:10:09.342 DBG default: bool SevaTypeViewModel::init()  Number of Seva Types = 25 

2023-06-01 17:10:09.343 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-06-01 17:10:09.343 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.343 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.343 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.343 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.343 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-06-01 17:10:09.343 DBG default: void ReportFilterElements::setISevaType(int) 

2023-06-01 17:10:09.343 DBG default: int ReportFilterElements::iSevaType() const 

2023-06-01 17:10:09.343 DBG qml: 0
2023-06-01 17:10:09.343 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.343 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-06-01 17:10:09.343 DBG default: void ReportFilterElements::setISevaType(int) 

2023-06-01 17:10:09.343 DBG default: int ReportFilterElements::iSevaType() const 

2023-06-01 17:10:09.343 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.343 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-06-01 17:10:09.343 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-06-01 17:10:09.343 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-06-01 17:10:09.343 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-06-01 17:10:09.343 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-06-01 17:10:09.343 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x94b64d0) 

2023-06-01 17:10:09.343 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-06-01 17:10:09.343 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x94c7010))) 
(SevaName(0x94c7010)) 

2023-06-01 17:10:09.343 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x94c7010)) 

2023-06-01 17:10:09.343 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-06-01 17:10:09.343 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x94c7010))) 
(SevaName(0x94c7010)) 

2023-06-01 17:10:09.343 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-06-01 17:10:09.343 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-06-01 17:10:09.343 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-06-01 17:10:09.343 DBG qml: Seva name selected : Nithya Archane
2023-06-01 17:10:09.343 DBG default: int ReportFilterElements::iSevaType() const 

2023-06-01 17:10:09.343 DBG qml: Seva type selected in report filter : 0
2023-06-01 17:10:09.343 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.343 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.343 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.343 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-06-01 17:10:09.344 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-06-01 17:10:09.344 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-06-01 17:10:09.344 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-06-01 17:10:09.344 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-06-01 17:10:09.344 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x94b64d0) 

2023-06-01 17:10:09.344 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-06-01 17:10:09.344 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x94c7010))) 
(SevaName(0x94c7010)) 

2023-06-01 17:10:09.344 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x94c7010)) 

2023-06-01 17:10:09.344 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-06-01 17:10:09.344 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x94c7010))) 
(SevaName(0x94c7010)) 

2023-06-01 17:10:09.344 DBG default: void ReportFilterElements::setISevaType(int) 

2023-06-01 17:10:09.344 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-06-01 17:10:09.344 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-06-01 17:10:09.344 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:09.344 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:09.344 DBG qml:   _rip.sSingleDate 201-06-2023
2023-06-01 17:10:09.344 DBG default: void SevaReport::generateBookReport(ReportFilterElements*) 

2023-06-01 17:10:09.344 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:09.344 DBG default: 0 

2023-06-01 17:10:09.344 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 0 

2023-06-01 17:10:09.344 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 

2023-06-01 17:10:09.344 DBG default: Selected Type  0 

2023-06-01 17:10:09.344 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-06-01 17:10:09.344 DBG default: Selected Month  1 

2023-06-01 17:10:09.344 DBG default: const QString& ReportFilterElements::sYear() const 

2023-06-01 17:10:09.345 DBG default: Selected Year  2015 

2023-06-01 17:10:09.345 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:09.345 DBG default: Selected date  "01-06-2023" 

2023-06-01 17:10:09.345 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) Inside c date book rep 

2023-06-01 17:10:09.345 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:09.345 DBG default: QString BookingReportModel::FormatDate(QString) "01-06-2023" 

2023-06-01 17:10:09.345 DBG default: QString BookingReportModel::FormatDate(QString) QDate("2023-06-01") 

2023-06-01 17:10:09.345 DBG default: QString BookingReportModel::FormatDate(QString) "2023-06-01" 

2023-06-01 17:10:09.345 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-06-01 17:10:09.345 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:09.345 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-06-01" 

2023-06-01 17:10:09.345 DBG default: int ReportFilterElements::iSevaType() const 

2023-06-01 17:10:09.345 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-06-01 17:10:09.345 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:09.345 DBG default: 
Changed format is:  "2023-06-01" 

2023-06-01 17:10:09.345 DBG default: In type 0:  

2023-06-01 17:10:09.345 DBG default:  Query string = "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-06-01';" 

2023-06-01 17:10:09.345 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-06-01 17:10:09.345 DBG default:  Query string = true 

2023-06-01 17:10:09.345 DBG default:  Query prepared successfully = true 

2023-06-01 17:10:09.345 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-06-01 17:10:09.345 DBG default:  Query string =2222222222222 "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-06-01';" 

2023-06-01 17:10:09.345 DBG default:  Query string =@@@@@@@@@@@@@ QSqlError("", "", "") 

2023-06-01 17:10:09.346 DBG default: bool ReportFilterElements::bDatewise() const 

2023-06-01 17:10:09.346 DBG default: false 

2023-06-01 17:10:09.346 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:09.346 DBG default: "2023-06-01" 

2023-06-01 17:10:09.346 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-06-01 17:10:09.346 DBG default: int BookingReportModel::getBookingReportQryListSize() 

2023-06-01 17:10:09.346 DBG qml: Component.completed:if of mft.qml
2023-06-01 17:10:09.346 DBG qml: In onSendError
2023-06-01 17:10:09.346 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-06-01 17:10:09.346 DBG default: const QString& ReportFilterElements::sYear() const 

2023-06-01 17:10:09.346 DBG qml:  bookings Selected year2023
2023-06-01 17:10:09.346 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-06-01 17:10:09.346 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-06-01 17:10:09.346 DBG qml: Selected month6
2023-06-01 17:10:09.346 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.346 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.346 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.346 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-06-01 17:10:09.346 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.346 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.346 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.346 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 1 

2023-06-01 17:10:09.346 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.346 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.346 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.346 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 2 

2023-06-01 17:10:09.346 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.346 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 3 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 4 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 5 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 6 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 7 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 8 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 9 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 10 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 11 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 12 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 13 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 14 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 15 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 16 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 17 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 18 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 19 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 20 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 21 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 22 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 23 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-06-01 17:10:09.347 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 24 

2023-06-01 17:10:09.347 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-06-01 17:10:09.347 DBG qml: Screen screenWidth size =1920
2023-06-01 17:10:09.347 DBG qml: Screen screenHeight size =1000
2023-06-01 17:10:09.347 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-06-01 17:10:09.347 DBG qml: Screen screenWidth size =1920
2023-06-01 17:10:09.348 DBG qml: Screen screenHeight size =1000
2023-06-01 17:10:09.348 WRN default: qrc:/ui/MenuPage.qml:158:9: QML DisplayDialog: cannot find any window to open popup in.
2023-06-01 17:10:09.348 WRN default: qrc:/ui/components/MyBookingFilter.qml:127:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.348 WRN default: qrc:/ui/components/MyBookingFilter.qml:165:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.349 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.358 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.358 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.358 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.368 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.368 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.368 WRN default: qrc:/ui/components/MyBookingFilter.qml:331:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.368 WRN default: qrc:/ui/components/MyBookingFilter.qml:342:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.369 WRN default: qrc:/ui/components/MyBookingFilter.qml:331:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:09.369 WRN default: qrc:/ui/components/MyBookingFilter.qml:342:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-06-01 17:10:10.908 DBG qml: Ok clicked
2023-06-01 17:10:15.093 DBG qml: _month.currentIndex+1 51
2023-06-01 17:10:15.094 DBG qml: _year._data 2023
2023-06-01 17:10:20.660 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-06-01 17:10:20.660 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-06-01 17:10:20.660 DBG qml: Selected month5
2023-06-01 17:10:20.663 DBG qml:  Activated Index =4
2023-06-01 17:10:20.663 DBG qml: Selected Text =May
2023-06-01 17:10:20.664 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-06-01 17:10:20.664 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-06-01 17:10:20.664 DBG qml: Selected month5
2023-06-01 17:10:23.988 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-06-01 17:10:23.988 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-06-01 17:10:23.988 DBG qml: Selected month4
2023-06-01 17:10:23.992 DBG qml:  Activated Index =3
2023-06-01 17:10:23.992 DBG qml: Selected Text =April
2023-06-01 17:10:23.992 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-06-01 17:10:23.992 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-06-01 17:10:23.993 DBG qml: Selected month4
2023-06-01 17:10:25.092 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-06-01 17:10:25.092 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-06-01 17:10:25.092 DBG qml: I am hereeee
2023-06-01 17:10:25.092 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-06-01 17:10:25.092 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-06-01 17:10:25.092 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-06-01 17:10:25.092 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-06-01 17:10:25.092 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-06-01 17:10:25.092 DBG qml: ---------11----------------
2023-06-01 17:10:25.092 DBG qml: In onLoadDateWiseBookingPage
2023-06-01 17:10:25.216 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-06-01 17:10:25.218 WRN default: qrc:/ui/SevaBookingReportOnDateRange.qml:276:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-06-01 17:10:25.219 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-06-01 17:10:25.225 DBG qml: Component.completed: of SevaBookingReportOnDateRange.qml
2023-06-01 17:10:25.226 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-06-01 17:10:25.226 DBG qml: Screen screenWidth size =1920
2023-06-01 17:10:25.226 DBG qml: Screen screenHeight size =1000
2023-06-01 17:10:25.226 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadDateWiseBookingPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-06-01 17:10:25.226 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadDateWiseBookingForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-06-01 17:10:25.226 DBG qml: ---------12----------------
2023-06-01 17:10:25.226 DBG qml: In onSendBookingReportDateRangeInputForWholeMonth
2023-06-01 17:10:25.226 DBG qml: In main
2023-06-01 17:10:25.226 DBG default: void SevaReport::generateBookingReportForEachDateForWholeMonth(ReportFilterElements*) 

2023-06-01 17:10:25.226 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) 

2023-06-01 17:10:25.226 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-06-01 17:10:25.227 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) 0 

2023-06-01 17:10:25.227 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:25.227 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) elm date "01-06-2023" 

2023-06-01 17:10:25.227 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-06-01 17:10:25.227 DBG default: int ReportFilterElements::iSevaType() const 

2023-06-01 17:10:25.227 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetails "All" 0 

2023-06-01 17:10:25.227 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetailqqqqqqqqqqqqqqqqqs 2 

2023-06-01 17:10:25.227 DBG default: const QString& ReportFilterElements::sYear() const 

2023-06-01 17:10:25.227 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-06-01 17:10:25.227 DBG default: int ReportFilterElements::iSevaType() const 

2023-06-01 17:10:25.227 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-06-01 17:10:25.227 DBG default: void DBInterface::booking_report_eachDateDataRangeForMonth_function(QString, int, int, int) The suman monthe 4 2023 

2023-06-01 17:10:25.227 DBG default:  Query string = "select RECEIPT_DATE,sum(QUANTITY) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='4' Group by sevabooking.RECEIPT_DATE;" 

2023-06-01 17:10:25.227 DBG default: Query in while 

2023-06-01 17:10:25.227 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='4' Group by sevabooking.RECEIPT_DATE;" 

2023-06-01 17:10:25.227 DBG default: BookingReportDateRangeElement::BookingReportDateRangeElement(QObject*) 

2023-06-01 17:10:25.227 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-04-01" 

2023-06-01 17:10:25.227 DBG default: In while of db **********query_other1.value(1).toInt()***************** 118 

2023-06-01 17:10:25.227 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) suman insert sevaRow for report 

2023-06-01 17:10:25.227 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) ------------ 

2023-06-01 17:10:25.227 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-06-01 17:10:25.227 DBG default: Query in while 

2023-06-01 17:10:25.227 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='4' Group by sevabooking.RECEIPT_DATE;" 

2023-06-01 17:10:25.227 DBG default: BookingReportDateRangeElement::BookingReportDateRangeElement(QObject*) 

2023-06-01 17:10:25.227 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-04-02" 

2023-06-01 17:10:25.227 DBG default: In while of db **********query_other1.value(1).toInt()***************** 88 

2023-06-01 17:10:25.227 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) suman insert sevaRow for report 

2023-06-01 17:10:25.227 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) ------------ 

2023-06-01 17:10:25.227 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-06-01 17:10:25.227 DBG default: Query in while 

2023-06-01 17:10:25.227 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='4' Group by sevabooking.RECEIPT_DATE;" 

2023-06-01 17:10:25.227 DBG default: BookingReportDateRangeElement::BookingReportDateRangeElement(QObject*) 

2023-06-01 17:10:25.227 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-04-03" 

2023-06-01 17:10:25.227 DBG default: In while of db **********query_other1.value(1).toInt()***************** 15 

2023-06-01 17:10:25.227 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) suman insert sevaRow for report 

2023-06-01 17:10:25.227 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) ------------ 

2023-06-01 17:10:25.227 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-06-01 17:10:25.227 DBG default: Query in while 

2023-06-01 17:10:25.227 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='4' Group by sevabooking.RECEIPT_DATE;" 

2023-06-01 17:10:25.227 DBG default: BookingReportDateRangeElement::BookingReportDateRangeElement(QObject*) 

2023-06-01 17:10:25.227 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-04-04" 

2023-06-01 17:10:25.227 DBG default: In while of db **********query_other1.value(1).toInt()***************** 1 

2023-06-01 17:10:25.227 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) suman insert sevaRow for report 

2023-06-01 17:10:25.227 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) ------------ 

2023-06-01 17:10:25.227 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-06-01 17:10:25.227 DBG default: int BookingReportDateRangeModel::getBookingReportDateRangeQryList() 

2023-06-01 17:10:25.228 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.228 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.228 DBG default: virtual QHash<int, QByteArray> BookingReportDateRangeModel::roleNames() const 

2023-06-01 17:10:25.230 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.230 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:25.230 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:25.230 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-06-01 17:10:25.232 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.232 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:25.232 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:25.232 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-04-01" 

2023-06-01 17:10:25.232 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.232 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:25.232 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:25.233 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 118 

2023-06-01 17:10:25.233 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.233 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.233 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.233 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:25.233 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:25.233 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 2 

2023-06-01 17:10:25.234 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.234 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:25.234 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:25.234 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-04-02" 

2023-06-01 17:10:25.234 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.234 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:25.234 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:25.234 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 88 

2023-06-01 17:10:25.234 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.234 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.234 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.234 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:25.234 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:25.234 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 3 

2023-06-01 17:10:25.235 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.235 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:25.235 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:25.235 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-04-03" 

2023-06-01 17:10:25.235 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.235 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:25.235 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:25.235 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 15 

2023-06-01 17:10:25.235 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.235 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.235 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.235 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:25.235 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:25.235 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 4 

2023-06-01 17:10:25.235 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.236 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:25.236 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:25.236 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-04-04" 

2023-06-01 17:10:25.236 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:25.236 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:25.236 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:25.236 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-06-01 17:10:36.229 DBG qml: mouse clicked left styleData.selected true
2023-06-01 17:10:36.229 DBG qml: clicked cell in table view  0
2023-06-01 17:10:36.230 DBG qml: clicked cell in table view coordinates =  QPointF(660, 36)
2023-06-01 17:10:36.230 DBG qml: clicked cell in table view clickIndex =  0
2023-06-01 17:10:36.230 DBG qml: clicked cell in table view  0
2023-06-01 17:10:36.230 DBG qml: clicked cell in table view  0
2023-06-01 17:10:36.230 DBG qml: Left 0
2023-06-01 17:10:36.230 DBG default: BookingReportDateRangeElement* BookingReportDateRangeModel::getBookingReportDateRangeElementAt(int) 

2023-06-01 17:10:36.230 DBG default: BookingReportDateRangeElement* BookingReportDateRangeModel::getBookingReportDateRangeElementAt(int) I am index  0 

2023-06-01 17:10:36.230 DBG default: BookingReportDateRangeElement* BookingReportDateRangeModel::getBookingReportDateRangeElementAt(int) "2023-04-01" 

2023-06-01 17:10:36.230 DBG default: BookingReportDateRangeElement* BookingReportDateRangeModel::getBookingReportDateRangeElementAt(int) 118 

2023-06-01 17:10:36.230 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.233 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.233 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.233 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.233 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.234 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.234 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-06-01 17:10:36.234 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.234 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.234 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.234 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-04-01" 

2023-06-01 17:10:36.235 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.235 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.235 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.235 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 118 

2023-06-01 17:10:36.235 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.235 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.236 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.236 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.236 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.236 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 2 

2023-06-01 17:10:36.236 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.236 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.236 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.236 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-04-02" 

2023-06-01 17:10:36.237 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.238 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.238 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.238 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 88 

2023-06-01 17:10:36.238 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.238 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.239 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.239 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.239 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.239 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 3 

2023-06-01 17:10:36.239 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.240 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.240 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.240 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-04-03" 

2023-06-01 17:10:36.240 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.240 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.240 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.240 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 15 

2023-06-01 17:10:36.240 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.240 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.241 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.241 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.241 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.241 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 4 

2023-06-01 17:10:36.241 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.241 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.242 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.242 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-04-04" 

2023-06-01 17:10:36.243 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 4 

2023-06-01 17:10:36.243 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.243 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.243 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-06-01 17:10:36.244 DBG qml: /////////////////////////////2023-04-01
2023-06-01 17:10:36.244 DBG qml: In   1111111111onLoadSingleDateBookingPage(obj.date) 2023-04-01
2023-06-01 17:10:36.244 DBG qml:  Component.onDestruction of SevaBookingReportOnDateRange.qml
2023-06-01 17:10:36.285 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-06-01 17:10:36.285 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-06-01 17:10:36.287 WRN default: qrc:/ui/SevaBookingReportForSingleDate.qml:204:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-06-01 17:10:36.293 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.293 DBG default: 0 

2023-06-01 17:10:36.298 DBG qml: Component.completed: of SevaAccountReportForSingleDate.qml
2023-06-01 17:10:36.302 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-06-01 17:10:36.302 DBG qml: Screen screenWidth size =1920
2023-06-01 17:10:36.302 DBG qml: Screen screenHeight size =1000
2023-06-01 17:10:36.302 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadSingleDateBookingPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-06-01 17:10:36.302 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadMonthWiseBookingPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-06-01 17:10:36.302 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadDateWiseBookingForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-06-01 17:10:36.302 DBG qml: ******** 01-04-2023
2023-06-01 17:10:36.303 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-06-01 17:10:36.303 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-06-01 17:10:36.303 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-06-01 17:10:36.303 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-06-01 17:10:36.303 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-06-01 17:10:36.303 DBG default: int ReportFilterElements::iSevaType() const 

2023-06-01 17:10:36.303 DBG default: void ReportFilterElements::setISevaType(int) 

2023-06-01 17:10:36.303 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-06-01 17:10:36.303 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-06-01 17:10:36.303 DBG default: bool ReportFilterElements::bSevawise() const 

2023-06-01 17:10:36.303 DBG qml: In Loader of booking report page _rip.bSevawisetrue
2023-06-01 17:10:36.303 DBG default: bool ReportFilterElements::bDatewise() const 

2023-06-01 17:10:36.303 DBG qml: In Loader of booking report page _rip.bDatewisefalse
2023-06-01 17:10:36.303 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:36.303 DBG qml: In Loader of booking report page _rip.sSingleDate01-04-2023
2023-06-01 17:10:36.303 DBG default: const QString& ReportFilterElements::sStartDate() const 

2023-06-01 17:10:36.303 DBG qml: In Loader of booking report page  _rip.sStartDatenull
2023-06-01 17:10:36.303 DBG default: const QString& ReportFilterElements::sEndDate() const 

2023-06-01 17:10:36.303 DBG qml: In Loader of booking report page    _rip.sEndDate null
2023-06-01 17:10:36.303 DBG qml: In Loader of booking report page     _rip.iSelectedType0
2023-06-01 17:10:36.303 DBG default: int ReportFilterElements::iSevaType() const 

2023-06-01 17:10:36.303 DBG qml: In Loader of booking report page    _rip.iSevaType 0
2023-06-01 17:10:36.303 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-06-01 17:10:36.303 DBG qml: In Loader of booking report page    _rip.sSevaNameAll
2023-06-01 17:10:36.303 DBG qml: In main
2023-06-01 17:10:36.303 DBG default: void SevaReport::generateBookReport(ReportFilterElements*) 

2023-06-01 17:10:36.303 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.303 DBG default: 0 

2023-06-01 17:10:36.303 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.303 DBG default: 0 

2023-06-01 17:10:36.303 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 0 

2023-06-01 17:10:36.303 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 

2023-06-01 17:10:36.303 DBG default: Selected Type  0 

2023-06-01 17:10:36.303 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-06-01 17:10:36.303 DBG default: Selected Month  0 

2023-06-01 17:10:36.303 DBG default: const QString& ReportFilterElements::sYear() const 

2023-06-01 17:10:36.303 DBG default: Selected Year  0 

2023-06-01 17:10:36.303 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:36.303 DBG default: Selected date  "01-04-2023" 

2023-06-01 17:10:36.303 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) Inside c date book rep 

2023-06-01 17:10:36.303 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:36.303 DBG default: QString BookingReportModel::FormatDate(QString) "01-04-2023" 

2023-06-01 17:10:36.303 DBG default: QString BookingReportModel::FormatDate(QString) QDate("2023-04-01") 

2023-06-01 17:10:36.303 DBG default: QString BookingReportModel::FormatDate(QString) "2023-04-01" 

2023-06-01 17:10:36.303 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-06-01 17:10:36.303 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:36.303 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-04-01" 

2023-06-01 17:10:36.303 DBG default: int ReportFilterElements::iSevaType() const 

2023-06-01 17:10:36.303 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-06-01 17:10:36.303 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:36.304 DBG default: 
Changed format is:  "2023-04-01" 

2023-06-01 17:10:36.304 DBG default: In type 0:  

2023-06-01 17:10:36.304 DBG default:  Query string = "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.304 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-06-01 17:10:36.304 DBG default:  Query string = true 

2023-06-01 17:10:36.304 DBG default:  Query prepared successfully = true 

2023-06-01 17:10:36.304 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-06-01 17:10:36.304 DBG default:  Query string =2222222222222 "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.304 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.304 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.304 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.304 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.304 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.304 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.304 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.304 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.304 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.304 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.304 DBG default: 999999999999999999999999 "ChatakaN" 

2023-06-01 17:10:36.304 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.304 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.304 DBG default: 999999999999999999999999 "Hasthodaka" 

2023-06-01 17:10:36.304 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.304 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.304 DBG default: 999999999999999999999999 "Panchamrutha/Abhisheka" 

2023-06-01 17:10:36.304 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.304 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.304 DBG default: 999999999999999999999999 "ChatakaN" 

2023-06-01 17:10:36.304 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.304 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.304 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.304 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.304 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "Sathyanarayana Pooje" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "ChatakaN" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "Hasthodaka" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "SankalpaN" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "Panchamrutha/Abhisheka" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "ChatakaN" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.305 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.305 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.305 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.306 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.306 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.306 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.306 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.306 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.306 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.306 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.306 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.306 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.306 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.306 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.306 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.306 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.306 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.306 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.306 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.306 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.306 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.306 DBG default: 999999999999999999999999 "ChatakaN" 

2023-06-01 17:10:36.306 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.306 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.306 DBG default: 999999999999999999999999 "Hasthodaka" 

2023-06-01 17:10:36.306 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.306 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.306 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.306 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.306 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.306 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.306 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.306 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.306 DBG default: 999999999999999999999999 "Hasthodaka Regular" 

2023-06-01 17:10:36.306 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.306 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.306 DBG default: 999999999999999999999999 "Hasthodaka Regular" 

2023-06-01 17:10:36.306 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.306 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.306 DBG default: 999999999999999999999999 "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.306 DBG default: 88888888888888888888888888 0 

2023-06-01 17:10:36.306 DBG default: query while/********** 

2023-06-01 17:10:36.306 DBG default: query while/******1**** 

2023-06-01 17:10:36.306 DBG default: query while/*****2***** 

2023-06-01 17:10:36.306 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.306 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.307 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.307 DBG default: query while/*****5***** 

2023-06-01 17:10:36.307 DBG default: query while/********** 

2023-06-01 17:10:36.307 DBG default: query while/******1**** 

2023-06-01 17:10:36.307 DBG default: query while/*****2***** 

2023-06-01 17:10:36.307 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.307 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.307 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.307 DBG default: query while/*****5***** 

2023-06-01 17:10:36.307 DBG default: query while/********** 

2023-06-01 17:10:36.307 DBG default: query while/******1**** 

2023-06-01 17:10:36.307 DBG default: query while/*****2***** 

2023-06-01 17:10:36.307 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.307 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.307 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.307 DBG default: query while/*****5***** 

2023-06-01 17:10:36.307 DBG default: query while/********** 

2023-06-01 17:10:36.307 DBG default: query while/******1**** 

2023-06-01 17:10:36.307 DBG default: query while/*****2***** 

2023-06-01 17:10:36.307 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.307 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'ChatakaN' and SEVATYPE = '1';" 

2023-06-01 17:10:36.307 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.307 DBG default: query while/*****5***** 

2023-06-01 17:10:36.307 DBG default: query while/********** 

2023-06-01 17:10:36.307 DBG default: query while/******1**** 

2023-06-01 17:10:36.307 DBG default: query while/*****2***** 

2023-06-01 17:10:36.307 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.307 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.307 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.307 DBG default: query while/*****5***** 

2023-06-01 17:10:36.307 DBG default: query while/********** 

2023-06-01 17:10:36.307 DBG default: query while/******1**** 

2023-06-01 17:10:36.307 DBG default: query while/*****2***** 

2023-06-01 17:10:36.307 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.307 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Panchamrutha/Abhisheka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.308 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.308 DBG default: query while/*****5***** 

2023-06-01 17:10:36.308 DBG default: query while/********** 

2023-06-01 17:10:36.308 DBG default: query while/******1**** 

2023-06-01 17:10:36.308 DBG default: query while/*****2***** 

2023-06-01 17:10:36.308 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.308 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'ChatakaN' and SEVATYPE = '1';" 

2023-06-01 17:10:36.308 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.308 DBG default: query while/*****5***** 

2023-06-01 17:10:36.308 DBG default: query while/********** 

2023-06-01 17:10:36.308 DBG default: query while/******1**** 

2023-06-01 17:10:36.308 DBG default: query while/*****2***** 

2023-06-01 17:10:36.308 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.308 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.308 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.308 DBG default: query while/*****5***** 

2023-06-01 17:10:36.308 DBG default: query while/********** 

2023-06-01 17:10:36.308 DBG default: query while/******1**** 

2023-06-01 17:10:36.308 DBG default: query while/*****2***** 

2023-06-01 17:10:36.308 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.308 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.308 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.308 DBG default: query while/*****5***** 

2023-06-01 17:10:36.308 DBG default: query while/********** 

2023-06-01 17:10:36.308 DBG default: query while/******1**** 

2023-06-01 17:10:36.308 DBG default: query while/*****2***** 

2023-06-01 17:10:36.308 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.308 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.308 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.308 DBG default: query while/*****5***** 

2023-06-01 17:10:36.308 DBG default: query while/********** 

2023-06-01 17:10:36.308 DBG default: query while/******1**** 

2023-06-01 17:10:36.308 DBG default: query while/*****2***** 

2023-06-01 17:10:36.308 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.309 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Sathyanarayana Pooje' and SEVATYPE = '10';" 

2023-06-01 17:10:36.309 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.309 DBG default: query while/*****5***** 

2023-06-01 17:10:36.309 DBG default: query while/********** 

2023-06-01 17:10:36.309 DBG default: query while/******1**** 

2023-06-01 17:10:36.309 DBG default: query while/*****2***** 

2023-06-01 17:10:36.309 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.309 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.309 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.309 DBG default: query while/*****5***** 

2023-06-01 17:10:36.309 DBG default: query while/********** 

2023-06-01 17:10:36.309 DBG default: query while/******1**** 

2023-06-01 17:10:36.309 DBG default: query while/*****2***** 

2023-06-01 17:10:36.309 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.309 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'ChatakaN' and SEVATYPE = '1';" 

2023-06-01 17:10:36.309 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.309 DBG default: query while/*****5***** 

2023-06-01 17:10:36.309 DBG default: query while/********** 

2023-06-01 17:10:36.309 DBG default: query while/******1**** 

2023-06-01 17:10:36.309 DBG default: query while/*****2***** 

2023-06-01 17:10:36.309 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.309 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.309 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.309 DBG default: query while/*****5***** 

2023-06-01 17:10:36.309 DBG default: query while/********** 

2023-06-01 17:10:36.309 DBG default: query while/******1**** 

2023-06-01 17:10:36.309 DBG default: query while/*****2***** 

2023-06-01 17:10:36.309 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.309 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'SankalpaN' and SEVATYPE = '1';" 

2023-06-01 17:10:36.309 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.309 DBG default: query while/*****5***** 

2023-06-01 17:10:36.309 DBG default: query while/********** 

2023-06-01 17:10:36.309 DBG default: query while/******1**** 

2023-06-01 17:10:36.309 DBG default: query while/*****2***** 

2023-06-01 17:10:36.309 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.309 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.309 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.309 DBG default: query while/*****5***** 

2023-06-01 17:10:36.310 DBG default: query while/********** 

2023-06-01 17:10:36.310 DBG default: query while/******1**** 

2023-06-01 17:10:36.310 DBG default: query while/*****2***** 

2023-06-01 17:10:36.310 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.310 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Panchamrutha/Abhisheka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.310 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.310 DBG default: query while/*****5***** 

2023-06-01 17:10:36.310 DBG default: query while/********** 

2023-06-01 17:10:36.310 DBG default: query while/******1**** 

2023-06-01 17:10:36.310 DBG default: query while/*****2***** 

2023-06-01 17:10:36.310 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.310 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.310 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.310 DBG default: query while/*****5***** 

2023-06-01 17:10:36.310 DBG default: query while/********** 

2023-06-01 17:10:36.310 DBG default: query while/******1**** 

2023-06-01 17:10:36.310 DBG default: query while/*****2***** 

2023-06-01 17:10:36.310 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.310 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.310 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.310 DBG default: query while/*****5***** 

2023-06-01 17:10:36.310 DBG default: query while/********** 

2023-06-01 17:10:36.310 DBG default: query while/******1**** 

2023-06-01 17:10:36.310 DBG default: query while/*****2***** 

2023-06-01 17:10:36.310 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.310 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.310 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.310 DBG default: query while/*****5***** 

2023-06-01 17:10:36.310 DBG default: query while/********** 

2023-06-01 17:10:36.310 DBG default: query while/******1**** 

2023-06-01 17:10:36.310 DBG default: query while/*****2***** 

2023-06-01 17:10:36.310 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.310 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.310 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.310 DBG default: query while/*****5***** 

2023-06-01 17:10:36.310 DBG default: query while/********** 

2023-06-01 17:10:36.310 DBG default: query while/******1**** 

2023-06-01 17:10:36.310 DBG default: query while/*****2***** 

2023-06-01 17:10:36.310 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.310 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.310 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.310 DBG default: query while/*****5***** 

2023-06-01 17:10:36.311 DBG default: query while/********** 

2023-06-01 17:10:36.311 DBG default: query while/******1**** 

2023-06-01 17:10:36.311 DBG default: query while/*****2***** 

2023-06-01 17:10:36.311 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.312 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'ChatakaN' and SEVATYPE = '1';" 

2023-06-01 17:10:36.312 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.312 DBG default: query while/*****5***** 

2023-06-01 17:10:36.312 DBG default: query while/********** 

2023-06-01 17:10:36.312 DBG default: query while/******1**** 

2023-06-01 17:10:36.312 DBG default: query while/*****2***** 

2023-06-01 17:10:36.312 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.312 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.312 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.312 DBG default: query while/*****5***** 

2023-06-01 17:10:36.312 DBG default: query while/********** 

2023-06-01 17:10:36.312 DBG default: query while/******1**** 

2023-06-01 17:10:36.312 DBG default: query while/*****2***** 

2023-06-01 17:10:36.312 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.312 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.312 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.312 DBG default: query while/*****5***** 

2023-06-01 17:10:36.312 DBG default: query while/********** 

2023-06-01 17:10:36.312 DBG default: query while/******1**** 

2023-06-01 17:10:36.312 DBG default: query while/*****2***** 

2023-06-01 17:10:36.312 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.312 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.312 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.312 DBG default: query while/*****5***** 

2023-06-01 17:10:36.312 DBG default: query while/********** 

2023-06-01 17:10:36.312 DBG default: query while/******1**** 

2023-06-01 17:10:36.312 DBG default: query while/*****2***** 

2023-06-01 17:10:36.312 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.312 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.312 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.312 DBG default: query while/*****5***** 

2023-06-01 17:10:36.312 DBG default: query while/********** 

2023-06-01 17:10:36.312 DBG default: query while/******1**** 

2023-06-01 17:10:36.312 DBG default: query while/*****2***** 

2023-06-01 17:10:36.312 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.312 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.312 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.313 DBG default: query while/*****5***** 

2023-06-01 17:10:36.313 DBG default: query while/********** 

2023-06-01 17:10:36.313 DBG default: query while/******1**** 

2023-06-01 17:10:36.313 DBG default: query while/*****2***** 

2023-06-01 17:10:36.313 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.313 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.313 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.313 DBG default: query while/*****5***** 

2023-06-01 17:10:36.313 DBG default: query while/********** 

2023-06-01 17:10:36.313 DBG default: query while/******1**** 

2023-06-01 17:10:36.313 DBG default: query while/*****2***** 

2023-06-01 17:10:36.313 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.313 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.313 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.313 DBG default: query while/*****5***** 

2023-06-01 17:10:36.313 DBG default: query while/********** 

2023-06-01 17:10:36.313 DBG default: query while/******1**** 

2023-06-01 17:10:36.313 DBG default: query while/*****2***** 

2023-06-01 17:10:36.313 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.313 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'ChatakaN' and SEVATYPE = '1';" 

2023-06-01 17:10:36.313 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.313 DBG default: query while/*****5***** 

2023-06-01 17:10:36.313 DBG default: query while/********** 

2023-06-01 17:10:36.313 DBG default: query while/******1**** 

2023-06-01 17:10:36.313 DBG default: query while/*****2***** 

2023-06-01 17:10:36.313 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.313 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.313 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.313 DBG default: query while/*****5***** 

2023-06-01 17:10:36.313 DBG default: query while/********** 

2023-06-01 17:10:36.313 DBG default: query while/******1**** 

2023-06-01 17:10:36.313 DBG default: query while/*****2***** 

2023-06-01 17:10:36.313 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.313 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.313 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.313 DBG default: query while/*****5***** 

2023-06-01 17:10:36.313 DBG default: query while/********** 

2023-06-01 17:10:36.313 DBG default: query while/******1**** 

2023-06-01 17:10:36.313 DBG default: query while/*****2***** 

2023-06-01 17:10:36.313 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.313 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.313 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.314 DBG default: query while/*****5***** 

2023-06-01 17:10:36.314 DBG default: query while/********** 

2023-06-01 17:10:36.314 DBG default: query while/******1**** 

2023-06-01 17:10:36.314 DBG default: query while/*****2***** 

2023-06-01 17:10:36.314 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.314 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Hasthodaka Regular' and SEVATYPE = '1';" 

2023-06-01 17:10:36.314 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.314 DBG default: query while/*****5***** 

2023-06-01 17:10:36.314 DBG default: query while/********** 

2023-06-01 17:10:36.314 DBG default: query while/******1**** 

2023-06-01 17:10:36.314 DBG default: query while/*****2***** 

2023-06-01 17:10:36.314 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.314 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Hasthodaka Regular' and SEVATYPE = '1';" 

2023-06-01 17:10:36.314 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.314 DBG default: query while/*****5***** 

2023-06-01 17:10:36.314 DBG default: query while/********** 

2023-06-01 17:10:36.314 DBG default: query while/******1**** 

2023-06-01 17:10:36.314 DBG default: query while/*****2***** 

2023-06-01 17:10:36.314 DBG default: query while/*****3***** true 

2023-06-01 17:10:36.314 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Dwadashi Hasthodaka' and SEVATYPE = '1';" 

2023-06-01 17:10:36.314 DBG default: query ifeee/*****5***** 

2023-06-01 17:10:36.314 DBG default: query while/*****5***** 

2023-06-01 17:10:36.314 DBG default:  Query string =@@@@@@@@@@@@@ QSqlError("", "", "") 

2023-06-01 17:10:36.314 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.314 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.314 DBG default: Sl No-- "Nagabhushan" 

2023-06-01 17:10:36.314 DBG default: name-- "Vashistha" 

2023-06-01 17:10:36.314 DBG default: gothra-- "Anuradha" 

2023-06-01 17:10:36.314 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.314 DBG default: seva-- "9663650110" 

2023-06-01 17:10:36.314 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.314 DBG default: note-- "1" 

2023-06-01 17:10:36.314 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.314 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.314 DBG default: Rdate-- "100" 

2023-06-01 17:10:36.314 DBG default: total-- "" 

2023-06-01 17:10:36.314 DBG default: paymode-- "" 

2023-06-01 17:10:36.314 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.314 DBG default: address-- "2" 

2023-06-01 17:10:36.314 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.314 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.315 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.315 DBG default: 0 

2023-06-01 17:10:36.315 DBG default: "Nagabhushan" 

2023-06-01 17:10:36.315 DBG default: "Vashistha" 

2023-06-01 17:10:36.315 DBG default: "Anuradha" 

2023-06-01 17:10:36.315 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.315 DBG default: "9663650110" 

2023-06-01 17:10:36.315 DBG default: "paid" 

2023-06-01 17:10:36.315 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.315 DBG default: after increment 1 

2023-06-01 17:10:36.315 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.315 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.315 DBG default: Sl No-- "Sudhanva" 

2023-06-01 17:10:36.315 DBG default: name-- "" 

2023-06-01 17:10:36.315 DBG default: gothra-- "" 

2023-06-01 17:10:36.315 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.315 DBG default: seva-- "9980510563" 

2023-06-01 17:10:36.315 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.315 DBG default: note-- "1" 

2023-06-01 17:10:36.315 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.315 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.315 DBG default: Rdate-- "100" 

2023-06-01 17:10:36.315 DBG default: total-- "" 

2023-06-01 17:10:36.315 DBG default: paymode-- "" 

2023-06-01 17:10:36.315 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.315 DBG default: address-- "2" 

2023-06-01 17:10:36.315 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.315 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.315 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.315 DBG default: 1 

2023-06-01 17:10:36.315 DBG default: "Sudhanva" 

2023-06-01 17:10:36.315 DBG default: "" 

2023-06-01 17:10:36.315 DBG default: "" 

2023-06-01 17:10:36.315 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.315 DBG default: "9980510563" 

2023-06-01 17:10:36.315 DBG default: "paid" 

2023-06-01 17:10:36.315 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.315 DBG default: after increment 2 

2023-06-01 17:10:36.315 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.315 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.315 DBG default: Sl No-- "Sachin Kulkarni" 

2023-06-01 17:10:36.315 DBG default: name-- "" 

2023-06-01 17:10:36.315 DBG default: gothra-- "" 

2023-06-01 17:10:36.315 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.315 DBG default: seva-- "9916962524" 

2023-06-01 17:10:36.315 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.315 DBG default: note-- "1" 

2023-06-01 17:10:36.315 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.315 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.315 DBG default: Rdate-- "50" 

2023-06-01 17:10:36.315 DBG default: total-- "" 

2023-06-01 17:10:36.315 DBG default: paymode-- "" 

2023-06-01 17:10:36.315 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.315 DBG default: address-- "1" 

2023-06-01 17:10:36.315 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.315 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.315 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.315 DBG default: 2 

2023-06-01 17:10:36.315 DBG default: "Sachin Kulkarni" 

2023-06-01 17:10:36.315 DBG default: "" 

2023-06-01 17:10:36.315 DBG default: "" 

2023-06-01 17:10:36.315 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.315 DBG default: "9916962524" 

2023-06-01 17:10:36.315 DBG default: "paid" 

2023-06-01 17:10:36.315 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.315 DBG default: after increment 3 

2023-06-01 17:10:36.315 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.315 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.315 DBG default: Sl No-- "Sham Bhat Joshi" 

2023-06-01 17:10:36.315 DBG default: name-- "Puthamanasa" 

2023-06-01 17:10:36.315 DBG default: gothra-- "Bharani" 

2023-06-01 17:10:36.315 DBG default: nakshatra-- "ChatakaN" 

2023-06-01 17:10:36.315 DBG default: seva-- "8073869420" 

2023-06-01 17:10:36.315 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.315 DBG default: note-- "1" 

2023-06-01 17:10:36.315 DBG default: prasada-- "2023-04-05" 

2023-06-01 17:10:36.316 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.316 DBG default: Rdate-- "900" 

2023-06-01 17:10:36.316 DBG default: total-- "" 

2023-06-01 17:10:36.316 DBG default: paymode-- "" 

2023-06-01 17:10:36.316 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.316 DBG default: address-- "1" 

2023-06-01 17:10:36.316 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.316 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.316 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.316 DBG default: 3 

2023-06-01 17:10:36.316 DBG default: "Sham Bhat Joshi" 

2023-06-01 17:10:36.316 DBG default: "Puthamanasa" 

2023-06-01 17:10:36.316 DBG default: "Bharani" 

2023-06-01 17:10:36.316 DBG default: "ChatakaN" 

2023-06-01 17:10:36.316 DBG default: "8073869420" 

2023-06-01 17:10:36.316 DBG default: "paid" 

2023-06-01 17:10:36.316 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.316 DBG default: after increment 4 

2023-06-01 17:10:36.316 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.316 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.316 DBG default: Sl No-- "Sham Bhat Joshi" 

2023-06-01 17:10:36.316 DBG default: name-- "Puthamanasa" 

2023-06-01 17:10:36.316 DBG default: gothra-- "Bharani" 

2023-06-01 17:10:36.316 DBG default: nakshatra-- "Hasthodaka" 

2023-06-01 17:10:36.316 DBG default: seva-- "8073869420" 

2023-06-01 17:10:36.316 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.316 DBG default: note-- "1" 

2023-06-01 17:10:36.316 DBG default: prasada-- "2023-04-05" 

2023-06-01 17:10:36.316 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.316 DBG default: Rdate-- "400" 

2023-06-01 17:10:36.316 DBG default: total-- "" 

2023-06-01 17:10:36.316 DBG default: paymode-- "" 

2023-06-01 17:10:36.316 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.316 DBG default: address-- "2" 

2023-06-01 17:10:36.316 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.316 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.316 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.316 DBG default: 4 

2023-06-01 17:10:36.316 DBG default: "Sham Bhat Joshi" 

2023-06-01 17:10:36.316 DBG default: "Puthamanasa" 

2023-06-01 17:10:36.316 DBG default: "Bharani" 

2023-06-01 17:10:36.316 DBG default: "Hasthodaka" 

2023-06-01 17:10:36.316 DBG default: "8073869420" 

2023-06-01 17:10:36.316 DBG default: "paid" 

2023-06-01 17:10:36.316 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.316 DBG default: after increment 5 

2023-06-01 17:10:36.316 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.316 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.316 DBG default: Sl No-- "Vijayendra Kulkarni" 

2023-06-01 17:10:36.316 DBG default: name-- "Shrivathsa" 

2023-06-01 17:10:36.316 DBG default: gothra-- "Vishakha" 

2023-06-01 17:10:36.316 DBG default: nakshatra-- "Panchamrutha/Abhisheka" 

2023-06-01 17:10:36.316 DBG default: seva-- "9880470969" 

2023-06-01 17:10:36.316 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.316 DBG default: note-- "1" 

2023-06-01 17:10:36.316 DBG default: prasada-- "2023-04-05" 

2023-06-01 17:10:36.316 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.316 DBG default: Rdate-- "50" 

2023-06-01 17:10:36.316 DBG default: total-- "" 

2023-06-01 17:10:36.316 DBG default: paymode-- "" 

2023-06-01 17:10:36.316 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.316 DBG default: address-- "1" 

2023-06-01 17:10:36.316 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.316 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.316 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.316 DBG default: 5 

2023-06-01 17:10:36.316 DBG default: "Vijayendra Kulkarni" 

2023-06-01 17:10:36.316 DBG default: "Shrivathsa" 

2023-06-01 17:10:36.316 DBG default: "Vishakha" 

2023-06-01 17:10:36.316 DBG default: "Panchamrutha/Abhisheka" 

2023-06-01 17:10:36.316 DBG default: "9880470969" 

2023-06-01 17:10:36.316 DBG default: "paid" 

2023-06-01 17:10:36.316 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.316 DBG default: after increment 6 

2023-06-01 17:10:36.316 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.316 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.316 DBG default: Sl No-- "Vinay Kumar" 

2023-06-01 17:10:36.316 DBG default: name-- "Sankhyayanasa" 

2023-06-01 17:10:36.316 DBG default: gothra-- "Uttarabhadrapada" 

2023-06-01 17:10:36.316 DBG default: nakshatra-- "ChatakaN" 

2023-06-01 17:10:36.317 DBG default: seva-- "9886058482" 

2023-06-01 17:10:36.317 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.317 DBG default: note-- "1" 

2023-06-01 17:10:36.317 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.317 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.317 DBG default: Rdate-- "900" 

2023-06-01 17:10:36.317 DBG default: total-- "" 

2023-06-01 17:10:36.317 DBG default: paymode-- "" 

2023-06-01 17:10:36.317 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.317 DBG default: address-- "1" 

2023-06-01 17:10:36.317 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.317 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.317 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.317 DBG default: 6 

2023-06-01 17:10:36.317 DBG default: "Vinay Kumar" 

2023-06-01 17:10:36.317 DBG default: "Sankhyayanasa" 

2023-06-01 17:10:36.317 DBG default: "Uttarabhadrapada" 

2023-06-01 17:10:36.317 DBG default: "ChatakaN" 

2023-06-01 17:10:36.317 DBG default: "9886058482" 

2023-06-01 17:10:36.317 DBG default: "paid" 

2023-06-01 17:10:36.317 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.317 DBG default: after increment 7 

2023-06-01 17:10:36.317 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.317 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.317 DBG default: Sl No-- "Vinay Kumar" 

2023-06-01 17:10:36.317 DBG default: name-- "Sankhyayanasa" 

2023-06-01 17:10:36.317 DBG default: gothra-- "Uttarabhadrapada" 

2023-06-01 17:10:36.317 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.317 DBG default: seva-- "9886058482" 

2023-06-01 17:10:36.317 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.317 DBG default: note-- "1" 

2023-06-01 17:10:36.317 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.317 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.317 DBG default: Rdate-- "200" 

2023-06-01 17:10:36.317 DBG default: total-- "" 

2023-06-01 17:10:36.317 DBG default: paymode-- "" 

2023-06-01 17:10:36.317 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.317 DBG default: address-- "4" 

2023-06-01 17:10:36.317 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.317 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.317 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.317 DBG default: 7 

2023-06-01 17:10:36.317 DBG default: "Vinay Kumar" 

2023-06-01 17:10:36.317 DBG default: "Sankhyayanasa" 

2023-06-01 17:10:36.317 DBG default: "Uttarabhadrapada" 

2023-06-01 17:10:36.317 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.317 DBG default: "9886058482" 

2023-06-01 17:10:36.317 DBG default: "paid" 

2023-06-01 17:10:36.317 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.317 DBG default: after increment 8 

2023-06-01 17:10:36.317 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.317 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.317 DBG default: Sl No-- "Sripadachar" 

2023-06-01 17:10:36.317 DBG default: name-- "" 

2023-06-01 17:10:36.317 DBG default: gothra-- "Ashwini" 

2023-06-01 17:10:36.317 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.317 DBG default: seva-- "9480585854" 

2023-06-01 17:10:36.317 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.317 DBG default: note-- "1" 

2023-06-01 17:10:36.317 DBG default: prasada-- "2023-05-04" 

2023-06-01 17:10:36.317 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.317 DBG default: Rdate-- "150" 

2023-06-01 17:10:36.317 DBG default: total-- "" 

2023-06-01 17:10:36.317 DBG default: paymode-- "" 

2023-06-01 17:10:36.317 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.317 DBG default: address-- "3" 

2023-06-01 17:10:36.317 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.317 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.317 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.317 DBG default: 8 

2023-06-01 17:10:36.317 DBG default: "Sripadachar" 

2023-06-01 17:10:36.317 DBG default: "" 

2023-06-01 17:10:36.317 DBG default: "Ashwini" 

2023-06-01 17:10:36.317 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.317 DBG default: "9480585854" 

2023-06-01 17:10:36.317 DBG default: "paid" 

2023-06-01 17:10:36.317 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.317 DBG default: after increment 9 

2023-06-01 17:10:36.317 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.318 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.318 DBG default: Sl No-- "Raghunadan" 

2023-06-01 17:10:36.318 DBG default: name-- "Jamadagni" 

2023-06-01 17:10:36.318 DBG default: gothra-- "Bharani" 

2023-06-01 17:10:36.318 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.318 DBG default: seva-- "9741599842" 

2023-06-01 17:10:36.318 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.318 DBG default: note-- "1" 

2023-06-01 17:10:36.318 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.318 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.318 DBG default: Rdate-- "100" 

2023-06-01 17:10:36.318 DBG default: total-- "" 

2023-06-01 17:10:36.318 DBG default: paymode-- "" 

2023-06-01 17:10:36.318 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.318 DBG default: address-- "2" 

2023-06-01 17:10:36.318 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.318 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.318 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.318 DBG default: 9 

2023-06-01 17:10:36.318 DBG default: "Raghunadan" 

2023-06-01 17:10:36.318 DBG default: "Jamadagni" 

2023-06-01 17:10:36.318 DBG default: "Bharani" 

2023-06-01 17:10:36.318 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.318 DBG default: "9741599842" 

2023-06-01 17:10:36.318 DBG default: "paid" 

2023-06-01 17:10:36.318 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.318 DBG default: after increment 10 

2023-06-01 17:10:36.318 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.318 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.318 DBG default: Sl No-- "Ravindra Malagi" 

2023-06-01 17:10:36.318 DBG default: name-- "Harithasa" 

2023-06-01 17:10:36.318 DBG default: gothra-- "Ashlesha" 

2023-06-01 17:10:36.318 DBG default: nakshatra-- "Sathyanarayana Pooje" 

2023-06-01 17:10:36.318 DBG default: seva-- "9483957542" 

2023-06-01 17:10:36.318 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.318 DBG default: note-- "10" 

2023-06-01 17:10:36.318 DBG default: prasada-- "2023-04-05" 

2023-06-01 17:10:36.318 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.318 DBG default: Rdate-- "600" 

2023-06-01 17:10:36.318 DBG default: total-- "" 

2023-06-01 17:10:36.318 DBG default: paymode-- "" 

2023-06-01 17:10:36.318 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.318 DBG default: address-- "12" 

2023-06-01 17:10:36.318 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.318 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.318 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.318 DBG default: 10 

2023-06-01 17:10:36.318 DBG default: "Ravindra Malagi" 

2023-06-01 17:10:36.318 DBG default: "Harithasa" 

2023-06-01 17:10:36.318 DBG default: "Ashlesha" 

2023-06-01 17:10:36.318 DBG default: "Sathyanarayana Pooje" 

2023-06-01 17:10:36.318 DBG default: "9483957542" 

2023-06-01 17:10:36.318 DBG default: "paid" 

2023-06-01 17:10:36.318 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.318 DBG default: after increment 11 

2023-06-01 17:10:36.318 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.318 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.318 DBG default: Sl No-- "Murali" 

2023-06-01 17:10:36.318 DBG default: name-- "" 

2023-06-01 17:10:36.318 DBG default: gothra-- "Ashwini" 

2023-06-01 17:10:36.318 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.318 DBG default: seva-- "9686669462" 

2023-06-01 17:10:36.318 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.318 DBG default: note-- "1" 

2023-06-01 17:10:36.318 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.318 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.318 DBG default: Rdate-- "100" 

2023-06-01 17:10:36.318 DBG default: total-- "" 

2023-06-01 17:10:36.318 DBG default: paymode-- "" 

2023-06-01 17:10:36.318 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.318 DBG default: address-- "2" 

2023-06-01 17:10:36.318 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.318 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.318 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.318 DBG default: 11 

2023-06-01 17:10:36.318 DBG default: "Murali" 

2023-06-01 17:10:36.318 DBG default: "" 

2023-06-01 17:10:36.318 DBG default: "Ashwini" 

2023-06-01 17:10:36.318 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.319 DBG default: "9686669462" 

2023-06-01 17:10:36.319 DBG default: "paid" 

2023-06-01 17:10:36.319 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.319 DBG default: after increment 12 

2023-06-01 17:10:36.319 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.319 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.319 DBG default: Sl No-- "A Raghavendra Murthy" 

2023-06-01 17:10:36.319 DBG default: name-- "Kashyapa" 

2023-06-01 17:10:36.319 DBG default: gothra-- "Swati" 

2023-06-01 17:10:36.319 DBG default: nakshatra-- "ChatakaN" 

2023-06-01 17:10:36.319 DBG default: seva-- "8123886837" 

2023-06-01 17:10:36.319 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.319 DBG default: note-- "1" 

2023-06-01 17:10:36.319 DBG default: prasada-- "2023-04-04" 

2023-06-01 17:10:36.319 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.319 DBG default: Rdate-- "900" 

2023-06-01 17:10:36.319 DBG default: total-- "" 

2023-06-01 17:10:36.319 DBG default: paymode-- "" 

2023-06-01 17:10:36.319 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.319 DBG default: address-- "1" 

2023-06-01 17:10:36.319 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.319 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.319 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.319 DBG default: 12 

2023-06-01 17:10:36.319 DBG default: "A Raghavendra Murthy" 

2023-06-01 17:10:36.319 DBG default: "Kashyapa" 

2023-06-01 17:10:36.319 DBG default: "Swati" 

2023-06-01 17:10:36.319 DBG default: "ChatakaN" 

2023-06-01 17:10:36.319 DBG default: "8123886837" 

2023-06-01 17:10:36.319 DBG default: "paid" 

2023-06-01 17:10:36.319 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.319 DBG default: after increment 13 

2023-06-01 17:10:36.319 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.319 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.319 DBG default: Sl No-- "A Raghavendra Murthy" 

2023-06-01 17:10:36.319 DBG default: name-- "Kashyapa" 

2023-06-01 17:10:36.319 DBG default: gothra-- "Swati" 

2023-06-01 17:10:36.319 DBG default: nakshatra-- "Hasthodaka" 

2023-06-01 17:10:36.319 DBG default: seva-- "8123886837" 

2023-06-01 17:10:36.319 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.319 DBG default: note-- "1" 

2023-06-01 17:10:36.319 DBG default: prasada-- "2023-04-04" 

2023-06-01 17:10:36.319 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.319 DBG default: Rdate-- "2000" 

2023-06-01 17:10:36.319 DBG default: total-- "" 

2023-06-01 17:10:36.319 DBG default: paymode-- "" 

2023-06-01 17:10:36.319 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.319 DBG default: address-- "10" 

2023-06-01 17:10:36.319 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.319 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.319 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.319 DBG default: 13 

2023-06-01 17:10:36.319 DBG default: "A Raghavendra Murthy" 

2023-06-01 17:10:36.319 DBG default: "Kashyapa" 

2023-06-01 17:10:36.319 DBG default: "Swati" 

2023-06-01 17:10:36.319 DBG default: "Hasthodaka" 

2023-06-01 17:10:36.319 DBG default: "8123886837" 

2023-06-01 17:10:36.319 DBG default: "paid" 

2023-06-01 17:10:36.319 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.319 DBG default: after increment 14 

2023-06-01 17:10:36.319 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.319 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.319 DBG default: Sl No-- "R S Kulkarni" 

2023-06-01 17:10:36.319 DBG default: name-- "" 

2023-06-01 17:10:36.319 DBG default: gothra-- "Ashwini" 

2023-06-01 17:10:36.319 DBG default: nakshatra-- "SankalpaN" 

2023-06-01 17:10:36.319 DBG default: seva-- "9916835446" 

2023-06-01 17:10:36.319 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.319 DBG default: note-- "1" 

2023-06-01 17:10:36.319 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.319 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.319 DBG default: Rdate-- "650" 

2023-06-01 17:10:36.319 DBG default: total-- "" 

2023-06-01 17:10:36.319 DBG default: paymode-- "" 

2023-06-01 17:10:36.319 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.319 DBG default: address-- "1" 

2023-06-01 17:10:36.319 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.319 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.319 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.319 DBG default: 14 

2023-06-01 17:10:36.320 DBG default: "R S Kulkarni" 

2023-06-01 17:10:36.320 DBG default: "" 

2023-06-01 17:10:36.320 DBG default: "Ashwini" 

2023-06-01 17:10:36.320 DBG default: "SankalpaN" 

2023-06-01 17:10:36.320 DBG default: "9916835446" 

2023-06-01 17:10:36.320 DBG default: "paid" 

2023-06-01 17:10:36.320 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.320 DBG default: after increment 15 

2023-06-01 17:10:36.320 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.320 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.320 DBG default: Sl No-- "R S Kulkarni" 

2023-06-01 17:10:36.320 DBG default: name-- "" 

2023-06-01 17:10:36.320 DBG default: gothra-- "Ashwini" 

2023-06-01 17:10:36.320 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.320 DBG default: seva-- "9916835446" 

2023-06-01 17:10:36.320 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.320 DBG default: note-- "1" 

2023-06-01 17:10:36.320 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.320 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.320 DBG default: Rdate-- "250" 

2023-06-01 17:10:36.320 DBG default: total-- "" 

2023-06-01 17:10:36.320 DBG default: paymode-- "" 

2023-06-01 17:10:36.320 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.320 DBG default: address-- "5" 

2023-06-01 17:10:36.320 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.320 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.320 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.320 DBG default: 15 

2023-06-01 17:10:36.320 DBG default: "R S Kulkarni" 

2023-06-01 17:10:36.320 DBG default: "" 

2023-06-01 17:10:36.320 DBG default: "Ashwini" 

2023-06-01 17:10:36.320 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.320 DBG default: "9916835446" 

2023-06-01 17:10:36.320 DBG default: "paid" 

2023-06-01 17:10:36.320 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.320 DBG default: after increment 16 

2023-06-01 17:10:36.320 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.320 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.320 DBG default: Sl No-- "Mohan Kumar" 

2023-06-01 17:10:36.320 DBG default: name-- "Maudgalya" 

2023-06-01 17:10:36.320 DBG default: gothra-- "Uttarashadha" 

2023-06-01 17:10:36.320 DBG default: nakshatra-- "Panchamrutha/Abhisheka" 

2023-06-01 17:10:36.320 DBG default: seva-- "9481804498" 

2023-06-01 17:10:36.320 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.320 DBG default: note-- "1" 

2023-06-01 17:10:36.320 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.320 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.320 DBG default: Rdate-- "50" 

2023-06-01 17:10:36.320 DBG default: total-- "" 

2023-06-01 17:10:36.320 DBG default: paymode-- "" 

2023-06-01 17:10:36.320 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.320 DBG default: address-- "1" 

2023-06-01 17:10:36.320 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.320 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.320 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.320 DBG default: 16 

2023-06-01 17:10:36.320 DBG default: "Mohan Kumar" 

2023-06-01 17:10:36.320 DBG default: "Maudgalya" 

2023-06-01 17:10:36.320 DBG default: "Uttarashadha" 

2023-06-01 17:10:36.320 DBG default: "Panchamrutha/Abhisheka" 

2023-06-01 17:10:36.320 DBG default: "9481804498" 

2023-06-01 17:10:36.320 DBG default: "paid" 

2023-06-01 17:10:36.320 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.320 DBG default: after increment 17 

2023-06-01 17:10:36.320 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.320 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.320 DBG default: Sl No-- "Mohan Kumar" 

2023-06-01 17:10:36.320 DBG default: name-- "Maudgalya" 

2023-06-01 17:10:36.320 DBG default: gothra-- "Uttarashadha" 

2023-06-01 17:10:36.320 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.320 DBG default: seva-- "9481804498" 

2023-06-01 17:10:36.320 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.320 DBG default: note-- "1" 

2023-06-01 17:10:36.320 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.320 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.320 DBG default: Rdate-- "150" 

2023-06-01 17:10:36.320 DBG default: total-- "" 

2023-06-01 17:10:36.321 DBG default: paymode-- "" 

2023-06-01 17:10:36.321 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.321 DBG default: address-- "3" 

2023-06-01 17:10:36.321 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.321 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.321 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.321 DBG default: 17 

2023-06-01 17:10:36.321 DBG default: "Mohan Kumar" 

2023-06-01 17:10:36.321 DBG default: "Maudgalya" 

2023-06-01 17:10:36.321 DBG default: "Uttarashadha" 

2023-06-01 17:10:36.321 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.321 DBG default: "9481804498" 

2023-06-01 17:10:36.321 DBG default: "paid" 

2023-06-01 17:10:36.321 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.321 DBG default: after increment 18 

2023-06-01 17:10:36.321 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.321 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.321 DBG default: Sl No-- "Rakshit" 

2023-06-01 17:10:36.321 DBG default: name-- "Bharadwaja" 

2023-06-01 17:10:36.321 DBG default: gothra-- "Uttarashadha" 

2023-06-01 17:10:36.321 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.321 DBG default: seva-- "9880033002" 

2023-06-01 17:10:36.321 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.321 DBG default: note-- "1" 

2023-06-01 17:10:36.321 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.321 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.321 DBG default: Rdate-- "250" 

2023-06-01 17:10:36.321 DBG default: total-- "" 

2023-06-01 17:10:36.321 DBG default: paymode-- "" 

2023-06-01 17:10:36.321 DBG default: refrence-- "" 

2023-06-01 17:10:36.321 DBG default: address-- "5" 

2023-06-01 17:10:36.321 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.321 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.321 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.321 DBG default: 18 

2023-06-01 17:10:36.321 DBG default: "Rakshit" 

2023-06-01 17:10:36.321 DBG default: "Bharadwaja" 

2023-06-01 17:10:36.321 DBG default: "Uttarashadha" 

2023-06-01 17:10:36.321 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.321 DBG default: "9880033002" 

2023-06-01 17:10:36.321 DBG default: "paid" 

2023-06-01 17:10:36.321 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.321 DBG default: after increment 19 

2023-06-01 17:10:36.321 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.321 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.321 DBG default: Sl No-- "Ritthi Sripada Rao" 

2023-06-01 17:10:36.321 DBG default: name-- "Bharadwaja" 

2023-06-01 17:10:36.321 DBG default: gothra-- "Purvaphalguni" 

2023-06-01 17:10:36.321 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.321 DBG default: seva-- "9844018826" 

2023-06-01 17:10:36.321 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.321 DBG default: note-- "1" 

2023-06-01 17:10:36.321 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.321 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.321 DBG default: Rdate-- "100" 

2023-06-01 17:10:36.321 DBG default: total-- "" 

2023-06-01 17:10:36.321 DBG default: paymode-- "" 

2023-06-01 17:10:36.321 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.321 DBG default: address-- "2" 

2023-06-01 17:10:36.321 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.321 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.321 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.321 DBG default: 19 

2023-06-01 17:10:36.321 DBG default: "Ritthi Sripada Rao" 

2023-06-01 17:10:36.321 DBG default: "Bharadwaja" 

2023-06-01 17:10:36.321 DBG default: "Purvaphalguni" 

2023-06-01 17:10:36.321 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.321 DBG default: "9844018826" 

2023-06-01 17:10:36.321 DBG default: "paid" 

2023-06-01 17:10:36.321 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.321 DBG default: after increment 20 

2023-06-01 17:10:36.321 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.321 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.321 DBG default: Sl No-- "Pavamana M" 

2023-06-01 17:10:36.321 DBG default: name-- "Gargeyyesa" 

2023-06-01 17:10:36.322 DBG default: gothra-- "Ashwini" 

2023-06-01 17:10:36.322 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.322 DBG default: seva-- "9986013228" 

2023-06-01 17:10:36.322 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.322 DBG default: note-- "1" 

2023-06-01 17:10:36.322 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.322 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.322 DBG default: Rdate-- "300" 

2023-06-01 17:10:36.322 DBG default: total-- "" 

2023-06-01 17:10:36.322 DBG default: paymode-- "" 

2023-06-01 17:10:36.322 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.322 DBG default: address-- "6" 

2023-06-01 17:10:36.322 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.322 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.322 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.322 DBG default: 20 

2023-06-01 17:10:36.322 DBG default: "Pavamana M" 

2023-06-01 17:10:36.322 DBG default: "Gargeyyesa" 

2023-06-01 17:10:36.322 DBG default: "Ashwini" 

2023-06-01 17:10:36.322 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.322 DBG default: "9986013228" 

2023-06-01 17:10:36.322 DBG default: "paid" 

2023-06-01 17:10:36.322 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.322 DBG default: after increment 21 

2023-06-01 17:10:36.322 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.322 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.322 DBG default: Sl No-- "Naveen" 

2023-06-01 17:10:36.322 DBG default: name-- "Gargeyyesa" 

2023-06-01 17:10:36.322 DBG default: gothra-- "Revati" 

2023-06-01 17:10:36.322 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.322 DBG default: seva-- "9880932546" 

2023-06-01 17:10:36.322 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.322 DBG default: note-- "1" 

2023-06-01 17:10:36.322 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.322 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.322 DBG default: Rdate-- "100" 

2023-06-01 17:10:36.322 DBG default: total-- "" 

2023-06-01 17:10:36.322 DBG default: paymode-- "" 

2023-06-01 17:10:36.322 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.322 DBG default: address-- "2" 

2023-06-01 17:10:36.322 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.322 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.322 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.322 DBG default: 21 

2023-06-01 17:10:36.322 DBG default: "Naveen" 

2023-06-01 17:10:36.322 DBG default: "Gargeyyesa" 

2023-06-01 17:10:36.322 DBG default: "Revati" 

2023-06-01 17:10:36.322 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.322 DBG default: "9880932546" 

2023-06-01 17:10:36.322 DBG default: "paid" 

2023-06-01 17:10:36.322 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.322 DBG default: after increment 22 

2023-06-01 17:10:36.322 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.322 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.322 DBG default: Sl No-- "Adavi Acharya" 

2023-06-01 17:10:36.322 DBG default: name-- "Vashistha" 

2023-06-01 17:10:36.322 DBG default: gothra-- "Hasta" 

2023-06-01 17:10:36.322 DBG default: nakshatra-- "ChatakaN" 

2023-06-01 17:10:36.322 DBG default: seva-- "8310285283" 

2023-06-01 17:10:36.322 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.322 DBG default: note-- "1" 

2023-06-01 17:10:36.322 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.322 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.322 DBG default: Rdate-- "900" 

2023-06-01 17:10:36.322 DBG default: total-- "" 

2023-06-01 17:10:36.322 DBG default: paymode-- "" 

2023-06-01 17:10:36.322 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.322 DBG default: address-- "1" 

2023-06-01 17:10:36.322 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.322 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.322 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.322 DBG default: 22 

2023-06-01 17:10:36.322 DBG default: "Adavi Acharya" 

2023-06-01 17:10:36.322 DBG default: "Vashistha" 

2023-06-01 17:10:36.322 DBG default: "Hasta" 

2023-06-01 17:10:36.322 DBG default: "ChatakaN" 

2023-06-01 17:10:36.322 DBG default: "8310285283" 

2023-06-01 17:10:36.322 DBG default: "paid" 

2023-06-01 17:10:36.322 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.323 DBG default: after increment 23 

2023-06-01 17:10:36.323 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.323 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.323 DBG default: Sl No-- "Adavi Acharya" 

2023-06-01 17:10:36.323 DBG default: name-- "Vashistha" 

2023-06-01 17:10:36.323 DBG default: gothra-- "Hasta" 

2023-06-01 17:10:36.323 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.324 DBG default: seva-- "8310285283" 

2023-06-01 17:10:36.324 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.324 DBG default: note-- "1" 

2023-06-01 17:10:36.324 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.324 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.324 DBG default: Rdate-- "400" 

2023-06-01 17:10:36.324 DBG default: total-- "" 

2023-06-01 17:10:36.324 DBG default: paymode-- "" 

2023-06-01 17:10:36.324 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.324 DBG default: address-- "8" 

2023-06-01 17:10:36.324 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.324 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.324 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.324 DBG default: 23 

2023-06-01 17:10:36.324 DBG default: "Adavi Acharya" 

2023-06-01 17:10:36.324 DBG default: "Vashistha" 

2023-06-01 17:10:36.324 DBG default: "Hasta" 

2023-06-01 17:10:36.324 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.324 DBG default: "8310285283" 

2023-06-01 17:10:36.324 DBG default: "paid" 

2023-06-01 17:10:36.324 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.324 DBG default: after increment 24 

2023-06-01 17:10:36.324 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.324 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.324 DBG default: Sl No-- "Sumanth" 

2023-06-01 17:10:36.324 DBG default: name-- "Bharadwaja" 

2023-06-01 17:10:36.324 DBG default: gothra-- "Jyeshtha" 

2023-06-01 17:10:36.324 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.324 DBG default: seva-- "9964144411" 

2023-06-01 17:10:36.324 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.324 DBG default: note-- "1" 

2023-06-01 17:10:36.324 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.324 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.324 DBG default: Rdate-- "50" 

2023-06-01 17:10:36.324 DBG default: total-- "" 

2023-06-01 17:10:36.324 DBG default: paymode-- "" 

2023-06-01 17:10:36.324 DBG default: refrence-- "" 

2023-06-01 17:10:36.324 DBG default: address-- "1" 

2023-06-01 17:10:36.324 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.324 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.324 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.324 DBG default: 24 

2023-06-01 17:10:36.324 DBG default: "Sumanth" 

2023-06-01 17:10:36.324 DBG default: "Bharadwaja" 

2023-06-01 17:10:36.324 DBG default: "Jyeshtha" 

2023-06-01 17:10:36.325 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.325 DBG default: "9964144411" 

2023-06-01 17:10:36.325 DBG default: "paid" 

2023-06-01 17:10:36.325 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.325 DBG default: after increment 25 

2023-06-01 17:10:36.325 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.325 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.325 DBG default: Sl No-- "Krishnamurthy" 

2023-06-01 17:10:36.325 DBG default: name-- "" 

2023-06-01 17:10:36.325 DBG default: gothra-- "Ashwini" 

2023-06-01 17:10:36.325 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.325 DBG default: seva-- "9980632348" 

2023-06-01 17:10:36.325 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.325 DBG default: note-- "1" 

2023-06-01 17:10:36.325 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.325 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.325 DBG default: Rdate-- "100" 

2023-06-01 17:10:36.325 DBG default: total-- "" 

2023-06-01 17:10:36.325 DBG default: paymode-- "" 

2023-06-01 17:10:36.325 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.325 DBG default: address-- "2" 

2023-06-01 17:10:36.325 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.325 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.325 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.325 DBG default: 25 

2023-06-01 17:10:36.325 DBG default: "Krishnamurthy" 

2023-06-01 17:10:36.325 DBG default: "" 

2023-06-01 17:10:36.325 DBG default: "Ashwini" 

2023-06-01 17:10:36.325 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.325 DBG default: "9980632348" 

2023-06-01 17:10:36.325 DBG default: "paid" 

2023-06-01 17:10:36.325 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.325 DBG default: after increment 26 

2023-06-01 17:10:36.325 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.325 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.325 DBG default: Sl No-- "N Shridar" 

2023-06-01 17:10:36.325 DBG default: name-- "Vashistha" 

2023-06-01 17:10:36.325 DBG default: gothra-- "Hasta" 

2023-06-01 17:10:36.325 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.325 DBG default: seva-- "9845370210" 

2023-06-01 17:10:36.325 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.325 DBG default: note-- "1" 

2023-06-01 17:10:36.325 DBG default: prasada-- "2023-05-03" 

2023-06-01 17:10:36.325 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.325 DBG default: Rdate-- "100" 

2023-06-01 17:10:36.325 DBG default: total-- "" 

2023-06-01 17:10:36.325 DBG default: paymode-- "" 

2023-06-01 17:10:36.325 DBG default: refrence-- "" 

2023-06-01 17:10:36.325 DBG default: address-- "2" 

2023-06-01 17:10:36.325 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.325 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.325 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.325 DBG default: 26 

2023-06-01 17:10:36.325 DBG default: "N Shridar" 

2023-06-01 17:10:36.325 DBG default: "Vashistha" 

2023-06-01 17:10:36.325 DBG default: "Hasta" 

2023-06-01 17:10:36.325 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.325 DBG default: "9845370210" 

2023-06-01 17:10:36.325 DBG default: "paid" 

2023-06-01 17:10:36.325 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.325 DBG default: after increment 27 

2023-06-01 17:10:36.325 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.325 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.325 DBG default: Sl No-- "Raghavendra" 

2023-06-01 17:10:36.325 DBG default: name-- "Kashyapa" 

2023-06-01 17:10:36.325 DBG default: gothra-- "" 

2023-06-01 17:10:36.325 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.325 DBG default: seva-- "9945272433" 

2023-06-01 17:10:36.325 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.325 DBG default: note-- "1" 

2023-06-01 17:10:36.325 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.325 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.325 DBG default: Rdate-- "100" 

2023-06-01 17:10:36.325 DBG default: total-- "" 

2023-06-01 17:10:36.325 DBG default: paymode-- "" 

2023-06-01 17:10:36.325 DBG default: refrence-- "" 

2023-06-01 17:10:36.325 DBG default: address-- "2" 

2023-06-01 17:10:36.326 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.326 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.326 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.326 DBG default: 27 

2023-06-01 17:10:36.326 DBG default: "Raghavendra" 

2023-06-01 17:10:36.326 DBG default: "Kashyapa" 

2023-06-01 17:10:36.326 DBG default: "" 

2023-06-01 17:10:36.326 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.326 DBG default: "9945272433" 

2023-06-01 17:10:36.326 DBG default: "paid" 

2023-06-01 17:10:36.326 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.326 DBG default: after increment 28 

2023-06-01 17:10:36.326 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.326 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.326 DBG default: Sl No-- "Rashmi" 

2023-06-01 17:10:36.326 DBG default: name-- "Mounabharghava" 

2023-06-01 17:10:36.326 DBG default: gothra-- "Purvashadha" 

2023-06-01 17:10:36.326 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.326 DBG default: seva-- "7204316233" 

2023-06-01 17:10:36.326 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.326 DBG default: note-- "1" 

2023-06-01 17:10:36.326 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.326 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.326 DBG default: Rdate-- "150" 

2023-06-01 17:10:36.326 DBG default: total-- "" 

2023-06-01 17:10:36.326 DBG default: paymode-- "" 

2023-06-01 17:10:36.326 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.326 DBG default: address-- "3" 

2023-06-01 17:10:36.326 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.326 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.326 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.326 DBG default: 28 

2023-06-01 17:10:36.326 DBG default: "Rashmi" 

2023-06-01 17:10:36.326 DBG default: "Mounabharghava" 

2023-06-01 17:10:36.326 DBG default: "Purvashadha" 

2023-06-01 17:10:36.326 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.326 DBG default: "7204316233" 

2023-06-01 17:10:36.326 DBG default: "paid" 

2023-06-01 17:10:36.326 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.326 DBG default: after increment 29 

2023-06-01 17:10:36.326 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.326 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.326 DBG default: Sl No-- "Sowmya" 

2023-06-01 17:10:36.326 DBG default: name-- "Vashistha" 

2023-06-01 17:10:36.326 DBG default: gothra-- "Ashwini" 

2023-06-01 17:10:36.326 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.326 DBG default: seva-- "9739044304" 

2023-06-01 17:10:36.326 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.326 DBG default: note-- "1" 

2023-06-01 17:10:36.326 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.326 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.326 DBG default: Rdate-- "100" 

2023-06-01 17:10:36.326 DBG default: total-- "" 

2023-06-01 17:10:36.326 DBG default: paymode-- "" 

2023-06-01 17:10:36.326 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.326 DBG default: address-- "2" 

2023-06-01 17:10:36.326 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.326 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.326 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.326 DBG default: 29 

2023-06-01 17:10:36.326 DBG default: "Sowmya" 

2023-06-01 17:10:36.326 DBG default: "Vashistha" 

2023-06-01 17:10:36.326 DBG default: "Ashwini" 

2023-06-01 17:10:36.326 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.326 DBG default: "9739044304" 

2023-06-01 17:10:36.326 DBG default: "paid" 

2023-06-01 17:10:36.326 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.326 DBG default: after increment 30 

2023-06-01 17:10:36.326 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.326 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.326 DBG default: Sl No-- "Umesh" 

2023-06-01 17:10:36.326 DBG default: name-- "Kashyapa" 

2023-06-01 17:10:36.326 DBG default: gothra-- "Shravana" 

2023-06-01 17:10:36.326 DBG default: nakshatra-- "ChatakaN" 

2023-06-01 17:10:36.326 DBG default: seva-- "9845512180" 

2023-06-01 17:10:36.326 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.326 DBG default: note-- "1" 

2023-06-01 17:10:36.326 DBG default: prasada-- "2023-04-06" 

2023-06-01 17:10:36.326 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.326 DBG default: Rdate-- "900" 

2023-06-01 17:10:36.326 DBG default: total-- "" 

2023-06-01 17:10:36.326 DBG default: paymode-- "" 

2023-06-01 17:10:36.326 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.326 DBG default: address-- "1" 

2023-06-01 17:10:36.326 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.326 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.327 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.327 DBG default: 30 

2023-06-01 17:10:36.327 DBG default: "Umesh" 

2023-06-01 17:10:36.327 DBG default: "Kashyapa" 

2023-06-01 17:10:36.327 DBG default: "Shravana" 

2023-06-01 17:10:36.327 DBG default: "ChatakaN" 

2023-06-01 17:10:36.327 DBG default: "9845512180" 

2023-06-01 17:10:36.327 DBG default: "paid" 

2023-06-01 17:10:36.327 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.327 DBG default: after increment 31 

2023-06-01 17:10:36.327 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.327 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.327 DBG default: Sl No-- "Umesh" 

2023-06-01 17:10:36.327 DBG default: name-- "Kashyapa" 

2023-06-01 17:10:36.327 DBG default: gothra-- "Shravana" 

2023-06-01 17:10:36.327 DBG default: nakshatra-- "Hasthodaka" 

2023-06-01 17:10:36.327 DBG default: seva-- "9845512180" 

2023-06-01 17:10:36.327 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.327 DBG default: note-- "1" 

2023-06-01 17:10:36.327 DBG default: prasada-- "2023-04-06" 

2023-06-01 17:10:36.327 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.327 DBG default: Rdate-- "1400" 

2023-06-01 17:10:36.327 DBG default: total-- "" 

2023-06-01 17:10:36.327 DBG default: paymode-- "" 

2023-06-01 17:10:36.327 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.327 DBG default: address-- "7" 

2023-06-01 17:10:36.327 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.327 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.327 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.327 DBG default: 31 

2023-06-01 17:10:36.327 DBG default: "Umesh" 

2023-06-01 17:10:36.327 DBG default: "Kashyapa" 

2023-06-01 17:10:36.327 DBG default: "Shravana" 

2023-06-01 17:10:36.327 DBG default: "Hasthodaka" 

2023-06-01 17:10:36.327 DBG default: "9845512180" 

2023-06-01 17:10:36.327 DBG default: "paid" 

2023-06-01 17:10:36.327 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.327 DBG default: after increment 32 

2023-06-01 17:10:36.327 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.327 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.327 DBG default: Sl No-- "Harini" 

2023-06-01 17:10:36.327 DBG default: name-- "Dhananjaya" 

2023-06-01 17:10:36.327 DBG default: gothra-- "Punarvasu" 

2023-06-01 17:10:36.327 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.327 DBG default: seva-- "9342555155" 

2023-06-01 17:10:36.327 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.327 DBG default: note-- "1" 

2023-06-01 17:10:36.327 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.327 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.327 DBG default: Rdate-- "50" 

2023-06-01 17:10:36.327 DBG default: total-- "" 

2023-06-01 17:10:36.327 DBG default: paymode-- "" 

2023-06-01 17:10:36.327 DBG default: refrence-- "" 

2023-06-01 17:10:36.327 DBG default: address-- "1" 

2023-06-01 17:10:36.327 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.327 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.327 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.327 DBG default: 32 

2023-06-01 17:10:36.327 DBG default: "Harini" 

2023-06-01 17:10:36.327 DBG default: "Dhananjaya" 

2023-06-01 17:10:36.327 DBG default: "Punarvasu" 

2023-06-01 17:10:36.327 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.327 DBG default: "9342555155" 

2023-06-01 17:10:36.327 DBG default: "paid" 

2023-06-01 17:10:36.327 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.327 DBG default: after increment 33 

2023-06-01 17:10:36.327 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.327 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.327 DBG default: Sl No-- "Badari Vishal" 

2023-06-01 17:10:36.327 DBG default: name-- "Jamadagni" 

2023-06-01 17:10:36.327 DBG default: gothra-- "Revati" 

2023-06-01 17:10:36.327 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.327 DBG default: seva-- "9535798004" 

2023-06-01 17:10:36.327 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.327 DBG default: note-- "1" 

2023-06-01 17:10:36.327 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.327 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.327 DBG default: Rdate-- "100" 

2023-06-01 17:10:36.327 DBG default: total-- "" 

2023-06-01 17:10:36.327 DBG default: paymode-- "" 

2023-06-01 17:10:36.327 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.327 DBG default: address-- "2" 

2023-06-01 17:10:36.327 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.327 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.327 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.327 DBG default: 33 

2023-06-01 17:10:36.327 DBG default: "Badari Vishal" 

2023-06-01 17:10:36.327 DBG default: "Jamadagni" 

2023-06-01 17:10:36.327 DBG default: "Revati" 

2023-06-01 17:10:36.327 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.328 DBG default: "9535798004" 

2023-06-01 17:10:36.328 DBG default: "paid" 

2023-06-01 17:10:36.328 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.328 DBG default: after increment 34 

2023-06-01 17:10:36.328 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.328 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.328 DBG default: Sl No-- "Akshay Desai" 

2023-06-01 17:10:36.328 DBG default: name-- "Kaundinya" 

2023-06-01 17:10:36.328 DBG default: gothra-- "Ashwini" 

2023-06-01 17:10:36.328 DBG default: nakshatra-- "Hasthodaka Regular" 

2023-06-01 17:10:36.328 DBG default: seva-- "9742083477" 

2023-06-01 17:10:36.328 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.328 DBG default: note-- "1" 

2023-06-01 17:10:36.328 DBG default: prasada-- "2023-04-04" 

2023-06-01 17:10:36.328 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.328 DBG default: Rdate-- "2500" 

2023-06-01 17:10:36.328 DBG default: total-- "" 

2023-06-01 17:10:36.328 DBG default: paymode-- "" 

2023-06-01 17:10:36.328 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.328 DBG default: address-- "10" 

2023-06-01 17:10:36.328 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.328 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.328 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.328 DBG default: 34 

2023-06-01 17:10:36.328 DBG default: "Akshay Desai" 

2023-06-01 17:10:36.328 DBG default: "Kaundinya" 

2023-06-01 17:10:36.328 DBG default: "Ashwini" 

2023-06-01 17:10:36.328 DBG default: "Hasthodaka Regular" 

2023-06-01 17:10:36.328 DBG default: "9742083477" 

2023-06-01 17:10:36.328 DBG default: "paid" 

2023-06-01 17:10:36.328 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.328 DBG default: after increment 35 

2023-06-01 17:10:36.328 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.328 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.328 DBG default: Sl No-- "Abhay Desai" 

2023-06-01 17:10:36.328 DBG default: name-- "Kaundinya" 

2023-06-01 17:10:36.328 DBG default: gothra-- "Anuradha" 

2023-06-01 17:10:36.328 DBG default: nakshatra-- "Hasthodaka Regular" 

2023-06-01 17:10:36.328 DBG default: seva-- "9148653143" 

2023-06-01 17:10:36.328 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.328 DBG default: note-- "1" 

2023-06-01 17:10:36.328 DBG default: prasada-- "2023-04-06" 

2023-06-01 17:10:36.328 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.328 DBG default: Rdate-- "2500" 

2023-06-01 17:10:36.328 DBG default: total-- "" 

2023-06-01 17:10:36.328 DBG default: paymode-- "" 

2023-06-01 17:10:36.328 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.328 DBG default: address-- "10" 

2023-06-01 17:10:36.328 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.328 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.328 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.328 DBG default: 35 

2023-06-01 17:10:36.328 DBG default: "Abhay Desai" 

2023-06-01 17:10:36.328 DBG default: "Kaundinya" 

2023-06-01 17:10:36.328 DBG default: "Anuradha" 

2023-06-01 17:10:36.328 DBG default: "Hasthodaka Regular" 

2023-06-01 17:10:36.328 DBG default: "9148653143" 

2023-06-01 17:10:36.328 DBG default: "paid" 

2023-06-01 17:10:36.328 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.328 DBG default: after increment 36 

2023-06-01 17:10:36.328 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-04-01';" 

2023-06-01 17:10:36.328 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-06-01 17:10:36.328 DBG default: Sl No-- "Anand Avadhani" 

2023-06-01 17:10:36.328 DBG default: name-- "Mounabharghava" 

2023-06-01 17:10:36.328 DBG default: gothra-- "Swati" 

2023-06-01 17:10:36.328 DBG default: nakshatra-- "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.328 DBG default: seva-- "9845923575" 

2023-06-01 17:10:36.328 DBG default: mobile-- "paid" 

2023-06-01 17:10:36.328 DBG default: note-- "1" 

2023-06-01 17:10:36.328 DBG default: prasada-- "2023-04-03" 

2023-06-01 17:10:36.328 DBG default: SDate-- "2023-04-01" 

2023-06-01 17:10:36.328 DBG default: Rdate-- "200" 

2023-06-01 17:10:36.328 DBG default: total-- "" 

2023-06-01 17:10:36.328 DBG default: paymode-- "" 

2023-06-01 17:10:36.328 DBG default: refrence-- "rrn" 

2023-06-01 17:10:36.328 DBG default: address-- "4" 

2023-06-01 17:10:36.328 DBG default: before emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.328 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-06-01 17:10:36.328 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.328 DBG default: 36 

2023-06-01 17:10:36.328 DBG default: "Anand Avadhani" 

2023-06-01 17:10:36.328 DBG default: "Mounabharghava" 

2023-06-01 17:10:36.328 DBG default: "Swati" 

2023-06-01 17:10:36.328 DBG default: "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.328 DBG default: "9845923575" 

2023-06-01 17:10:36.329 DBG default: "paid" 

2023-06-01 17:10:36.329 DBG default: after emitting signal  booking_report '''''''' 

2023-06-01 17:10:36.329 DBG default: after increment 37 

2023-06-01 17:10:36.329 DBG default: bool ReportFilterElements::bDatewise() const 

2023-06-01 17:10:36.329 DBG default: false 

2023-06-01 17:10:36.329 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-06-01 17:10:36.329 DBG default: "2023-04-01" 

2023-06-01 17:10:36.330 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.330 DBG default: 37 

2023-06-01 17:10:36.330 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.330 DBG default: 37 

2023-06-01 17:10:36.330 DBG default: virtual QHash<int, QByteArray> BookingReportModel::roleNames() const 

2023-06-01 17:10:36.330 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.330 DBG default: 37 

2023-06-01 17:10:36.330 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.330 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.330 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Nagabhushan" 

2023-06-01 17:10:36.331 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.331 DBG default: 37 

2023-06-01 17:10:36.331 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.331 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.331 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vashistha" 

2023-06-01 17:10:36.331 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.331 DBG default: 37 

2023-06-01 17:10:36.331 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.331 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.331 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Anuradha" 

2023-06-01 17:10:36.331 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.331 DBG default: 37 

2023-06-01 17:10:36.331 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.331 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.331 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.332 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.332 DBG default: 37 

2023-06-01 17:10:36.332 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.332 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.332 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9663650110" 

2023-06-01 17:10:36.332 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.332 DBG default: 37 

2023-06-01 17:10:36.332 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.332 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.332 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.332 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.332 DBG default: 37 

2023-06-01 17:10:36.332 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.332 DBG default: 37 

2023-06-01 17:10:36.333 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.333 DBG default: 37 

2023-06-01 17:10:36.333 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.333 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.333 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sudhanva" 

2023-06-01 17:10:36.333 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.333 DBG default: 37 

2023-06-01 17:10:36.333 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.333 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.333 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.333 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.333 DBG default: 37 

2023-06-01 17:10:36.333 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.333 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.333 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.333 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.333 DBG default: 37 

2023-06-01 17:10:36.333 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.333 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.333 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.333 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.333 DBG default: 37 

2023-06-01 17:10:36.333 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.333 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.333 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9980510563" 

2023-06-01 17:10:36.333 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.333 DBG default: 37 

2023-06-01 17:10:36.333 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.333 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.333 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.334 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.334 DBG default: 37 

2023-06-01 17:10:36.334 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.334 DBG default: 37 

2023-06-01 17:10:36.334 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.334 DBG default: 37 

2023-06-01 17:10:36.334 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.334 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.334 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sachin Kulkarni" 

2023-06-01 17:10:36.334 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.334 DBG default: 37 

2023-06-01 17:10:36.334 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.334 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.334 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.334 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.334 DBG default: 37 

2023-06-01 17:10:36.335 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.335 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.335 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.335 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.335 DBG default: 37 

2023-06-01 17:10:36.335 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.335 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.335 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.335 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.335 DBG default: 37 

2023-06-01 17:10:36.335 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.335 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.335 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9916962524" 

2023-06-01 17:10:36.335 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.335 DBG default: 37 

2023-06-01 17:10:36.335 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.335 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.335 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.335 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.335 DBG default: 37 

2023-06-01 17:10:36.335 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.335 DBG default: 37 

2023-06-01 17:10:36.337 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.337 DBG default: 37 

2023-06-01 17:10:36.337 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.337 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.337 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sham Bhat Joshi" 

2023-06-01 17:10:36.337 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.337 DBG default: 37 

2023-06-01 17:10:36.337 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.337 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.337 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Puthamanasa" 

2023-06-01 17:10:36.337 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.337 DBG default: 37 

2023-06-01 17:10:36.337 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.337 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.337 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Bharani" 

2023-06-01 17:10:36.337 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.337 DBG default: 37 

2023-06-01 17:10:36.337 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.337 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.337 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "ChatakaN" 

2023-06-01 17:10:36.338 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.338 DBG default: 37 

2023-06-01 17:10:36.338 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.338 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.338 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "8073869420" 

2023-06-01 17:10:36.338 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.338 DBG default: 37 

2023-06-01 17:10:36.338 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.338 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.338 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.338 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.338 DBG default: 37 

2023-06-01 17:10:36.338 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.338 DBG default: 37 

2023-06-01 17:10:36.339 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.339 DBG default: 37 

2023-06-01 17:10:36.339 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.339 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.339 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sham Bhat Joshi" 

2023-06-01 17:10:36.339 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.339 DBG default: 37 

2023-06-01 17:10:36.339 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.339 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.339 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Puthamanasa" 

2023-06-01 17:10:36.339 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.339 DBG default: 37 

2023-06-01 17:10:36.339 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.339 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.339 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Bharani" 

2023-06-01 17:10:36.339 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.339 DBG default: 37 

2023-06-01 17:10:36.339 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.339 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.339 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasthodaka" 

2023-06-01 17:10:36.339 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.339 DBG default: 37 

2023-06-01 17:10:36.339 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.339 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.339 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "8073869420" 

2023-06-01 17:10:36.339 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.339 DBG default: 37 

2023-06-01 17:10:36.339 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.339 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.339 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.340 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.340 DBG default: 37 

2023-06-01 17:10:36.340 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.340 DBG default: 37 

2023-06-01 17:10:36.340 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.340 DBG default: 37 

2023-06-01 17:10:36.340 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.340 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.340 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vijayendra Kulkarni" 

2023-06-01 17:10:36.340 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.340 DBG default: 37 

2023-06-01 17:10:36.340 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.340 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.340 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shrivathsa" 

2023-06-01 17:10:36.341 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.341 DBG default: 37 

2023-06-01 17:10:36.341 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.341 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.341 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vishakha" 

2023-06-01 17:10:36.341 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.341 DBG default: 37 

2023-06-01 17:10:36.341 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.341 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.341 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Panchamrutha/Abhisheka" 

2023-06-01 17:10:36.341 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.341 DBG default: 37 

2023-06-01 17:10:36.341 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.341 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.341 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9880470969" 

2023-06-01 17:10:36.341 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.341 DBG default: 37 

2023-06-01 17:10:36.341 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.341 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.341 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.341 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.341 DBG default: 37 

2023-06-01 17:10:36.341 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.341 DBG default: 37 

2023-06-01 17:10:36.342 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.342 DBG default: 37 

2023-06-01 17:10:36.342 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.342 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.342 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vinay Kumar" 

2023-06-01 17:10:36.342 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.342 DBG default: 37 

2023-06-01 17:10:36.342 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.342 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.342 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sankhyayanasa" 

2023-06-01 17:10:36.342 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.342 DBG default: 37 

2023-06-01 17:10:36.342 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.342 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.342 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Uttarabhadrapada" 

2023-06-01 17:10:36.343 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.343 DBG default: 37 

2023-06-01 17:10:36.343 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.343 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.343 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "ChatakaN" 

2023-06-01 17:10:36.343 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.343 DBG default: 37 

2023-06-01 17:10:36.343 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.343 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.343 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9886058482" 

2023-06-01 17:10:36.343 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.343 DBG default: 37 

2023-06-01 17:10:36.343 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.343 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.343 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.343 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.343 DBG default: 37 

2023-06-01 17:10:36.343 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.343 DBG default: 37 

2023-06-01 17:10:36.344 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.344 DBG default: 37 

2023-06-01 17:10:36.344 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.344 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.344 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vinay Kumar" 

2023-06-01 17:10:36.344 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.344 DBG default: 37 

2023-06-01 17:10:36.344 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.344 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.344 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sankhyayanasa" 

2023-06-01 17:10:36.344 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.344 DBG default: 37 

2023-06-01 17:10:36.344 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.344 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.344 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Uttarabhadrapada" 

2023-06-01 17:10:36.344 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.344 DBG default: 37 

2023-06-01 17:10:36.344 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.344 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.344 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.344 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.344 DBG default: 37 

2023-06-01 17:10:36.344 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.344 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.344 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9886058482" 

2023-06-01 17:10:36.344 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.344 DBG default: 37 

2023-06-01 17:10:36.344 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.344 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.344 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.344 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.344 DBG default: 37 

2023-06-01 17:10:36.345 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.345 DBG default: 37 

2023-06-01 17:10:36.345 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.345 DBG default: 37 

2023-06-01 17:10:36.345 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.345 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.345 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sripadachar" 

2023-06-01 17:10:36.345 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.345 DBG default: 37 

2023-06-01 17:10:36.345 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.345 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.345 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.345 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.345 DBG default: 37 

2023-06-01 17:10:36.345 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.345 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.345 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.345 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.345 DBG default: 37 

2023-06-01 17:10:36.345 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.345 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.345 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.346 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.346 DBG default: 37 

2023-06-01 17:10:36.346 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.346 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.346 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9480585854" 

2023-06-01 17:10:36.346 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.346 DBG default: 37 

2023-06-01 17:10:36.346 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.346 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.346 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.346 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.346 DBG default: 37 

2023-06-01 17:10:36.346 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.346 DBG default: 37 

2023-06-01 17:10:36.346 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.346 DBG default: 37 

2023-06-01 17:10:36.346 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.346 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.346 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Raghunadan" 

2023-06-01 17:10:36.347 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.347 DBG default: 37 

2023-06-01 17:10:36.347 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Jamadagni" 

2023-06-01 17:10:36.347 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.347 DBG default: 37 

2023-06-01 17:10:36.347 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Bharani" 

2023-06-01 17:10:36.347 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.347 DBG default: 37 

2023-06-01 17:10:36.347 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.347 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.347 DBG default: 37 

2023-06-01 17:10:36.347 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9741599842" 

2023-06-01 17:10:36.347 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.347 DBG default: 37 

2023-06-01 17:10:36.347 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.347 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.347 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.347 DBG default: 37 

2023-06-01 17:10:36.347 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.347 DBG default: 37 

2023-06-01 17:10:36.348 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.348 DBG default: 37 

2023-06-01 17:10:36.348 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.348 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.348 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ravindra Malagi" 

2023-06-01 17:10:36.348 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.348 DBG default: 37 

2023-06-01 17:10:36.348 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.348 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.348 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Harithasa" 

2023-06-01 17:10:36.348 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.348 DBG default: 37 

2023-06-01 17:10:36.348 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.348 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.348 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashlesha" 

2023-06-01 17:10:36.348 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.348 DBG default: 37 

2023-06-01 17:10:36.348 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.348 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.349 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sathyanarayana Pooje" 

2023-06-01 17:10:36.349 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.349 DBG default: 37 

2023-06-01 17:10:36.349 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.349 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.349 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9483957542" 

2023-06-01 17:10:36.349 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.349 DBG default: 37 

2023-06-01 17:10:36.349 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.349 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.349 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.349 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.349 DBG default: 37 

2023-06-01 17:10:36.349 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.349 DBG default: 37 

2023-06-01 17:10:36.350 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.350 DBG default: 37 

2023-06-01 17:10:36.350 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.350 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Murali" 

2023-06-01 17:10:36.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.351 DBG default: 37 

2023-06-01 17:10:36.351 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.351 DBG default: 37 

2023-06-01 17:10:36.351 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.351 DBG default: 37 

2023-06-01 17:10:36.351 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.351 DBG default: 37 

2023-06-01 17:10:36.351 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9686669462" 

2023-06-01 17:10:36.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.351 DBG default: 37 

2023-06-01 17:10:36.351 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.351 DBG default: 37 

2023-06-01 17:10:36.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.351 DBG default: 37 

2023-06-01 17:10:36.352 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.352 DBG default: 37 

2023-06-01 17:10:36.352 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.352 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.352 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "A Raghavendra Murthy" 

2023-06-01 17:10:36.352 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.352 DBG default: 37 

2023-06-01 17:10:36.352 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.352 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.352 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-06-01 17:10:36.352 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.352 DBG default: 37 

2023-06-01 17:10:36.352 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.352 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.352 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Swati" 

2023-06-01 17:10:36.352 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.352 DBG default: 37 

2023-06-01 17:10:36.352 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.352 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "ChatakaN" 

2023-06-01 17:10:36.353 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.353 DBG default: 37 

2023-06-01 17:10:36.353 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "8123886837" 

2023-06-01 17:10:36.353 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.353 DBG default: 37 

2023-06-01 17:10:36.353 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.353 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.353 DBG default: 37 

2023-06-01 17:10:36.353 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.353 DBG default: 37 

2023-06-01 17:10:36.353 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.353 DBG default: 37 

2023-06-01 17:10:36.353 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "A Raghavendra Murthy" 

2023-06-01 17:10:36.353 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.353 DBG default: 37 

2023-06-01 17:10:36.353 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-06-01 17:10:36.353 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.353 DBG default: 37 

2023-06-01 17:10:36.353 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Swati" 

2023-06-01 17:10:36.354 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.354 DBG default: 37 

2023-06-01 17:10:36.354 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.354 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.354 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasthodaka" 

2023-06-01 17:10:36.354 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.354 DBG default: 37 

2023-06-01 17:10:36.354 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.354 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.354 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "8123886837" 

2023-06-01 17:10:36.354 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.354 DBG default: 37 

2023-06-01 17:10:36.354 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.354 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.354 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.354 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.354 DBG default: 37 

2023-06-01 17:10:36.354 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.354 DBG default: 37 

2023-06-01 17:10:36.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.355 DBG default: 37 

2023-06-01 17:10:36.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "R S Kulkarni" 

2023-06-01 17:10:36.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.355 DBG default: 37 

2023-06-01 17:10:36.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.355 DBG default: 37 

2023-06-01 17:10:36.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.355 DBG default: 37 

2023-06-01 17:10:36.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "SankalpaN" 

2023-06-01 17:10:36.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.355 DBG default: 37 

2023-06-01 17:10:36.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9916835446" 

2023-06-01 17:10:36.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.355 DBG default: 37 

2023-06-01 17:10:36.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.356 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.356 DBG default: 37 

2023-06-01 17:10:36.356 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.356 DBG default: 37 

2023-06-01 17:10:36.356 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.356 DBG default: 37 

2023-06-01 17:10:36.356 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "R S Kulkarni" 

2023-06-01 17:10:36.356 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.356 DBG default: 37 

2023-06-01 17:10:36.356 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.356 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.356 DBG default: 37 

2023-06-01 17:10:36.356 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.357 DBG default: 37 

2023-06-01 17:10:36.357 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.357 DBG default: 37 

2023-06-01 17:10:36.357 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9916835446" 

2023-06-01 17:10:36.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.357 DBG default: 37 

2023-06-01 17:10:36.357 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.357 DBG default: 37 

2023-06-01 17:10:36.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.357 DBG default: 37 

2023-06-01 17:10:36.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.359 DBG default: 37 

2023-06-01 17:10:36.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Mohan Kumar" 

2023-06-01 17:10:36.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.359 DBG default: 37 

2023-06-01 17:10:36.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Maudgalya" 

2023-06-01 17:10:36.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.359 DBG default: 37 

2023-06-01 17:10:36.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Uttarashadha" 

2023-06-01 17:10:36.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.359 DBG default: 37 

2023-06-01 17:10:36.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Panchamrutha/Abhisheka" 

2023-06-01 17:10:36.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.359 DBG default: 37 

2023-06-01 17:10:36.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481804498" 

2023-06-01 17:10:36.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.359 DBG default: 37 

2023-06-01 17:10:36.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.360 DBG default: 37 

2023-06-01 17:10:36.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.360 DBG default: 37 

2023-06-01 17:10:36.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.360 DBG default: 37 

2023-06-01 17:10:36.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Mohan Kumar" 

2023-06-01 17:10:36.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.360 DBG default: 37 

2023-06-01 17:10:36.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Maudgalya" 

2023-06-01 17:10:36.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.360 DBG default: 37 

2023-06-01 17:10:36.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Uttarashadha" 

2023-06-01 17:10:36.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.361 DBG default: 37 

2023-06-01 17:10:36.361 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.361 DBG default: 37 

2023-06-01 17:10:36.361 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481804498" 

2023-06-01 17:10:36.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.361 DBG default: 37 

2023-06-01 17:10:36.361 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.361 DBG default: 37 

2023-06-01 17:10:36.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.361 DBG default: 37 

2023-06-01 17:10:36.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.362 DBG default: 37 

2023-06-01 17:10:36.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Rakshit" 

2023-06-01 17:10:36.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.362 DBG default: 37 

2023-06-01 17:10:36.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Bharadwaja" 

2023-06-01 17:10:36.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.362 DBG default: 37 

2023-06-01 17:10:36.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Uttarashadha" 

2023-06-01 17:10:36.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.362 DBG default: 37 

2023-06-01 17:10:36.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.362 DBG default: 37 

2023-06-01 17:10:36.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9880033002" 

2023-06-01 17:10:36.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.362 DBG default: 37 

2023-06-01 17:10:36.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.362 DBG default: 37 

2023-06-01 17:10:36.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.363 DBG default: 37 

2023-06-01 17:10:36.365 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.365 DBG default: 37 

2023-06-01 17:10:36.365 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ritthi Sripada Rao" 

2023-06-01 17:10:36.365 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.365 DBG default: 37 

2023-06-01 17:10:36.365 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Bharadwaja" 

2023-06-01 17:10:36.365 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.365 DBG default: 37 

2023-06-01 17:10:36.365 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Purvaphalguni" 

2023-06-01 17:10:36.365 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.365 DBG default: 37 

2023-06-01 17:10:36.365 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.366 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.366 DBG default: 37 

2023-06-01 17:10:36.366 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9844018826" 

2023-06-01 17:10:36.366 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.366 DBG default: 37 

2023-06-01 17:10:36.366 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.366 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.366 DBG default: 37 

2023-06-01 17:10:36.366 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.366 DBG default: 37 

2023-06-01 17:10:36.366 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.367 DBG default: 37 

2023-06-01 17:10:36.367 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Pavamana M" 

2023-06-01 17:10:36.367 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.367 DBG default: 37 

2023-06-01 17:10:36.367 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Gargeyyesa" 

2023-06-01 17:10:36.367 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.367 DBG default: 37 

2023-06-01 17:10:36.367 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.367 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.367 DBG default: 37 

2023-06-01 17:10:36.367 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.367 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.367 DBG default: 37 

2023-06-01 17:10:36.367 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9986013228" 

2023-06-01 17:10:36.367 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.367 DBG default: 37 

2023-06-01 17:10:36.367 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.368 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.368 DBG default: 37 

2023-06-01 17:10:36.368 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.368 DBG default: 37 

2023-06-01 17:10:36.368 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.368 DBG default: 37 

2023-06-01 17:10:36.368 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Naveen" 

2023-06-01 17:10:36.368 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.368 DBG default: 37 

2023-06-01 17:10:36.368 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Gargeyyesa" 

2023-06-01 17:10:36.368 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.368 DBG default: 37 

2023-06-01 17:10:36.368 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Revati" 

2023-06-01 17:10:36.369 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.369 DBG default: 37 

2023-06-01 17:10:36.369 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.369 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.369 DBG default: 37 

2023-06-01 17:10:36.369 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9880932546" 

2023-06-01 17:10:36.369 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.369 DBG default: 37 

2023-06-01 17:10:36.369 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.369 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.369 DBG default: 37 

2023-06-01 17:10:36.369 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.369 DBG default: 37 

2023-06-01 17:10:36.371 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.371 DBG default: 37 

2023-06-01 17:10:36.371 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Adavi Acharya" 

2023-06-01 17:10:36.371 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.371 DBG default: 37 

2023-06-01 17:10:36.371 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vashistha" 

2023-06-01 17:10:36.371 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.371 DBG default: 37 

2023-06-01 17:10:36.371 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasta" 

2023-06-01 17:10:36.371 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.371 DBG default: 37 

2023-06-01 17:10:36.371 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "ChatakaN" 

2023-06-01 17:10:36.371 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.371 DBG default: 37 

2023-06-01 17:10:36.371 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "8310285283" 

2023-06-01 17:10:36.372 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.372 DBG default: 37 

2023-06-01 17:10:36.372 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.372 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.372 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.372 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.372 DBG default: 37 

2023-06-01 17:10:36.372 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.372 DBG default: 37 

2023-06-01 17:10:36.372 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.372 DBG default: 37 

2023-06-01 17:10:36.372 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.372 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.372 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Adavi Acharya" 

2023-06-01 17:10:36.372 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.372 DBG default: 37 

2023-06-01 17:10:36.372 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.372 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.372 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vashistha" 

2023-06-01 17:10:36.373 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.373 DBG default: 37 

2023-06-01 17:10:36.373 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.373 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.373 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasta" 

2023-06-01 17:10:36.373 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.373 DBG default: 37 

2023-06-01 17:10:36.373 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.373 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.373 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.373 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.373 DBG default: 37 

2023-06-01 17:10:36.373 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.373 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.373 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "8310285283" 

2023-06-01 17:10:36.373 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.373 DBG default: 37 

2023-06-01 17:10:36.373 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.373 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.373 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.373 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.373 DBG default: 37 

2023-06-01 17:10:36.373 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.373 DBG default: 37 

2023-06-01 17:10:36.374 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.374 DBG default: 37 

2023-06-01 17:10:36.374 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.374 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.374 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sumanth" 

2023-06-01 17:10:36.374 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.374 DBG default: 37 

2023-06-01 17:10:36.374 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.374 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.374 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Bharadwaja" 

2023-06-01 17:10:36.374 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.374 DBG default: 37 

2023-06-01 17:10:36.374 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.374 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.374 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Jyeshtha" 

2023-06-01 17:10:36.374 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.374 DBG default: 37 

2023-06-01 17:10:36.374 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.374 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.374 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.374 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.375 DBG default: 37 

2023-06-01 17:10:36.375 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.375 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.375 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9964144411" 

2023-06-01 17:10:36.375 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.375 DBG default: 37 

2023-06-01 17:10:36.375 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.375 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.375 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.375 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.375 DBG default: 37 

2023-06-01 17:10:36.375 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.375 DBG default: 37 

2023-06-01 17:10:36.375 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.375 DBG default: 37 

2023-06-01 17:10:36.375 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.375 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.375 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Krishnamurthy" 

2023-06-01 17:10:36.375 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.375 DBG default: 37 

2023-06-01 17:10:36.376 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.376 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.376 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.376 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.376 DBG default: 37 

2023-06-01 17:10:36.376 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.376 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.376 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.376 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.376 DBG default: 37 

2023-06-01 17:10:36.376 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.376 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.376 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.376 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.376 DBG default: 37 

2023-06-01 17:10:36.376 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.376 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.376 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9980632348" 

2023-06-01 17:10:36.376 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.376 DBG default: 37 

2023-06-01 17:10:36.376 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.376 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.376 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.376 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.376 DBG default: 37 

2023-06-01 17:10:36.376 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.376 DBG default: 37 

2023-06-01 17:10:36.377 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.377 DBG default: 37 

2023-06-01 17:10:36.377 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.377 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.377 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "N Shridar" 

2023-06-01 17:10:36.377 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.377 DBG default: 37 

2023-06-01 17:10:36.377 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.377 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.377 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vashistha" 

2023-06-01 17:10:36.377 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.377 DBG default: 37 

2023-06-01 17:10:36.377 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.377 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.377 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasta" 

2023-06-01 17:10:36.377 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.377 DBG default: 37 

2023-06-01 17:10:36.377 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.377 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.377 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.377 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.377 DBG default: 37 

2023-06-01 17:10:36.377 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.377 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.377 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9845370210" 

2023-06-01 17:10:36.378 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.378 DBG default: 37 

2023-06-01 17:10:36.378 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.378 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.378 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.378 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.378 DBG default: 37 

2023-06-01 17:10:36.378 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.378 DBG default: 37 

2023-06-01 17:10:36.378 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.378 DBG default: 37 

2023-06-01 17:10:36.378 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.378 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.378 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Raghavendra" 

2023-06-01 17:10:36.378 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.378 DBG default: 37 

2023-06-01 17:10:36.378 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.378 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.378 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-06-01 17:10:36.378 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.378 DBG default: 37 

2023-06-01 17:10:36.378 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.378 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.378 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.379 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.379 DBG default: 37 

2023-06-01 17:10:36.379 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.379 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.379 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.379 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.379 DBG default: 37 

2023-06-01 17:10:36.379 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.379 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.379 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9945272433" 

2023-06-01 17:10:36.379 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.379 DBG default: 37 

2023-06-01 17:10:36.379 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.379 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.379 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.379 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.379 DBG default: 37 

2023-06-01 17:10:36.379 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.379 DBG default: 37 

2023-06-01 17:10:36.379 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.379 DBG default: 37 

2023-06-01 17:10:36.379 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.379 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.379 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Rashmi" 

2023-06-01 17:10:36.380 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.380 DBG default: 37 

2023-06-01 17:10:36.380 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.380 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.380 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Mounabharghava" 

2023-06-01 17:10:36.380 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.380 DBG default: 37 

2023-06-01 17:10:36.380 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.380 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.380 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Purvashadha" 

2023-06-01 17:10:36.380 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.380 DBG default: 37 

2023-06-01 17:10:36.380 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.380 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.380 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.380 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.380 DBG default: 37 

2023-06-01 17:10:36.380 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.380 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.380 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "7204316233" 

2023-06-01 17:10:36.380 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.380 DBG default: 37 

2023-06-01 17:10:36.380 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.380 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.380 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.380 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.380 DBG default: 37 

2023-06-01 17:10:36.380 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.380 DBG default: 37 

2023-06-01 17:10:36.381 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.381 DBG default: 37 

2023-06-01 17:10:36.381 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.381 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.381 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sowmya" 

2023-06-01 17:10:36.381 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.381 DBG default: 37 

2023-06-01 17:10:36.381 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.381 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.381 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vashistha" 

2023-06-01 17:10:36.381 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.381 DBG default: 37 

2023-06-01 17:10:36.381 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.381 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.381 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.381 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.381 DBG default: 37 

2023-06-01 17:10:36.381 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.381 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.381 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.382 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.382 DBG default: 37 

2023-06-01 17:10:36.382 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.382 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.382 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9739044304" 

2023-06-01 17:10:36.382 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.382 DBG default: 37 

2023-06-01 17:10:36.382 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.382 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.382 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.382 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.382 DBG default: 37 

2023-06-01 17:10:36.382 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.382 DBG default: 37 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: 37 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.383 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Umesh" 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: 37 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.383 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: 37 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.383 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shravana" 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: 37 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.383 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "ChatakaN" 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: 37 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.383 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9845512180" 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: 37 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.383 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: 37 

2023-06-01 17:10:36.383 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.383 DBG default: 37 

2023-06-01 17:10:36.385 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.385 DBG default: 37 

2023-06-01 17:10:36.385 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.385 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.385 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Umesh" 

2023-06-01 17:10:36.385 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.385 DBG default: 37 

2023-06-01 17:10:36.385 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.385 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.385 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-06-01 17:10:36.385 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.385 DBG default: 37 

2023-06-01 17:10:36.385 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.385 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.385 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shravana" 

2023-06-01 17:10:36.385 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.385 DBG default: 37 

2023-06-01 17:10:36.385 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.385 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.385 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasthodaka" 

2023-06-01 17:10:36.386 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.386 DBG default: 37 

2023-06-01 17:10:36.386 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.386 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.386 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9845512180" 

2023-06-01 17:10:36.386 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.386 DBG default: 37 

2023-06-01 17:10:36.386 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.386 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.386 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.386 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.386 DBG default: 37 

2023-06-01 17:10:36.386 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.386 DBG default: 37 

2023-06-01 17:10:36.387 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.387 DBG default: 37 

2023-06-01 17:10:36.387 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.387 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.387 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Harini" 

2023-06-01 17:10:36.387 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.387 DBG default: 37 

2023-06-01 17:10:36.387 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.387 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.387 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dhananjaya" 

2023-06-01 17:10:36.387 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.387 DBG default: 37 

2023-06-01 17:10:36.387 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.387 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.387 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Punarvasu" 

2023-06-01 17:10:36.387 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.387 DBG default: 37 

2023-06-01 17:10:36.387 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.387 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.387 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.387 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.387 DBG default: 37 

2023-06-01 17:10:36.387 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.387 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.387 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9342555155" 

2023-06-01 17:10:36.388 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.388 DBG default: 37 

2023-06-01 17:10:36.388 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.388 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.388 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.388 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.388 DBG default: 37 

2023-06-01 17:10:36.388 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.388 DBG default: 37 

2023-06-01 17:10:36.388 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.388 DBG default: 37 

2023-06-01 17:10:36.388 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.388 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.388 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Badari Vishal" 

2023-06-01 17:10:36.388 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.388 DBG default: 37 

2023-06-01 17:10:36.388 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.388 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.389 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Jamadagni" 

2023-06-01 17:10:36.389 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.389 DBG default: 37 

2023-06-01 17:10:36.389 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.389 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.389 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Revati" 

2023-06-01 17:10:36.389 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.389 DBG default: 37 

2023-06-01 17:10:36.389 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.389 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.389 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.389 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.389 DBG default: 37 

2023-06-01 17:10:36.389 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.389 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.389 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9535798004" 

2023-06-01 17:10:36.389 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.389 DBG default: 37 

2023-06-01 17:10:36.389 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.389 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.389 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.389 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.389 DBG default: 37 

2023-06-01 17:10:36.389 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.389 DBG default: 37 

2023-06-01 17:10:36.390 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.390 DBG default: 37 

2023-06-01 17:10:36.390 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.390 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.390 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Akshay Desai" 

2023-06-01 17:10:36.390 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.390 DBG default: 37 

2023-06-01 17:10:36.390 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.390 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.390 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kaundinya" 

2023-06-01 17:10:36.390 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.390 DBG default: 37 

2023-06-01 17:10:36.390 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.390 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.390 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.390 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.390 DBG default: 37 

2023-06-01 17:10:36.390 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.390 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.390 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasthodaka Regular" 

2023-06-01 17:10:36.390 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.390 DBG default: 37 

2023-06-01 17:10:36.390 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.390 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.390 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9742083477" 

2023-06-01 17:10:36.391 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.391 DBG default: 37 

2023-06-01 17:10:36.391 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.391 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.391 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.391 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.391 DBG default: 37 

2023-06-01 17:10:36.391 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.391 DBG default: 37 

2023-06-01 17:10:36.391 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.391 DBG default: 37 

2023-06-01 17:10:36.391 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.391 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.391 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Abhay Desai" 

2023-06-01 17:10:36.391 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.391 DBG default: 37 

2023-06-01 17:10:36.391 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.391 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.391 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kaundinya" 

2023-06-01 17:10:36.392 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.392 DBG default: 37 

2023-06-01 17:10:36.392 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.392 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.392 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Anuradha" 

2023-06-01 17:10:36.392 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.392 DBG default: 37 

2023-06-01 17:10:36.392 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.392 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.392 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasthodaka Regular" 

2023-06-01 17:10:36.392 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.392 DBG default: 37 

2023-06-01 17:10:36.392 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.392 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.392 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9148653143" 

2023-06-01 17:10:36.392 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.392 DBG default: 37 

2023-06-01 17:10:36.392 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.392 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.392 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.392 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.392 DBG default: 37 

2023-06-01 17:10:36.392 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.392 DBG default: 37 

2023-06-01 17:10:36.393 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.393 DBG default: 37 

2023-06-01 17:10:36.393 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.393 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.393 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Anand Avadhani" 

2023-06-01 17:10:36.393 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.393 DBG default: 37 

2023-06-01 17:10:36.393 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.393 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.393 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Mounabharghava" 

2023-06-01 17:10:36.393 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.393 DBG default: 37 

2023-06-01 17:10:36.393 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.393 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.393 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Swati" 

2023-06-01 17:10:36.393 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.393 DBG default: 37 

2023-06-01 17:10:36.393 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.393 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.393 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.393 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.393 DBG default: 37 

2023-06-01 17:10:36.393 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.393 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.393 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9845923575" 

2023-06-01 17:10:36.394 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.394 DBG default: 37 

2023-06-01 17:10:36.394 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.394 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.394 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.394 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.394 DBG default: 37 

2023-06-01 17:10:36.394 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.394 DBG default: 37 

2023-06-01 17:10:36.394 DBG default: virtual QHash<int, QByteArray> BookingReportModel::roleNames() const 

2023-06-01 17:10:36.395 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.395 DBG default: 37 

2023-06-01 17:10:36.395 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.395 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.395 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Nagabhushan" 

2023-06-01 17:10:36.395 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.395 DBG default: 37 

2023-06-01 17:10:36.395 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.395 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.395 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vashistha" 

2023-06-01 17:10:36.395 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.395 DBG default: 37 

2023-06-01 17:10:36.395 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.395 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.395 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Anuradha" 

2023-06-01 17:10:36.395 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.395 DBG default: 37 

2023-06-01 17:10:36.395 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.395 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.395 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.395 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.395 DBG default: 37 

2023-06-01 17:10:36.395 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.395 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.395 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.395 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.395 DBG default: 37 

2023-06-01 17:10:36.395 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.395 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.395 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9663650110" 

2023-06-01 17:10:36.396 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.396 DBG default: 37 

2023-06-01 17:10:36.396 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.396 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.396 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.396 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.396 DBG default: 37 

2023-06-01 17:10:36.396 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.396 DBG default: 37 

2023-06-01 17:10:36.396 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.396 DBG default: 37 

2023-06-01 17:10:36.396 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.396 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.396 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sudhanva" 

2023-06-01 17:10:36.396 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.396 DBG default: 37 

2023-06-01 17:10:36.396 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.396 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.396 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.397 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.397 DBG default: 37 

2023-06-01 17:10:36.398 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.398 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.398 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.398 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.398 DBG default: 37 

2023-06-01 17:10:36.398 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.398 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.398 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.398 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.398 DBG default: 37 

2023-06-01 17:10:36.398 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.398 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.398 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.398 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.398 DBG default: 37 

2023-06-01 17:10:36.398 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.398 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.398 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9980510563" 

2023-06-01 17:10:36.398 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.398 DBG default: 37 

2023-06-01 17:10:36.398 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.398 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.398 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.398 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.398 DBG default: 37 

2023-06-01 17:10:36.398 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.398 DBG default: 37 

2023-06-01 17:10:36.399 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.399 DBG default: 37 

2023-06-01 17:10:36.399 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.399 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.399 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sachin Kulkarni" 

2023-06-01 17:10:36.399 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.399 DBG default: 37 

2023-06-01 17:10:36.399 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.399 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.399 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.399 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.399 DBG default: 37 

2023-06-01 17:10:36.399 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.399 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.399 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.399 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.399 DBG default: 37 

2023-06-01 17:10:36.399 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.399 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.399 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.399 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.399 DBG default: 37 

2023-06-01 17:10:36.399 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.399 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.399 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.399 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.399 DBG default: 37 

2023-06-01 17:10:36.399 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.400 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.400 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9916962524" 

2023-06-01 17:10:36.400 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.400 DBG default: 37 

2023-06-01 17:10:36.400 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.400 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.400 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.400 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.400 DBG default: 37 

2023-06-01 17:10:36.400 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.400 DBG default: 37 

2023-06-01 17:10:36.400 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.400 DBG default: 37 

2023-06-01 17:10:36.400 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.400 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.400 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sham Bhat Joshi" 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: 37 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.401 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Puthamanasa" 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: 37 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.401 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Bharani" 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: 37 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.401 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "ChatakaN" 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: 37 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.401 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const -2147483648 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: 37 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.401 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "8073869420" 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: 37 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.401 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: 37 

2023-06-01 17:10:36.401 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.401 DBG default: 37 

2023-06-01 17:10:36.402 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.402 DBG default: 37 

2023-06-01 17:10:36.402 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.402 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.402 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sham Bhat Joshi" 

2023-06-01 17:10:36.402 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.402 DBG default: 37 

2023-06-01 17:10:36.402 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.402 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.402 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Puthamanasa" 

2023-06-01 17:10:36.402 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.402 DBG default: 37 

2023-06-01 17:10:36.402 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.402 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.402 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Bharani" 

2023-06-01 17:10:36.402 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.402 DBG default: 37 

2023-06-01 17:10:36.402 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.403 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.403 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasthodaka" 

2023-06-01 17:10:36.403 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.403 DBG default: 37 

2023-06-01 17:10:36.403 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.403 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.403 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.403 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.403 DBG default: 37 

2023-06-01 17:10:36.403 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.403 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.403 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "8073869420" 

2023-06-01 17:10:36.403 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.403 DBG default: 37 

2023-06-01 17:10:36.403 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.403 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.403 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.403 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.403 DBG default: 37 

2023-06-01 17:10:36.403 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.403 DBG default: 37 

2023-06-01 17:10:36.403 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: 37 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vijayendra Kulkarni" 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: 37 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shrivathsa" 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: 37 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vishakha" 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: 37 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Panchamrutha/Abhisheka" 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: 37 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: 37 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9880470969" 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: 37 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.404 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: 37 

2023-06-01 17:10:36.404 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.404 DBG default: 37 

2023-06-01 17:10:36.405 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.405 DBG default: 37 

2023-06-01 17:10:36.405 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.405 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.405 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vinay Kumar" 

2023-06-01 17:10:36.405 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.405 DBG default: 37 

2023-06-01 17:10:36.405 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.405 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.405 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sankhyayanasa" 

2023-06-01 17:10:36.405 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.405 DBG default: 37 

2023-06-01 17:10:36.405 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.405 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.405 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Uttarabhadrapada" 

2023-06-01 17:10:36.405 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.405 DBG default: 37 

2023-06-01 17:10:36.405 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.405 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.405 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "ChatakaN" 

2023-06-01 17:10:36.405 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.405 DBG default: 37 

2023-06-01 17:10:36.406 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.406 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.406 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const -2147483648 

2023-06-01 17:10:36.406 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.406 DBG default: 37 

2023-06-01 17:10:36.406 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.406 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.406 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9886058482" 

2023-06-01 17:10:36.406 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.406 DBG default: 37 

2023-06-01 17:10:36.406 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.406 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.406 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.406 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.406 DBG default: 37 

2023-06-01 17:10:36.406 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.406 DBG default: 37 

2023-06-01 17:10:36.406 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.406 DBG default: 37 

2023-06-01 17:10:36.406 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.406 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.406 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vinay Kumar" 

2023-06-01 17:10:36.406 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.406 DBG default: 37 

2023-06-01 17:10:36.407 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.407 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.407 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sankhyayanasa" 

2023-06-01 17:10:36.407 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.407 DBG default: 37 

2023-06-01 17:10:36.407 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.407 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.407 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Uttarabhadrapada" 

2023-06-01 17:10:36.407 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.407 DBG default: 37 

2023-06-01 17:10:36.407 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.407 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.407 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.407 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.407 DBG default: 37 

2023-06-01 17:10:36.407 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.407 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.407 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.407 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.407 DBG default: 37 

2023-06-01 17:10:36.407 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.407 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.407 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9886058482" 

2023-06-01 17:10:36.407 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.407 DBG default: 37 

2023-06-01 17:10:36.407 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.407 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.407 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.407 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.407 DBG default: 37 

2023-06-01 17:10:36.407 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.407 DBG default: 37 

2023-06-01 17:10:36.408 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.408 DBG default: 37 

2023-06-01 17:10:36.408 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.408 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.408 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sripadachar" 

2023-06-01 17:10:36.408 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.408 DBG default: 37 

2023-06-01 17:10:36.408 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.408 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.408 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.408 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.408 DBG default: 37 

2023-06-01 17:10:36.408 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.408 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.408 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.408 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.408 DBG default: 37 

2023-06-01 17:10:36.408 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.408 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.408 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.408 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.408 DBG default: 37 

2023-06-01 17:10:36.408 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.408 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.408 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.408 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.408 DBG default: 37 

2023-06-01 17:10:36.408 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.409 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.409 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9480585854" 

2023-06-01 17:10:36.409 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.409 DBG default: 37 

2023-06-01 17:10:36.409 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.409 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.409 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.409 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.409 DBG default: 37 

2023-06-01 17:10:36.409 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.409 DBG default: 37 

2023-06-01 17:10:36.410 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.410 DBG default: 37 

2023-06-01 17:10:36.410 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.410 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.410 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Raghunadan" 

2023-06-01 17:10:36.410 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.410 DBG default: 37 

2023-06-01 17:10:36.410 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.410 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.410 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Jamadagni" 

2023-06-01 17:10:36.410 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.410 DBG default: 37 

2023-06-01 17:10:36.410 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.410 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.410 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Bharani" 

2023-06-01 17:10:36.410 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.410 DBG default: 37 

2023-06-01 17:10:36.410 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.410 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.410 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.410 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.410 DBG default: 37 

2023-06-01 17:10:36.410 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.410 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.410 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.411 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.411 DBG default: 37 

2023-06-01 17:10:36.411 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.411 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.411 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9741599842" 

2023-06-01 17:10:36.411 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.411 DBG default: 37 

2023-06-01 17:10:36.411 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.411 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.411 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.411 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.411 DBG default: 37 

2023-06-01 17:10:36.411 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.411 DBG default: 37 

2023-06-01 17:10:36.411 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.411 DBG default: 37 

2023-06-01 17:10:36.411 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.411 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.411 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ravindra Malagi" 

2023-06-01 17:10:36.411 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.411 DBG default: 37 

2023-06-01 17:10:36.411 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.411 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.411 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Harithasa" 

2023-06-01 17:10:36.412 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.412 DBG default: 37 

2023-06-01 17:10:36.412 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.412 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.412 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashlesha" 

2023-06-01 17:10:36.412 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.412 DBG default: 37 

2023-06-01 17:10:36.412 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.412 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.412 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sathyanarayana Pooje" 

2023-06-01 17:10:36.412 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.412 DBG default: 37 

2023-06-01 17:10:36.412 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.412 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.412 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.412 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.412 DBG default: 37 

2023-06-01 17:10:36.412 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.412 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.412 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9483957542" 

2023-06-01 17:10:36.412 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.412 DBG default: 37 

2023-06-01 17:10:36.412 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.412 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.412 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.412 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.412 DBG default: 37 

2023-06-01 17:10:36.412 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.412 DBG default: 37 

2023-06-01 17:10:36.413 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.413 DBG default: 37 

2023-06-01 17:10:36.413 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.413 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.413 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Murali" 

2023-06-01 17:10:36.413 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.413 DBG default: 37 

2023-06-01 17:10:36.413 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.413 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.413 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.413 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.413 DBG default: 37 

2023-06-01 17:10:36.413 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.413 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.413 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.413 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.413 DBG default: 37 

2023-06-01 17:10:36.413 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.413 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.413 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.413 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.413 DBG default: 37 

2023-06-01 17:10:36.413 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.413 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.413 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.413 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.413 DBG default: 37 

2023-06-01 17:10:36.413 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.413 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.413 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9686669462" 

2023-06-01 17:10:36.414 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.414 DBG default: 37 

2023-06-01 17:10:36.414 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.414 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.414 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.414 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.414 DBG default: 37 

2023-06-01 17:10:36.414 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.414 DBG default: 37 

2023-06-01 17:10:36.414 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.414 DBG default: 37 

2023-06-01 17:10:36.414 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.414 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.414 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "A Raghavendra Murthy" 

2023-06-01 17:10:36.414 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.414 DBG default: 37 

2023-06-01 17:10:36.414 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.414 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.414 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-06-01 17:10:36.414 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.414 DBG default: 37 

2023-06-01 17:10:36.414 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.414 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.414 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Swati" 

2023-06-01 17:10:36.415 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.415 DBG default: 37 

2023-06-01 17:10:36.415 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.415 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.415 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "ChatakaN" 

2023-06-01 17:10:36.415 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.415 DBG default: 37 

2023-06-01 17:10:36.415 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.415 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.415 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const -2147483648 

2023-06-01 17:10:36.415 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.415 DBG default: 37 

2023-06-01 17:10:36.415 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.415 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.415 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "8123886837" 

2023-06-01 17:10:36.415 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.415 DBG default: 37 

2023-06-01 17:10:36.415 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.415 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.415 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.415 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.415 DBG default: 37 

2023-06-01 17:10:36.415 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.415 DBG default: 37 

2023-06-01 17:10:36.416 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.416 DBG default: 37 

2023-06-01 17:10:36.416 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.416 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.416 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "A Raghavendra Murthy" 

2023-06-01 17:10:36.416 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.416 DBG default: 37 

2023-06-01 17:10:36.416 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.416 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.416 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-06-01 17:10:36.416 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.416 DBG default: 37 

2023-06-01 17:10:36.416 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.416 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.416 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Swati" 

2023-06-01 17:10:36.416 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.416 DBG default: 37 

2023-06-01 17:10:36.416 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.416 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.416 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasthodaka" 

2023-06-01 17:10:36.416 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.416 DBG default: 37 

2023-06-01 17:10:36.416 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.416 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.416 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.416 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.416 DBG default: 37 

2023-06-01 17:10:36.416 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.416 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.416 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "8123886837" 

2023-06-01 17:10:36.417 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.417 DBG default: 37 

2023-06-01 17:10:36.417 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.417 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.417 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.417 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.417 DBG default: 37 

2023-06-01 17:10:36.417 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.417 DBG default: 37 

2023-06-01 17:10:36.417 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.417 DBG default: 37 

2023-06-01 17:10:36.417 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.417 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.417 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "R S Kulkarni" 

2023-06-01 17:10:36.417 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.417 DBG default: 37 

2023-06-01 17:10:36.417 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.417 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.417 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.417 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.417 DBG default: 37 

2023-06-01 17:10:36.417 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.417 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.417 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.418 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.418 DBG default: 37 

2023-06-01 17:10:36.418 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.418 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.418 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "SankalpaN" 

2023-06-01 17:10:36.418 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.418 DBG default: 37 

2023-06-01 17:10:36.418 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.418 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.418 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const -2147483648 

2023-06-01 17:10:36.418 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.418 DBG default: 37 

2023-06-01 17:10:36.418 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.418 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.418 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9916835446" 

2023-06-01 17:10:36.418 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.418 DBG default: 37 

2023-06-01 17:10:36.418 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.418 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.418 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.418 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.418 DBG default: 37 

2023-06-01 17:10:36.418 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.418 DBG default: 37 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: 37 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "R S Kulkarni" 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: 37 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: 37 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: 37 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: 37 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: 37 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9916835446" 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: 37 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.419 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: 37 

2023-06-01 17:10:36.419 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.419 DBG default: 37 

2023-06-01 17:10:36.421 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.421 DBG default: 37 

2023-06-01 17:10:36.421 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.421 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.421 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Mohan Kumar" 

2023-06-01 17:10:36.421 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.421 DBG default: 37 

2023-06-01 17:10:36.421 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.421 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.421 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Maudgalya" 

2023-06-01 17:10:36.421 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.421 DBG default: 37 

2023-06-01 17:10:36.421 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.421 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.421 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Uttarashadha" 

2023-06-01 17:10:36.421 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.421 DBG default: 37 

2023-06-01 17:10:36.421 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.421 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.421 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Panchamrutha/Abhisheka" 

2023-06-01 17:10:36.421 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.422 DBG default: 37 

2023-06-01 17:10:36.422 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.422 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.422 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.422 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.422 DBG default: 37 

2023-06-01 17:10:36.422 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.422 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.422 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481804498" 

2023-06-01 17:10:36.422 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.422 DBG default: 37 

2023-06-01 17:10:36.422 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.422 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.422 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.422 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.422 DBG default: 37 

2023-06-01 17:10:36.422 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.422 DBG default: 37 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: 37 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Mohan Kumar" 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: 37 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Maudgalya" 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: 37 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Uttarashadha" 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: 37 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: 37 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: 37 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481804498" 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: 37 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.423 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: 37 

2023-06-01 17:10:36.423 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.423 DBG default: 37 

2023-06-01 17:10:36.424 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.424 DBG default: 37 

2023-06-01 17:10:36.424 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.424 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.424 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Rakshit" 

2023-06-01 17:10:36.424 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.424 DBG default: 37 

2023-06-01 17:10:36.424 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.424 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.424 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Bharadwaja" 

2023-06-01 17:10:36.424 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.424 DBG default: 37 

2023-06-01 17:10:36.424 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.424 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.424 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Uttarashadha" 

2023-06-01 17:10:36.424 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.424 DBG default: 37 

2023-06-01 17:10:36.424 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.424 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.424 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.425 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.425 DBG default: 37 

2023-06-01 17:10:36.425 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.425 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.425 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.425 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.425 DBG default: 37 

2023-06-01 17:10:36.425 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.425 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.425 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9880033002" 

2023-06-01 17:10:36.425 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.425 DBG default: 37 

2023-06-01 17:10:36.425 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.425 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.425 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.425 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.425 DBG default: 37 

2023-06-01 17:10:36.425 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.425 DBG default: 37 

2023-06-01 17:10:36.425 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.425 DBG default: 37 

2023-06-01 17:10:36.425 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ritthi Sripada Rao" 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: 37 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Bharadwaja" 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: 37 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Purvaphalguni" 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: 37 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: 37 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: 37 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9844018826" 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: 37 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.426 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: 37 

2023-06-01 17:10:36.426 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.426 DBG default: 37 

2023-06-01 17:10:36.427 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.427 DBG default: 37 

2023-06-01 17:10:36.427 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.427 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.427 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Pavamana M" 

2023-06-01 17:10:36.427 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.427 DBG default: 37 

2023-06-01 17:10:36.427 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.427 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.427 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Gargeyyesa" 

2023-06-01 17:10:36.427 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.427 DBG default: 37 

2023-06-01 17:10:36.427 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.427 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.427 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.427 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.427 DBG default: 37 

2023-06-01 17:10:36.427 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.427 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.427 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.427 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.427 DBG default: 37 

2023-06-01 17:10:36.427 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.427 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.427 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.428 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.428 DBG default: 37 

2023-06-01 17:10:36.428 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.428 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.428 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9986013228" 

2023-06-01 17:10:36.428 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.428 DBG default: 37 

2023-06-01 17:10:36.428 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.428 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.428 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.428 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.428 DBG default: 37 

2023-06-01 17:10:36.428 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.428 DBG default: 37 

2023-06-01 17:10:36.428 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.428 DBG default: 37 

2023-06-01 17:10:36.428 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.428 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.428 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Naveen" 

2023-06-01 17:10:36.428 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: 37 

2023-06-01 17:10:36.429 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.429 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Gargeyyesa" 

2023-06-01 17:10:36.429 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: 37 

2023-06-01 17:10:36.429 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.429 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Revati" 

2023-06-01 17:10:36.429 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: 37 

2023-06-01 17:10:36.429 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.429 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.429 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: 37 

2023-06-01 17:10:36.429 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.429 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.429 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: 37 

2023-06-01 17:10:36.429 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.429 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9880932546" 

2023-06-01 17:10:36.429 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: 37 

2023-06-01 17:10:36.429 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.429 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.429 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: 37 

2023-06-01 17:10:36.429 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.429 DBG default: 37 

2023-06-01 17:10:36.430 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.430 DBG default: 37 

2023-06-01 17:10:36.430 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.430 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.430 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Adavi Acharya" 

2023-06-01 17:10:36.430 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.430 DBG default: 37 

2023-06-01 17:10:36.430 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.430 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.430 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vashistha" 

2023-06-01 17:10:36.430 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.430 DBG default: 37 

2023-06-01 17:10:36.430 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.430 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.430 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasta" 

2023-06-01 17:10:36.430 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.430 DBG default: 37 

2023-06-01 17:10:36.430 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.430 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.430 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "ChatakaN" 

2023-06-01 17:10:36.430 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.430 DBG default: 37 

2023-06-01 17:10:36.430 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.430 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.430 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const -2147483648 

2023-06-01 17:10:36.430 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.430 DBG default: 37 

2023-06-01 17:10:36.430 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.430 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.430 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "8310285283" 

2023-06-01 17:10:36.431 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.431 DBG default: 37 

2023-06-01 17:10:36.431 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.431 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.431 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.431 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.431 DBG default: 37 

2023-06-01 17:10:36.431 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.431 DBG default: 37 

2023-06-01 17:10:36.431 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.431 DBG default: 37 

2023-06-01 17:10:36.431 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.431 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.431 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Adavi Acharya" 

2023-06-01 17:10:36.431 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.431 DBG default: 37 

2023-06-01 17:10:36.431 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.431 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.431 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vashistha" 

2023-06-01 17:10:36.432 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.432 DBG default: 37 

2023-06-01 17:10:36.432 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.432 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.432 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasta" 

2023-06-01 17:10:36.432 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.432 DBG default: 37 

2023-06-01 17:10:36.432 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.432 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.432 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.432 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.432 DBG default: 37 

2023-06-01 17:10:36.432 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.432 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.432 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.432 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.432 DBG default: 37 

2023-06-01 17:10:36.432 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.432 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.432 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "8310285283" 

2023-06-01 17:10:36.432 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.432 DBG default: 37 

2023-06-01 17:10:36.432 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.432 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.432 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.432 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.432 DBG default: 37 

2023-06-01 17:10:36.432 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.432 DBG default: 37 

2023-06-01 17:10:36.434 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.434 DBG default: 37 

2023-06-01 17:10:36.434 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.434 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.434 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sumanth" 

2023-06-01 17:10:36.434 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.434 DBG default: 37 

2023-06-01 17:10:36.434 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.434 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.434 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Bharadwaja" 

2023-06-01 17:10:36.434 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.434 DBG default: 37 

2023-06-01 17:10:36.434 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.434 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.434 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Jyeshtha" 

2023-06-01 17:10:36.434 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.434 DBG default: 37 

2023-06-01 17:10:36.434 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.434 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.434 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.434 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.434 DBG default: 37 

2023-06-01 17:10:36.434 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.434 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.434 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.434 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.434 DBG default: 37 

2023-06-01 17:10:36.434 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.434 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.434 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9964144411" 

2023-06-01 17:10:36.435 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.435 DBG default: 37 

2023-06-01 17:10:36.435 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.435 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.435 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.435 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.435 DBG default: 37 

2023-06-01 17:10:36.435 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.435 DBG default: 37 

2023-06-01 17:10:36.435 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.435 DBG default: 37 

2023-06-01 17:10:36.435 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.435 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.435 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Krishnamurthy" 

2023-06-01 17:10:36.435 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.435 DBG default: 37 

2023-06-01 17:10:36.435 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.435 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.435 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.435 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.435 DBG default: 37 

2023-06-01 17:10:36.435 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.435 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.435 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.436 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.436 DBG default: 37 

2023-06-01 17:10:36.436 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.436 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.436 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.436 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.436 DBG default: 37 

2023-06-01 17:10:36.436 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.436 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.436 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.436 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.436 DBG default: 37 

2023-06-01 17:10:36.436 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.436 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.436 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9980632348" 

2023-06-01 17:10:36.436 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.436 DBG default: 37 

2023-06-01 17:10:36.436 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.436 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.436 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.436 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.436 DBG default: 37 

2023-06-01 17:10:36.436 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.436 DBG default: 37 

2023-06-01 17:10:36.437 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.437 DBG default: 37 

2023-06-01 17:10:36.437 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.437 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.437 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "N Shridar" 

2023-06-01 17:10:36.437 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.437 DBG default: 37 

2023-06-01 17:10:36.437 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.437 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.437 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vashistha" 

2023-06-01 17:10:36.437 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.437 DBG default: 37 

2023-06-01 17:10:36.437 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.437 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.437 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasta" 

2023-06-01 17:10:36.437 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.437 DBG default: 37 

2023-06-01 17:10:36.437 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.437 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.437 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.437 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.437 DBG default: 37 

2023-06-01 17:10:36.437 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.437 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.437 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.437 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.437 DBG default: 37 

2023-06-01 17:10:36.437 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.437 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.437 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9845370210" 

2023-06-01 17:10:36.438 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.438 DBG default: 37 

2023-06-01 17:10:36.438 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.438 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.438 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.438 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.438 DBG default: 37 

2023-06-01 17:10:36.438 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.438 DBG default: 37 

2023-06-01 17:10:36.438 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.438 DBG default: 37 

2023-06-01 17:10:36.438 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.438 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.438 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Raghavendra" 

2023-06-01 17:10:36.438 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.438 DBG default: 37 

2023-06-01 17:10:36.438 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.438 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.438 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-06-01 17:10:36.438 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.439 DBG default: 37 

2023-06-01 17:10:36.439 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.439 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.439 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-06-01 17:10:36.439 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.439 DBG default: 37 

2023-06-01 17:10:36.439 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.439 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.439 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.439 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.439 DBG default: 37 

2023-06-01 17:10:36.439 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.439 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.439 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.439 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.439 DBG default: 37 

2023-06-01 17:10:36.439 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.439 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.439 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9945272433" 

2023-06-01 17:10:36.439 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.439 DBG default: 37 

2023-06-01 17:10:36.439 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.439 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.439 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.439 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.439 DBG default: 37 

2023-06-01 17:10:36.439 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.439 DBG default: 37 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: 37 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Rashmi" 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: 37 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Mounabharghava" 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: 37 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Purvashadha" 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: 37 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: 37 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: 37 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "7204316233" 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: 37 

2023-06-01 17:10:36.440 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.440 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.441 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.441 DBG default: 37 

2023-06-01 17:10:36.441 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.441 DBG default: 37 

2023-06-01 17:10:36.441 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.441 DBG default: 37 

2023-06-01 17:10:36.441 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.441 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.441 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Sowmya" 

2023-06-01 17:10:36.441 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.441 DBG default: 37 

2023-06-01 17:10:36.441 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.441 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.441 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Vashistha" 

2023-06-01 17:10:36.441 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.441 DBG default: 37 

2023-06-01 17:10:36.441 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.441 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.441 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.441 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.441 DBG default: 37 

2023-06-01 17:10:36.441 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.441 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.441 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.442 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.442 DBG default: 37 

2023-06-01 17:10:36.442 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.442 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.442 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.442 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.442 DBG default: 37 

2023-06-01 17:10:36.442 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.442 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.442 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9739044304" 

2023-06-01 17:10:36.442 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.442 DBG default: 37 

2023-06-01 17:10:36.442 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.442 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.442 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.442 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.442 DBG default: 37 

2023-06-01 17:10:36.442 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.442 DBG default: 37 

2023-06-01 17:10:36.442 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.442 DBG default: 37 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Umesh" 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: 37 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: 37 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shravana" 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: 37 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "ChatakaN" 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: 37 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const -2147483648 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: 37 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9845512180" 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: 37 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.443 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: 37 

2023-06-01 17:10:36.443 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.443 DBG default: 37 

2023-06-01 17:10:36.444 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.444 DBG default: 37 

2023-06-01 17:10:36.444 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.444 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.444 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Umesh" 

2023-06-01 17:10:36.444 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.444 DBG default: 37 

2023-06-01 17:10:36.444 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.444 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.444 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-06-01 17:10:36.444 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.444 DBG default: 37 

2023-06-01 17:10:36.444 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.444 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.444 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shravana" 

2023-06-01 17:10:36.444 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.444 DBG default: 37 

2023-06-01 17:10:36.444 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.444 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.444 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasthodaka" 

2023-06-01 17:10:36.444 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.444 DBG default: 37 

2023-06-01 17:10:36.444 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.444 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.444 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.445 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.445 DBG default: 37 

2023-06-01 17:10:36.445 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.445 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.445 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9845512180" 

2023-06-01 17:10:36.445 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.445 DBG default: 37 

2023-06-01 17:10:36.445 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.445 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.445 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.445 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.445 DBG default: 37 

2023-06-01 17:10:36.445 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.445 DBG default: 37 

2023-06-01 17:10:36.445 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.445 DBG default: 37 

2023-06-01 17:10:36.445 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.445 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.445 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Harini" 

2023-06-01 17:10:36.447 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.447 DBG default: 37 

2023-06-01 17:10:36.447 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.447 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.447 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dhananjaya" 

2023-06-01 17:10:36.447 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.447 DBG default: 37 

2023-06-01 17:10:36.447 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.447 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.447 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Punarvasu" 

2023-06-01 17:10:36.447 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.447 DBG default: 37 

2023-06-01 17:10:36.447 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.447 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.447 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.447 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.447 DBG default: 37 

2023-06-01 17:10:36.447 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.447 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.447 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.447 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.447 DBG default: 37 

2023-06-01 17:10:36.447 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.447 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.447 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9342555155" 

2023-06-01 17:10:36.447 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.447 DBG default: 37 

2023-06-01 17:10:36.447 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.447 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.447 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.448 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.448 DBG default: 37 

2023-06-01 17:10:36.448 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.448 DBG default: 37 

2023-06-01 17:10:36.448 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.448 DBG default: 37 

2023-06-01 17:10:36.448 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.448 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.448 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Badari Vishal" 

2023-06-01 17:10:36.448 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.448 DBG default: 37 

2023-06-01 17:10:36.448 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.448 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.448 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Jamadagni" 

2023-06-01 17:10:36.448 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.448 DBG default: 37 

2023-06-01 17:10:36.448 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.448 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.448 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Revati" 

2023-06-01 17:10:36.449 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.449 DBG default: 37 

2023-06-01 17:10:36.449 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.449 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.449 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.449 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.449 DBG default: 37 

2023-06-01 17:10:36.449 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.449 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.449 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.449 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.449 DBG default: 37 

2023-06-01 17:10:36.449 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.449 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.449 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9535798004" 

2023-06-01 17:10:36.449 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.449 DBG default: 37 

2023-06-01 17:10:36.449 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.449 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.449 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.449 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.449 DBG default: 37 

2023-06-01 17:10:36.449 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.449 DBG default: 37 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: 37 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Akshay Desai" 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: 37 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kaundinya" 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: 37 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Ashwini" 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: 37 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasthodaka Regular" 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: 37 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: 37 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9742083477" 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: 37 

2023-06-01 17:10:36.450 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.450 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.451 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.451 DBG default: 37 

2023-06-01 17:10:36.451 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.451 DBG default: 37 

2023-06-01 17:10:36.451 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.451 DBG default: 37 

2023-06-01 17:10:36.451 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.451 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.451 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Abhay Desai" 

2023-06-01 17:10:36.451 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.451 DBG default: 37 

2023-06-01 17:10:36.451 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.451 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.451 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kaundinya" 

2023-06-01 17:10:36.451 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.451 DBG default: 37 

2023-06-01 17:10:36.451 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.451 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.451 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Anuradha" 

2023-06-01 17:10:36.451 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.452 DBG default: 37 

2023-06-01 17:10:36.452 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.452 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.452 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasthodaka Regular" 

2023-06-01 17:10:36.452 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.452 DBG default: 37 

2023-06-01 17:10:36.452 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.452 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.452 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.452 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.452 DBG default: 37 

2023-06-01 17:10:36.452 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.452 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.452 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9148653143" 

2023-06-01 17:10:36.452 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.452 DBG default: 37 

2023-06-01 17:10:36.452 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.452 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.452 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:36.452 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.452 DBG default: 37 

2023-06-01 17:10:36.452 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.452 DBG default: 37 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: 37 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Anand Avadhani" 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: 37 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Mounabharghava" 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: 37 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Swati" 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: 37 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Dwadashi Hasthodaka" 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: 37 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: 37 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9845923575" 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: 37 

2023-06-01 17:10:36.453 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-06-01 17:10:36.453 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-06-01 17:10:57.524 DBG qml: export data clicked
2023-06-01 17:10:57.524 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-06-01 17:10:57.524 DBG default: void BookingReportModel::generateBookingReportCSV() 

2023-06-01 17:10:57.524 DBG default: SevaReceiptCsvProcessor::SevaReceiptCsvProcessor(QObject*) 

2023-06-01 17:11:18.657 DBG default: void SevaReceiptCsvProcessor::recieveBookingReportList(QList<BookingReportElement*>) 

2023-06-01 17:11:18.658 DBG default: File saved:  "C:/Users/91973/OneDrive/Desktop/r1.csv"
2023-06-01 17:11:19.908 DBG qml: Ok clicked
2023-06-01 17:18:52.416 DBG qml: Closing the report
2023-06-01 17:18:52.416 DBG qml: reset DateRangeModel
2023-06-01 17:18:52.416 DBG default: void BookingReportModel::resetBookingModel() 

2023-06-01 17:18:52.416 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:18:52.416 DBG default: 0 

2023-06-01 17:18:52.422 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-06-01 17:18:52.422 DBG default: 0 

2023-06-01 17:18:52.427 DBG qml:  Component.onDestruction of SevaAccountReportForSingleDate.qml
2023-06-01 17:18:52.427 DBG default: void SevaReport::resetBookingDateRangeModel() 

2023-06-01 17:18:52.427 DBG default: void BookingReportDateRangeModel::resetBookingDateRangeModel() 

