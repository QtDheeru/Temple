2023-07-11 12:44:38.355 WRN default: Invalid QML element name " AccReportDateRangeElement"
2023-07-11 12:44:38.357 WRN default: Invalid QML element name " AccReportMonthRangeElement"
2023-07-11 12:44:38.357 WRN default: Invalid QML element name " BookingReportDateRangeElement"
2023-07-11 12:44:38.357 WRN default: Invalid QML element name " BookingReportMonthRangeElement"
2023-07-11 12:44:38.358 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-11 12:44:38.358 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() In static getTrustListModelInstance of TrustListModel inside if 

2023-07-11 12:44:38.358 DBG default: TrustListModel::TrustListModel() 

2023-07-11 12:44:38.358 DBG default: void TrustListModel::init() 

2023-07-11 12:44:38.358 DBG default: TrustConfiguration::TrustConfiguration(QObject*) 

2023-07-11 12:44:38.358 DBG default: void TrustConfiguration::readTrustsFromJsonToList() path  "D:/TempleFiles_suman/Temple-main/bins" 

2023-07-11 12:44:38.358 DBG default: file opened 

2023-07-11 12:44:38.358 DBG default: read all 

2023-07-11 12:44:38.358 DBG default: void TrustConfiguration::readTrustsFromJsonToList() dddddddoooooooooooocccccccc 

2023-07-11 12:44:38.358 DBG default: Trust::Trust(QObject*) 

2023-07-11 12:44:38.531 WRN qt.qpa.fonts: Unable to open default EUDC font: "EUDC.TTE"
2023-07-11 12:44:38.721 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-11 12:44:38.721 DBG qml: Screen screenWidth size =1920
2023-07-11 12:44:38.721 DBG qml: Screen screenHeight size =1000
2023-07-11 12:44:38.762 DBG qml: screen height= 1080
2023-07-11 12:44:38.762 DBG qml: screen width= 1920
2023-07-11 12:44:38.762 DBG qml: Screen MyStyles-screecnWidth size =1920
2023-07-11 12:44:38.762 DBG qml: Screen MyStyles-screenHeight size =1000
2023-07-11 12:44:38.762 DBG qml: screen density  == 6.228183399741848
2023-07-11 12:44:38.762 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-11 12:44:38.762 DBG qml: Screen screenWidth size =1920
2023-07-11 12:44:38.762 DBG qml: Screen screenHeight size =1000
2023-07-11 12:44:43.844 DBG default: int TrustListModel::getTrustListSize() 

2023-07-11 12:44:43.844 DBG default: int TrustListModel::getTrustListSize() 

2023-07-11 12:44:43.844 DBG qml: in else--------------
2023-07-11 12:44:43.845 DBG qml: in else------trustName--------Hubablli
2023-07-11 12:44:43.845 DBG qml: in else-------trustCode-------Hubablli
2023-07-11 12:44:43.845 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) 

2023-07-11 12:44:43.845 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) m_currentConfigLocation  "D:/TempleFiles_suman/Temple-main/bins/Config/Hubablli" 

2023-07-11 12:44:43.845 DBG default: Inside lamda 

2023-07-11 12:44:43.845 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) 

2023-07-11 12:44:43.845 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) m_currentDataLocation  "D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli" 

2023-07-11 12:44:43.845 DBG default: Inside lamda 

2023-07-11 12:44:43.845 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-11 12:44:43.846 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-07-11 12:44:43.846 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-07-11 12:44:43.846 DBG default: Creating the DataBase Connection  

2023-07-11 12:44:43.852 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-11 12:44:43.852 DBG default: QString TrustListModel::getDataLocation() 

2023-07-11 12:44:43.853 DBG default: DBInterface::DBInterface(QObject*) ******************* DB "D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-07-11 12:44:43.853 DBG default: Database is opened  "D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-07-11 12:44:43.853 DBG default: Sevabboking table not created
2023-07-11 12:44:43.853 DBG default: person details creation failed
2023-07-11 12:44:43.853 DBG default: SevaTypeJsonProcessor::SevaTypeJsonProcessor(QObject*) 

2023-07-11 12:44:43.853 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate() 

2023-07-11 12:44:43.853 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-11 12:44:43.854 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-11 12:44:43.854 DBG default: file opened 

2023-07-11 12:44:43.854 DBG default: read all 

2023-07-11 12:44:43.854 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-07-11 12:44:43.854 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  23 

2023-07-11 12:44:43.854 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 23 

2023-07-11 12:44:43.854 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  23 already exist in DB 

2023-07-11 12:44:43.854 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-07-11 12:44:43.854 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  24 

2023-07-11 12:44:43.854 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 24 

2023-07-11 12:44:43.854 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  24 already exist in DB 

2023-07-11 12:44:43.854 DBG default: void SevaTypeJsonProcessor::printSevaTypeNames() 

2023-07-11 12:44:43.854 DBG default: 23 :  "Regular Seva" , 23 , "Raj" 

2023-07-11 12:44:43.854 DBG default: 24 :  "Aradhana Seva" , 24 , "Abhi" 

2023-07-11 12:44:43.854 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-11 12:44:43.854 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-11 12:44:43.854 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-07-11 12:44:43.854 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-11 12:44:43.854 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-11 12:44:43.854 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  path "D:/TempleFiles_suman/Temple-main/bins/Config/Hubablli/SevaNames.json" 

2023-07-11 12:44:43.854 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() file opened 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() read all 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Udayaasthamaana Seva" 

2023-07-11 12:44:43.855 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.855 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1001 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Seva" 

2023-07-11 12:44:43.855 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.855 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1002 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Samarpana Seva" 

2023-07-11 12:44:43.855 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.855 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1003 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakaabhisheka" 

2023-07-11 12:44:43.855 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.855 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1004 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.855 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Godhana" 

2023-07-11 12:44:43.856 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.856 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1005 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mahaa Pooja" 

2023-07-11 12:44:43.856 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.856 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1006 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ksheeraabhisheka" 

2023-07-11 12:44:43.856 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.856 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1007 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Madhu Abhisheka" 

2023-07-11 12:44:43.856 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.856 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1008 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Yella Homagala Seva" 

2023-07-11 12:44:43.856 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.856 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1010 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Naivedhya/Hasthodaka" 

2023-07-11 12:44:43.856 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.856 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1011 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Phala - Panchaamrutha" 

2023-07-11 12:44:43.856 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.856 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1012 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.856 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ganapathi Abhisheka" 

2023-07-11 12:44:43.857 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.857 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1013 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Nagadevara Abhisheka" 

2023-07-11 12:44:43.857 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.857 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1014 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Abhisheka" 

2023-07-11 12:44:43.857 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.857 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1015 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rathothsava" 

2023-07-11 12:44:43.857 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.857 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1016 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Huggi Naivedhya" 

2023-07-11 12:44:43.857 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.857 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1017 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pongal Naivedhya" 

2023-07-11 12:44:43.857 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.857 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1018 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Grahana Shanthi" 

2023-07-11 12:44:43.857 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.857 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1019 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.857 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika - Rathothsava" 

2023-07-11 12:44:43.858 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.858 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1020 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika Seva" 

2023-07-11 12:44:43.858 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.858 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1021 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sri Sathya Narayana Pooja" 

2023-07-11 12:44:43.858 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.858 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1022 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Tulsi Archane" 

2023-07-11 12:44:43.858 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.858 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1023 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Chataka Shraadha" 

2023-07-11 12:44:43.858 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.858 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1024 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sankalpa Shraadha" 

2023-07-11 12:44:43.858 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.858 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1025 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Vaahana Pooja" 

2023-07-11 12:44:43.858 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.858 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1026 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Archane Seva" 

2023-07-11 12:44:43.858 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.858 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.858 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1027 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Lakshmi Pooja" 

2023-07-11 12:44:43.859 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.859 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1028 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Devarige Thailaabhisheka" 

2023-07-11 12:44:43.859 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.859 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1029 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pavamaana Homa" 

2023-07-11 12:44:43.859 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.859 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1030 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Gana Homa" 

2023-07-11 12:44:43.859 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.859 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1031 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mruthyunjaya Homa" 

2023-07-11 12:44:43.859 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.859 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1032 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rudraabhisheka" 

2023-07-11 12:44:43.859 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.859 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1033 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.859 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Sampurna Seva" 

2023-07-11 12:44:43.859 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.859 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2001 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Anna Santharpane Seva" 

2023-07-11 12:44:43.860 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.860 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2002 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva(Huvina Alankara)" 

2023-07-11 12:44:43.860 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.860 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2003 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva" 

2023-07-11 12:44:43.860 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.860 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2004 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Noothana Vastra Seva" 

2023-07-11 12:44:43.860 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.860 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2005 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva seva" 

2023-07-11 12:44:43.860 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.860 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2006 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakabhisheka Seva" 

2023-07-11 12:44:43.860 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.860 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2007 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Hasthodaka Seva(Prathidina)" 

2023-07-11 12:44:43.860 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.860 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2009 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.860 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "MahaPooje" 

2023-07-11 12:44:43.861 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.861 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2010 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ashtothara Seva(Prathidina)" 

2023-07-11 12:44:43.861 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.861 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2011 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Paadakaradhane" 

2023-07-11 12:44:43.861 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.861 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2012 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "GanaHoma" 

2023-07-11 12:44:43.861 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.861 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2013 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "PhalaPanchamrutha Seva" 

2023-07-11 12:44:43.861 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-11 12:44:43.861 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2014 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() continue flag1 

2023-07-11 12:44:43.861 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-11 12:44:43.861 DBG default: void SevaTypeJsonProcessor::printSevasNames() 

2023-07-11 12:44:43.861 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-11 12:44:43.861 DBG default: Creating the SevaTypeNamesDataModel  

2023-07-11 12:44:43.861 DBG default: SevaBookingConformationDataModel::SevaBookingConformationDataModel(QObject*) 

2023-07-11 12:44:43.861 DBG default: JsonWriter::JsonWriter(QObject*) 

2023-07-11 12:44:43.861 DBG default: SevaTypeNamesDataModel::SevaTypeNamesDataModel(QObject*) 

2023-07-11 12:44:43.861 DBG default: void SevaTypeNamesDataModel::connectSignals() 

2023-07-11 12:44:43.861 DBG default: bool SevaTypeNamesDataModel::querySevaTypes() 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 3 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 4 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 5 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 6 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 7 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 8 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 9 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 10 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 11 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 12 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 13 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 14 

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.862 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 15 

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 16 

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 17 

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 18 

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 19 

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 20 

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 21 

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 22 

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 23 

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 24 

2023-07-11 12:44:43.863 DBG default: bool DBInterface::querySevaType() querying seva type done 

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::querySevaNames() 

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka"  Type = 1  SevaID = 2 

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))))
2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka"  Type = 1  SevaID = 3 

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))))
2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dwadashi Hasthodaka"  Type = 1  SevaID = 4 

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))))
2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi Homa"  Type = 9  SevaID = 5 

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))), QMap((5, SevaName(0x5773590))))
2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Panchamrutha/Abhisheka"  Type = 1  SevaID = 6 

2023-07-11 12:44:43.863 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))), QMap((5, SevaName(0x5773590))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Samanya Kanike"  Type = 1  SevaID = 7 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))), QMap((5, SevaName(0x5773590))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shop Kanike"  Type = 11  SevaID = 9 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))), QMap((5, SevaName(0x5773590))), QMap((9, SevaName(0x5773770))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya thaila seva"  Type = 9  SevaID = 10 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))), QMap((9, SevaName(0x5773770))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Building Fund"  Type = 12  SevaID = 11 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankar Pankthi"  Type = 4  SevaID = 12 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))), QMap((12, SevaName(0x5773360))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Aradhna Kanike"  Type = 4  SevaID = 13 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadhana "  Type = 4  SevaID = 14 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hundi Collections"  Type = 13  SevaID = 15 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Khara Huggi"  Type = 8  SevaID = 16 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sweet Huggi"  Type = 8  SevaID = 17 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thatte Hasthodaka"  Type = 1  SevaID = 18 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Advance Recovered"  Type = 9  SevaID = 19 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PP - Rent"  Type = 14  SevaID = 20 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Annadana Seva"  Type = 3  SevaID = 23 

2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((23, SevaName(0x579e270))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.864 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa"  Type = 3  SevaID = 24 

2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa Sankalp"  Type = 3  SevaID = 25 

2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachna Seva-All days"  Type = 3  SevaID = 26 

2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachana seva- 1 day"  Type = 3  SevaID = 27 

2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami  Annadana Sankalpa Seva"  Type = 3  SevaID = 28 

2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Hoovina Alankara seva"  Type = 3  SevaID = 29 

2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navmi Sarva seva"  Type = 3  SevaID = 30 

2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sumadhwavijaya Parayana seva"  Type = 3  SevaID = 31 

2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Prakarosthava"  Type = 3  SevaID = 34 

2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Seva"  Type = 3  SevaID = 35 

2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Gruha Padapooja"  Type = 3  SevaID = 36 

2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Serva Seva"  Type = 1  SevaID = 37 

2023-07-11 12:44:43.865 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Kanike"  Type = 3  SevaID = 38 

2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Annadana seva "  Type = 3  SevaID = 39 

2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pandith Sanman"  Type = 3  SevaID = 40 

2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M  Navami Panchamurtha "  Type = 3  SevaID = 41 

2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))))
2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Shanthi Homa"  Type = 15  SevaID = 42 

2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))))
2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Padapooja"  Type = 3  SevaID = 43 

2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))))
2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Madhu Abhiseka"  Type = 3  SevaID = 44 

2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))))
2023-07-11 12:44:43.866 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gopaladasara Aradhane"  Type = 16  SevaID = 45 

2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Additional Sweets"  Type = 9  SevaID = 46 

2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina alankara Seva"  Type = 1  SevaID = 47 

2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prasada Seve"  Type = 1  SevaID = 48 

2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka- 2 Hasthodaka"  Type = 1  SevaID = 49 

2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sathyanarayana Pooje"  Type = 10  SevaID = 50 

2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "AYUSH HOMA"  Type = 15  SevaID = 51 

2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILA ABHYANJANA"  Type = 9  SevaID = 52 

2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharana"  Type = 9  SevaID = 53 

2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.867 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI  SAMPOORNA SEVE"  Type = 2  SevaID = 54 

2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI SANKLAPA SEVE"  Type = 2  SevaID = 55 

2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA"  Type = 2  SevaID = 56 

2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA SANKALPA"  Type = 2  SevaID = 57 

2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SITA RAMA KALYANOTSVA"  Type = 2  SevaID = 58 

2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMA KALYANOTSAVA SANKALPAA"  Type = 2  SevaID = 59 

2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA PRAVACHANA SEVE "  Type = 2  SevaID = 60 

2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "YELLA DINAGALA PRAVACHANA SEVE"  Type = 2  SevaID = 61 

2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "HOOVINA ALANKARA"  Type = 2  SevaID = 62 

2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.868 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi"  Type = 2  SevaID = 63 

2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA SANJE PRASADA SEVE"  Type = 2  SevaID = 64 

2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "VISHESHA PANCHAMRUTA"  Type = 2  SevaID = 65 

2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRAKAROTSVA"  Type = 2  SevaID = 66 

2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILABYAJANA SEVE"  Type = 2  SevaID = 67 

2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ARCHANE"  Type = 2  SevaID = 68 

2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))))
2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Raghavendra Swamy Aradhane"  Type = 16  SevaID = 69 

2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))))
2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Abhisheka Madhu/Panchamrutha"  Type = 4  SevaID = 70 

2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))))
2023-07-11 12:44:43.869 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtottara"  Type = 4  SevaID = 71 

2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))))
2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara"  Type = 4  SevaID = 72 

2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))))
2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 4  SevaID = 73 

2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))))
2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Deepalankarana Seve"  Type = 7  SevaID = 74 

2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))))
2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tarakari Seve"  Type = 1  SevaID = 75 

2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))))
2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seva"  Type = 4  SevaID = 76 

2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))))
2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Bhiksha kanike"  Type = 18  SevaID = 77 

2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))))
2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "hastodaka P P"  Type = 5  SevaID = 78 

2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))))
2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka P P"  Type = 5  SevaID = 79 

2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))))
2023-07-11 12:44:43.870 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa  P P"  Type = 5  SevaID = 80 

2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))))
2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Nanda Deepa for 9 days"  Type = 6  SevaID = 81 

2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))))
2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Nanda Deepa for  9 days"  Type = 6  SevaID = 82 

2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))))
2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Deepa for 1 day"  Type = 6  SevaID = 83 

2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))))
2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Deepa for 1 day"  Type = 6  SevaID = 84 

2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))))
2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seve"  Type = 1  SevaID = 85 

2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))))
2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadana Kanike"  Type = 1  SevaID = 86 

2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))))
2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana"  Type = 19  SevaID = 87 

2023-07-11 12:44:43.871 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))))
2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana for one day"  Type = 19  SevaID = 88 

2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana Seva for one day"  Type = 6  SevaID = 89 

2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nitya Deepaseve"  Type = 7  SevaID = 90 

2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjana"  Type = 7  SevaID = 91 

2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Seve"  Type = 7  SevaID = 92 

2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Laksha Deepostava"  Type = 7  SevaID = 93 

2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Pratyekavagi "  Type = 7  SevaID = 94 

2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.872 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulasi Damodara Vivaha sankalpa"  Type = 7  SevaID = 95 

2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sampoorna Seve "  Type = 7  SevaID = 96 

2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sankalpa Seve "  Type = 7  SevaID = 97 

2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Hoovina Alankara "  Type = 7  SevaID = 98 

2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha Abhisheka "  Type = 7  SevaID = 99 

2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vijaya Dasara Aradhane"  Type = 16  SevaID = 100 

2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarotsva"  Type = 1  SevaID = 101 

2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.873 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 0  SevaID = 102 

2023-07-11 12:44:43.874 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.874 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 1  SevaID = 103 

2023-07-11 12:44:43.874 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.874 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtotthara Kanike"  Type = 1  SevaID = 104 

2023-07-11 12:44:43.874 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.874 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Santhana Gopala Krishna Homa"  Type = 15  SevaID = 105 

2023-07-11 12:44:43.874 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.874 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamana Homa"  Type = 15  SevaID = 106 

2023-07-11 12:44:43.874 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))))
2023-07-11 12:44:43.874 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shashwatha Seva Pooje"  Type = 20  SevaID = 107 

2023-07-11 12:44:43.874 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))))
2023-07-11 12:44:43.874 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Regular"  Type = 1  SevaID = 108 

2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))))
2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Seva"  Type = 8  SevaID = 109 

2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))))
2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mosaranna Naivedya"  Type = 9  SevaID = 110 

2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))))
2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Poorna Pragna Hall Kanike"  Type = 14  SevaID = 111 

2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))), QMap((50, SevaName(0x579e040))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))))
2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pratyeka Sathyanarayana Pooja"  Type = 10  SevaID = 112 

2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))))
2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chikka Adige"  Type = 9  SevaID = 113 

2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))))
2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha"  Type = 21  SevaID = 114 

2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))))
2023-07-11 12:44:43.875 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjan seve"  Type = 21  SevaID = 115 

2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))))
2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri SeethaRamanjaneyarige Nuthana Vastra Dharane pratidevarige."  Type = 21  SevaID = 116 

2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))))
2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 21  SevaID = 117 

2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))))
2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane"  Type = 21  SevaID = 118 

2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))))
2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara seve"  Type = 21  SevaID = 119 

2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))))
2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ramanavami Kanike"  Type = 2  SevaID = 120 

2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))))
2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Villeydhele Hara"  Type = 1  SevaID = 121 

2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))))
2023-07-11 12:44:43.876 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gandha Lepana "  Type = 22  SevaID = 122 

2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))))
2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phalahara Pooja"  Type = 9  SevaID = 123 

2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))))
2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 15  SevaID = 124 

2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))))
2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Monthly"  Type = 1  SevaID = 125 

2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))))
2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Jayathirtha Aradhane Kanike"  Type = 16  SevaID = 126 

2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))))
2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Oldarticals sold"  Type = 9  SevaID = 127 

2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))))
2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Udayaasthamaana Seva"  Type = 23  SevaID = 128 

2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))))
2023-07-11 12:44:43.877 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Seva"  Type = 23  SevaID = 129 

2023-07-11 12:44:43.878 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))))
2023-07-11 12:44:43.878 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Samarpana Seva"  Type = 23  SevaID = 130 

2023-07-11 12:44:43.878 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))))
2023-07-11 12:44:43.878 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakaabhisheka"  Type = 23  SevaID = 131 

2023-07-11 12:44:43.878 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))))
2023-07-11 12:44:43.878 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Godhana"  Type = 23  SevaID = 132 

2023-07-11 12:44:43.879 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))))
2023-07-11 12:44:43.879 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mahaa Pooja"  Type = 23  SevaID = 133 

2023-07-11 12:44:43.879 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))))
2023-07-11 12:44:43.879 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ksheeraabhisheka"  Type = 23  SevaID = 134 

2023-07-11 12:44:43.879 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))))
2023-07-11 12:44:43.879 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Madhu Abhisheka"  Type = 23  SevaID = 135 

2023-07-11 12:44:43.879 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))))
2023-07-11 12:44:43.879 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Yella Homagala Seva"  Type = 23  SevaID = 136 

2023-07-11 12:44:43.879 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))))
2023-07-11 12:44:43.879 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Naivedhya/Hasthodaka"  Type = 23  SevaID = 137 

2023-07-11 12:44:43.879 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))))
2023-07-11 12:44:43.879 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phala - Panchaamrutha"  Type = 23  SevaID = 138 

2023-07-11 12:44:43.880 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))))
2023-07-11 12:44:43.880 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ganapathi Abhisheka"  Type = 23  SevaID = 139 

2023-07-11 12:44:43.880 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))))
2023-07-11 12:44:43.880 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nagadevara Abhisheka"  Type = 23  SevaID = 140 

2023-07-11 12:44:43.880 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))))
2023-07-11 12:44:43.880 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Abhisheka"  Type = 23  SevaID = 141 

2023-07-11 12:44:43.880 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))))
2023-07-11 12:44:43.880 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rathothsava"  Type = 23  SevaID = 142 

2023-07-11 12:44:43.880 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))))
2023-07-11 12:44:43.880 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Naivedhya"  Type = 23  SevaID = 143 

2023-07-11 12:44:43.880 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))))
2023-07-11 12:44:43.880 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pongal Naivedhya"  Type = 23  SevaID = 144 

2023-07-11 12:44:43.881 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))))
2023-07-11 12:44:43.881 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi"  Type = 23  SevaID = 145 

2023-07-11 12:44:43.881 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))))
2023-07-11 12:44:43.881 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika - Rathothsava"  Type = 23  SevaID = 146 

2023-07-11 12:44:43.881 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))))
2023-07-11 12:44:43.881 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika Seva"  Type = 23  SevaID = 147 

2023-07-11 12:44:43.881 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))))
2023-07-11 12:44:43.881 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri Sathya Narayana Pooja"  Type = 23  SevaID = 148 

2023-07-11 12:44:43.881 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))))
2023-07-11 12:44:43.881 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulsi Archane"  Type = 23  SevaID = 149 

2023-07-11 12:44:43.881 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))))
2023-07-11 12:44:43.881 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka Shraadha"  Type = 23  SevaID = 150 

2023-07-11 12:44:43.882 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))))
2023-07-11 12:44:43.882 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa Shraadha"  Type = 23  SevaID = 151 

2023-07-11 12:44:43.882 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))))
2023-07-11 12:44:43.882 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vaahana Pooja"  Type = 23  SevaID = 152 

2023-07-11 12:44:43.882 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))))
2023-07-11 12:44:43.882 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane Seva"  Type = 23  SevaID = 153 

2023-07-11 12:44:43.882 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))))
2023-07-11 12:44:43.882 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Lakshmi Pooja"  Type = 23  SevaID = 154 

2023-07-11 12:44:43.882 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))))
2023-07-11 12:44:43.882 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Devarige Thailaabhisheka"  Type = 23  SevaID = 155 

2023-07-11 12:44:43.883 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))))
2023-07-11 12:44:43.883 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamaana Homa"  Type = 23  SevaID = 156 

2023-07-11 12:44:43.883 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))))
2023-07-11 12:44:43.883 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gana Homa"  Type = 23  SevaID = 157 

2023-07-11 12:44:43.883 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))))
2023-07-11 12:44:43.883 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mruthyunjaya Homa"  Type = 23  SevaID = 158 

2023-07-11 12:44:43.883 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))))
2023-07-11 12:44:43.883 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rudraabhisheka"  Type = 23  SevaID = 159 

2023-07-11 12:44:43.883 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))))
2023-07-11 12:44:43.883 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Sampurna Seva"  Type = 24  SevaID = 160 

2023-07-11 12:44:43.883 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))))
2023-07-11 12:44:43.883 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Anna Santharpane Seva"  Type = 24  SevaID = 161 

2023-07-11 12:44:43.884 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))))
2023-07-11 12:44:43.884 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva(Huvina Alankara)"  Type = 24  SevaID = 162 

2023-07-11 12:44:43.884 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))))
2023-07-11 12:44:43.884 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva"  Type = 24  SevaID = 163 

2023-07-11 12:44:43.884 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))))
2023-07-11 12:44:43.884 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Noothana Vastra Seva"  Type = 24  SevaID = 164 

2023-07-11 12:44:43.884 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))))
2023-07-11 12:44:43.884 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva seva"  Type = 24  SevaID = 165 

2023-07-11 12:44:43.884 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))(165, SevaName(0x57f6848))))
2023-07-11 12:44:43.884 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakabhisheka Seva"  Type = 24  SevaID = 166 

2023-07-11 12:44:43.885 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))(165, SevaName(0x57f6848))(166, SevaName(0x57f63e8))))
2023-07-11 12:44:43.885 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Seva(Prathidina)"  Type = 24  SevaID = 167 

2023-07-11 12:44:43.885 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))(165, SevaName(0x57f6848))(166, SevaName(0x57f63e8))(167, SevaName(0x57f66b8))))
2023-07-11 12:44:43.885 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "MahaPooje"  Type = 24  SevaID = 168 

2023-07-11 12:44:43.885 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))(165, SevaName(0x57f6848))(166, SevaName(0x57f63e8))(167, SevaName(0x57f66b8))(168, SevaName(0x57f5f88))))
2023-07-11 12:44:43.885 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtothara Seva(Prathidina)"  Type = 24  SevaID = 169 

2023-07-11 12:44:43.885 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))(165, SevaName(0x57f6848))(166, SevaName(0x57f63e8))(167, SevaName(0x57f66b8))(168, SevaName(0x57f5f88))(169, SevaName(0x57f6708))))
2023-07-11 12:44:43.885 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Paadakaradhane"  Type = 24  SevaID = 170 

2023-07-11 12:44:43.885 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))(165, SevaName(0x57f6848))(166, SevaName(0x57f63e8))(167, SevaName(0x57f66b8))(168, SevaName(0x57f5f88))(169, SevaName(0x57f6708))(170, SevaName(0x57f6438))))
2023-07-11 12:44:43.885 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 24  SevaID = 171 

2023-07-11 12:44:43.886 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))(165, SevaName(0x57f6848))(166, SevaName(0x57f63e8))(167, SevaName(0x57f66b8))(168, SevaName(0x57f5f88))(169, SevaName(0x57f6708))(170, SevaName(0x57f6438))(171, SevaName(0x57f67f8))))
2023-07-11 12:44:43.886 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PhalaPanchamrutha Seva"  Type = 24  SevaID = 172 

2023-07-11 12:44:43.886 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))(165, SevaName(0x57f6848))(166, SevaName(0x57f63e8))(167, SevaName(0x57f66b8))(168, SevaName(0x57f5f88))(169, SevaName(0x57f6708))(170, SevaName(0x57f6438))(171, SevaName(0x57f67f8))(172, SevaName(0x57f6758))))
2023-07-11 12:44:43.886 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ChatakaN"  Type = 1  SevaID = 173 

2023-07-11 12:44:43.886 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))(165, SevaName(0x57f6848))(166, SevaName(0x57f63e8))(167, SevaName(0x57f66b8))(168, SevaName(0x57f5f88))(169, SevaName(0x57f6708))(170, SevaName(0x57f6438))(171, SevaName(0x57f67f8))(172, SevaName(0x57f6758))))
2023-07-11 12:44:43.886 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SankalpaN"  Type = 1  SevaID = 174 

2023-07-11 12:44:43.886 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))(165, SevaName(0x57f6848))(166, SevaName(0x57f63e8))(167, SevaName(0x57f66b8))(168, SevaName(0x57f5f88))(169, SevaName(0x57f6708))(170, SevaName(0x57f6438))(171, SevaName(0x57f67f8))(172, SevaName(0x57f6758))))
2023-07-11 12:44:43.886 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Poornapragna Hall Kanike N "  Type = 14  SevaID = 175 

2023-07-11 12:44:43.886 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x579f3f0))), QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))), QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))), QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))), QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))), QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))), QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))), QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))), QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))), QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))), QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))), QMap((9, SevaName(0x5773770))), QMap((11, SevaName(0x5773090))), QMap((15, SevaName(0x5773400))), QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))(175, SevaName(0x57f68e8))), QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))), QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))), QMap((77, SevaName(0x579e950))), QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))), QMap((107, SevaName(0x579f080))), QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))), QMap((122, SevaName(0x57f5998))), QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))), QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))(165, SevaName(0x57f6848))(166, SevaName(0x57f63e8))(167, SevaName(0x57f66b8))(168, SevaName(0x57f5f88))(169, SevaName(0x57f6708))(170, SevaName(0x57f6438))(171, SevaName(0x57f67f8))(172, SevaName(0x57f6758))))
2023-07-11 12:44:43.887 DBG default: bool DBInterface::querySevaNames() querying seva names done 

2023-07-11 12:44:43.887 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:43.887 DBG default: UserManagement::UserManagement(QObject*) 

2023-07-11 12:44:43.887 DBG default: The role number recieved -1 

2023-07-11 12:44:43.887 DBG default: SevaDetailsTableView::SevaDetailsTableView(QObject*) 

2023-07-11 12:44:43.891 DBG default: hello suman 

2023-07-11 12:44:43.891 DBG default: AccountReportModel::AccountReportModel(QObject*) 

2023-07-11 12:44:43.891 DBG default: BookingReportModel::BookingReportModel(QObject*) 

2023-07-11 12:44:43.891 DBG default: AccountReportDateRangeModel::AccountReportDateRangeModel(QObject*) 

2023-07-11 12:44:43.891 DBG default: AccountReportMonthWiseModel::AccountReportMonthWiseModel(QObject*) 

2023-07-11 12:44:43.891 DBG default: BookingReportDateRangeModel::BookingReportDateRangeModel(QObject*) 

2023-07-11 12:44:43.891 DBG default: The connect status true 

2023-07-11 12:44:43.892 DBG default: BookingReportMonthWiseModel::BookingReportMonthWiseModel(QObject*) 

2023-07-11 12:44:43.892 DBG default: AccountFullReportModel::AccountFullReportModel(QObject*) 

2023-07-11 12:44:43.892 DBG default: AccountReportCSVProcessor::AccountReportCSVProcessor(QObject*) 

2023-07-11 12:44:43.892 DBG default: SevaBookingTableModel::SevaBookingTableModel(QObject*) 

2023-07-11 12:44:43.892 DBG default: SevaBookingSearchModel::SevaBookingSearchModel(QObject*) 

2023-07-11 12:44:43.892 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-11 12:44:43.892 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-11 12:44:43.892 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-11 12:44:43.892 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-11 12:44:43.892 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Date = 11  Mon = 7  Year = 2023
2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "1" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "2" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "3" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "4" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "5" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "5" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "5" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "6" 

2023-07-11 12:44:43.892 WRN default: QSqlQuery::value: not positioned on a valid record
2023-07-11 12:44:43.892 DBG default: int DBInterface::getLastReceiptNumber()  Size =  -1  receiptNo ID =  6  Value =  QVariant(Invalid) 

2023-07-11 12:44:43.892 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Last ReceiptNo from DB = 7  Generated = "2023_7_0007" 

2023-07-11 12:44:43.892 DBG default: QString SevaViewProxy::getNextReceiptNumber()  r number =  "2023_7_0007" 

2023-07-11 12:44:43.892 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-11 12:44:43.892 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-07-11 12:44:43.893 DBG default: SevaCountOnDateModel::SevaCountOnDateModel(QObject*) 

2023-07-11 12:44:43.893 DBG default: hello suman 

2023-07-11 12:44:43.893 DBG default: saveVoucher::saveVoucher(QObject*) 

2023-07-11 12:44:43.893 DBG default: VoucherNumber::VoucherNumber() 

2023-07-11 12:44:43.893 DBG default: virtual QString VoucherNumber::getNextVoucherNumber() 

2023-07-11 12:44:43.893 DBG default: int DBInterface::getLastVoucherNumber() 

2023-07-11 12:44:43.893 DBG default: 3 

2023-07-11 12:44:43.893 DBG default: "4" 

2023-07-11 12:44:43.893 DBG default: VoucherReportModel::VoucherReportModel(QObject*) 

2023-07-11 12:44:43.893 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-11 12:44:43.893 DBG default: QString TrustListModel::getDataLocation() 

2023-07-11 12:44:43.893 DBG qml: str1 = --D:/TempleFiles_suman/Temple-main/bins/Config/Hubablli
2023-07-11 12:44:43.893 DBG qml: str2 = --D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli
2023-07-11 12:44:43.923 DBG qml: The Page Number=== 0
2023-07-11 12:44:43.923 DBG qml: The page number is 0
2023-07-11 12:44:43.923 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-11 12:44:43.923 DBG qml: Screen screenWidth size =1920
2023-07-11 12:44:43.923 DBG qml: Screen screenHeight size =1000
2023-07-11 12:44:43.923 WRN default: qrc:/ui/Login.qml:37:13: Unable to assign [undefined] to bool
2023-07-11 12:44:43.923 WRN default: qrc:/ui/Login.qml:44:13: Unable to assign [undefined] to bool
2023-07-11 12:44:43.923 WRN default: qrc:/ui/Login.qml:80:17: Unable to assign [undefined] to bool
2023-07-11 12:44:43.923 DBG default: int TrustListModel::getTrustListSize() 

2023-07-11 12:44:48.954 WRN default: qrc:/ui/Login.qml:128:17: QML QQuickTextInput*: Binding loop detected for property "focus"
2023-07-11 12:44:52.743 DBG default: void UserManagement::authorize(QString, QString) "admin" "admin123" 

2023-07-11 12:44:52.744 DBG qml: Credentials are correct
2023-07-11 12:44:52.744 DBG qml: Wrong credentials 0
2023-07-11 12:44:52.759 DBG qml: the accounts enable false
2023-07-11 12:44:52.759 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-11 12:44:52.759 DBG qml: Screen screenWidth size =1920
2023-07-11 12:44:52.759 DBG qml: Screen screenHeight size =1000
2023-07-11 12:44:52.759 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:44:52.759 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:44:52.759 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:44:52.759 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:44:52.759 DBG default: The role number is 1 

2023-07-11 12:44:52.759 DBG default: void UserManagement::user_Recieved(int, QString) 

2023-07-11 12:44:52.759 DBG default: The role number recieved 1 

2023-07-11 12:44:53.919 DBG qml: Seva Booking Button Clicked
2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.919 DBG default: bool SevaTypeViewModel::init() 

2023-07-11 12:44:53.919 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  0 

2023-07-11 12:44:53.919 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.919 DBG default: bool SevaTypeViewModel::init()  Number of Seva Types = 24 

2023-07-11 12:44:53.919 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.919 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.919 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))) 
(SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))) 
(SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:53.919 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.919 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 2 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.919 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))) 
(SevaName(0x579e4a0), SevaName(0x579e7c0), SevaName(0x579eb30), SevaName(0x579ee50), SevaName(0x579ed60), SevaName(0x579e9f0), SevaName(0x579e810), SevaName(0x579ebd0), SevaName(0x579e9a0), SevaName(0x579edb0), SevaName(0x579ecc0), SevaName(0x579ec20), SevaName(0x579e4f0), SevaName(0x579ec70), SevaName(0x579ea90), SevaName(0x57f57b8)) 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579e4a0), SevaName(0x579e7c0), SevaName(0x579eb30), SevaName(0x579ee50), SevaName(0x579ed60), SevaName(0x579e9f0), SevaName(0x579e810), SevaName(0x579ebd0), SevaName(0x579e9a0), SevaName(0x579edb0), SevaName(0x579ecc0), SevaName(0x579ec20), SevaName(0x579e4f0), SevaName(0x579ec70), SevaName(0x579ea90), SevaName(0x57f57b8)) 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x579e4a0))(55, SevaName(0x579e7c0))(56, SevaName(0x579eb30))(57, SevaName(0x579ee50))(58, SevaName(0x579ed60))(59, SevaName(0x579e9f0))(60, SevaName(0x579e810))(61, SevaName(0x579ebd0))(62, SevaName(0x579e9a0))(63, SevaName(0x579edb0))(64, SevaName(0x579ecc0))(65, SevaName(0x579ec20))(66, SevaName(0x579e4f0))(67, SevaName(0x579ec70))(68, SevaName(0x579ea90))(120, SevaName(0x57f57b8))) 
(SevaName(0x579e4a0), SevaName(0x579e7c0), SevaName(0x579eb30), SevaName(0x579ee50), SevaName(0x579ed60), SevaName(0x579e9f0), SevaName(0x579e810), SevaName(0x579ebd0), SevaName(0x579e9a0), SevaName(0x579edb0), SevaName(0x579ecc0), SevaName(0x579ec20), SevaName(0x579e4f0), SevaName(0x579ec70), SevaName(0x579ea90), SevaName(0x57f57b8)) 

2023-07-11 12:44:53.919 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.919 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 3 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.919 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))) 
(SevaName(0x579e270), SevaName(0x579deb0), SevaName(0x579de60), SevaName(0x579dbe0), SevaName(0x579e130), SevaName(0x579dfa0), SevaName(0x579dd20), SevaName(0x579e1d0), SevaName(0x579de10), SevaName(0x579df00), SevaName(0x579e400), SevaName(0x579db40), SevaName(0x579e2c0), SevaName(0x579e0e0), SevaName(0x579e360), SevaName(0x579e3b0), SevaName(0x579daf0), SevaName(0x579dc30)) 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579e270), SevaName(0x579deb0), SevaName(0x579de60), SevaName(0x579dbe0), SevaName(0x579e130), SevaName(0x579dfa0), SevaName(0x579dd20), SevaName(0x579e1d0), SevaName(0x579de10), SevaName(0x579df00), SevaName(0x579e400), SevaName(0x579db40), SevaName(0x579e2c0), SevaName(0x579e0e0), SevaName(0x579e360), SevaName(0x579e3b0), SevaName(0x579daf0), SevaName(0x579dc30)) 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x579e270))(24, SevaName(0x579deb0))(25, SevaName(0x579de60))(26, SevaName(0x579dbe0))(27, SevaName(0x579e130))(28, SevaName(0x579dfa0))(29, SevaName(0x579dd20))(30, SevaName(0x579e1d0))(31, SevaName(0x579de10))(34, SevaName(0x579df00))(35, SevaName(0x579e400))(36, SevaName(0x579db40))(38, SevaName(0x579e2c0))(39, SevaName(0x579e0e0))(40, SevaName(0x579e360))(41, SevaName(0x579e3b0))(43, SevaName(0x579daf0))(44, SevaName(0x579dc30))) 
(SevaName(0x579e270), SevaName(0x579deb0), SevaName(0x579de60), SevaName(0x579dbe0), SevaName(0x579e130), SevaName(0x579dfa0), SevaName(0x579dd20), SevaName(0x579e1d0), SevaName(0x579de10), SevaName(0x579df00), SevaName(0x579e400), SevaName(0x579db40), SevaName(0x579e2c0), SevaName(0x579e0e0), SevaName(0x579e360), SevaName(0x579e3b0), SevaName(0x579daf0), SevaName(0x579dc30)) 

2023-07-11 12:44:53.919 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.919 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 4 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.919 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))) 
(SevaName(0x5773360), SevaName(0x57733b0), SevaName(0x5773130), SevaName(0x579ed10), SevaName(0x579e860), SevaName(0x579e540), SevaName(0x579e5e0), SevaName(0x579e6d0)) 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5773360), SevaName(0x57733b0), SevaName(0x5773130), SevaName(0x579ed10), SevaName(0x579e860), SevaName(0x579e540), SevaName(0x579e5e0), SevaName(0x579e6d0)) 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-07-11 12:44:53.919 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x5773360))(13, SevaName(0x57733b0))(14, SevaName(0x5773130))(70, SevaName(0x579ed10))(71, SevaName(0x579e860))(72, SevaName(0x579e540))(73, SevaName(0x579e5e0))(76, SevaName(0x579e6d0))) 
(SevaName(0x5773360), SevaName(0x57733b0), SevaName(0x5773130), SevaName(0x579ed10), SevaName(0x579e860), SevaName(0x579e540), SevaName(0x579e5e0), SevaName(0x579e6d0)) 

2023-07-11 12:44:53.919 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.919 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.919 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 5 

2023-07-11 12:44:53.919 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.919 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.932 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.932 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.932 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-07-11 12:44:53.932 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))) 
(SevaName(0x579e720), SevaName(0x579e770), SevaName(0x579e8b0)) 

2023-07-11 12:44:53.932 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579e720), SevaName(0x579e770), SevaName(0x579e8b0)) 

2023-07-11 12:44:53.932 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-07-11 12:44:53.932 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x579e720))(79, SevaName(0x579e770))(80, SevaName(0x579e8b0))) 
(SevaName(0x579e720), SevaName(0x579e770), SevaName(0x579e8b0)) 

2023-07-11 12:44:53.932 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.932 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.932 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.932 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.932 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 6 

2023-07-11 12:44:53.932 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.932 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.932 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.932 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.932 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-07-11 12:44:53.932 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))) 
(SevaName(0x579eef0), SevaName(0x579f030), SevaName(0x579f490), SevaName(0x579f440), SevaName(0x579f260)) 

2023-07-11 12:44:53.932 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579eef0), SevaName(0x579f030), SevaName(0x579f490), SevaName(0x579f440), SevaName(0x579f260)) 

2023-07-11 12:44:53.932 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-07-11 12:44:53.932 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x579eef0))(82, SevaName(0x579f030))(83, SevaName(0x579f490))(84, SevaName(0x579f440))(89, SevaName(0x579f260))) 
(SevaName(0x579eef0), SevaName(0x579f030), SevaName(0x579f490), SevaName(0x579f440), SevaName(0x579f260)) 

2023-07-11 12:44:53.932 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.932 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.932 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.932 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.932 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 7 

2023-07-11 12:44:53.932 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.932 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.932 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.932 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.932 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-07-11 12:44:53.932 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))) 
(SevaName(0x579e630), SevaName(0x579f620), SevaName(0x579efe0), SevaName(0x579f6c0), SevaName(0x579f300), SevaName(0x579f120), SevaName(0x579f760), SevaName(0x579f3a0), SevaName(0x579f4e0), SevaName(0x579f210), SevaName(0x579f670)) 

2023-07-11 12:44:53.932 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579e630), SevaName(0x579f620), SevaName(0x579efe0), SevaName(0x579f6c0), SevaName(0x579f300), SevaName(0x579f120), SevaName(0x579f760), SevaName(0x579f3a0), SevaName(0x579f4e0), SevaName(0x579f210), SevaName(0x579f670)) 

2023-07-11 12:44:53.932 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-07-11 12:44:53.932 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x579e630))(90, SevaName(0x579f620))(91, SevaName(0x579efe0))(92, SevaName(0x579f6c0))(93, SevaName(0x579f300))(94, SevaName(0x579f120))(95, SevaName(0x579f760))(96, SevaName(0x579f3a0))(97, SevaName(0x579f4e0))(98, SevaName(0x579f210))(99, SevaName(0x579f670))) 
(SevaName(0x579e630), SevaName(0x579f620), SevaName(0x579efe0), SevaName(0x579f6c0), SevaName(0x579f300), SevaName(0x579f120), SevaName(0x579f760), SevaName(0x579f3a0), SevaName(0x579f4e0), SevaName(0x579f210), SevaName(0x579f670)) 

2023-07-11 12:44:53.932 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.932 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.932 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.932 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.932 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 8 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))) 
(SevaName(0x579ddc0), SevaName(0x579e180), SevaName(0x579f170)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579ddc0), SevaName(0x579e180), SevaName(0x579f170)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x579ddc0))(17, SevaName(0x579e180))(109, SevaName(0x579f170))) 
(SevaName(0x579ddc0), SevaName(0x579e180), SevaName(0x579f170)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 9 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))) 
(SevaName(0x5773590), SevaName(0x5772eb0), SevaName(0x579e220), SevaName(0x579df50), SevaName(0x579e900), SevaName(0x579eb80), SevaName(0x579f9e0), SevaName(0x579f990), SevaName(0x57f5bc8), SevaName(0x57f55d8)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5773590), SevaName(0x5772eb0), SevaName(0x579e220), SevaName(0x579df50), SevaName(0x579e900), SevaName(0x579eb80), SevaName(0x579f9e0), SevaName(0x579f990), SevaName(0x57f5bc8), SevaName(0x57f55d8)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x5773590))(10, SevaName(0x5772eb0))(19, SevaName(0x579e220))(46, SevaName(0x579df50))(52, SevaName(0x579e900))(53, SevaName(0x579eb80))(110, SevaName(0x579f9e0))(113, SevaName(0x579f990))(123, SevaName(0x57f5bc8))(127, SevaName(0x57f55d8))) 
(SevaName(0x5773590), SevaName(0x5772eb0), SevaName(0x579e220), SevaName(0x579df50), SevaName(0x579e900), SevaName(0x579eb80), SevaName(0x579f9e0), SevaName(0x579f990), SevaName(0x57f5bc8), SevaName(0x57f55d8)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 10 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))) 
(SevaName(0x579e040), SevaName(0x579f940)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579e040), SevaName(0x579f940)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x579e040))(112, SevaName(0x579f940))) 
(SevaName(0x579e040), SevaName(0x579f940)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 11 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x5773770))) 
(SevaName(0x5773770)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5773770)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x5773770))) 
(SevaName(0x5773770)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 12 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x5773090))) 
(SevaName(0x5773090)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5773090)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x5773090))) 
(SevaName(0x5773090)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 13 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x5773400))) 
(SevaName(0x5773400)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5773400)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x5773400))) 
(SevaName(0x5773400)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 14 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))(175, SevaName(0x57f68e8))) 
(SevaName(0x579e310), SevaName(0x579f8f0), SevaName(0x57f68e8)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579e310), SevaName(0x579f8f0), SevaName(0x57f68e8)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x579e310))(111, SevaName(0x579f8f0))(175, SevaName(0x57f68e8))) 
(SevaName(0x579e310), SevaName(0x579f8f0), SevaName(0x57f68e8)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 15 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))) 
(SevaName(0x579daa0), SevaName(0x579eae0), SevaName(0x579f1c0), SevaName(0x579f800), SevaName(0x57f5b28)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579daa0), SevaName(0x579eae0), SevaName(0x579f1c0), SevaName(0x579f800), SevaName(0x57f5b28)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x579daa0))(51, SevaName(0x579eae0))(105, SevaName(0x579f1c0))(106, SevaName(0x579f800))(124, SevaName(0x57f5b28))) 
(SevaName(0x579daa0), SevaName(0x579eae0), SevaName(0x579f1c0), SevaName(0x579f800), SevaName(0x57f5b28)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 16 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))) 
(SevaName(0x579dc80), SevaName(0x579ee00), SevaName(0x579ef40), SevaName(0x57f5858)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579dc80), SevaName(0x579ee00), SevaName(0x579ef40), SevaName(0x57f5858)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x579dc80))(69, SevaName(0x579ee00))(100, SevaName(0x579ef40))(126, SevaName(0x57f5858))) 
(SevaName(0x579dc80), SevaName(0x579ee00), SevaName(0x579ef40), SevaName(0x57f5858)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 17 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 17 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) () 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 17 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG qml: seveListModel  for if((sevaProxy.getSevaModel(100).getSevaListViewModel/*.getSevaListViewModel*/===0))
2023-07-11 12:44:53.933 DBG qml:  countIfSevaNamesPresentInSevaTypes++ 1
2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 18 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x579e950))) 
(SevaName(0x579e950)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579e950)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x579e950))) 
(SevaName(0x579e950)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 19 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))) 
(SevaName(0x579f5d0), SevaName(0x579f850)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579f5d0), SevaName(0x579f850)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x579f5d0))(88, SevaName(0x579f850))) 
(SevaName(0x579f5d0), SevaName(0x579f850)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 20 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x579f080))) 
(SevaName(0x579f080)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579f080)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x579f080))) 
(SevaName(0x579f080)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 21 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 21 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))) 
(SevaName(0x57f7388), SevaName(0x57f7478), SevaName(0x57f7428), SevaName(0x57f74c8), SevaName(0x57f73d8), SevaName(0x57f5718)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57f7388), SevaName(0x57f7478), SevaName(0x57f7428), SevaName(0x57f74c8), SevaName(0x57f73d8), SevaName(0x57f5718)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 21 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((114, SevaName(0x57f7388))(115, SevaName(0x57f7478))(116, SevaName(0x57f7428))(117, SevaName(0x57f74c8))(118, SevaName(0x57f73d8))(119, SevaName(0x57f5718))) 
(SevaName(0x57f7388), SevaName(0x57f7478), SevaName(0x57f7428), SevaName(0x57f74c8), SevaName(0x57f73d8), SevaName(0x57f5718)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 22 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x57f5998))) 
(SevaName(0x57f5998)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57f5998)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x57f5998))) 
(SevaName(0x57f5998)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 23 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 23 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))) 
(SevaName(0x57f5d08), SevaName(0x57f5808), SevaName(0x57f5b78), SevaName(0x57f5588), SevaName(0x57f5c18), SevaName(0x57f5ad8), SevaName(0x57f5c68), SevaName(0x57f58a8), SevaName(0x57f5a38), SevaName(0x57f5628), SevaName(0x57f5cb8), SevaName(0x57f5d58), SevaName(0x57f5678), SevaName(0x57f5948), SevaName(0x57f5768), SevaName(0x57f59e8), SevaName(0x57f56c8), SevaName(0x57f5da8), SevaName(0x57f5a88), SevaName(0x57f5df8), SevaName(0x57f5f38), SevaName(0x57f64d8), SevaName(0x57f6578), SevaName(0x57f5fd8), SevaName(0x57f6028), SevaName(0x57f62f8), SevaName(0x57f6898), SevaName(0x57f65c8), SevaName(0x57f60c8), SevaName(0x57f62a8), SevaName(0x57f6348), SevaName(0x57f67a8)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57f5d08), SevaName(0x57f5808), SevaName(0x57f5b78), SevaName(0x57f5588), SevaName(0x57f5c18), SevaName(0x57f5ad8), SevaName(0x57f5c68), SevaName(0x57f58a8), SevaName(0x57f5a38), SevaName(0x57f5628), SevaName(0x57f5cb8), SevaName(0x57f5d58), SevaName(0x57f5678), SevaName(0x57f5948), SevaName(0x57f5768), SevaName(0x57f59e8), SevaName(0x57f56c8), SevaName(0x57f5da8), SevaName(0x57f5a88), SevaName(0x57f5df8), SevaName(0x57f5f38), SevaName(0x57f64d8), SevaName(0x57f6578), SevaName(0x57f5fd8), SevaName(0x57f6028), SevaName(0x57f62f8), SevaName(0x57f6898), SevaName(0x57f65c8), SevaName(0x57f60c8), SevaName(0x57f62a8), SevaName(0x57f6348), SevaName(0x57f67a8)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 23 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((128, SevaName(0x57f5d08))(129, SevaName(0x57f5808))(130, SevaName(0x57f5b78))(131, SevaName(0x57f5588))(132, SevaName(0x57f5c18))(133, SevaName(0x57f5ad8))(134, SevaName(0x57f5c68))(135, SevaName(0x57f58a8))(136, SevaName(0x57f5a38))(137, SevaName(0x57f5628))(138, SevaName(0x57f5cb8))(139, SevaName(0x57f5d58))(140, SevaName(0x57f5678))(141, SevaName(0x57f5948))(142, SevaName(0x57f5768))(143, SevaName(0x57f59e8))(144, SevaName(0x57f56c8))(145, SevaName(0x57f5da8))(146, SevaName(0x57f5a88))(147, SevaName(0x57f5df8))(148, SevaName(0x57f5f38))(149, SevaName(0x57f64d8))(150, SevaName(0x57f6578))(151, SevaName(0x57f5fd8))(152, SevaName(0x57f6028))(153, SevaName(0x57f62f8))(154, SevaName(0x57f6898))(155, SevaName(0x57f65c8))(156, SevaName(0x57f60c8))(157, SevaName(0x57f62a8))(158, SevaName(0x57f6348))(159, SevaName(0x57f67a8))) 
(SevaName(0x57f5d08), SevaName(0x57f5808), SevaName(0x57f5b78), SevaName(0x57f5588), SevaName(0x57f5c18), SevaName(0x57f5ad8), SevaName(0x57f5c68), SevaName(0x57f58a8), SevaName(0x57f5a38), SevaName(0x57f5628), SevaName(0x57f5cb8), SevaName(0x57f5d58), SevaName(0x57f5678), SevaName(0x57f5948), SevaName(0x57f5768), SevaName(0x57f59e8), SevaName(0x57f56c8), SevaName(0x57f5da8), SevaName(0x57f5a88), SevaName(0x57f5df8), SevaName(0x57f5f38), SevaName(0x57f64d8), SevaName(0x57f6578), SevaName(0x57f5fd8), SevaName(0x57f6028), SevaName(0x57f62f8), SevaName(0x57f6898), SevaName(0x57f65c8), SevaName(0x57f60c8), SevaName(0x57f62a8), SevaName(0x57f6348), SevaName(0x57f67a8)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 24 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:53.933 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 24 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))(165, SevaName(0x57f6848))(166, SevaName(0x57f63e8))(167, SevaName(0x57f66b8))(168, SevaName(0x57f5f88))(169, SevaName(0x57f6708))(170, SevaName(0x57f6438))(171, SevaName(0x57f67f8))(172, SevaName(0x57f6758))) 
(SevaName(0x57f6668), SevaName(0x57f6208), SevaName(0x57f6258), SevaName(0x57f6398), SevaName(0x57f6618), SevaName(0x57f6848), SevaName(0x57f63e8), SevaName(0x57f66b8), SevaName(0x57f5f88), SevaName(0x57f6708), SevaName(0x57f6438), SevaName(0x57f67f8), SevaName(0x57f6758)) 

2023-07-11 12:44:53.933 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57f6668), SevaName(0x57f6208), SevaName(0x57f6258), SevaName(0x57f6398), SevaName(0x57f6618), SevaName(0x57f6848), SevaName(0x57f63e8), SevaName(0x57f66b8), SevaName(0x57f5f88), SevaName(0x57f6708), SevaName(0x57f6438), SevaName(0x57f67f8), SevaName(0x57f6758)) 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 24 

2023-07-11 12:44:53.933 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((160, SevaName(0x57f6668))(161, SevaName(0x57f6208))(162, SevaName(0x57f6258))(163, SevaName(0x57f6398))(164, SevaName(0x57f6618))(165, SevaName(0x57f6848))(166, SevaName(0x57f63e8))(167, SevaName(0x57f66b8))(168, SevaName(0x57f5f88))(169, SevaName(0x57f6708))(170, SevaName(0x57f6438))(171, SevaName(0x57f67f8))(172, SevaName(0x57f6758))) 
(SevaName(0x57f6668), SevaName(0x57f6208), SevaName(0x57f6258), SevaName(0x57f6398), SevaName(0x57f6618), SevaName(0x57f6848), SevaName(0x57f63e8), SevaName(0x57f66b8), SevaName(0x57f5f88), SevaName(0x57f6708), SevaName(0x57f6438), SevaName(0x57f67f8), SevaName(0x57f6758)) 

2023-07-11 12:44:53.933 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:53.933 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-11 12:44:53.933 DBG qml:  if of <<< countIfSevaNamesPresentInSevaTypes++ 1
2023-07-11 12:44:53.933 DBG qml: clicked on Sevabooking
2023-07-11 12:44:54.039 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:54.045 DBG qml: state changedinitial
2023-07-11 12:44:54.050 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-11 12:44:54.050 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Cannot assign to non-existent property "onDefaultDates"
2023-07-11 12:44:54.050 WRN default: qrc:/ui/SevaDateTime.qml:97:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-11 12:44:54.050 WRN default: qrc:/ui/SevaDateTime.qml:91:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-11 12:44:54.132 DBG qml: my seva delegate is created
2023-07-11 12:44:54.132 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:44:54.132 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:44:54.132 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:44:54.132 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:44:54.132 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-11 12:44:54.132 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1 

2023-07-11 12:44:54.132 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:54.132 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:54.132 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:54.132 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:54.132 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-11 12:44:54.132 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))) 
(SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:54.132 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:54.132 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-11 12:44:54.132 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))) 
(SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:54.132 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:54.132 DBG qml: --------------- onCurrentIndexChanged: of combo box sevaListView21
2023-07-11 12:44:54.133 DBG qml:  Index =0
2023-07-11 12:44:54.133 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:44:54.133 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-11 12:44:54.133 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1 

2023-07-11 12:44:54.133 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:54.133 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:54.133 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:54.133 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:54.133 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-11 12:44:54.133 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))) 
(SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:54.133 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:54.133 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-11 12:44:54.133 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))) 
(SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:54.133 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:54.133 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:44:54.133 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-11 12:44:54.133 DBG qml:  Seva Type Changed: 1
2023-07-11 12:44:54.133 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1 

2023-07-11 12:44:54.133 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:54.133 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:54.133 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:54.133 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:54.133 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-11 12:44:54.133 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))) 
(SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:54.133 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:54.133 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-11 12:44:54.133 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))) 
(SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:54.133 DBG qml: my seva delegate is created
2023-07-11 12:44:54.133 DBG qml:  Current Index changed0
2023-07-11 12:44:54.134 DBG qml:  VIEW-1 - Index =0
2023-07-11 12:44:54.134 DBG qml:  Seva Selected =0
2023-07-11 12:44:54.134 DBG default: SevaName* SevaViewProxy::getSevaByIndex(int) 0 

2023-07-11 12:44:54.134 DBG default: current.... seva model 

2023-07-11 12:44:54.134 DBG default: current seva model SevaListViewModel(0x11aa6fe0) 

2023-07-11 12:44:54.134 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int) (SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:54.134 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int)  Index requested 1= 0 

2023-07-11 12:44:54.134 DBG qml:  Seva Details =800
2023-07-11 12:44:54.134 DBG default: void SevaName::print()  Seva Name   = "Chataka"
2023-07-11 12:44:54.134 DBG default: void SevaName::print()  Seva ID     = 2
2023-07-11 12:44:54.134 DBG default: void SevaName::print()  Seva Number = 2
2023-07-11 12:44:54.134 DBG default: void SevaName::print()  Seva        = 800
2023-07-11 12:44:54.134 DBG default: void SevaName::print()  Seva Date   = "2021-03-20"
2023-07-11 12:44:54.134 DBG default: void SevaName::print()  Seva Type   = 1
2023-07-11 12:44:54.134 DBG default: void SevaName::print()  Seva Cost   = 800
2023-07-11 12:44:54.134 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-11 12:44:54.134 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-11 12:44:54.134 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-11 12:44:54.134 DBG qml: seva name  = Chataka Seva cost = 800
2023-07-11 12:44:54.134 DBG default: QStringList SevaViewProxy::getGothras() 

2023-07-11 12:44:54.134 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:54.134 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-07-11 12:44:54.134 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Vashistha", "", "Puthamanasa", "Shrivathsa", "Sankhyayanasa", "Jamadagni", "Harithasa", "Kashyapa", "Maudgalya", "Bharadwaja", "Gargeyyesa", "Mounabharghava", "Dhananjaya", "Kaundinya", "Galava", "Athreyasa", "Vishwamitra", "Kaushika", "Gouthama", "kashyapa") 

2023-07-11 12:44:54.134 DBG qml: ********* In setGothras function  *********** = 0
2023-07-11 12:44:54.135 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-07-11 12:44:54.135 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:54.135 DBG qml: ********* In set nakshatra function  *********** = 0
2023-07-11 12:44:54.135 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:44:54.135 DBG qml: Current Text =SevaTypeViewModel(0x11072100)
2023-07-11 12:44:54.135 DBG qml: Model SevaType--------: [object Object]
2023-07-11 12:44:54.135 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:44:54.135 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-11 12:44:54.135 DBG qml: Model SevaType: REGULAR
2023-07-11 12:44:54.135 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:44:54.135 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-11 12:44:54.135 DBG qml: Model SevaType: 1
2023-07-11 12:44:54.135 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:44:54.135 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:44:54.135 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:44:54.135 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-11 12:44:54.149 DBG qml: Component.onCompleted: of seva booking view
2023-07-11 12:44:54.149 DBG qml: In Component.onCompleted: of SevaPaymenConfirmationDialog
2023-07-11 12:44:54.149 DBG qml: Dialog object is ccreated in SPCD
2023-07-11 12:44:54.149 DBG default: QStringList SevaTypeNamesDataModel::getBankList() 

2023-07-11 12:44:54.149 DBG default: JsonProcessor::JsonProcessor(QObject*) 

2023-07-11 12:44:54.149 DBG default: void JsonProcessor::readBanksFromJsonToList() 

2023-07-11 12:44:54.150 DBG default: file opened 

2023-07-11 12:44:54.150 DBG default: read all 

2023-07-11 12:44:54.150 DBG default: void JsonProcessor::readBanksFromJsonToList() dddddddoooooooooooocccccccc 

2023-07-11 12:44:54.150 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-11 12:44:54.150 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-11 12:44:54.150 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-11 12:44:54.150 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-11 12:44:54.150 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-11 12:44:54.150 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-11 12:44:54.150 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-11 12:44:54.150 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-11 12:44:54.150 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-11 12:44:54.150 DBG default: virtual JsonProcessor::~JsonProcessor() 

2023-07-11 12:44:54.150 DBG qml:  Trying to get the list category
2023-07-11 12:44:54.150 WRN default: qrc:/ui/SevaDateTime.qml:89: ReferenceError: defaultDates is not defined
2023-07-11 12:44:54.151 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-11 12:44:54.151 DBG qml: Screen screenWidth size =1920
2023-07-11 12:44:54.151 DBG qml: Screen screenHeight size =1000
2023-07-11 12:44:54.151 DBG qml:  Name Status =false
2023-07-11 12:44:54.151 DBG qml:  Mobile Status =false
2023-07-11 12:44:54.151 DBG qml: Component.onCompleted: of seva list view
2023-07-11 12:44:54.151 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:44:54.151 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-11 12:44:54.151 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1 

2023-07-11 12:44:54.151 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:44:54.151 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:54.151 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:44:54.151 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:44:54.151 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-11 12:44:54.151 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))) 
(SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:54.151 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:54.151 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-11 12:44:54.151 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))) 
(SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:54.151 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-11 12:44:54.151 DBG qml: Component.onCompleted of combo box sevaListView current index =0 21
2023-07-11 12:44:54.151 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-11 12:44:54.151 DBG qml: Screen screenWidth size =1920
2023-07-11 12:44:54.151 DBG qml: Screen screenHeight size =1000
2023-07-11 12:44:54.152 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.152 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.152 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.152 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.152 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.155 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.160 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.160 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.160 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.160 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.160 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.160 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.161 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.161 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.161 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-11 12:44:54.161 DBG qml: my seva delegate is created
2023-07-11 12:44:54.162 DBG qml: my seva delegate is created
2023-07-11 12:44:54.162 DBG qml: my seva delegate is created
2023-07-11 12:44:54.163 DBG qml: my seva delegate is created
2023-07-11 12:44:54.163 DBG qml: my seva delegate is created
2023-07-11 12:44:54.163 DBG qml: my seva delegate is created
2023-07-11 12:44:54.163 DBG qml: my seva delegate is created
2023-07-11 12:44:54.164 DBG qml: my seva delegate is created
2023-07-11 12:44:54.164 DBG qml: my seva delegate is created
2023-07-11 12:44:54.164 DBG qml: my seva delegate is created
2023-07-11 12:44:54.164 DBG qml: my seva delegate is created
2023-07-11 12:44:54.165 DBG qml: my seva delegate is created
2023-07-11 12:44:54.165 DBG qml: my seva delegate is created
2023-07-11 12:44:54.165 DBG qml: my seva delegate is created
2023-07-11 12:44:54.165 DBG qml: my seva delegate is created
2023-07-11 12:44:54.166 DBG qml: my seva delegate is created
2023-07-11 12:44:54.166 DBG qml: my seva delegate is created
2023-07-11 12:44:54.166 DBG qml: my seva delegate is created
2023-07-11 12:44:54.167 DBG qml: my seva delegate is created
2023-07-11 12:44:54.176 DBG qml: my seva delegate is created
2023-07-11 12:44:59.570 DBG qml:  Index =1 SevaType =1 SevaID=3
2023-07-11 12:44:59.570 DBG qml:  VIEW - Index =1 SevaType =1 SevaID=3
2023-07-11 12:44:59.570 DBG qml:  SBV - Index =1 SevaType =1 SevaID=3
2023-07-11 12:44:59.570 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:59.570 DBG qml:  Seva Object = SevaName(0x5773040)
2023-07-11 12:44:59.570 DBG qml:  Seva Details =200
2023-07-11 12:44:59.570 DBG default: void SevaName::print()  Seva Name   = "Hasthodaka"
2023-07-11 12:44:59.570 DBG default: void SevaName::print()  Seva ID     = 3
2023-07-11 12:44:59.570 DBG default: void SevaName::print()  Seva Number = 3
2023-07-11 12:44:59.570 DBG default: void SevaName::print()  Seva        = 200
2023-07-11 12:44:59.570 DBG default: void SevaName::print()  Seva Date   = "2020-12-24"
2023-07-11 12:44:59.570 DBG default: void SevaName::print()  Seva Type   = 1
2023-07-11 12:44:59.570 DBG default: void SevaName::print()  Seva Cost   = 200
2023-07-11 12:44:59.570 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-11 12:44:59.570 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-11 12:44:59.570 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-11 12:44:59.584 DBG default: QStringList SevaViewProxy::getGothras() 

2023-07-11 12:44:59.584 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:59.584 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-07-11 12:44:59.585 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Vashistha", "", "Puthamanasa", "Shrivathsa", "Sankhyayanasa", "Jamadagni", "Harithasa", "Kashyapa", "Maudgalya", "Bharadwaja", "Gargeyyesa", "Mounabharghava", "Dhananjaya", "Kaundinya", "Galava", "Athreyasa", "Vishwamitra", "Kaushika", "Gouthama", "kashyapa") 

2023-07-11 12:44:59.585 DBG qml: ********* In setGothras function  *********** = 0
2023-07-11 12:44:59.586 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-07-11 12:44:59.586 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:59.586 DBG qml: ********* In set nakshatra function  *********** = 0
2023-07-11 12:44:59.586 DBG qml:  Current Index changed1
2023-07-11 12:44:59.586 DBG qml:  VIEW-1 - Index =1
2023-07-11 12:44:59.586 DBG qml:  Seva Selected =1
2023-07-11 12:44:59.586 DBG default: SevaName* SevaViewProxy::getSevaByIndex(int) 1 

2023-07-11 12:44:59.586 DBG default: current.... seva model 

2023-07-11 12:44:59.586 DBG default: current seva model SevaListViewModel(0x11aa78f8) 

2023-07-11 12:44:59.586 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int) (SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:44:59.586 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int)  Index requested 1= 1 

2023-07-11 12:44:59.586 DBG qml:  Seva Details =200
2023-07-11 12:44:59.586 DBG default: void SevaName::print()  Seva Name   = "Hasthodaka"
2023-07-11 12:44:59.587 DBG default: void SevaName::print()  Seva ID     = 3
2023-07-11 12:44:59.587 DBG default: void SevaName::print()  Seva Number = 3
2023-07-11 12:44:59.587 DBG default: void SevaName::print()  Seva        = 200
2023-07-11 12:44:59.587 DBG default: void SevaName::print()  Seva Date   = "2020-12-24"
2023-07-11 12:44:59.587 DBG default: void SevaName::print()  Seva Type   = 1
2023-07-11 12:44:59.587 DBG default: void SevaName::print()  Seva Cost   = 200
2023-07-11 12:44:59.587 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-11 12:44:59.587 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-11 12:44:59.587 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-11 12:44:59.587 DBG qml: seva name  = Hasthodaka Seva cost = 200
2023-07-11 12:44:59.587 DBG default: QStringList SevaViewProxy::getGothras() 

2023-07-11 12:44:59.587 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:59.587 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-07-11 12:44:59.588 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Vashistha", "", "Puthamanasa", "Shrivathsa", "Sankhyayanasa", "Jamadagni", "Harithasa", "Kashyapa", "Maudgalya", "Bharadwaja", "Gargeyyesa", "Mounabharghava", "Dhananjaya", "Kaundinya", "Galava", "Athreyasa", "Vishwamitra", "Kaushika", "Gouthama", "kashyapa") 

2023-07-11 12:44:59.588 DBG qml: ********* In setGothras function  *********** = 0
2023-07-11 12:44:59.588 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-07-11 12:44:59.588 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:59.588 DBG qml: ********* In set nakshatra function  *********** = 0
2023-07-11 12:44:59.589 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:44:59.589 DBG default: void SevaName::print()  Seva Name   = "Hasthodaka"
2023-07-11 12:44:59.589 DBG default: void SevaName::print()  Seva ID     = 3
2023-07-11 12:44:59.589 DBG default: void SevaName::print()  Seva Number = 3
2023-07-11 12:44:59.589 DBG default: void SevaName::print()  Seva        = 200
2023-07-11 12:44:59.589 DBG default: void SevaName::print()  Seva Date   = "2020-12-24"
2023-07-11 12:44:59.589 DBG default: void SevaName::print()  Seva Type   = 1
2023-07-11 12:44:59.589 DBG default: void SevaName::print()  Seva Cost   = 200
2023-07-11 12:44:59.589 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-11 12:44:59.589 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-11 12:44:59.589 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-11 12:45:00.104 DBG qml:  Index =2 SevaType =1 SevaID=4
2023-07-11 12:45:00.104 DBG qml:  VIEW - Index =2 SevaType =1 SevaID=4
2023-07-11 12:45:00.119 DBG qml:  SBV - Index =2 SevaType =1 SevaID=4
2023-07-11 12:45:00.119 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:00.119 DBG qml:  Seva Object = SevaName(0x5773720)
2023-07-11 12:45:00.119 DBG qml:  Seva Details =50
2023-07-11 12:45:00.119 DBG default: void SevaName::print()  Seva Name   = "Dwadashi Hasthodaka"
2023-07-11 12:45:00.119 DBG default: void SevaName::print()  Seva ID     = 4
2023-07-11 12:45:00.119 DBG default: void SevaName::print()  Seva Number = 4
2023-07-11 12:45:00.119 DBG default: void SevaName::print()  Seva        = 50
2023-07-11 12:45:00.119 DBG default: void SevaName::print()  Seva Date   = "2020-12-24"
2023-07-11 12:45:00.119 DBG default: void SevaName::print()  Seva Type   = 1
2023-07-11 12:45:00.119 DBG default: void SevaName::print()  Seva Cost   = 50
2023-07-11 12:45:00.119 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-11 12:45:00.119 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-11 12:45:00.119 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-11 12:45:00.120 DBG default: QStringList SevaViewProxy::getGothras() 

2023-07-11 12:45:00.120 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:00.121 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-07-11 12:45:00.122 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Vashistha", "", "Puthamanasa", "Shrivathsa", "Sankhyayanasa", "Jamadagni", "Harithasa", "Kashyapa", "Maudgalya", "Bharadwaja", "Gargeyyesa", "Mounabharghava", "Dhananjaya", "Kaundinya", "Galava", "Athreyasa", "Vishwamitra", "Kaushika", "Gouthama", "kashyapa") 

2023-07-11 12:45:00.122 DBG qml: ********* In setGothras function  *********** = 0
2023-07-11 12:45:00.122 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-07-11 12:45:00.122 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:00.122 DBG qml: ********* In set nakshatra function  *********** = 0
2023-07-11 12:45:00.122 DBG qml:  Current Index changed2
2023-07-11 12:45:00.122 DBG qml:  VIEW-1 - Index =2
2023-07-11 12:45:00.123 DBG qml:  Seva Selected =2
2023-07-11 12:45:00.123 DBG default: SevaName* SevaViewProxy::getSevaByIndex(int) 2 

2023-07-11 12:45:00.123 DBG default: current.... seva model 

2023-07-11 12:45:00.123 DBG default: current seva model SevaListViewModel(0x11aa78f8) 

2023-07-11 12:45:00.123 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int) (SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:45:00.123 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int)  Index requested 1= 2 

2023-07-11 12:45:00.123 DBG qml:  Seva Details =50
2023-07-11 12:45:00.123 DBG default: void SevaName::print()  Seva Name   = "Dwadashi Hasthodaka"
2023-07-11 12:45:00.123 DBG default: void SevaName::print()  Seva ID     = 4
2023-07-11 12:45:00.123 DBG default: void SevaName::print()  Seva Number = 4
2023-07-11 12:45:00.123 DBG default: void SevaName::print()  Seva        = 50
2023-07-11 12:45:00.123 DBG default: void SevaName::print()  Seva Date   = "2020-12-24"
2023-07-11 12:45:00.123 DBG default: void SevaName::print()  Seva Type   = 1
2023-07-11 12:45:00.123 DBG default: void SevaName::print()  Seva Cost   = 50
2023-07-11 12:45:00.123 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-11 12:45:00.123 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-11 12:45:00.123 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-11 12:45:00.124 DBG qml: seva name  = Dwadashi Hasthodaka Seva cost = 50
2023-07-11 12:45:00.124 DBG default: QStringList SevaViewProxy::getGothras() 

2023-07-11 12:45:00.124 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:00.124 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-07-11 12:45:00.125 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Vashistha", "", "Puthamanasa", "Shrivathsa", "Sankhyayanasa", "Jamadagni", "Harithasa", "Kashyapa", "Maudgalya", "Bharadwaja", "Gargeyyesa", "Mounabharghava", "Dhananjaya", "Kaundinya", "Galava", "Athreyasa", "Vishwamitra", "Kaushika", "Gouthama", "kashyapa") 

2023-07-11 12:45:00.125 DBG qml: ********* In setGothras function  *********** = 0
2023-07-11 12:45:00.125 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-07-11 12:45:00.125 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:00.125 DBG qml: ********* In set nakshatra function  *********** = 0
2023-07-11 12:45:00.125 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:00.125 DBG default: void SevaName::print()  Seva Name   = "Dwadashi Hasthodaka"
2023-07-11 12:45:00.125 DBG default: void SevaName::print()  Seva ID     = 4
2023-07-11 12:45:00.125 DBG default: void SevaName::print()  Seva Number = 4
2023-07-11 12:45:00.125 DBG default: void SevaName::print()  Seva        = 50
2023-07-11 12:45:00.125 DBG default: void SevaName::print()  Seva Date   = "2020-12-24"
2023-07-11 12:45:00.125 DBG default: void SevaName::print()  Seva Type   = 1
2023-07-11 12:45:00.126 DBG default: void SevaName::print()  Seva Cost   = 50
2023-07-11 12:45:00.126 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-11 12:45:00.126 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-11 12:45:00.126 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-11 12:45:00.723 DBG qml:  Index =5 SevaType =1 SevaID=18
2023-07-11 12:45:00.723 DBG qml:  VIEW - Index =5 SevaType =1 SevaID=18
2023-07-11 12:45:00.723 DBG qml:  SBV - Index =5 SevaType =1 SevaID=18
2023-07-11 12:45:00.723 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:00.723 DBG qml:  Seva Object = SevaName(0x579db90)
2023-07-11 12:45:00.723 DBG qml:  Seva Details =0
2023-07-11 12:45:00.723 DBG default: void SevaName::print()  Seva Name   = "Thatte Hasthodaka"
2023-07-11 12:45:00.723 DBG default: void SevaName::print()  Seva ID     = 18
2023-07-11 12:45:00.723 DBG default: void SevaName::print()  Seva Number = 18
2023-07-11 12:45:00.723 DBG default: void SevaName::print()  Seva        = 0
2023-07-11 12:45:00.723 DBG default: void SevaName::print()  Seva Date   = "2021-12-09"
2023-07-11 12:45:00.723 DBG default: void SevaName::print()  Seva Type   = 1
2023-07-11 12:45:00.723 DBG default: void SevaName::print()  Seva Cost   = 0
2023-07-11 12:45:00.723 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-11 12:45:00.723 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-11 12:45:00.723 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-11 12:45:00.737 DBG default: QStringList SevaViewProxy::getGothras() 

2023-07-11 12:45:00.737 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:00.737 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-07-11 12:45:00.738 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Vashistha", "", "Puthamanasa", "Shrivathsa", "Sankhyayanasa", "Jamadagni", "Harithasa", "Kashyapa", "Maudgalya", "Bharadwaja", "Gargeyyesa", "Mounabharghava", "Dhananjaya", "Kaundinya", "Galava", "Athreyasa", "Vishwamitra", "Kaushika", "Gouthama", "kashyapa") 

2023-07-11 12:45:00.739 DBG qml: ********* In setGothras function  *********** = 0
2023-07-11 12:45:00.739 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-07-11 12:45:00.739 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:00.739 DBG qml: ********* In set nakshatra function  *********** = 0
2023-07-11 12:45:00.739 DBG qml:  Current Index changed5
2023-07-11 12:45:00.739 DBG qml:  VIEW-1 - Index =5
2023-07-11 12:45:00.740 DBG qml:  Seva Selected =5
2023-07-11 12:45:00.740 DBG default: SevaName* SevaViewProxy::getSevaByIndex(int) 5 

2023-07-11 12:45:00.740 DBG default: current.... seva model 

2023-07-11 12:45:00.740 DBG default: current seva model SevaListViewModel(0x11aa78f8) 

2023-07-11 12:45:00.740 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int) (SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:45:00.740 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int)  Index requested 1= 5 

2023-07-11 12:45:00.740 DBG qml:  Seva Details =0
2023-07-11 12:45:00.740 DBG default: void SevaName::print()  Seva Name   = "Thatte Hasthodaka"
2023-07-11 12:45:00.740 DBG default: void SevaName::print()  Seva ID     = 18
2023-07-11 12:45:00.740 DBG default: void SevaName::print()  Seva Number = 18
2023-07-11 12:45:00.740 DBG default: void SevaName::print()  Seva        = 0
2023-07-11 12:45:00.740 DBG default: void SevaName::print()  Seva Date   = "2021-12-09"
2023-07-11 12:45:00.740 DBG default: void SevaName::print()  Seva Type   = 1
2023-07-11 12:45:00.740 DBG default: void SevaName::print()  Seva Cost   = 0
2023-07-11 12:45:00.740 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-11 12:45:00.740 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-11 12:45:00.740 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-11 12:45:00.740 DBG qml: seva name  = Thatte Hasthodaka Seva cost = 0
2023-07-11 12:45:00.740 DBG default: QStringList SevaViewProxy::getGothras() 

2023-07-11 12:45:00.740 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:00.741 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-07-11 12:45:00.741 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Vashistha", "", "Puthamanasa", "Shrivathsa", "Sankhyayanasa", "Jamadagni", "Harithasa", "Kashyapa", "Maudgalya", "Bharadwaja", "Gargeyyesa", "Mounabharghava", "Dhananjaya", "Kaundinya", "Galava", "Athreyasa", "Vishwamitra", "Kaushika", "Gouthama", "kashyapa") 

2023-07-11 12:45:00.741 DBG qml: ********* In setGothras function  *********** = 0
2023-07-11 12:45:00.741 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-07-11 12:45:00.741 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:00.742 DBG qml: ********* In set nakshatra function  *********** = 0
2023-07-11 12:45:00.742 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:00.742 DBG default: void SevaName::print()  Seva Name   = "Thatte Hasthodaka"
2023-07-11 12:45:00.742 DBG default: void SevaName::print()  Seva ID     = 18
2023-07-11 12:45:00.742 DBG default: void SevaName::print()  Seva Number = 18
2023-07-11 12:45:00.742 DBG default: void SevaName::print()  Seva        = 0
2023-07-11 12:45:00.742 DBG default: void SevaName::print()  Seva Date   = "2021-12-09"
2023-07-11 12:45:00.742 DBG default: void SevaName::print()  Seva Type   = 1
2023-07-11 12:45:00.742 DBG default: void SevaName::print()  Seva Cost   = 0
2023-07-11 12:45:00.742 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-11 12:45:00.742 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-11 12:45:00.742 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-11 12:45:01.863 DBG qml: Esc pressed in select seva type view
2023-07-11 12:45:01.863 DBG qml: loading Menu page from main
2023-07-11 12:45:01.882 DBG qml: the accounts enable true
2023-07-11 12:45:01.882 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-11 12:45:01.882 DBG qml: Screen screenWidth size =1920
2023-07-11 12:45:01.882 DBG qml: Screen screenHeight size =1000
2023-07-11 12:45:01.882 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:01.882 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:01.882 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:01.882 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:02.605 DBG qml: loading from main
2023-07-11 12:45:02.615 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:02.615 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:02.615 DBG qml: admin button clicked
2023-07-11 12:45:02.615 DBG qml: this is admin
2023-07-11 12:45:04.967 DBG qml: User Management button clicked
2023-07-11 12:45:04.967 DBG qml: User Management loading
2023-07-11 12:45:04.999 DBG qml: focus changed
2023-07-11 12:45:05.001 DBG qml: focus changed
2023-07-11 12:45:05.002 WRN default: qrc:/ui/Admin/UserManagement.qml:153:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-11 12:45:05.804 DBG qml: loading Menu page from main
2023-07-11 12:45:05.814 DBG qml: the accounts enable true
2023-07-11 12:45:05.814 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-11 12:45:05.814 DBG qml: Screen screenWidth size =1920
2023-07-11 12:45:05.814 DBG qml: Screen screenHeight size =1000
2023-07-11 12:45:05.814 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:05.814 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:05.814 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:05.814 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:07.293 DBG qml: loading from main
2023-07-11 12:45:07.296 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:07.296 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:07.296 DBG qml: admin button clicked
2023-07-11 12:45:07.296 DBG qml: this is admin
2023-07-11 12:45:09.838 DBG qml: User Management button clicked
2023-07-11 12:45:09.838 DBG qml: User Management loading
2023-07-11 12:45:09.842 DBG qml: focus changed
2023-07-11 12:45:09.845 DBG qml: focus changed
2023-07-11 12:45:09.849 WRN default: qrc:/ui/Admin/UserManagement.qml:153:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-11 12:45:12.967 DBG qml:  LineTxt Input Edit is complete
2023-07-11 12:45:12.967 DBG qml:  RowEntry - Edit is completet
2023-07-11 12:45:13.818 DBG qml:  Activated Index =1
2023-07-11 12:45:13.819 DBG qml: Selected Text =Others
2023-07-11 12:45:15.961 DBG qml:  Activated Index =0
2023-07-11 12:45:15.961 DBG qml: Selected Text =Admin
2023-07-11 12:45:18.202 DBG qml: loading Menu page from main
2023-07-11 12:45:18.205 DBG qml: the accounts enable true
2023-07-11 12:45:18.205 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-11 12:45:18.205 DBG qml: Screen screenWidth size =1920
2023-07-11 12:45:18.205 DBG qml: Screen screenHeight size =1000
2023-07-11 12:45:18.205 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:18.205 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:18.205 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:18.205 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-11 12:45:21.117 DBG qml: account details button clicked
2023-07-11 12:45:21.117 DBG qml: Clicked on AccountDetails
2023-07-11 12:45:21.289 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-11 12:45:21.289 DBG default: int AccountReportModel::iGrandTotal() const 0 

2023-07-11 12:45:21.289 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-11 12:45:21.314 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-11 12:45:21.470 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-07-11 12:45:21.470 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-11 12:45:21.470 DBG qml: accont report Selected year2015
2023-07-11 12:45:21.472 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-07-11 12:45:21.472 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-11 12:45:21.472 DBG qml: Selected month1
2023-07-11 12:45:21.472 WRN default: qrc:/ui/components/MyReportFilter.qml:312:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.472 WRN default: qrc:/ui/components/MyReportFilter.qml:323:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.527 WRN default: qrc:/ui/components/MyReportFilter.qml:258:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.527 WRN default: qrc:/ui/components/MyReportFilter.qml:268:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.549 WRN default: qrc:/ui/components/MyReportFilter.qml:212:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.555 WRN default: qrc:/ui/components/MyReportFilter.qml:131:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.555 WRN default: qrc:/ui/components/MyReportFilter.qml:169:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.556 WRN default: qrc:/ui/components/MyReportFilter.qml:312:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.556 WRN default: qrc:/ui/components/MyReportFilter.qml:323:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.556 WRN default: qrc:/ui/components/MyReportFilter.qml:258:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.556 WRN default: qrc:/ui/components/MyReportFilter.qml:268:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.556 WRN default: qrc:/ui/components/MyReportFilter.qml:212:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.556 WRN default: qrc:/ui/components/MyReportFilter.qml:131:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.556 WRN default: qrc:/ui/components/MyReportFilter.qml:169:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.556 DBG qml: In Component.onCompleted: of seva report page
2023-07-11 12:45:21.556 DBG qml: In  Component.onCompleted: loader srp
2023-07-11 12:45:21.556 DBG qml: In Component.onCompleted: of seva report page total text 0.00 ?
2023-07-11 12:45:21.560 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-11 12:45:21.560 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-11 12:45:21.560 DBG qml: The month and year initial 1   2015
2023-07-11 12:45:21.560 DBG qml:  Trying to get the list category
2023-07-11 12:45:21.560 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:45:21.560 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-11 12:45:21.560 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.560 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.560 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.560 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.560 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-11 12:45:21.560 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-11 12:45:21.560 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-11 12:45:21.560 DBG qml: 1
2023-07-11 12:45:21.560 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.560 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-11 12:45:21.560 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-11 12:45:21.560 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-11 12:45:21.560 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.560 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-11 12:45:21.560 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1 

2023-07-11 12:45:21.560 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:45:21.560 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:21.560 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:45:21.560 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:45:21.560 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-11 12:45:21.560 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))) 
(SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:45:21.560 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:45:21.560 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-11 12:45:21.561 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x5772e60))(3, SevaName(0x5773040))(4, SevaName(0x5773720))(6, SevaName(0x5772f50))(7, SevaName(0x57734a0))(18, SevaName(0x579db90))(37, SevaName(0x579e450))(47, SevaName(0x579dcd0))(48, SevaName(0x579dd70))(49, SevaName(0x579dff0))(75, SevaName(0x579e680))(85, SevaName(0x579f350))(86, SevaName(0x579ef90))(101, SevaName(0x579f710))(103, SevaName(0x579f530))(104, SevaName(0x579f580))(108, SevaName(0x579f0d0))(121, SevaName(0x57f58f8))(125, SevaName(0x57f5e48))(173, SevaName(0x57f6118))(174, SevaName(0x57f6168))) 
(SevaName(0x5772e60), SevaName(0x5773040), SevaName(0x5773720), SevaName(0x5772f50), SevaName(0x57734a0), SevaName(0x579db90), SevaName(0x579e450), SevaName(0x579dcd0), SevaName(0x579dd70), SevaName(0x579dff0), SevaName(0x579e680), SevaName(0x579f350), SevaName(0x579ef90), SevaName(0x579f710), SevaName(0x579f530), SevaName(0x579f580), SevaName(0x579f0d0), SevaName(0x57f58f8), SevaName(0x57f5e48), SevaName(0x57f6118), SevaName(0x57f6168)) 

2023-07-11 12:45:21.562 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-11 12:45:21.562 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-11 12:45:21.562 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-11 12:45:21.562 DBG qml: Seva name selected : Chataka
2023-07-11 12:45:21.562 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-11 12:45:21.562 DBG qml: Seva type selected in report filter : 1
2023-07-11 12:45:21.562 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.562 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.562 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.562 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-11 12:45:21.562 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-11 12:45:21.562 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-11 12:45:21.562 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-11 12:45:21.562 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-11 12:45:21.562 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x576c8f8) 

2023-07-11 12:45:21.562 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-11 12:45:21.562 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x579f3f0))) 
(SevaName(0x579f3f0)) 

2023-07-11 12:45:21.562 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x579f3f0)) 

2023-07-11 12:45:21.562 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-11 12:45:21.562 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x579f3f0))) 
(SevaName(0x579f3f0)) 

2023-07-11 12:45:21.563 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-11 12:45:21.563 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-11 12:45:21.563 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-11 12:45:21.563 DBG default: void SevaReport::generateAccReport(ReportFilterElements*) 

2023-07-11 12:45:21.563 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-11 12:45:21.563 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) 0 

2023-07-11 12:45:21.563 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:45:21.563 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm date "11-07-2023" 

2023-07-11 12:45:21.563 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-11 12:45:21.563 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-11 12:45:21.563 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm ddetails "All" 0 

2023-07-11 12:45:21.563 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) Inside c date acc rep 

2023-07-11 12:45:21.563 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:45:21.563 DBG default: QString AccountReportModel::FormatDate(QString) "11-07-2023" 

2023-07-11 12:45:21.564 DBG default: QString AccountReportModel::FormatDate(QString) QDate("2023-07-11") 

2023-07-11 12:45:21.564 DBG default: QString AccountReportModel::FormatDate(QString) "2023-07-11" 

2023-07-11 12:45:21.564 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-11 12:45:21.564 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:45:21.564 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-07-11" 

2023-07-11 12:45:21.564 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:45:21.564 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-11 12:45:21.564 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-11 12:45:21.564 DBG default: void DBInterface::account_report_cdate_function(QString, int, QString) 

2023-07-11 12:45:21.564 DBG default: "2023-07-11" ^^^^^^^^^^^^^^^^^^^^^^^^^^  "All"    0 

2023-07-11 12:45:21.564 DBG default: First 

2023-07-11 12:45:21.564 DBG default:  Query string = "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-11' Group by sevabooking.SEVANAME ; " 

2023-07-11 12:45:21.564 DBG default: inside cash true 

2023-07-11 12:45:21.564 DBG default:  Query string Acc rep true 

2023-07-11 12:45:21.564 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-11 12:45:21.564 DBG default: true 

2023-07-11 12:45:21.564 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:45:21.564 DBG default: "2023-07-11" 

2023-07-11 12:45:21.564 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:45:21.564 DBG qml: ******** 11-07-2023
2023-07-11 12:45:21.564 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-11 12:45:21.564 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:45:21.564 DBG qml:   _rip.sSingleDate 211-07-2023
2023-07-11 12:45:21.564 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-11 12:45:21.564 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-11 12:45:21.564 DBG qml: Component.completed:if of sevaProxy.sevaReport.accReportModel.getAccountReportQryListSize()===0
2023-07-11 12:45:21.564 DBG qml: In onSendError
2023-07-11 12:45:21.565 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-07-11 12:45:21.565 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-11 12:45:21.565 DBG qml: accont report Selected year2023
2023-07-11 12:45:21.565 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-07-11 12:45:21.565 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-11 12:45:21.565 DBG qml: Selected month7
2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 1 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 2 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 3 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 4 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 5 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 6 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 7 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 8 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 9 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 10 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 11 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 12 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 13 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 14 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.565 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 15 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 16 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 17 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 18 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 19 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 20 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 21 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 22 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  24 

2023-07-11 12:45:21.566 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 23 

2023-07-11 12:45:21.566 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-11 12:45:21.566 DBG qml: Screen screenWidth size =1920
2023-07-11 12:45:21.566 DBG qml: Screen screenHeight size =1000
2023-07-11 12:45:21.566 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-11 12:45:21.566 DBG qml: Screen screenWidth size =1920
2023-07-11 12:45:21.566 DBG qml: Screen screenHeight size =1000
2023-07-11 12:45:21.566 DBG qml: this is admin
2023-07-11 12:45:21.567 WRN default: qrc:/ui/components/MyReportFilter.qml:131:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.567 WRN default: qrc:/ui/components/MyReportFilter.qml:169:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.567 WRN default: qrc:/ui/components/MyReportFilter.qml:212:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.567 WRN default: qrc:/ui/components/MyReportFilter.qml:212:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.567 WRN default: qrc:/ui/components/MyReportFilter.qml:258:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.567 WRN default: qrc:/ui/components/MyReportFilter.qml:268:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.584 WRN default: qrc:/ui/components/MyReportFilter.qml:258:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.584 WRN default: qrc:/ui/components/MyReportFilter.qml:268:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.584 WRN default: qrc:/ui/components/MyReportFilter.qml:312:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.584 WRN default: qrc:/ui/components/MyReportFilter.qml:323:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.584 WRN default: qrc:/ui/components/MyReportFilter.qml:312:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:21.584 WRN default: qrc:/ui/components/MyReportFilter.qml:323:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-11 12:45:22.757 DBG qml: Ok clicked
2023-07-11 12:51:02.414 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-11 12:51:02.414 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-11 12:51:02.414 DBG qml: I am hereeee
2023-07-11 12:51:02.414 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-07-11 12:51:02.414 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-07-11 12:51:02.414 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-11 12:51:02.414 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-07-11 12:51:02.414 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-07-11 12:51:02.414 DBG qml: In onLoadDateWisePage
2023-07-11 12:51:02.428 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-07-11 12:51:02.435 DBG qml: Component.completed: of SevaAccountReportOnDateRange.qml
2023-07-11 12:51:02.437 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-11 12:51:02.437 DBG qml: Screen screenWidth size =1920
2023-07-11 12:51:02.437 DBG qml: Screen screenHeight size =1000
2023-07-11 12:51:02.437 WRN default: qrc:/ui/SevaReportPage.qml:253:17: QML Connections: Detected function "onLoadDateWisePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-11 12:51:02.437 WRN default: qrc:/ui/SevaReportPage.qml:253:17: QML Connections: Detected function "onLoadDateWiseForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-11 12:51:02.437 DBG qml: ---------11----------------
2023-07-11 12:51:02.437 DBG qml: ---------12----------------
2023-07-11 12:51:02.437 DBG qml: In onSendReportDateRangeInputForWholeMonth
2023-07-11 12:51:02.437 DBG qml: In main
2023-07-11 12:51:02.437 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-07-11 12:51:02.437 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) 0 

2023-07-11 12:51:02.437 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:51:02.437 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) elm date "11-07-2023" 

2023-07-11 12:51:02.437 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-11 12:51:02.437 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-11 12:51:02.437 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetails "All" 0 

2023-07-11 12:51:02.437 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetailqqqqqqqqqqqqqqqqqs 2 

2023-07-11 12:51:02.437 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-11 12:51:02.437 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-11 12:51:02.437 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-11 12:51:02.437 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-11 12:51:02.437 DBG default:  Query string = "select RECEIPT_DATE,sum(QUANTITY),sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='7' Group by sevabooking.RECEIPT_DATE;" 

2023-07-11 12:51:02.437 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY),sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='7' Group by sevabooking.RECEIPT_DATE;" 

2023-07-11 12:51:02.437 DBG default: AccountReportDateRangeElement::AccountReportDateRangeElement(QObject*) 

2023-07-11 12:51:02.437 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-07-07" 

2023-07-11 12:51:02.437 DBG default: In while of db **********query_other1.value(1).toInt()***************** 8 

2023-07-11 12:51:02.437 DBG default: In while of db **************query_other1.value(2).toFloat()************* 7450 

2023-07-11 12:51:02.437 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) ------------ 

2023-07-11 12:51:02.437 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-07-11 12:51:02.437 DBG default: void AccountReportDateRangeModel::setIGrandTotal(int) 7450 

2023-07-11 12:51:02.438 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) 7450 

2023-07-11 12:51:02.438 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY),sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='7' Group by sevabooking.RECEIPT_DATE;" 

2023-07-11 12:51:02.438 DBG default: AccountReportDateRangeElement::AccountReportDateRangeElement(QObject*) 

2023-07-11 12:51:02.438 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-07-09" 

2023-07-11 12:51:02.438 DBG default: In while of db **********query_other1.value(1).toInt()***************** 3 

2023-07-11 12:51:02.438 DBG default: In while of db **************query_other1.value(2).toFloat()************* 1400 

2023-07-11 12:51:02.438 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) ------------ 

2023-07-11 12:51:02.438 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-07-11 12:51:02.438 DBG default: void AccountReportDateRangeModel::setIGrandTotal(int) 8850 

2023-07-11 12:51:02.438 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) 8850 

2023-07-11 12:51:02.438 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY),sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='7' Group by sevabooking.RECEIPT_DATE;" 

2023-07-11 12:51:02.438 DBG default: AccountReportDateRangeElement::AccountReportDateRangeElement(QObject*) 

2023-07-11 12:51:02.438 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-07-10" 

2023-07-11 12:51:02.438 DBG default: In while of db **********query_other1.value(1).toInt()***************** 4 

2023-07-11 12:51:02.438 DBG default: In while of db **************query_other1.value(2).toFloat()************* 42000 

2023-07-11 12:51:02.438 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) ------------ 

2023-07-11 12:51:02.438 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-11 12:51:02.438 DBG default: void AccountReportDateRangeModel::setIGrandTotal(int) 50850 

2023-07-11 12:51:02.438 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) 50850 

2023-07-11 12:51:02.438 DBG default: int AccountReportDateRangeModel::getAccountReportDateRangeQryListSize() 

2023-07-11 12:51:02.438 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-11 12:51:02.438 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-11 12:51:02.438 DBG qml: ---------d----------------
2023-07-11 12:51:02.438 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-11 12:51:02.438 DBG default: int AccountReportModel::iGrandTotal() const 0 

2023-07-11 12:51:02.439 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.439 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.441 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.441 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-07-11 12:51:02.443 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.443 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-07" 

2023-07-11 12:51:02.443 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.443 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 8 

2023-07-11 12:51:02.444 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.444 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 7450 

2023-07-11 12:51:02.444 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.444 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.445 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.445 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 2 

2023-07-11 12:51:02.445 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.445 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-09" 

2023-07-11 12:51:02.445 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.445 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 3 

2023-07-11 12:51:02.445 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.445 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 1400 

2023-07-11 12:51:02.446 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.446 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.446 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.446 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 3 

2023-07-11 12:51:02.446 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.446 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-10" 

2023-07-11 12:51:02.447 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.447 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 4 

2023-07-11 12:51:02.447 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:02.447 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 42000 

2023-07-11 12:51:03.805 DBG qml: mouse clicked left styleData.selected true
2023-07-11 12:51:03.805 DBG qml: clicked cell in table view  0
2023-07-11 12:51:03.805 DBG qml: clicked cell in table view coordinates =  QPointF(569, 44)
2023-07-11 12:51:03.805 DBG qml: clicked cell in table view clickIndex =  0
2023-07-11 12:51:03.805 DBG qml: clicked cell in table view  0
2023-07-11 12:51:03.805 DBG qml: clicked cell in table view  0
2023-07-11 12:51:03.805 DBG qml: Left 0
2023-07-11 12:51:03.805 DBG default: AccountReportDateRangeElement* AccountReportDateRangeModel::getAccountReportDateRangeElementAt(int) I am index  0 

2023-07-11 12:51:03.805 DBG default: AccountReportDateRangeElement* AccountReportDateRangeModel::getAccountReportDateRangeElementAt(int) "2023-07-07" 

2023-07-11 12:51:03.805 DBG default: AccountReportDateRangeElement* AccountReportDateRangeModel::getAccountReportDateRangeElementAt(int) 8 

2023-07-11 12:51:03.805 DBG default: AccountReportDateRangeElement* AccountReportDateRangeModel::getAccountReportDateRangeElementAt(int) 7450 

2023-07-11 12:51:03.805 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.806 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.806 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.806 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.806 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-07-11 12:51:03.806 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.806 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-07" 

2023-07-11 12:51:03.806 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.806 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 8 

2023-07-11 12:51:03.806 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.807 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 7450 

2023-07-11 12:51:03.807 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.807 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.807 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.807 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 2 

2023-07-11 12:51:03.807 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.807 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-09" 

2023-07-11 12:51:03.807 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.807 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 3 

2023-07-11 12:51:03.807 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.807 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 1400 

2023-07-11 12:51:03.807 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.807 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.808 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.808 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 3 

2023-07-11 12:51:03.808 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.808 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-10" 

2023-07-11 12:51:03.808 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.808 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 4 

2023-07-11 12:51:03.808 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.808 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 42000 

2023-07-11 12:51:03.808 DBG qml: /////////////////////////////2023-07-07
2023-07-11 12:51:03.808 DBG qml: In   1111111111onLoadSingleDatePage(obj.date) 2023-07-07
2023-07-11 12:51:03.808 DBG qml:  Component.onDestruction of SevaAccountReportOnDateRange.qml
2023-07-11 12:51:03.882 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-11 12:51:03.882 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-11 12:51:03.882 DBG default: int AccountReportModel::iGrandTotal() const 0 

2023-07-11 12:51:03.882 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-11 12:51:03.883 WRN default: qrc:/ui/SevaAccountReportForSingleDate.qml:172:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-11 12:51:03.884 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-11 12:51:03.887 DBG qml: Component.completed: of SevaAccountReportForSingleDate.qml
2023-07-11 12:51:03.887 DBG qml: In Component.onCompleted: of seva report page single date total text 0.00 ?
2023-07-11 12:51:03.892 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-11 12:51:03.892 DBG qml: Screen screenWidth size =1920
2023-07-11 12:51:03.892 DBG qml: Screen screenHeight size =1000
2023-07-11 12:51:03.892 WRN default: qrc:/ui/SevaReportPage.qml:253:17: QML Connections: Detected function "onLoadSingleDatePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-11 12:51:03.892 WRN default: qrc:/ui/SevaReportPage.qml:253:17: QML Connections: Detected function "onLoadMonthWisePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-11 12:51:03.892 WRN default: qrc:/ui/SevaReportPage.qml:253:17: QML Connections: Detected function "onLoadDateWiseForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-11 12:51:03.892 DBG qml: ******** 07-07-2023
2023-07-11 12:51:03.892 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-07-11 12:51:03.892 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-07-11 12:51:03.892 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-11 12:51:03.892 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-07-11 12:51:03.892 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-07-11 12:51:03.892 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-11 12:51:03.892 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-11 12:51:03.892 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-11 12:51:03.892 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-11 12:51:03.892 DBG default: bool ReportFilterElements::bSevawise() const 

2023-07-11 12:51:03.892 DBG qml: In Loader of seva report page _rip.bSevawisetrue
2023-07-11 12:51:03.892 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-11 12:51:03.892 DBG qml: In Loader of seva report page _rip.bDatewisefalse
2023-07-11 12:51:03.892 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:51:03.892 DBG qml: In Loader of seva report page _rip.sSingleDate07-07-2023
2023-07-11 12:51:03.892 DBG default: const QString& ReportFilterElements::sStartDate() const 

2023-07-11 12:51:03.892 DBG qml: In Loader of seva report page  _rip.sStartDatenull
2023-07-11 12:51:03.893 DBG default: const QString& ReportFilterElements::sEndDate() const 

2023-07-11 12:51:03.893 DBG qml: In Loader of seva report page    _rip.sEndDate null
2023-07-11 12:51:03.893 DBG qml: In Loader of seva report page     _rip.iSelectedType0
2023-07-11 12:51:03.893 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-11 12:51:03.893 DBG qml: In Loader of seva report page    _rip.iSevaType 0
2023-07-11 12:51:03.893 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-11 12:51:03.893 DBG qml: In Loader of seva report page    _rip.sSevaNameAll
2023-07-11 12:51:03.893 DBG qml: In main
2023-07-11 12:51:03.893 DBG default: void SevaReport::generateAccReport(ReportFilterElements*) 

2023-07-11 12:51:03.893 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-11 12:51:03.893 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-11 12:51:03.893 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) 0 

2023-07-11 12:51:03.893 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:51:03.893 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm date "07-07-2023" 

2023-07-11 12:51:03.893 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-11 12:51:03.893 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-11 12:51:03.893 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm ddetails "All" 0 

2023-07-11 12:51:03.893 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) Inside c date acc rep 

2023-07-11 12:51:03.893 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:51:03.893 DBG default: QString AccountReportModel::FormatDate(QString) "07-07-2023" 

2023-07-11 12:51:03.893 DBG default: QString AccountReportModel::FormatDate(QString) QDate("2023-07-07") 

2023-07-11 12:51:03.893 DBG default: QString AccountReportModel::FormatDate(QString) "2023-07-07" 

2023-07-11 12:51:03.893 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-11 12:51:03.893 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:51:03.893 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-07-07" 

2023-07-11 12:51:03.893 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:51:03.893 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-11 12:51:03.893 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-11 12:51:03.893 DBG default: void DBInterface::account_report_cdate_function(QString, int, QString) 

2023-07-11 12:51:03.893 DBG default: "2023-07-07" ^^^^^^^^^^^^^^^^^^^^^^^^^^  "All"    0 

2023-07-11 12:51:03.893 DBG default: First 

2023-07-11 12:51:03.893 DBG default:  Query string = "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME ; " 

2023-07-11 12:51:03.894 DBG default: inside cash true 

2023-07-11 12:51:03.894 DBG default:  Query string Acc rep true 

2023-07-11 12:51:03.894 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME ; " 

2023-07-11 12:51:03.894 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-11 12:51:03.894 DBG default: suman cheque "1500" 

2023-07-11 12:51:03.894 DBG default: suman neft "5000" 

2023-07-11 12:51:03.894 DBG default: suman upi "150" 

2023-07-11 12:51:03.894 DBG default: "Chataka" 

2023-07-11 12:51:03.894 DBG default: "1" 

2023-07-11 12:51:03.894 DBG default: "800" 

2023-07-11 12:51:03.894 DBG default: "800" 

2023-07-11 12:51:03.894 DBG default: before emitting signal  account_report '''''''' 

2023-07-11 12:51:03.894 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-11 12:51:03.894 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-11 12:51:03.894 DBG default: void AccountReportModel::setIGrandTotal(int) 800 

2023-07-11 12:51:03.894 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-11 12:51:03.894 DBG default: int AccountReportModel::iGrandTotal() const 800 

2023-07-11 12:51:03.894 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 800 

2023-07-11 12:51:03.894 DBG default: after emitting signal  account_report '''''''' 

2023-07-11 12:51:03.894 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME ; " 

2023-07-11 12:51:03.894 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-11 12:51:03.894 DBG default: "M Navami Pavamana Homa" 

2023-07-11 12:51:03.894 DBG default: "1" 

2023-07-11 12:51:03.894 DBG default: "5000" 

2023-07-11 12:51:03.894 DBG default: "5000" 

2023-07-11 12:51:03.894 DBG default: before emitting signal  account_report '''''''' 

2023-07-11 12:51:03.894 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-11 12:51:03.894 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 1 

2023-07-11 12:51:03.894 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.894 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.894 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.894 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.894 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.894 DBG default: void AccountReportModel::setIGrandTotal(int) 5800 

2023-07-11 12:51:03.894 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-11 12:51:03.894 DBG default: int AccountReportModel::iGrandTotal() const 5800 

2023-07-11 12:51:03.895 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 5800 

2023-07-11 12:51:03.895 DBG default: after emitting signal  account_report '''''''' 

2023-07-11 12:51:03.895 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME ; " 

2023-07-11 12:51:03.895 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-11 12:51:03.895 DBG default: "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.895 DBG default: "3" 

2023-07-11 12:51:03.895 DBG default: "50" 

2023-07-11 12:51:03.895 DBG default: "150" 

2023-07-11 12:51:03.895 DBG default: before emitting signal  account_report '''''''' 

2023-07-11 12:51:03.895 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-11 12:51:03.895 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 2 

2023-07-11 12:51:03.895 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.895 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.895 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.895 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.895 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.895 DBG default: Suman Accounts--- 297698768 

2023-07-11 12:51:03.895 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.895 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.895 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.895 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.895 DBG default: void AccountReportModel::setIGrandTotal(int) 5950 

2023-07-11 12:51:03.895 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-11 12:51:03.895 DBG default: int AccountReportModel::iGrandTotal() const 5950 

2023-07-11 12:51:03.895 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 5950 

2023-07-11 12:51:03.895 DBG default: after emitting signal  account_report '''''''' 

2023-07-11 12:51:03.895 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-07' Group by sevabooking.SEVANAME ; " 

2023-07-11 12:51:03.895 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-11 12:51:03.896 DBG default: "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.896 DBG default: "3" 

2023-07-11 12:51:03.896 DBG default: "500" 

2023-07-11 12:51:03.896 DBG default: "1500" 

2023-07-11 12:51:03.896 DBG default: before emitting signal  account_report '''''''' 

2023-07-11 12:51:03.896 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-11 12:51:03.896 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- 297698768 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.896 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.896 DBG default: void AccountReportModel::setIGrandTotal(int) 7450 

2023-07-11 12:51:03.896 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-11 12:51:03.896 DBG default: int AccountReportModel::iGrandTotal() const 7450 

2023-07-11 12:51:03.896 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 7450 

2023-07-11 12:51:03.896 DBG default: after emitting signal  account_report '''''''' 

2023-07-11 12:51:03.896 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-11 12:51:03.896 DBG default: false 

2023-07-11 12:51:03.896 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-11 12:51:03.896 DBG default: "2023-07-07" 

2023-07-11 12:51:03.898 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 297698768 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.898 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 297698768 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.898 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.899 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.899 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.899 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.899 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.900 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 297698768 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.900 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.900 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-11 12:51:03.900 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 297698768 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.901 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Chataka" 

2023-07-11 12:51:03.901 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- 297698768 

2023-07-11 12:51:03.901 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.902 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-07-11 12:51:03.902 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 297698768 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.902 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.902 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-11 12:51:03.903 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 297698768 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.903 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-07-11 12:51:03.903 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 297698768 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.903 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.903 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 297698768 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.904 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.905 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 297698768 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.905 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 2 

2023-07-11 12:51:03.905 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.905 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.906 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "M Navami Pavamana Homa" 

2023-07-11 12:51:03.906 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.906 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.907 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-11 12:51:03.907 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.907 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-11 12:51:03.907 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.907 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.908 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-11 12:51:03.908 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.908 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.908 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.909 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.910 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.910 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-11 12:51:03.910 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.910 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.911 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.911 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.911 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.911 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 50 

2023-07-11 12:51:03.912 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.912 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-11 12:51:03.912 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.912 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.912 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 150 

2023-07-11 12:51:03.913 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.913 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.913 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.914 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.914 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.914 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.914 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.914 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.914 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.914 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.914 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.914 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.914 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.914 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.914 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.914 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.914 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 0 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.915 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 4 

2023-07-11 12:51:03.915 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.915 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.915 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.916 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.916 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.917 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 500 

2023-07-11 12:51:03.917 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.917 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-11 12:51:03.917 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.917 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.918 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1500 

2023-07-11 12:51:03.918 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.918 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.919 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.919 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.921 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.921 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.921 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-11 12:51:03.922 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.922 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Chataka" 

2023-07-11 12:51:03.922 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.922 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.923 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-07-11 12:51:03.923 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.923 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-11 12:51:03.923 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.923 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.924 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.924 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.924 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.925 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.925 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.925 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.926 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 800 

2023-07-11 12:51:03.926 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.926 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.926 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.927 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.928 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.928 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.929 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 2 

2023-07-11 12:51:03.929 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.929 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.930 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "M Navami Pavamana Homa" 

2023-07-11 12:51:03.930 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.930 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.931 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-11 12:51:03.931 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.931 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.931 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-11 12:51:03.932 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.932 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.932 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.933 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.933 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.934 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.934 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.934 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.935 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-11 12:51:03.935 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.935 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.936 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.936 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.937 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.937 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.937 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.937 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.937 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.938 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-11 12:51:03.938 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.938 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.939 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.939 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.939 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.939 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 50 

2023-07-11 12:51:03.940 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.940 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-11 12:51:03.940 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.940 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.941 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.941 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.941 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.942 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.942 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.942 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.943 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 150 

2023-07-11 12:51:03.943 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.943 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.943 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.944 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.945 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.945 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.945 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 4 

2023-07-11 12:51:03.946 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.946 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.946 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.946 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.947 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 500 

2023-07-11 12:51:03.947 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.947 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.948 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-11 12:51:03.948 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.948 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.949 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.949 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.949 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.950 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.950 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- "Chataka" 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 800 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 2 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 1 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 5000 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.950 DBG default: Suman Accounts--- "Panchamrutha/Abhisheka" 

2023-07-11 12:51:03.951 DBG default: Suman Accounts--- 50 

2023-07-11 12:51:03.951 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.951 DBG default: Suman Accounts--- 150 

2023-07-11 12:51:03.951 DBG default: Suman Accounts--- 4 

2023-07-11 12:51:03.951 DBG default: Suman Accounts--- "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-11 12:51:03.951 DBG default: Suman Accounts--- 500 

2023-07-11 12:51:03.951 DBG default: Suman Accounts--- 3 

2023-07-11 12:51:03.951 DBG default: Suman Accounts--- 1500 

2023-07-11 12:51:03.951 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1500 

2023-07-11 12:51:23.120 DBG qml: Closing the report
2023-07-11 12:51:23.120 DBG qml: reset Model
2023-07-11 12:51:23.120 DBG default: void SevaReport::resetAccModel() 

2023-07-11 12:51:23.120 DBG default: void AccountReportModel::resetAccModel() 

2023-07-11 12:51:23.120 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-11 12:51:23.120 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-11 12:51:23.122 DBG qml:  Component.onDestruction of SevaAccountReportForSingleDate.qml
2023-07-11 12:51:23.123 DBG default: void SevaReport::resetAccDateRangeModel() 

2023-07-11 12:51:23.123 DBG default: void AccountReportDateRangeModel::resetAccDateRangeModel() 

