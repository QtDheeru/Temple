2023-07-07 15:03:02.717 WRN default: Invalid QML element name " AccReportDateRangeElement"
2023-07-07 15:03:02.717 WRN default: Invalid QML element name " AccReportMonthRangeElement"
2023-07-07 15:03:02.717 WRN default: Invalid QML element name " BookingReportDateRangeElement"
2023-07-07 15:03:02.717 WRN default: Invalid QML element name " BookingReportMonthRangeElement"
2023-07-07 15:03:02.720 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-07 15:03:02.720 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() In static getTrustListModelInstance of TrustListModel inside if 

2023-07-07 15:03:02.720 DBG default: TrustListModel::TrustListModel() 

2023-07-07 15:03:02.720 DBG default: void TrustListModel::init() 

2023-07-07 15:03:02.720 DBG default: TrustConfiguration::TrustConfiguration(QObject*) 

2023-07-07 15:03:02.720 DBG default: void TrustConfiguration::readTrustsFromJsonToList() path  "D:/TempleFiles_suman/Temple-main/bins" 

2023-07-07 15:03:02.720 DBG default: file opened 

2023-07-07 15:03:02.720 DBG default: read all 

2023-07-07 15:03:02.720 DBG default: void TrustConfiguration::readTrustsFromJsonToList() dddddddoooooooooooocccccccc 

2023-07-07 15:03:02.720 DBG default: Trust::Trust(QObject*) 

2023-07-07 15:03:02.883 WRN qt.qpa.fonts: Unable to open default EUDC font: "EUDC.TTE"
2023-07-07 15:03:03.053 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 15:03:03.053 DBG qml: Screen screenWidth size =1920
2023-07-07 15:03:03.053 DBG qml: Screen screenHeight size =1000
2023-07-07 15:03:03.090 DBG qml: screen height= 1080
2023-07-07 15:03:03.090 DBG qml: screen width= 1920
2023-07-07 15:03:03.090 DBG qml: Screen MyStyles-screecnWidth size =1920
2023-07-07 15:03:03.090 DBG qml: Screen MyStyles-screenHeight size =1000
2023-07-07 15:03:03.090 DBG qml: screen density  == 6.228183399741848
2023-07-07 15:03:03.090 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 15:03:03.090 DBG qml: Screen screenWidth size =1920
2023-07-07 15:03:03.090 DBG qml: Screen screenHeight size =1000
2023-07-07 15:03:08.178 DBG default: int TrustListModel::getTrustListSize() 

2023-07-07 15:03:08.178 DBG default: int TrustListModel::getTrustListSize() 

2023-07-07 15:03:08.179 DBG qml: in else--------------
2023-07-07 15:03:08.179 DBG qml: in else------trustName--------Hubablli
2023-07-07 15:03:08.179 DBG qml: in else-------trustCode-------Hubablli
2023-07-07 15:03:08.179 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) 

2023-07-07 15:03:08.179 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) m_currentConfigLocation  "D:/TempleFiles_suman/Temple-main/bins/Config/Hubablli" 

2023-07-07 15:03:08.179 DBG default: Inside lamda 

2023-07-07 15:03:08.179 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) 

2023-07-07 15:03:08.179 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) m_currentDataLocation  "D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli" 

2023-07-07 15:03:08.179 DBG default: Inside lamda 

2023-07-07 15:03:08.179 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-07 15:03:08.180 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-07-07 15:03:08.180 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-07-07 15:03:08.181 DBG default: Creating the DataBase Connection  

2023-07-07 15:03:08.198 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-07 15:03:08.198 DBG default: QString TrustListModel::getDataLocation() 

2023-07-07 15:03:08.199 DBG default: DBInterface::DBInterface(QObject*) ******************* DB "D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-07-07 15:03:08.199 DBG default: Database is opened  "D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-07-07 15:03:08.199 DBG default: Sevabboking table not created
2023-07-07 15:03:08.199 DBG default: person details creation failed
2023-07-07 15:03:08.199 DBG default: SevaTypeJsonProcessor::SevaTypeJsonProcessor(QObject*) 

2023-07-07 15:03:08.199 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate() 

2023-07-07 15:03:08.199 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-07 15:03:08.199 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-07 15:03:08.199 DBG default: file opened 

2023-07-07 15:03:08.199 DBG default: read all 

2023-07-07 15:03:08.199 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-07-07 15:03:08.199 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  1000 

2023-07-07 15:03:08.200 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 1000 

2023-07-07 15:03:08.200 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  1000 already exist in DB 

2023-07-07 15:03:08.200 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-07-07 15:03:08.200 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  2000 

2023-07-07 15:03:08.200 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 2000 

2023-07-07 15:03:08.200 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  2000 already exist in DB 

2023-07-07 15:03:08.200 DBG default: void SevaTypeJsonProcessor::printSevaTypeNames() 

2023-07-07 15:03:08.200 DBG default: 1000 :  "Regular Seva" , 1000 , "Raj" 

2023-07-07 15:03:08.200 DBG default: 2000 :  "Aradhana Seva" , 2000 , "Abhi" 

2023-07-07 15:03:08.200 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-07 15:03:08.200 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-07 15:03:08.200 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-07-07 15:03:08.200 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-07 15:03:08.200 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-07 15:03:08.200 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  path "D:/TempleFiles_suman/Temple-main/bins/Config/Hubablli/SevaNames.json" 

2023-07-07 15:03:08.200 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-07-07 15:03:08.200 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() file opened 

2023-07-07 15:03:08.200 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() read all 

2023-07-07 15:03:08.201 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.201 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Udayaasthamaana Seva" 

2023-07-07 15:03:08.201 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.201 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.201 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1001 

2023-07-07 15:03:08.201 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.201 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.201 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.201 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.201 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.201 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Udayaasthamaana Seva"  sevaId=  1001 

2023-07-07 15:03:08.201 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1001 

2023-07-07 15:03:08.201 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1001 

2023-07-07 15:03:08.201 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.201 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Seva" 

2023-07-07 15:03:08.201 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.201 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.201 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1002 

2023-07-07 15:03:08.201 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.202 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Seva"  sevaId=  1002 

2023-07-07 15:03:08.202 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1002 

2023-07-07 15:03:08.202 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1002 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Samarpana Seva" 

2023-07-07 15:03:08.202 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.202 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1003 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.202 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Samarpana Seva"  sevaId=  1003 

2023-07-07 15:03:08.202 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1003 

2023-07-07 15:03:08.202 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1003 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakaabhisheka" 

2023-07-07 15:03:08.202 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.202 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1004 

2023-07-07 15:03:08.202 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.203 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakaabhisheka"  sevaId=  1004 

2023-07-07 15:03:08.203 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1004 

2023-07-07 15:03:08.203 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1004 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Godhana" 

2023-07-07 15:03:08.203 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.203 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1005 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.203 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Godhana"  sevaId=  1005 

2023-07-07 15:03:08.203 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1005 

2023-07-07 15:03:08.203 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1005 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mahaa Pooja" 

2023-07-07 15:03:08.203 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.203 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1006 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.203 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.204 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mahaa Pooja"  sevaId=  1006 

2023-07-07 15:03:08.204 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1006 

2023-07-07 15:03:08.204 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1006 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ksheeraabhisheka" 

2023-07-07 15:03:08.204 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.204 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1007 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.204 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ksheeraabhisheka"  sevaId=  1007 

2023-07-07 15:03:08.204 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1007 

2023-07-07 15:03:08.204 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1007 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Madhu Abhisheka" 

2023-07-07 15:03:08.204 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.204 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1008 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.204 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.205 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Madhu Abhisheka"  sevaId=  1008 

2023-07-07 15:03:08.205 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1008 

2023-07-07 15:03:08.205 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1008 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Yella Homagala Seva" 

2023-07-07 15:03:08.205 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.205 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1010 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.205 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Yella Homagala Seva"  sevaId=  1010 

2023-07-07 15:03:08.205 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1010 

2023-07-07 15:03:08.205 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1010 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Naivedhya/Hasthodaka" 

2023-07-07 15:03:08.205 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.205 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1011 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.205 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.206 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Naivedhya/Hasthodaka"  sevaId=  1011 

2023-07-07 15:03:08.206 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1011 

2023-07-07 15:03:08.206 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1011 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Phala - Panchaamrutha" 

2023-07-07 15:03:08.206 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.206 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1012 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.206 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Phala - Panchaamrutha"  sevaId=  1012 

2023-07-07 15:03:08.206 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1012 

2023-07-07 15:03:08.206 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1012 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ganapathi Abhisheka" 

2023-07-07 15:03:08.206 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.206 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1013 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.206 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.207 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ganapathi Abhisheka"  sevaId=  1013 

2023-07-07 15:03:08.207 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1013 

2023-07-07 15:03:08.207 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1013 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Nagadevara Abhisheka" 

2023-07-07 15:03:08.207 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.207 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1014 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.207 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Nagadevara Abhisheka"  sevaId=  1014 

2023-07-07 15:03:08.207 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1014 

2023-07-07 15:03:08.207 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1014 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Abhisheka" 

2023-07-07 15:03:08.207 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.207 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1015 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.207 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.207 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Abhisheka"  sevaId=  1015 

2023-07-07 15:03:08.208 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1015 

2023-07-07 15:03:08.208 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1015 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rathothsava" 

2023-07-07 15:03:08.208 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.208 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1016 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.208 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rathothsava"  sevaId=  1016 

2023-07-07 15:03:08.208 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1016 

2023-07-07 15:03:08.208 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1016 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Huggi Naivedhya" 

2023-07-07 15:03:08.208 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.208 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1017 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.208 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.208 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Huggi Naivedhya"  sevaId=  1017 

2023-07-07 15:03:08.208 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1017 

2023-07-07 15:03:08.208 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1017 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pongal Naivedhya" 

2023-07-07 15:03:08.209 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.209 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1018 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.209 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pongal Naivedhya"  sevaId=  1018 

2023-07-07 15:03:08.209 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1018 

2023-07-07 15:03:08.209 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1018 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Grahana Shanthi" 

2023-07-07 15:03:08.209 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.209 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1019 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.209 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Grahana Shanthi"  sevaId=  1019 

2023-07-07 15:03:08.209 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1019 

2023-07-07 15:03:08.209 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1019 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.209 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika - Rathothsava" 

2023-07-07 15:03:08.209 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.210 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1020 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.210 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika - Rathothsava"  sevaId=  1020 

2023-07-07 15:03:08.210 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1020 

2023-07-07 15:03:08.210 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1020 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika Seva" 

2023-07-07 15:03:08.210 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.210 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1021 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.210 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika Seva"  sevaId=  1021 

2023-07-07 15:03:08.210 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1021 

2023-07-07 15:03:08.210 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1021 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sri Sathya Narayana Pooja" 

2023-07-07 15:03:08.210 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.210 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1022 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.210 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.211 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sri Sathya Narayana Pooja"  sevaId=  1022 

2023-07-07 15:03:08.211 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1022 

2023-07-07 15:03:08.211 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1022 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Tulsi Archane" 

2023-07-07 15:03:08.211 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.211 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1023 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.211 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Tulsi Archane"  sevaId=  1023 

2023-07-07 15:03:08.211 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1023 

2023-07-07 15:03:08.211 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1023 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Chataka Shraadha" 

2023-07-07 15:03:08.211 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.211 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1024 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.211 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.211 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Chataka Shraadha"  sevaId=  1024 

2023-07-07 15:03:08.212 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1024 

2023-07-07 15:03:08.212 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1024 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sankalpa Shraadha" 

2023-07-07 15:03:08.212 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.212 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1025 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.212 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sankalpa Shraadha"  sevaId=  1025 

2023-07-07 15:03:08.212 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1025 

2023-07-07 15:03:08.212 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1025 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Vaahana Pooja" 

2023-07-07 15:03:08.212 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.212 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1026 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.212 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Vaahana Pooja"  sevaId=  1026 

2023-07-07 15:03:08.212 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1026 

2023-07-07 15:03:08.212 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1026 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.212 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Archane Seva" 

2023-07-07 15:03:08.213 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.213 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1027 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.213 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Archane Seva"  sevaId=  1027 

2023-07-07 15:03:08.213 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1027 

2023-07-07 15:03:08.213 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1027 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Lakshmi Pooja" 

2023-07-07 15:03:08.213 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.213 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1028 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.213 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Lakshmi Pooja"  sevaId=  1028 

2023-07-07 15:03:08.213 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1028 

2023-07-07 15:03:08.213 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1028 

2023-07-07 15:03:08.213 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.214 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Devarige Thailaabhisheka" 

2023-07-07 15:03:08.214 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.214 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.214 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1029 

2023-07-07 15:03:08.214 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.214 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.214 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.214 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.214 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.214 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Devarige Thailaabhisheka"  sevaId=  1029 

2023-07-07 15:03:08.214 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1029 

2023-07-07 15:03:08.214 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1029 

2023-07-07 15:03:08.214 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.214 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pavamaana Homa" 

2023-07-07 15:03:08.214 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.214 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.214 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1030 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.215 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pavamaana Homa"  sevaId=  1030 

2023-07-07 15:03:08.215 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1030 

2023-07-07 15:03:08.215 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1030 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Gana Homa" 

2023-07-07 15:03:08.215 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.215 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1031 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.215 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Gana Homa"  sevaId=  1031 

2023-07-07 15:03:08.215 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1031 

2023-07-07 15:03:08.215 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1031 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mruthyunjaya Homa" 

2023-07-07 15:03:08.215 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.215 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.215 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1032 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.216 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mruthyunjaya Homa"  sevaId=  1032 

2023-07-07 15:03:08.216 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1032 

2023-07-07 15:03:08.216 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1032 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rudraabhisheka" 

2023-07-07 15:03:08.216 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.216 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1033 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.216 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rudraabhisheka"  sevaId=  1033 

2023-07-07 15:03:08.216 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1033 

2023-07-07 15:03:08.216 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1033 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Sampurna Seva" 

2023-07-07 15:03:08.216 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.216 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2001 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.216 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.216 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Sampurna Seva"  sevaId=  2001 

2023-07-07 15:03:08.216 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2001 

2023-07-07 15:03:08.216 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2001 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Anna Santharpane Seva" 

2023-07-07 15:03:08.217 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.217 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2002 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.217 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Anna Santharpane Seva"  sevaId=  2002 

2023-07-07 15:03:08.217 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2002 

2023-07-07 15:03:08.217 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2002 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva(Huvina Alankara)" 

2023-07-07 15:03:08.217 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.217 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2003 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.217 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva(Huvina Alankara)"  sevaId=  2003 

2023-07-07 15:03:08.217 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2003 

2023-07-07 15:03:08.217 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2003 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva" 

2023-07-07 15:03:08.217 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.217 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2004 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.217 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.217 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva"  sevaId=  2004 

2023-07-07 15:03:08.218 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2004 

2023-07-07 15:03:08.218 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2004 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Noothana Vastra Seva" 

2023-07-07 15:03:08.218 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.218 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2005 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.218 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Noothana Vastra Seva"  sevaId=  2005 

2023-07-07 15:03:08.218 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2005 

2023-07-07 15:03:08.218 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2005 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva seva" 

2023-07-07 15:03:08.218 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.218 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2006 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.218 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva seva"  sevaId=  2006 

2023-07-07 15:03:08.218 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2006 

2023-07-07 15:03:08.218 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2006 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakabhisheka Seva" 

2023-07-07 15:03:08.218 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.218 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2007 

2023-07-07 15:03:08.218 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.219 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakabhisheka Seva"  sevaId=  2007 

2023-07-07 15:03:08.219 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2007 

2023-07-07 15:03:08.219 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2007 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Hasthodaka Seva(Prathidina)" 

2023-07-07 15:03:08.219 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.219 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2009 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.219 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Hasthodaka Seva(Prathidina)"  sevaId=  2009 

2023-07-07 15:03:08.219 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2009 

2023-07-07 15:03:08.219 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2009 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "MahaPooje" 

2023-07-07 15:03:08.219 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.219 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2010 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.219 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "MahaPooje"  sevaId=  2010 

2023-07-07 15:03:08.219 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2010 

2023-07-07 15:03:08.219 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2010 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.219 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ashtothara Seva(Prathidina)" 

2023-07-07 15:03:08.219 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.220 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2011 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.220 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ashtothara Seva(Prathidina)"  sevaId=  2011 

2023-07-07 15:03:08.220 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2011 

2023-07-07 15:03:08.220 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2011 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Paadakaradhane" 

2023-07-07 15:03:08.220 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.220 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2012 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.220 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Paadakaradhane"  sevaId=  2012 

2023-07-07 15:03:08.220 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2012 

2023-07-07 15:03:08.220 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2012 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "GanaHoma" 

2023-07-07 15:03:08.220 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.220 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2013 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.220 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "GanaHoma"  sevaId=  2013 

2023-07-07 15:03:08.220 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2013 

2023-07-07 15:03:08.220 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2013 

2023-07-07 15:03:08.220 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-07 15:03:08.221 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "PhalaPanchamrutha Seva" 

2023-07-07 15:03:08.221 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-07 15:03:08.221 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-07 15:03:08.221 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2014 

2023-07-07 15:03:08.221 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-07 15:03:08.221 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-07 15:03:08.221 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-07 15:03:08.221 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-07 15:03:08.221 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-07 15:03:08.221 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "PhalaPanchamrutha Seva"  sevaId=  2014 

2023-07-07 15:03:08.221 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2014 

2023-07-07 15:03:08.221 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2014 

2023-07-07 15:03:08.221 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-07 15:03:08.221 DBG default: void SevaTypeJsonProcessor::printSevasNames() 

2023-07-07 15:03:08.221 DBG default: 1001 :  "Udayaasthamaana Seva" , 1001 , 1 , 1000 , 5000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1002 :  "Sarva Seva" , 1002 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1003 :  "Sarva Samarpana Seva" , 1003 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1004 :  "Kanakaabhisheka" , 1004 , 1 , 1000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1005 :  "Godhana" , 1005 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1006 :  "Mahaa Pooja" , 1006 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1007 :  "Ksheeraabhisheka" , 1007 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1008 :  "Madhu Abhisheka" , 1008 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1010 :  "Yella Homagala Seva" , 1010 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1011 :  "Naivedhya/Hasthodaka" , 1011 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1012 :  "Phala - Panchaamrutha" , 1012 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1013 :  "Ganapathi Abhisheka" , 1013 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1014 :  "Nagadevara Abhisheka" , 1014 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1015 :  "Navagraha Abhisheka" , 1015 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1016 :  "Rathothsava" , 1016 , 1 , 1000 , 1000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1017 :  "Huggi Naivedhya" , 1017 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1018 :  "Pongal Naivedhya" , 1018 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1019 :  "Grahana Shanthi" , 1019 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1020 :  "Kaarthika - Rathothsava" , 1020 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1021 :  "Kaarthika Seva" , 1021 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1022 :  "Sri Sathya Narayana Pooja" , 1022 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1023 :  "Tulsi Archane" , 1023 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1024 :  "Chataka Shraadha" , 1024 , 1 , 1000 , 600 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1025 :  "Sankalpa Shraadha" , 1025 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1026 :  "Vaahana Pooja" , 1026 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1027 :  "Archane Seva" , 1027 , 1 , 1000 , 25 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.221 DBG default: 1028 :  "Lakshmi Pooja" , 1028 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 1029 :  "Navagraha Devarige Thailaabhisheka" , 1029 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 1030 :  "Pavamaana Homa" , 1030 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 1031 :  "Gana Homa" , 1031 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 1032 :  "Mruthyunjaya Homa" , 1032 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 1033 :  "Rudraabhisheka" , 1033 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 2001 :  "Ondu Dinada Sampurna Seva" , 2001 , 1 , 2000 , 25001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 2002 :  "Ondu Dinada Anna Santharpane Seva" , 2002 , 1 , 2000 , 20001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 2003 :  "Alankara Seva(Huvina Alankara)" , 2003 , 1 , 2000 , 10001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 2004 :  "Alankara Seva" , 2004 , 1 , 2000 , 5001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 2005 :  "Noothana Vastra Seva" , 2005 , 1 , 2000 , 4000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 2006 :  "Sarva seva" , 2006 , 1 , 2000 , 2501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 2007 :  "Kanakabhisheka Seva" , 2007 , 1 , 2000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 2009 :  "Hasthodaka Seva(Prathidina)" , 2009 , 1 , 2000 , 1001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 2010 :  "MahaPooje" , 2010 , 1 , 2000 , 800 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 2011 :  "Ashtothara Seva(Prathidina)" , 2011 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 2012 :  "Paadakaradhane" , 2012 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 2013 :  "GanaHoma" , 2013 , 1 , 2000 , 101 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: 2014 :  "PhalaPanchamrutha Seva" , 2014 , 1 , 2000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-07 15:03:08.222 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-07 15:03:08.222 DBG default: Creating the SevaTypeNamesDataModel  

2023-07-07 15:03:08.222 DBG default: SevaBookingConformationDataModel::SevaBookingConformationDataModel(QObject*) 

2023-07-07 15:03:08.222 DBG default: JsonWriter::JsonWriter(QObject*) 

2023-07-07 15:03:08.222 DBG default: SevaTypeNamesDataModel::SevaTypeNamesDataModel(QObject*) 

2023-07-07 15:03:08.222 DBG default: void SevaTypeNamesDataModel::connectSignals() 

2023-07-07 15:03:08.222 DBG default: bool SevaTypeNamesDataModel::querySevaTypes() 

2023-07-07 15:03:08.222 DBG default: bool DBInterface::querySevaType() 

2023-07-07 15:03:08.222 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.222 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.222 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1 

2023-07-07 15:03:08.222 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.222 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.222 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2 

2023-07-07 15:03:08.222 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.222 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.222 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 3 

2023-07-07 15:03:08.222 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.222 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.222 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 4 

2023-07-07 15:03:08.222 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.222 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.222 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 5 

2023-07-07 15:03:08.222 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 6 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 7 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 8 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 9 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 10 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 11 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 12 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 13 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 14 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 15 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 16 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 0 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 18 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 19 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 20 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 25 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 22 

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.223 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1000 

2023-07-07 15:03:08.224 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.224 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2000 

2023-07-07 15:03:08.224 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-07 15:03:08.224 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 26 

2023-07-07 15:03:08.224 DBG default: bool DBInterface::querySevaType() querying seva type done 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::querySevaNames() 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka"  Type = 1  SevaID = 2 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka"  Type = 1  SevaID = 3 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dwadashi Hasthodaka"  Type = 1  SevaID = 4 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi Homa"  Type = 9  SevaID = 5 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))), QMap((5, SevaName(0x5778890))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Panchamrutha/Abhisheka"  Type = 1  SevaID = 6 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))), QMap((5, SevaName(0x5778890))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Samanya Kanike"  Type = 1  SevaID = 7 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))), QMap((5, SevaName(0x5778890))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shop Kanike"  Type = 11  SevaID = 9 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))), QMap((5, SevaName(0x5778890))), QMap((9, SevaName(0x57788e0))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya thaila seva"  Type = 9  SevaID = 10 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))), QMap((9, SevaName(0x57788e0))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Building Fund"  Type = 12  SevaID = 11 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankar Pankthi"  Type = 4  SevaID = 12 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))), QMap((12, SevaName(0x5778b10))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Aradhna Kanike"  Type = 4  SevaID = 13 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadhana "  Type = 4  SevaID = 14 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hundi Collections"  Type = 13  SevaID = 15 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Khara Huggi"  Type = 8  SevaID = 16 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sweet Huggi"  Type = 8  SevaID = 17 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thatte Hasthodaka"  Type = 1  SevaID = 18 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Advance Recovered"  Type = 9  SevaID = 19 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PP - Rent"  Type = 14  SevaID = 20 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Annadana Seva"  Type = 3  SevaID = 23 

2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((23, SevaName(0x5778b60))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.224 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa"  Type = 3  SevaID = 24 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa Sankalp"  Type = 3  SevaID = 25 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachna Seva-All days"  Type = 3  SevaID = 26 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachana seva- 1 day"  Type = 3  SevaID = 27 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami  Annadana Sankalpa Seva"  Type = 3  SevaID = 28 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Hoovina Alankara seva"  Type = 3  SevaID = 29 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navmi Sarva seva"  Type = 3  SevaID = 30 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sumadhwavijaya Parayana seva"  Type = 3  SevaID = 31 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Prakarosthava"  Type = 3  SevaID = 34 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Seva"  Type = 3  SevaID = 35 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Gruha Padapooja"  Type = 3  SevaID = 36 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Serva Seva"  Type = 1  SevaID = 37 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Kanike"  Type = 3  SevaID = 38 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Annadana seva "  Type = 3  SevaID = 39 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pandith Sanman"  Type = 3  SevaID = 40 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M  Navami Panchamurtha "  Type = 3  SevaID = 41 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Shanthi Homa"  Type = 15  SevaID = 42 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Padapooja"  Type = 3  SevaID = 43 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Madhu Abhiseka"  Type = 3  SevaID = 44 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gopaladasara Aradhane"  Type = 16  SevaID = 45 

2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.226 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Additional Sweets"  Type = 9  SevaID = 46 

2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina alankara Seva"  Type = 1  SevaID = 47 

2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prasada Seve"  Type = 1  SevaID = 48 

2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka- 2 Hasthodaka"  Type = 1  SevaID = 49 

2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sathyanarayana Pooje"  Type = 10  SevaID = 50 

2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "AYUSH HOMA"  Type = 15  SevaID = 51 

2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILA ABHYANJANA"  Type = 9  SevaID = 52 

2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharana"  Type = 9  SevaID = 53 

2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI  SAMPOORNA SEVE"  Type = 2  SevaID = 54 

2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI SANKLAPA SEVE"  Type = 2  SevaID = 55 

2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.227 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA"  Type = 2  SevaID = 56 

2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA SANKALPA"  Type = 2  SevaID = 57 

2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SITA RAMA KALYANOTSVA"  Type = 2  SevaID = 58 

2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMA KALYANOTSAVA SANKALPAA"  Type = 2  SevaID = 59 

2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA PRAVACHANA SEVE "  Type = 2  SevaID = 60 

2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "YELLA DINAGALA PRAVACHANA SEVE"  Type = 2  SevaID = 61 

2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "HOOVINA ALANKARA"  Type = 2  SevaID = 62 

2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi"  Type = 2  SevaID = 63 

2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA SANJE PRASADA SEVE"  Type = 2  SevaID = 64 

2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.228 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "VISHESHA PANCHAMRUTA"  Type = 2  SevaID = 65 

2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRAKAROTSVA"  Type = 2  SevaID = 66 

2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILABYAJANA SEVE"  Type = 2  SevaID = 67 

2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ARCHANE"  Type = 2  SevaID = 68 

2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))))
2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Raghavendra Swamy Aradhane"  Type = 16  SevaID = 69 

2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))))
2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Abhisheka Madhu/Panchamrutha"  Type = 4  SevaID = 70 

2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))))
2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtottara"  Type = 4  SevaID = 71 

2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))))
2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara"  Type = 4  SevaID = 72 

2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))))
2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 4  SevaID = 73 

2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))))
2023-07-07 15:03:08.229 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Deepalankarana Seve"  Type = 7  SevaID = 74 

2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))))
2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tarakari Seve"  Type = 1  SevaID = 75 

2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))))
2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seva"  Type = 4  SevaID = 76 

2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))))
2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Bhiksha kanike"  Type = 18  SevaID = 77 

2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))))
2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "hastodaka P P"  Type = 5  SevaID = 78 

2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))))
2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka P P"  Type = 5  SevaID = 79 

2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))))
2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa  P P"  Type = 5  SevaID = 80 

2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))))
2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Nanda Deepa for 9 days"  Type = 6  SevaID = 81 

2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))))
2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Nanda Deepa for  9 days"  Type = 6  SevaID = 82 

2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))))
2023-07-07 15:03:08.230 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Deepa for 1 day"  Type = 6  SevaID = 83 

2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))))
2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Deepa for 1 day"  Type = 6  SevaID = 84 

2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))))
2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seve"  Type = 1  SevaID = 85 

2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))))
2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadana Kanike"  Type = 1  SevaID = 86 

2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))))
2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana"  Type = 19  SevaID = 87 

2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))))
2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana for one day"  Type = 19  SevaID = 88 

2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana Seva for one day"  Type = 6  SevaID = 89 

2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nitya Deepaseve"  Type = 7  SevaID = 90 

2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjana"  Type = 7  SevaID = 91 

2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.231 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Seve"  Type = 7  SevaID = 92 

2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Laksha Deepostava"  Type = 7  SevaID = 93 

2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Pratyekavagi "  Type = 7  SevaID = 94 

2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulasi Damodara Vivaha sankalpa"  Type = 7  SevaID = 95 

2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sampoorna Seve "  Type = 7  SevaID = 96 

2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sankalpa Seve "  Type = 7  SevaID = 97 

2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Hoovina Alankara "  Type = 7  SevaID = 98 

2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha Abhisheka "  Type = 7  SevaID = 99 

2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.232 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vijaya Dasara Aradhane"  Type = 16  SevaID = 100 

2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarotsva"  Type = 1  SevaID = 101 

2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 0  SevaID = 102 

2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 1  SevaID = 103 

2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtotthara Kanike"  Type = 1  SevaID = 104 

2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Santhana Gopala Krishna Homa"  Type = 15  SevaID = 105 

2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamana Homa"  Type = 15  SevaID = 106 

2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))))
2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shashwatha Seva Pooje"  Type = 20  SevaID = 107 

2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))))
2023-07-07 15:03:08.233 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Regular"  Type = 1  SevaID = 108 

2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))))
2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Seva"  Type = 8  SevaID = 109 

2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))))
2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mosaranna Naivedya"  Type = 9  SevaID = 110 

2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))))
2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Poorna Pragna Hall Kanike"  Type = 14  SevaID = 111 

2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))), QMap((50, SevaName(0x57dee60))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))))
2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pratyeka Sathyanarayana Pooja"  Type = 10  SevaID = 112 

2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))))
2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chikka Adige"  Type = 9  SevaID = 113 

2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))))
2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha"  Type = 21  SevaID = 114 

2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))))
2023-07-07 15:03:08.234 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjan seve"  Type = 21  SevaID = 115 

2023-07-07 15:03:08.235 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))))
2023-07-07 15:03:08.235 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri SeethaRamanjaneyarige Nuthana Vastra Dharane pratidevarige."  Type = 21  SevaID = 116 

2023-07-07 15:03:08.235 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))))
2023-07-07 15:03:08.235 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 21  SevaID = 117 

2023-07-07 15:03:08.235 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))))
2023-07-07 15:03:08.235 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane"  Type = 21  SevaID = 118 

2023-07-07 15:03:08.235 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))))
2023-07-07 15:03:08.235 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara seve"  Type = 21  SevaID = 119 

2023-07-07 15:03:08.235 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))))
2023-07-07 15:03:08.235 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ramanavami Kanike"  Type = 2  SevaID = 120 

2023-07-07 15:03:08.235 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))))
2023-07-07 15:03:08.235 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Villeydhele Hara"  Type = 1  SevaID = 121 

2023-07-07 15:03:08.236 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))))
2023-07-07 15:03:08.236 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gandha Lepana "  Type = 22  SevaID = 122 

2023-07-07 15:03:08.236 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))))
2023-07-07 15:03:08.236 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phalahara Pooja"  Type = 9  SevaID = 123 

2023-07-07 15:03:08.236 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))))
2023-07-07 15:03:08.236 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 15  SevaID = 124 

2023-07-07 15:03:08.236 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))))
2023-07-07 15:03:08.236 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Monthly"  Type = 1  SevaID = 125 

2023-07-07 15:03:08.236 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))))
2023-07-07 15:03:08.236 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Jayathirtha Aradhane Kanike"  Type = 16  SevaID = 126 

2023-07-07 15:03:08.236 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))))
2023-07-07 15:03:08.236 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Oldarticals sold"  Type = 9  SevaID = 127 

2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))))
2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Udayaasthamaana Seva"  Type = 1000  SevaID = 1001 

2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))))
2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Seva"  Type = 1000  SevaID = 1002 

2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))))
2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Samarpana Seva"  Type = 1000  SevaID = 1003 

2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))))
2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakaabhisheka"  Type = 1000  SevaID = 1004 

2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))))
2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Godhana"  Type = 1000  SevaID = 1005 

2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))))
2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mahaa Pooja"  Type = 1000  SevaID = 1006 

2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))))
2023-07-07 15:03:08.237 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ksheeraabhisheka"  Type = 1000  SevaID = 1007 

2023-07-07 15:03:08.238 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))))
2023-07-07 15:03:08.238 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Madhu Abhisheka"  Type = 1000  SevaID = 1008 

2023-07-07 15:03:08.238 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))))
2023-07-07 15:03:08.238 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Yella Homagala Seva"  Type = 1000  SevaID = 1010 

2023-07-07 15:03:08.238 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))))
2023-07-07 15:03:08.238 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Naivedhya/Hasthodaka"  Type = 1000  SevaID = 1011 

2023-07-07 15:03:08.238 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))))
2023-07-07 15:03:08.238 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phala - Panchaamrutha"  Type = 1000  SevaID = 1012 

2023-07-07 15:03:08.238 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))))
2023-07-07 15:03:08.238 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ganapathi Abhisheka"  Type = 1000  SevaID = 1013 

2023-07-07 15:03:08.238 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))))
2023-07-07 15:03:08.238 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nagadevara Abhisheka"  Type = 1000  SevaID = 1014 

2023-07-07 15:03:08.239 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))))
2023-07-07 15:03:08.239 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Abhisheka"  Type = 1000  SevaID = 1015 

2023-07-07 15:03:08.239 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))))
2023-07-07 15:03:08.239 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rathothsava"  Type = 1000  SevaID = 1016 

2023-07-07 15:03:08.239 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))))
2023-07-07 15:03:08.239 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Naivedhya"  Type = 1000  SevaID = 1017 

2023-07-07 15:03:08.239 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))))
2023-07-07 15:03:08.239 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pongal Naivedhya"  Type = 1000  SevaID = 1018 

2023-07-07 15:03:08.239 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))))
2023-07-07 15:03:08.239 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi"  Type = 1000  SevaID = 1019 

2023-07-07 15:03:08.239 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))))
2023-07-07 15:03:08.239 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika - Rathothsava"  Type = 1000  SevaID = 1020 

2023-07-07 15:03:08.240 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))))
2023-07-07 15:03:08.240 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika Seva"  Type = 1000  SevaID = 1021 

2023-07-07 15:03:08.240 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))))
2023-07-07 15:03:08.240 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri Sathya Narayana Pooja"  Type = 1000  SevaID = 1022 

2023-07-07 15:03:08.241 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))))
2023-07-07 15:03:08.241 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulsi Archane"  Type = 1000  SevaID = 1023 

2023-07-07 15:03:08.241 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))))
2023-07-07 15:03:08.241 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka Shraadha"  Type = 1000  SevaID = 1024 

2023-07-07 15:03:08.241 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))))
2023-07-07 15:03:08.241 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa Shraadha"  Type = 1000  SevaID = 1025 

2023-07-07 15:03:08.242 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))))
2023-07-07 15:03:08.242 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vaahana Pooja"  Type = 1000  SevaID = 1026 

2023-07-07 15:03:08.242 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))))
2023-07-07 15:03:08.242 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane Seva"  Type = 1000  SevaID = 1027 

2023-07-07 15:03:08.242 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))))
2023-07-07 15:03:08.242 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Lakshmi Pooja"  Type = 1000  SevaID = 1028 

2023-07-07 15:03:08.242 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))))
2023-07-07 15:03:08.242 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Devarige Thailaabhisheka"  Type = 1000  SevaID = 1029 

2023-07-07 15:03:08.242 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))))
2023-07-07 15:03:08.242 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamaana Homa"  Type = 1000  SevaID = 1030 

2023-07-07 15:03:08.243 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))))
2023-07-07 15:03:08.243 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gana Homa"  Type = 1000  SevaID = 1031 

2023-07-07 15:03:08.243 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))))
2023-07-07 15:03:08.243 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mruthyunjaya Homa"  Type = 1000  SevaID = 1032 

2023-07-07 15:03:08.243 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))))
2023-07-07 15:03:08.243 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rudraabhisheka"  Type = 1000  SevaID = 1033 

2023-07-07 15:03:08.243 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))))
2023-07-07 15:03:08.243 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ABCD"  Type = 1  SevaID = 2000 

2023-07-07 15:03:08.243 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))))
2023-07-07 15:03:08.243 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Sampurna Seva"  Type = 2000  SevaID = 2001 

2023-07-07 15:03:08.244 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))))
2023-07-07 15:03:08.244 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Anna Santharpane Seva"  Type = 2000  SevaID = 2002 

2023-07-07 15:03:08.244 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))))
2023-07-07 15:03:08.244 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva(Huvina Alankara)"  Type = 2000  SevaID = 2003 

2023-07-07 15:03:08.244 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))))
2023-07-07 15:03:08.244 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva"  Type = 2000  SevaID = 2004 

2023-07-07 15:03:08.245 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))))
2023-07-07 15:03:08.245 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Noothana Vastra Seva"  Type = 2000  SevaID = 2005 

2023-07-07 15:03:08.245 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))))
2023-07-07 15:03:08.245 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva seva"  Type = 2000  SevaID = 2006 

2023-07-07 15:03:08.245 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))(2006, SevaName(0x57f2698))))
2023-07-07 15:03:08.245 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakabhisheka Seva"  Type = 2000  SevaID = 2007 

2023-07-07 15:03:08.245 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))(2006, SevaName(0x57f2698))(2007, SevaName(0x57f0898))))
2023-07-07 15:03:08.245 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Seva(Prathidina)"  Type = 2000  SevaID = 2009 

2023-07-07 15:03:08.245 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))(2006, SevaName(0x57f2698))(2007, SevaName(0x57f0898))(2009, SevaName(0x57f0b68))))
2023-07-07 15:03:08.245 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "MahaPooje"  Type = 2000  SevaID = 2010 

2023-07-07 15:03:08.246 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))(2006, SevaName(0x57f2698))(2007, SevaName(0x57f0898))(2009, SevaName(0x57f0b68))(2010, SevaName(0x57f0f78))))
2023-07-07 15:03:08.246 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtothara Seva(Prathidina)"  Type = 2000  SevaID = 2011 

2023-07-07 15:03:08.246 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))(2006, SevaName(0x57f2698))(2007, SevaName(0x57f0898))(2009, SevaName(0x57f0b68))(2010, SevaName(0x57f0f78))(2011, SevaName(0x57f0a78))))
2023-07-07 15:03:08.246 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Paadakaradhane"  Type = 2000  SevaID = 2012 

2023-07-07 15:03:08.246 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))(2006, SevaName(0x57f2698))(2007, SevaName(0x57f0898))(2009, SevaName(0x57f0b68))(2010, SevaName(0x57f0f78))(2011, SevaName(0x57f0a78))(2012, SevaName(0x57f0988))))
2023-07-07 15:03:08.246 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 2000  SevaID = 2013 

2023-07-07 15:03:08.246 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))(2006, SevaName(0x57f2698))(2007, SevaName(0x57f0898))(2009, SevaName(0x57f0b68))(2010, SevaName(0x57f0f78))(2011, SevaName(0x57f0a78))(2012, SevaName(0x57f0988))(2013, SevaName(0x57f0de8))))
2023-07-07 15:03:08.246 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PhalaPanchamrutha Seva"  Type = 2000  SevaID = 2014 

2023-07-07 15:03:08.246 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))(2006, SevaName(0x57f2698))(2007, SevaName(0x57f0898))(2009, SevaName(0x57f0b68))(2010, SevaName(0x57f0f78))(2011, SevaName(0x57f0a78))(2012, SevaName(0x57f0988))(2013, SevaName(0x57f0de8))(2014, SevaName(0x57f0938))))
2023-07-07 15:03:08.246 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ChatakaN"  Type = 1  SevaID = 2015 

2023-07-07 15:03:08.247 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))(2015, SevaName(0x57f0fc8))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))(2006, SevaName(0x57f2698))(2007, SevaName(0x57f0898))(2009, SevaName(0x57f0b68))(2010, SevaName(0x57f0f78))(2011, SevaName(0x57f0a78))(2012, SevaName(0x57f0988))(2013, SevaName(0x57f0de8))(2014, SevaName(0x57f0938))))
2023-07-07 15:03:08.247 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SankalpaN"  Type = 1  SevaID = 2016 

2023-07-07 15:03:08.247 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))(2015, SevaName(0x57f0fc8))(2016, SevaName(0x57f0ac8))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))(2006, SevaName(0x57f2698))(2007, SevaName(0x57f0898))(2009, SevaName(0x57f0b68))(2010, SevaName(0x57f0f78))(2011, SevaName(0x57f0a78))(2012, SevaName(0x57f0988))(2013, SevaName(0x57f0de8))(2014, SevaName(0x57f0938))))
2023-07-07 15:03:08.247 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Poornapragna Hall Kanike N "  Type = 14  SevaID = 2017 

2023-07-07 15:03:08.247 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x57dfe50))), QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))(2015, SevaName(0x57f0fc8))(2016, SevaName(0x57f0ac8))), QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))), QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))), QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))), QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))), QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))), QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))), QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))), QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))), QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))), QMap((9, SevaName(0x57788e0))), QMap((11, SevaName(0x5778ac0))), QMap((15, SevaName(0x57786b0))), QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))(2017, SevaName(0x57f09d8))), QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))), QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))), QMap((77, SevaName(0x57dfb30))), QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))), QMap((107, SevaName(0x57e0170))), QMap((114, SevaName(0x57e0260))(115, SevaName(0x57e0580))(116, SevaName(0x57dfd60))(117, SevaName(0x57e03a0))(118, SevaName(0x57e03f0))(119, SevaName(0x57dfcc0))), QMap((122, SevaName(0x57e0440))), QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))), QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))(2006, SevaName(0x57f2698))(2007, SevaName(0x57f0898))(2009, SevaName(0x57f0b68))(2010, SevaName(0x57f0f78))(2011, SevaName(0x57f0a78))(2012, SevaName(0x57f0988))(2013, SevaName(0x57f0de8))(2014, SevaName(0x57f0938))))
2023-07-07 15:03:08.247 DBG default: bool DBInterface::querySevaNames() querying seva names done 

2023-07-07 15:03:08.247 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:08.247 DBG default: UserManagement::UserManagement(QObject*) 

2023-07-07 15:03:08.247 DBG default: The role number recieved -1 

2023-07-07 15:03:08.247 DBG default: SevaDetailsTableView::SevaDetailsTableView(QObject*) 

2023-07-07 15:03:08.252 DBG default: hello suman 

2023-07-07 15:03:08.252 DBG default: AccountReportModel::AccountReportModel(QObject*) 

2023-07-07 15:03:08.252 DBG default: BookingReportModel::BookingReportModel(QObject*) 

2023-07-07 15:03:08.252 DBG default: AccountReportDateRangeModel::AccountReportDateRangeModel(QObject*) 

2023-07-07 15:03:08.252 DBG default: AccountReportMonthWiseModel::AccountReportMonthWiseModel(QObject*) 

2023-07-07 15:03:08.252 DBG default: BookingReportDateRangeModel::BookingReportDateRangeModel(QObject*) 

2023-07-07 15:03:08.252 DBG default: The connect status true 

2023-07-07 15:03:08.252 DBG default: BookingReportMonthWiseModel::BookingReportMonthWiseModel(QObject*) 

2023-07-07 15:03:08.252 DBG default: AccountFullReportModel::AccountFullReportModel(QObject*) 

2023-07-07 15:03:08.252 DBG default: AccountReportCSVProcessor::AccountReportCSVProcessor(QObject*) 

2023-07-07 15:03:08.252 DBG default: SevaBookingTableModel::SevaBookingTableModel(QObject*) 

2023-07-07 15:03:08.252 DBG default: SevaBookingSearchModel::SevaBookingSearchModel(QObject*) 

2023-07-07 15:03:08.252 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-07 15:03:08.252 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-07 15:03:08.252 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-07 15:03:08.252 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-07 15:03:08.252 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Date = 7  Mon = 7  Year = 2023
2023-07-07 15:03:08.252 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-07 15:03:08.252 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-07 15:03:08.252 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "1" 

2023-07-07 15:03:08.252 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-07 15:03:08.252 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-07 15:03:08.252 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "2" 

2023-07-07 15:03:08.252 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-07 15:03:08.252 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-07 15:03:08.252 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "3" 

2023-07-07 15:03:08.252 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-07 15:03:08.252 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-07 15:03:08.252 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "4" 

2023-07-07 15:03:08.253 WRN default: QSqlQuery::value: not positioned on a valid record
2023-07-07 15:03:08.253 DBG default: int DBInterface::getLastReceiptNumber()  Size =  -1  receiptNo ID =  4  Value =  QVariant(Invalid) 

2023-07-07 15:03:08.253 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Last ReceiptNo from DB = 5  Generated = "2023_7_0005" 

2023-07-07 15:03:08.253 DBG default: QString SevaViewProxy::getNextReceiptNumber()  r number =  "2023_7_0005" 

2023-07-07 15:03:08.253 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-07 15:03:08.253 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-07-07 15:03:08.253 DBG default: SevaCountOnDateModel::SevaCountOnDateModel(QObject*) 

2023-07-07 15:03:08.253 DBG default: hello suman 

2023-07-07 15:03:08.253 DBG default: saveVoucher::saveVoucher(QObject*) 

2023-07-07 15:03:08.253 DBG default: VoucherNumber::VoucherNumber() 

2023-07-07 15:03:08.253 DBG default: virtual QString VoucherNumber::getNextVoucherNumber() 

2023-07-07 15:03:08.253 DBG default: int DBInterface::getLastVoucherNumber() 

2023-07-07 15:03:08.253 DBG default: 3 

2023-07-07 15:03:08.253 DBG default: "4" 

2023-07-07 15:03:08.253 DBG default: VoucherReportModel::VoucherReportModel(QObject*) 

2023-07-07 15:03:08.253 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-07 15:03:08.253 DBG default: QString TrustListModel::getDataLocation() 

2023-07-07 15:03:08.253 DBG qml: str1 = --D:/TempleFiles_suman/Temple-main/bins/Config/Hubablli
2023-07-07 15:03:08.253 DBG qml: str2 = --D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli
2023-07-07 15:03:08.296 DBG qml: The Page Number=== 0
2023-07-07 15:03:08.296 DBG qml: The page number is 0
2023-07-07 15:03:08.296 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 15:03:08.296 DBG qml: Screen screenWidth size =1920
2023-07-07 15:03:08.296 DBG qml: Screen screenHeight size =1000
2023-07-07 15:03:08.296 WRN default: qrc:/ui/Login.qml:37:13: Unable to assign [undefined] to bool
2023-07-07 15:03:08.296 WRN default: qrc:/ui/Login.qml:44:13: Unable to assign [undefined] to bool
2023-07-07 15:03:08.296 WRN default: qrc:/ui/Login.qml:80:17: Unable to assign [undefined] to bool
2023-07-07 15:03:08.296 DBG default: int TrustListModel::getTrustListSize() 

2023-07-07 15:03:11.653 WRN default: qrc:/ui/Login.qml:128:17: QML QQuickTextInput*: Binding loop detected for property "focus"
2023-07-07 15:03:16.278 DBG default: void UserManagement::authorize(QString, QString) "admin" "admin123" 

2023-07-07 15:03:16.278 DBG qml: Credentials are correct
2023-07-07 15:03:16.278 DBG qml: Wrong credentials 0
2023-07-07 15:03:16.302 DBG qml: the accounts enable false
2023-07-07 15:03:16.302 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 15:03:16.302 DBG qml: Screen screenWidth size =1920
2023-07-07 15:03:16.302 DBG qml: Screen screenHeight size =1000
2023-07-07 15:03:16.302 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-07 15:03:16.303 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-07 15:03:16.303 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-07 15:03:16.303 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-07 15:03:16.303 DBG default: The role number is 1 

2023-07-07 15:03:16.303 DBG default: void UserManagement::user_Recieved(int, QString) 

2023-07-07 15:03:16.303 DBG default: The role number recieved 1 

2023-07-07 15:03:17.092 DBG qml: Seva Booking Button Clicked
2023-07-07 15:03:17.092 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.093 DBG default: bool SevaTypeViewModel::init() 

2023-07-07 15:03:17.093 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.093 DBG default: bool SevaTypeViewModel::init()  Number of Seva Types = 25 

2023-07-07 15:03:17.093 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.093 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.093 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.093 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.093 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-07 15:03:17.093 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.093 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.093 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.093 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.093 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 15:03:17.093 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x57dfe50))) 
(SevaName(0x57dfe50)) 

2023-07-07 15:03:17.093 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57dfe50)) 

2023-07-07 15:03:17.093 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 15:03:17.093 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x57dfe50))) 
(SevaName(0x57dfe50)) 

2023-07-07 15:03:17.093 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.094 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.094 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.094 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.094 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1 

2023-07-07 15:03:17.094 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.094 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.094 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.094 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.094 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-07 15:03:17.094 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))(2015, SevaName(0x57f0fc8))(2016, SevaName(0x57f0ac8))) 
(SevaName(0x57789d0), SevaName(0x5778a70), SevaName(0x5778390), SevaName(0x57783e0), SevaName(0x5778430), SevaName(0x5778bb0), SevaName(0x57787f0), SevaName(0x57de910), SevaName(0x57de870), SevaName(0x57dea00), SevaName(0x57df2c0), SevaName(0x57df270), SevaName(0x57df400), SevaName(0x57e0120), SevaName(0x57dffe0), SevaName(0x57dff40), SevaName(0x57dfd10), SevaName(0x57e0030), SevaName(0x57dfdb0), SevaName(0x57f2558), SevaName(0x57f0fc8), SevaName(0x57f0ac8)) 

2023-07-07 15:03:17.094 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57789d0), SevaName(0x5778a70), SevaName(0x5778390), SevaName(0x57783e0), SevaName(0x5778430), SevaName(0x5778bb0), SevaName(0x57787f0), SevaName(0x57de910), SevaName(0x57de870), SevaName(0x57dea00), SevaName(0x57df2c0), SevaName(0x57df270), SevaName(0x57df400), SevaName(0x57e0120), SevaName(0x57dffe0), SevaName(0x57dff40), SevaName(0x57dfd10), SevaName(0x57e0030), SevaName(0x57dfdb0), SevaName(0x57f2558), SevaName(0x57f0fc8), SevaName(0x57f0ac8)) 

2023-07-07 15:03:17.094 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-07 15:03:17.094 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x57789d0))(3, SevaName(0x5778a70))(4, SevaName(0x5778390))(6, SevaName(0x57783e0))(7, SevaName(0x5778430))(18, SevaName(0x5778bb0))(37, SevaName(0x57787f0))(47, SevaName(0x57de910))(48, SevaName(0x57de870))(49, SevaName(0x57dea00))(75, SevaName(0x57df2c0))(85, SevaName(0x57df270))(86, SevaName(0x57df400))(101, SevaName(0x57e0120))(103, SevaName(0x57dffe0))(104, SevaName(0x57dff40))(108, SevaName(0x57dfd10))(121, SevaName(0x57e0030))(125, SevaName(0x57dfdb0))(2000, SevaName(0x57f2558))(2015, SevaName(0x57f0fc8))(2016, SevaName(0x57f0ac8))) 
(SevaName(0x57789d0), SevaName(0x5778a70), SevaName(0x5778390), SevaName(0x57783e0), SevaName(0x5778430), SevaName(0x5778bb0), SevaName(0x57787f0), SevaName(0x57de910), SevaName(0x57de870), SevaName(0x57dea00), SevaName(0x57df2c0), SevaName(0x57df270), SevaName(0x57df400), SevaName(0x57e0120), SevaName(0x57dffe0), SevaName(0x57dff40), SevaName(0x57dfd10), SevaName(0x57e0030), SevaName(0x57dfdb0), SevaName(0x57f2558), SevaName(0x57f0fc8), SevaName(0x57f0ac8)) 

2023-07-07 15:03:17.094 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.094 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.094 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.094 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.095 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 2 

2023-07-07 15:03:17.095 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.095 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.095 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.095 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.095 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-07-07 15:03:17.095 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))) 
(SevaName(0x57de8c0), SevaName(0x57de960), SevaName(0x57df1d0), SevaName(0x57df130), SevaName(0x57deaf0), SevaName(0x57ded70), SevaName(0x57de9b0), SevaName(0x57debe0), SevaName(0x57dec30), SevaName(0x57def50), SevaName(0x57decd0), SevaName(0x57defa0), SevaName(0x57df0e0), SevaName(0x57ded20), SevaName(0x57df090), SevaName(0x57dfc70)) 

2023-07-07 15:03:17.095 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57de8c0), SevaName(0x57de960), SevaName(0x57df1d0), SevaName(0x57df130), SevaName(0x57deaf0), SevaName(0x57ded70), SevaName(0x57de9b0), SevaName(0x57debe0), SevaName(0x57dec30), SevaName(0x57def50), SevaName(0x57decd0), SevaName(0x57defa0), SevaName(0x57df0e0), SevaName(0x57ded20), SevaName(0x57df090), SevaName(0x57dfc70)) 

2023-07-07 15:03:17.095 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-07-07 15:03:17.095 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x57de8c0))(55, SevaName(0x57de960))(56, SevaName(0x57df1d0))(57, SevaName(0x57df130))(58, SevaName(0x57deaf0))(59, SevaName(0x57ded70))(60, SevaName(0x57de9b0))(61, SevaName(0x57debe0))(62, SevaName(0x57dec30))(63, SevaName(0x57def50))(64, SevaName(0x57decd0))(65, SevaName(0x57defa0))(66, SevaName(0x57df0e0))(67, SevaName(0x57ded20))(68, SevaName(0x57df090))(120, SevaName(0x57dfc70))) 
(SevaName(0x57de8c0), SevaName(0x57de960), SevaName(0x57df1d0), SevaName(0x57df130), SevaName(0x57deaf0), SevaName(0x57ded70), SevaName(0x57de9b0), SevaName(0x57debe0), SevaName(0x57dec30), SevaName(0x57def50), SevaName(0x57decd0), SevaName(0x57defa0), SevaName(0x57df0e0), SevaName(0x57ded20), SevaName(0x57df090), SevaName(0x57dfc70)) 

2023-07-07 15:03:17.095 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.095 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.095 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.095 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.095 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 3 

2023-07-07 15:03:17.095 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.095 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.095 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.095 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.095 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-07-07 15:03:17.096 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))) 
(SevaName(0x5778b60), SevaName(0x5778c50), SevaName(0x5778570), SevaName(0x5778cf0), SevaName(0x5778980), SevaName(0x5778ca0), SevaName(0x5778840), SevaName(0x5778a20), SevaName(0x5778480), SevaName(0x57784d0), SevaName(0x5778520), SevaName(0x57787a0), SevaName(0x57dedc0), SevaName(0x57dee10), SevaName(0x57df180), SevaName(0x57de820), SevaName(0x57deaa0), SevaName(0x57df040)) 

2023-07-07 15:03:17.096 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5778b60), SevaName(0x5778c50), SevaName(0x5778570), SevaName(0x5778cf0), SevaName(0x5778980), SevaName(0x5778ca0), SevaName(0x5778840), SevaName(0x5778a20), SevaName(0x5778480), SevaName(0x57784d0), SevaName(0x5778520), SevaName(0x57787a0), SevaName(0x57dedc0), SevaName(0x57dee10), SevaName(0x57df180), SevaName(0x57de820), SevaName(0x57deaa0), SevaName(0x57df040)) 

2023-07-07 15:03:17.096 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-07-07 15:03:17.096 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x5778b60))(24, SevaName(0x5778c50))(25, SevaName(0x5778570))(26, SevaName(0x5778cf0))(27, SevaName(0x5778980))(28, SevaName(0x5778ca0))(29, SevaName(0x5778840))(30, SevaName(0x5778a20))(31, SevaName(0x5778480))(34, SevaName(0x57784d0))(35, SevaName(0x5778520))(36, SevaName(0x57787a0))(38, SevaName(0x57dedc0))(39, SevaName(0x57dee10))(40, SevaName(0x57df180))(41, SevaName(0x57de820))(43, SevaName(0x57deaa0))(44, SevaName(0x57df040))) 
(SevaName(0x5778b60), SevaName(0x5778c50), SevaName(0x5778570), SevaName(0x5778cf0), SevaName(0x5778980), SevaName(0x5778ca0), SevaName(0x5778840), SevaName(0x5778a20), SevaName(0x5778480), SevaName(0x57784d0), SevaName(0x5778520), SevaName(0x57787a0), SevaName(0x57dedc0), SevaName(0x57dee10), SevaName(0x57df180), SevaName(0x57de820), SevaName(0x57deaa0), SevaName(0x57df040)) 

2023-07-07 15:03:17.096 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.096 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.096 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.096 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.096 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 4 

2023-07-07 15:03:17.096 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.096 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.096 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.096 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.096 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-07-07 15:03:17.096 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))) 
(SevaName(0x5778b10), SevaName(0x5778930), SevaName(0x5778610), SevaName(0x57df810), SevaName(0x57df9a0), SevaName(0x57dfae0), SevaName(0x57df360), SevaName(0x57df4f0)) 

2023-07-07 15:03:17.096 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5778b10), SevaName(0x5778930), SevaName(0x5778610), SevaName(0x57df810), SevaName(0x57df9a0), SevaName(0x57dfae0), SevaName(0x57df360), SevaName(0x57df4f0)) 

2023-07-07 15:03:17.096 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-07-07 15:03:17.096 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x5778b10))(13, SevaName(0x5778930))(14, SevaName(0x5778610))(70, SevaName(0x57df810))(71, SevaName(0x57df9a0))(72, SevaName(0x57dfae0))(73, SevaName(0x57df360))(76, SevaName(0x57df4f0))) 
(SevaName(0x5778b10), SevaName(0x5778930), SevaName(0x5778610), SevaName(0x57df810), SevaName(0x57df9a0), SevaName(0x57dfae0), SevaName(0x57df360), SevaName(0x57df4f0)) 

2023-07-07 15:03:17.096 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.096 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.096 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.096 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.096 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 5 

2023-07-07 15:03:17.096 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.096 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.097 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.097 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.097 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-07-07 15:03:17.097 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))) 
(SevaName(0x57df310), SevaName(0x57df9f0), SevaName(0x57dfb80)) 

2023-07-07 15:03:17.097 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57df310), SevaName(0x57df9f0), SevaName(0x57dfb80)) 

2023-07-07 15:03:17.097 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-07-07 15:03:17.097 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x57df310))(79, SevaName(0x57df9f0))(80, SevaName(0x57dfb80))) 
(SevaName(0x57df310), SevaName(0x57df9f0), SevaName(0x57dfb80)) 

2023-07-07 15:03:17.097 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.097 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.097 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.097 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.097 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 6 

2023-07-07 15:03:17.097 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.097 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.097 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.097 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.097 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-07-07 15:03:17.097 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))) 
(SevaName(0x57df860), SevaName(0x57dfbd0), SevaName(0x57df6d0), SevaName(0x57df220), SevaName(0x57df540)) 

2023-07-07 15:03:17.097 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57df860), SevaName(0x57dfbd0), SevaName(0x57df6d0), SevaName(0x57df220), SevaName(0x57df540)) 

2023-07-07 15:03:17.097 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-07-07 15:03:17.097 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x57df860))(82, SevaName(0x57dfbd0))(83, SevaName(0x57df6d0))(84, SevaName(0x57df220))(89, SevaName(0x57df540))) 
(SevaName(0x57df860), SevaName(0x57dfbd0), SevaName(0x57df6d0), SevaName(0x57df220), SevaName(0x57df540)) 

2023-07-07 15:03:17.097 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.097 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.097 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.097 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.097 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 7 

2023-07-07 15:03:17.097 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.097 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.097 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.097 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.097 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-07-07 15:03:17.097 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))) 
(SevaName(0x57df4a0), SevaName(0x57df770), SevaName(0x57dfa40), SevaName(0x57df5e0), SevaName(0x57df590), SevaName(0x57df680), SevaName(0x57df7c0), SevaName(0x57df8b0), SevaName(0x57df950), SevaName(0x57dfef0), SevaName(0x57e05d0)) 

2023-07-07 15:03:17.097 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57df4a0), SevaName(0x57df770), SevaName(0x57dfa40), SevaName(0x57df5e0), SevaName(0x57df590), SevaName(0x57df680), SevaName(0x57df7c0), SevaName(0x57df8b0), SevaName(0x57df950), SevaName(0x57dfef0), SevaName(0x57e05d0)) 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x57df4a0))(90, SevaName(0x57df770))(91, SevaName(0x57dfa40))(92, SevaName(0x57df5e0))(93, SevaName(0x57df590))(94, SevaName(0x57df680))(95, SevaName(0x57df7c0))(96, SevaName(0x57df8b0))(97, SevaName(0x57df950))(98, SevaName(0x57dfef0))(99, SevaName(0x57e05d0))) 
(SevaName(0x57df4a0), SevaName(0x57df770), SevaName(0x57dfa40), SevaName(0x57df5e0), SevaName(0x57df590), SevaName(0x57df680), SevaName(0x57df7c0), SevaName(0x57df8b0), SevaName(0x57df950), SevaName(0x57dfef0), SevaName(0x57e05d0)) 

2023-07-07 15:03:17.098 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.098 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.098 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.098 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.098 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 8 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.098 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))) 
(SevaName(0x5778700), SevaName(0x5778c00), SevaName(0x57e0350)) 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5778700), SevaName(0x5778c00), SevaName(0x57e0350)) 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x5778700))(17, SevaName(0x5778c00))(109, SevaName(0x57e0350))) 
(SevaName(0x5778700), SevaName(0x5778c00), SevaName(0x57e0350)) 

2023-07-07 15:03:17.098 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.098 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.098 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.098 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.098 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 9 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.098 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))) 
(SevaName(0x5778890), SevaName(0x57785c0), SevaName(0x5778340), SevaName(0x57deb40), SevaName(0x57dea50), SevaName(0x57deeb0), SevaName(0x57e0490), SevaName(0x57e0210), SevaName(0x57e04e0), SevaName(0x57e0670)) 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5778890), SevaName(0x57785c0), SevaName(0x5778340), SevaName(0x57deb40), SevaName(0x57dea50), SevaName(0x57deeb0), SevaName(0x57e0490), SevaName(0x57e0210), SevaName(0x57e04e0), SevaName(0x57e0670)) 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x5778890))(10, SevaName(0x57785c0))(19, SevaName(0x5778340))(46, SevaName(0x57deb40))(52, SevaName(0x57dea50))(53, SevaName(0x57deeb0))(110, SevaName(0x57e0490))(113, SevaName(0x57e0210))(123, SevaName(0x57e04e0))(127, SevaName(0x57e0670))) 
(SevaName(0x5778890), SevaName(0x57785c0), SevaName(0x5778340), SevaName(0x57deb40), SevaName(0x57dea50), SevaName(0x57deeb0), SevaName(0x57e0490), SevaName(0x57e0210), SevaName(0x57e04e0), SevaName(0x57e0670)) 

2023-07-07 15:03:17.098 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.098 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.098 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.098 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.098 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 10 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.098 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))) 
(SevaName(0x57dee60), SevaName(0x57e0530)) 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57dee60), SevaName(0x57e0530)) 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x57dee60))(112, SevaName(0x57e0530))) 
(SevaName(0x57dee60), SevaName(0x57e0530)) 

2023-07-07 15:03:17.098 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.098 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.098 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.098 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.098 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 11 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.098 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.098 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-07-07 15:03:17.098 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x57788e0))) 
(SevaName(0x57788e0)) 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57788e0)) 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x57788e0))) 
(SevaName(0x57788e0)) 

2023-07-07 15:03:17.099 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.099 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.099 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.099 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.099 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 12 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.099 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x5778ac0))) 
(SevaName(0x5778ac0)) 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5778ac0)) 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x5778ac0))) 
(SevaName(0x5778ac0)) 

2023-07-07 15:03:17.099 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.099 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.099 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.099 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.099 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 13 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.099 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x57786b0))) 
(SevaName(0x57786b0)) 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57786b0)) 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x57786b0))) 
(SevaName(0x57786b0)) 

2023-07-07 15:03:17.099 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.099 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.099 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.099 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.099 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 14 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.099 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))(2017, SevaName(0x57f09d8))) 
(SevaName(0x5778660), SevaName(0x57e01c0), SevaName(0x57f09d8)) 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x5778660), SevaName(0x57e01c0), SevaName(0x57f09d8)) 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x5778660))(111, SevaName(0x57e01c0))(2017, SevaName(0x57f09d8))) 
(SevaName(0x5778660), SevaName(0x57e01c0), SevaName(0x57f09d8)) 

2023-07-07 15:03:17.099 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.099 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.099 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.099 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.099 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 15 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.099 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))) 
(SevaName(0x57deff0), SevaName(0x57deb90), SevaName(0x57e02b0), SevaName(0x57e0080), SevaName(0x57dfc20)) 

2023-07-07 15:03:17.099 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57deff0), SevaName(0x57deb90), SevaName(0x57e02b0), SevaName(0x57e0080), SevaName(0x57dfc20)) 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-07-07 15:03:17.099 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x57deff0))(51, SevaName(0x57deb90))(105, SevaName(0x57e02b0))(106, SevaName(0x57e0080))(124, SevaName(0x57dfc20))) 
(SevaName(0x57deff0), SevaName(0x57deb90), SevaName(0x57e02b0), SevaName(0x57e0080), SevaName(0x57dfc20)) 

2023-07-07 15:03:17.099 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.099 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.099 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 16 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.100 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))) 
(SevaName(0x57dec80), SevaName(0x57dfa90), SevaName(0x57dfe00), SevaName(0x57dfea0)) 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57dec80), SevaName(0x57dfa90), SevaName(0x57dfe00), SevaName(0x57dfea0)) 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x57dec80))(69, SevaName(0x57dfa90))(100, SevaName(0x57dfe00))(126, SevaName(0x57dfea0))) 
(SevaName(0x57dec80), SevaName(0x57dfa90), SevaName(0x57dfe00), SevaName(0x57dfea0)) 

2023-07-07 15:03:17.100 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.100 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 18 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.100 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x57dfb30))) 
(SevaName(0x57dfb30)) 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57dfb30)) 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x57dfb30))) 
(SevaName(0x57dfb30)) 

2023-07-07 15:03:17.100 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.100 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 19 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.100 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))) 
(SevaName(0x57df720), SevaName(0x57df450)) 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57df720), SevaName(0x57df450)) 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x57df720))(88, SevaName(0x57df450))) 
(SevaName(0x57df720), SevaName(0x57df450)) 

2023-07-07 15:03:17.100 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.100 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 20 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.100 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x57e0170))) 
(SevaName(0x57e0170)) 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57e0170)) 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-07-07 15:03:17.100 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x57e0170))) 
(SevaName(0x57e0170)) 

2023-07-07 15:03:17.100 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.100 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.100 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 22 

2023-07-07 15:03:17.100 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.101 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x57e0440))) 
(SevaName(0x57e0440)) 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57e0440)) 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x57e0440))) 
(SevaName(0x57e0440)) 

2023-07-07 15:03:17.101 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.101 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.101 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.101 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.101 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 25 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.101 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 25 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) () 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 25 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-07 15:03:17.101 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.101 DBG qml: seveListModel  for if((sevaProxy.getSevaModel(100).getSevaListViewModel/*.getSevaListViewModel*/===0))
2023-07-07 15:03:17.101 DBG qml:  countIfSevaNamesPresentInSevaTypes++ 1
2023-07-07 15:03:17.101 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.101 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.101 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.101 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 26 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.101 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 26 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) () 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 26 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-07 15:03:17.101 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.101 DBG qml: seveListModel  for if((sevaProxy.getSevaModel(100).getSevaListViewModel/*.getSevaListViewModel*/===0))
2023-07-07 15:03:17.101 DBG qml:  countIfSevaNamesPresentInSevaTypes++ 2
2023-07-07 15:03:17.101 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.101 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.101 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.101 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1000 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.101 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1000 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))) 
(SevaName(0x57e0710), SevaName(0x57e06c0), SevaName(0x57e0760), SevaName(0x57e0620), SevaName(0x57f2238), SevaName(0x57f2328), SevaName(0x57f1f68), SevaName(0x57f1fb8), SevaName(0x57f2418), SevaName(0x57f2378), SevaName(0x57f20a8), SevaName(0x57f1e78), SevaName(0x57f2008), SevaName(0x57f2468), SevaName(0x57f1e28), SevaName(0x57f1d88), SevaName(0x57f25a8), SevaName(0x57f2058), SevaName(0x57f23c8), SevaName(0x57f20f8), SevaName(0x57f24b8), SevaName(0x57f1f18), SevaName(0x57f1d38), SevaName(0x57f22d8), SevaName(0x57f1c98), SevaName(0x57f2148), SevaName(0x57f2198), SevaName(0x57f1ce8), SevaName(0x57f21e8), SevaName(0x57f1dd8), SevaName(0x57f2288), SevaName(0x57f2508)) 

2023-07-07 15:03:17.101 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57e0710), SevaName(0x57e06c0), SevaName(0x57e0760), SevaName(0x57e0620), SevaName(0x57f2238), SevaName(0x57f2328), SevaName(0x57f1f68), SevaName(0x57f1fb8), SevaName(0x57f2418), SevaName(0x57f2378), SevaName(0x57f20a8), SevaName(0x57f1e78), SevaName(0x57f2008), SevaName(0x57f2468), SevaName(0x57f1e28), SevaName(0x57f1d88), SevaName(0x57f25a8), SevaName(0x57f2058), SevaName(0x57f23c8), SevaName(0x57f20f8), SevaName(0x57f24b8), SevaName(0x57f1f18), SevaName(0x57f1d38), SevaName(0x57f22d8), SevaName(0x57f1c98), SevaName(0x57f2148), SevaName(0x57f2198), SevaName(0x57f1ce8), SevaName(0x57f21e8), SevaName(0x57f1dd8), SevaName(0x57f2288), SevaName(0x57f2508)) 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1000 

2023-07-07 15:03:17.101 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((1001, SevaName(0x57e0710))(1002, SevaName(0x57e06c0))(1003, SevaName(0x57e0760))(1004, SevaName(0x57e0620))(1005, SevaName(0x57f2238))(1006, SevaName(0x57f2328))(1007, SevaName(0x57f1f68))(1008, SevaName(0x57f1fb8))(1010, SevaName(0x57f2418))(1011, SevaName(0x57f2378))(1012, SevaName(0x57f20a8))(1013, SevaName(0x57f1e78))(1014, SevaName(0x57f2008))(1015, SevaName(0x57f2468))(1016, SevaName(0x57f1e28))(1017, SevaName(0x57f1d88))(1018, SevaName(0x57f25a8))(1019, SevaName(0x57f2058))(1020, SevaName(0x57f23c8))(1021, SevaName(0x57f20f8))(1022, SevaName(0x57f24b8))(1023, SevaName(0x57f1f18))(1024, SevaName(0x57f1d38))(1025, SevaName(0x57f22d8))(1026, SevaName(0x57f1c98))(1027, SevaName(0x57f2148))(1028, SevaName(0x57f2198))(1029, SevaName(0x57f1ce8))(1030, SevaName(0x57f21e8))(1031, SevaName(0x57f1dd8))(1032, SevaName(0x57f2288))(1033, SevaName(0x57f2508))) 
(SevaName(0x57e0710), SevaName(0x57e06c0), SevaName(0x57e0760), SevaName(0x57e0620), SevaName(0x57f2238), SevaName(0x57f2328), SevaName(0x57f1f68), SevaName(0x57f1fb8), SevaName(0x57f2418), SevaName(0x57f2378), SevaName(0x57f20a8), SevaName(0x57f1e78), SevaName(0x57f2008), SevaName(0x57f2468), SevaName(0x57f1e28), SevaName(0x57f1d88), SevaName(0x57f25a8), SevaName(0x57f2058), SevaName(0x57f23c8), SevaName(0x57f20f8), SevaName(0x57f24b8), SevaName(0x57f1f18), SevaName(0x57f1d38), SevaName(0x57f22d8), SevaName(0x57f1c98), SevaName(0x57f2148), SevaName(0x57f2198), SevaName(0x57f1ce8), SevaName(0x57f21e8), SevaName(0x57f1dd8), SevaName(0x57f2288), SevaName(0x57f2508)) 

2023-07-07 15:03:17.101 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.101 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.101 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.101 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.101 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 2000 

2023-07-07 15:03:17.102 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.102 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.102 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.102 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.102 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2000 

2023-07-07 15:03:17.102 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))(2006, SevaName(0x57f2698))(2007, SevaName(0x57f0898))(2009, SevaName(0x57f0b68))(2010, SevaName(0x57f0f78))(2011, SevaName(0x57f0a78))(2012, SevaName(0x57f0988))(2013, SevaName(0x57f0de8))(2014, SevaName(0x57f0938))) 
(SevaName(0x57f1c48), SevaName(0x57f2648), SevaName(0x57f2788), SevaName(0x57f26e8), SevaName(0x57f2738), SevaName(0x57f2698), SevaName(0x57f0898), SevaName(0x57f0b68), SevaName(0x57f0f78), SevaName(0x57f0a78), SevaName(0x57f0988), SevaName(0x57f0de8), SevaName(0x57f0938)) 

2023-07-07 15:03:17.102 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57f1c48), SevaName(0x57f2648), SevaName(0x57f2788), SevaName(0x57f26e8), SevaName(0x57f2738), SevaName(0x57f2698), SevaName(0x57f0898), SevaName(0x57f0b68), SevaName(0x57f0f78), SevaName(0x57f0a78), SevaName(0x57f0988), SevaName(0x57f0de8), SevaName(0x57f0938)) 

2023-07-07 15:03:17.102 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2000 

2023-07-07 15:03:17.102 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2001, SevaName(0x57f1c48))(2002, SevaName(0x57f2648))(2003, SevaName(0x57f2788))(2004, SevaName(0x57f26e8))(2005, SevaName(0x57f2738))(2006, SevaName(0x57f2698))(2007, SevaName(0x57f0898))(2009, SevaName(0x57f0b68))(2010, SevaName(0x57f0f78))(2011, SevaName(0x57f0a78))(2012, SevaName(0x57f0988))(2013, SevaName(0x57f0de8))(2014, SevaName(0x57f0938))) 
(SevaName(0x57f1c48), SevaName(0x57f2648), SevaName(0x57f2788), SevaName(0x57f26e8), SevaName(0x57f2738), SevaName(0x57f2698), SevaName(0x57f0898), SevaName(0x57f0b68), SevaName(0x57f0f78), SevaName(0x57f0a78), SevaName(0x57f0988), SevaName(0x57f0de8), SevaName(0x57f0938)) 

2023-07-07 15:03:17.102 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.102 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.102 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.102 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.102 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.102 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.102 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-07 15:03:17.102 DBG qml:  if of <<< countIfSevaNamesPresentInSevaTypes++ 2
2023-07-07 15:03:17.102 DBG qml: clicked on Sevabooking
2023-07-07 15:03:17.200 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.207 DBG qml: state changedinitial
2023-07-07 15:03:17.212 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-07 15:03:17.212 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Cannot assign to non-existent property "onDefaultDates"
2023-07-07 15:03:17.212 WRN default: qrc:/ui/SevaDateTime.qml:97:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-07 15:03:17.212 WRN default: qrc:/ui/SevaDateTime.qml:91:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-07 15:03:17.295 DBG qml: my seva delegate is created
2023-07-07 15:03:17.295 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 15:03:17.295 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 15:03:17.295 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 15:03:17.295 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 15:03:17.295 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 15:03:17.295 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-07 15:03:17.295 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.295 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.295 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.295 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.295 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 15:03:17.295 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x57dfe50))) 
(SevaName(0x57dfe50)) 

2023-07-07 15:03:17.295 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57dfe50)) 

2023-07-07 15:03:17.295 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 15:03:17.295 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x57dfe50))) 
(SevaName(0x57dfe50)) 

2023-07-07 15:03:17.295 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.295 DBG qml: --------------- onCurrentIndexChanged: of combo box sevaListView1
2023-07-07 15:03:17.295 DBG qml:  Index =0
2023-07-07 15:03:17.295 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 15:03:17.295 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 15:03:17.295 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-07 15:03:17.295 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.295 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.295 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.295 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.295 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 15:03:17.295 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x57dfe50))) 
(SevaName(0x57dfe50)) 

2023-07-07 15:03:17.295 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57dfe50)) 

2023-07-07 15:03:17.295 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 15:03:17.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x57dfe50))) 
(SevaName(0x57dfe50)) 

2023-07-07 15:03:17.296 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.296 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 15:03:17.296 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 15:03:17.296 DBG qml:  Seva Type Changed: 0
2023-07-07 15:03:17.296 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-07 15:03:17.296 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.296 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.296 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.296 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 15:03:17.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x57dfe50))) 
(SevaName(0x57dfe50)) 

2023-07-07 15:03:17.296 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57dfe50)) 

2023-07-07 15:03:17.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 15:03:17.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x57dfe50))) 
(SevaName(0x57dfe50)) 

2023-07-07 15:03:17.296 DBG qml: my seva delegate is created
2023-07-07 15:03:17.296 DBG qml:  Current Index changed0
2023-07-07 15:03:17.296 DBG qml:  VIEW-1 - Index =0
2023-07-07 15:03:17.296 DBG qml:  Seva Selected =0
2023-07-07 15:03:17.296 DBG default: SevaName* SevaViewProxy::getSevaByIndex(int) 0 

2023-07-07 15:03:17.296 DBG default: current.... seva model 

2023-07-07 15:03:17.296 DBG default: current seva model SevaListViewModel(0x11a18648) 

2023-07-07 15:03:17.296 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int) (SevaName(0x57dfe50)) 

2023-07-07 15:03:17.296 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int)  Index requested 1= 0 

2023-07-07 15:03:17.296 DBG qml:  Seva Details =0
2023-07-07 15:03:17.296 DBG default: void SevaName::print()  Seva Name   = "Nithya Archane"
2023-07-07 15:03:17.296 DBG default: void SevaName::print()  Seva ID     = 102
2023-07-07 15:03:17.296 DBG default: void SevaName::print()  Seva Number = 102
2023-07-07 15:03:17.296 DBG default: void SevaName::print()  Seva        = 0
2023-07-07 15:03:17.296 DBG default: void SevaName::print()  Seva Date   = "2021-11-25"
2023-07-07 15:03:17.296 DBG default: void SevaName::print()  Seva Type   = 0
2023-07-07 15:03:17.296 DBG default: void SevaName::print()  Seva Cost   = 0
2023-07-07 15:03:17.296 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-07 15:03:17.296 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-07 15:03:17.296 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-07 15:03:17.297 DBG qml: seva name  = Nithya Archane Seva cost = 0
2023-07-07 15:03:17.297 DBG default: QStringList SevaViewProxy::getGothras() 

2023-07-07 15:03:17.297 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.297 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-07-07 15:03:17.298 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Vashistha", "", "Puthamanasa", "Shrivathsa", "Sankhyayanasa", "Jamadagni", "Harithasa", "Kashyapa", "Maudgalya", "Bharadwaja", "Gargeyyesa", "Mounabharghava", "Dhananjaya", "Kaundinya", "Galava", "Athreyasa", "Vishwamitra", "Kaushika", "Gouthama") 

2023-07-07 15:03:17.298 DBG qml: ********* In setGothras function  *********** = 0
2023-07-07 15:03:17.298 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-07-07 15:03:17.298 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.298 DBG qml: ********* In set nakshatra function  *********** = 0
2023-07-07 15:03:17.298 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-07 15:03:17.298 DBG qml: Current Text =SevaTypeViewModel(0xfe19ee0)
2023-07-07 15:03:17.298 DBG qml: Model SevaType--------: [object Object]
2023-07-07 15:03:17.298 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 15:03:17.298 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 15:03:17.298 DBG qml: Model SevaType: RAMANAVAMI SEVE
2023-07-07 15:03:17.298 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 15:03:17.298 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 15:03:17.298 DBG qml: Model SevaType: 0
2023-07-07 15:03:17.298 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 15:03:17.298 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 15:03:17.298 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 15:03:17.298 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 15:03:17.313 DBG qml: Component.onCompleted: of seva booking view
2023-07-07 15:03:17.313 DBG qml: In Component.onCompleted: of SevaPaymenConfirmationDialog
2023-07-07 15:03:17.313 DBG qml: Dialog object is ccreated in SPCD
2023-07-07 15:03:17.313 DBG default: QStringList SevaTypeNamesDataModel::getBankList() 

2023-07-07 15:03:17.313 DBG default: JsonProcessor::JsonProcessor(QObject*) 

2023-07-07 15:03:17.313 DBG default: void JsonProcessor::readBanksFromJsonToList() 

2023-07-07 15:03:17.313 DBG default: file opened 

2023-07-07 15:03:17.313 DBG default: read all 

2023-07-07 15:03:17.313 DBG default: void JsonProcessor::readBanksFromJsonToList() dddddddoooooooooooocccccccc 

2023-07-07 15:03:17.313 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 15:03:17.313 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 15:03:17.313 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 15:03:17.313 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 15:03:17.313 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 15:03:17.313 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 15:03:17.313 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 15:03:17.313 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 15:03:17.313 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-07 15:03:17.313 DBG default: virtual JsonProcessor::~JsonProcessor() 

2023-07-07 15:03:17.314 DBG qml:  Trying to get the list category
2023-07-07 15:03:17.314 WRN default: qrc:/ui/SevaDateTime.qml:89: ReferenceError: defaultDates is not defined
2023-07-07 15:03:17.314 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 15:03:17.314 DBG qml: Screen screenWidth size =1920
2023-07-07 15:03:17.314 DBG qml: Screen screenHeight size =1000
2023-07-07 15:03:17.314 DBG qml:  Name Status =false
2023-07-07 15:03:17.314 DBG qml:  Mobile Status =false
2023-07-07 15:03:17.314 DBG qml: Component.onCompleted: of seva list view
2023-07-07 15:03:17.314 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-07 15:03:17.314 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-07 15:03:17.314 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-07 15:03:17.314 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-07 15:03:17.314 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-07 15:03:17.314 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-07 15:03:17.314 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x5780ff0) 

2023-07-07 15:03:17.314 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 15:03:17.314 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x57dfe50))) 
(SevaName(0x57dfe50)) 

2023-07-07 15:03:17.314 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x57dfe50)) 

2023-07-07 15:03:17.314 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-07 15:03:17.314 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x57dfe50))) 
(SevaName(0x57dfe50)) 

2023-07-07 15:03:17.314 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-07 15:03:17.314 DBG qml: Component.onCompleted of combo box sevaListView current index =0 1
2023-07-07 15:03:17.314 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-07 15:03:17.314 DBG qml: Screen screenWidth size =1920
2023-07-07 15:03:17.314 DBG qml: Screen screenHeight size =1000
2023-07-07 15:03:17.315 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.315 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.315 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.315 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.315 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.319 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.322 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.323 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.323 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.323 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.323 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.323 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.323 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.323 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:17.323 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-07 15:03:18.719 DBG qml: show all button clicked
2023-07-07 15:03:18.719 DBG qml: Show all Data
2023-07-07 15:03:18.719 DBG default: bool SevaViewProxy::showAllData() 

2023-07-07 15:03:18.719 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^1111111^^^^^^^^^^^^^^^^^^ 

2023-07-07 15:03:18.719 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^222222^^^^^^^^^^^^^^^^^^ 

2023-07-07 15:03:18.720 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^3333333^^^^^^^^^^^^^^^^^^   -1 

2023-07-07 15:03:18.720 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-07 15:03:18.720 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-07 15:03:18.720 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-07 15:03:18.720 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-07 15:03:18.721 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-07 15:03:18.721 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  0 

2023-07-07 15:03:18.721 DBG default: void SevaBookingElement::print()  SNO      = "1" 

2023-07-07 15:03:18.721 DBG default: void SevaBookingElement::print()  SName    = "Chataka" 

2023-07-07 15:03:18.721 DBG default: void SevaBookingElement::print()  Person   = "83" 

2023-07-07 15:03:18.721 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-07 15:03:18.721 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-07 15:03:18.721 DBG default:  Name = "Suman N"
2023-07-07 15:03:18.721 DBG default:  Nakshatra  "Shathabhisha"
2023-07-07 15:03:18.722 DBG default:  Gothra  "Kashyapa" 

2023-07-07 15:03:18.722 DBG default:  Mobile  "9481914363" 

2023-07-07 15:03:18.722 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-07 15:03:18.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 0 0 

2023-07-07 15:03:18.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 0 0 

2023-07-07 15:03:18.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 0 1 

2023-07-07 15:03:18.722 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  0 0 

2023-07-07 15:03:18.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 1 2 

2023-07-07 15:03:18.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 1 1 

2023-07-07 15:03:18.722 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  0 

2023-07-07 15:03:18.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 1 3 

2023-07-07 15:03:18.722 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 1 

2023-07-07 15:03:18.722 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  0 

2023-07-07 15:03:18.722 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-07 15:03:18.722 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-07 15:03:18.722 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-07 15:03:18.723 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-07 15:03:18.723 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-07 15:03:18.723 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  1 

2023-07-07 15:03:18.723 DBG default: void SevaBookingElement::print()  SNO      = "2" 

2023-07-07 15:03:18.723 DBG default: void SevaBookingElement::print()  SName    = "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi" 

2023-07-07 15:03:18.723 DBG default: void SevaBookingElement::print()  Person   = "83" 

2023-07-07 15:03:18.723 DBG default: void SevaBookingElement::print()  SevaType = "2" 

2023-07-07 15:03:18.723 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-07 15:03:18.723 DBG default:  Name = "Suman N"
2023-07-07 15:03:18.723 DBG default:  Nakshatra  "Shathabhisha"
2023-07-07 15:03:18.723 DBG default:  Gothra  "Kashyapa" 

2023-07-07 15:03:18.723 DBG default:  Mobile  "9481914363" 

2023-07-07 15:03:18.723 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-07 15:03:18.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 1 4 

2023-07-07 15:03:18.723 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  1 1 

2023-07-07 15:03:18.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 2 5 

2023-07-07 15:03:18.723 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 2 2 

2023-07-07 15:03:18.723 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  1 

2023-07-07 15:03:18.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 2 6 

2023-07-07 15:03:18.723 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 2 

2023-07-07 15:03:18.723 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  1 

2023-07-07 15:03:18.723 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-07 15:03:18.723 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-07 15:03:18.723 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-07 15:03:18.723 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-07 15:03:18.723 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-07 15:03:18.724 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  2 

2023-07-07 15:03:18.724 DBG default: void SevaBookingElement::print()  SNO      = "3" 

2023-07-07 15:03:18.724 DBG default: void SevaBookingElement::print()  SName    = "M Navami Pavamana Homa" 

2023-07-07 15:03:18.724 DBG default: void SevaBookingElement::print()  Person   = "83" 

2023-07-07 15:03:18.724 DBG default: void SevaBookingElement::print()  SevaType = "3" 

2023-07-07 15:03:18.724 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-07 15:03:18.724 DBG default:  Name = "Suman N"
2023-07-07 15:03:18.724 DBG default:  Nakshatra  "Shathabhisha"
2023-07-07 15:03:18.724 DBG default:  Gothra  "Kashyapa" 

2023-07-07 15:03:18.724 DBG default:  Mobile  "9481914363" 

2023-07-07 15:03:18.724 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-07 15:03:18.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 2 7 

2023-07-07 15:03:18.724 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  2 2 

2023-07-07 15:03:18.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 3 8 

2023-07-07 15:03:18.724 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 3 3 

2023-07-07 15:03:18.724 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  2 

2023-07-07 15:03:18.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 3 9 

2023-07-07 15:03:18.724 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 3 

2023-07-07 15:03:18.724 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  2 

2023-07-07 15:03:18.724 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-07 15:03:18.724 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-07 15:03:18.724 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-07 15:03:18.724 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-07 15:03:18.724 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-07 15:03:18.724 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  3 

2023-07-07 15:03:18.724 DBG default: void SevaBookingElement::print()  SNO      = "4" 

2023-07-07 15:03:18.724 DBG default: void SevaBookingElement::print()  SName    = "Panchamrutha/Abhisheka" 

2023-07-07 15:03:18.724 DBG default: void SevaBookingElement::print()  Person   = "83" 

2023-07-07 15:03:18.724 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-07 15:03:18.724 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-07 15:03:18.724 DBG default:  Name = "Suman N"
2023-07-07 15:03:18.724 DBG default:  Nakshatra  "Shathabhisha"
2023-07-07 15:03:18.724 DBG default:  Gothra  "Kashyapa" 

2023-07-07 15:03:18.724 DBG default:  Mobile  "9481914363" 

2023-07-07 15:03:18.724 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-07 15:03:18.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 3 10 

2023-07-07 15:03:18.724 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  3 3 

2023-07-07 15:03:18.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 11 

2023-07-07 15:03:18.724 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 4 

2023-07-07 15:03:18.724 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  3 

2023-07-07 15:03:18.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 12 

2023-07-07 15:03:18.724 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 4 

2023-07-07 15:03:18.724 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  3 

2023-07-07 15:03:18.724 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^3333333^^^^^^^^^^^^^^^^^^ 

2023-07-07 15:03:18.725 DBG default: bool SevaViewProxy::showAllData() 

2023-07-07 15:03:18.822 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-07 15:03:18.985 DBG qml: Hello suman Alldata get
2023-07-07 15:03:18.992 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 13 

2023-07-07 15:03:18.992 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 5 

2023-07-07 15:03:18.992 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 0 row column role 0 0 257 

2023-07-07 15:03:18.995 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 14 

2023-07-07 15:03:18.995 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 6 

2023-07-07 15:03:18.995 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1 row column role 0 0 258 

2023-07-07 15:03:18.996 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 15 

2023-07-07 15:03:18.996 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 7 

2023-07-07 15:03:18.996 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2 row column role 0 0 259 

2023-07-07 15:03:18.997 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 16 

2023-07-07 15:03:18.997 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 8 

2023-07-07 15:03:18.997 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3 row column role 0 0 260 

2023-07-07 15:03:18.997 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 17 

2023-07-07 15:03:18.997 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 9 

2023-07-07 15:03:18.997 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4 row column role 0 0 261 

2023-07-07 15:03:18.998 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 18 

2023-07-07 15:03:18.998 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 10 

2023-07-07 15:03:18.998 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 5 row column role 0 0 262 

2023-07-07 15:03:18.999 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 19 

2023-07-07 15:03:18.999 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 11 

2023-07-07 15:03:18.999 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 6 row column role 0 0 263 

2023-07-07 15:03:19.000 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 20 

2023-07-07 15:03:19.000 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 12 

2023-07-07 15:03:19.000 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 7 row column role 0 0 264 

2023-07-07 15:03:19.000 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 21 

2023-07-07 15:03:19.000 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 13 

2023-07-07 15:03:19.000 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 8 row column role 0 0 265 

2023-07-07 15:03:19.001 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 22 

2023-07-07 15:03:19.001 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 14 

2023-07-07 15:03:19.001 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 9 row column role 0 0 266 

2023-07-07 15:03:19.002 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 23 

2023-07-07 15:03:19.002 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 15 

2023-07-07 15:03:19.002 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 10 row column role 0 0 267 

2023-07-07 15:03:19.002 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 24 

2023-07-07 15:03:19.002 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 16 

2023-07-07 15:03:19.002 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 11 row column role 0 0 268 

2023-07-07 15:03:19.003 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 25 

2023-07-07 15:03:19.003 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 17 

2023-07-07 15:03:19.003 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 12 row column role 0 0 269 

2023-07-07 15:03:19.003 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 26 

2023-07-07 15:03:19.003 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 18 

2023-07-07 15:03:19.003 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 13 row column role 0 0 270 

2023-07-07 15:03:19.004 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 27 

2023-07-07 15:03:19.004 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 19 

2023-07-07 15:03:19.004 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 14 row column role 0 0 271 

2023-07-07 15:03:19.005 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 28 

2023-07-07 15:03:19.005 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 20 

2023-07-07 15:03:19.005 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 15 row column role 0 0 272 

2023-07-07 15:03:19.005 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 29 

2023-07-07 15:03:19.005 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 21 

2023-07-07 15:03:19.005 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 16 row column role 0 0 273 

2023-07-07 15:03:19.006 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 30 

2023-07-07 15:03:19.006 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 22 

2023-07-07 15:03:19.006 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 17 row column role 0 0 274 

2023-07-07 15:03:19.006 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 31 

2023-07-07 15:03:19.006 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 23 

2023-07-07 15:03:19.006 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 18 row column role 0 0 275 

2023-07-07 15:03:19.007 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 32 

2023-07-07 15:03:19.007 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 24 

2023-07-07 15:03:19.007 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 19 row column role 0 0 276 

2023-07-07 15:03:19.007 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 33 

2023-07-07 15:03:19.007 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 25 

2023-07-07 15:03:19.007 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 20 row column role 0 0 277 

2023-07-07 15:03:19.008 DBG qml: Seva All view Page is created
2023-07-07 15:03:19.008 WRN default: qrc:/ui/SevaBookingView.qml:381:9: QML Connections: Detected function "onLoadMenuPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-07 15:03:19.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 34 

2023-07-07 15:03:19.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 26 

2023-07-07 15:03:19.012 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 21 row column role 1 0 257 

2023-07-07 15:03:19.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 35 

2023-07-07 15:03:19.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 27 

2023-07-07 15:03:19.012 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 22 row column role 1 0 258 

2023-07-07 15:03:19.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 36 

2023-07-07 15:03:19.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 28 

2023-07-07 15:03:19.012 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 23 row column role 1 0 259 

2023-07-07 15:03:19.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 37 

2023-07-07 15:03:19.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 29 

2023-07-07 15:03:19.012 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 24 row column role 1 0 260 

2023-07-07 15:03:19.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 38 

2023-07-07 15:03:19.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 30 

2023-07-07 15:03:19.012 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 25 row column role 1 0 261 

2023-07-07 15:03:19.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 39 

2023-07-07 15:03:19.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 31 

2023-07-07 15:03:19.012 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 26 row column role 1 0 262 

2023-07-07 15:03:19.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 40 

2023-07-07 15:03:19.013 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 32 

2023-07-07 15:03:19.013 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 27 row column role 1 0 263 

2023-07-07 15:03:19.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 41 

2023-07-07 15:03:19.013 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 33 

2023-07-07 15:03:19.013 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 28 row column role 1 0 264 

2023-07-07 15:03:19.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 42 

2023-07-07 15:03:19.013 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 34 

2023-07-07 15:03:19.013 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 29 row column role 1 0 265 

2023-07-07 15:03:19.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 43 

2023-07-07 15:03:19.013 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 35 

2023-07-07 15:03:19.013 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 30 row column role 1 0 266 

2023-07-07 15:03:19.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 44 

2023-07-07 15:03:19.014 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 36 

2023-07-07 15:03:19.014 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 31 row column role 1 0 267 

2023-07-07 15:03:19.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 45 

2023-07-07 15:03:19.014 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 37 

2023-07-07 15:03:19.014 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 32 row column role 1 0 268 

2023-07-07 15:03:19.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 46 

2023-07-07 15:03:19.014 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 38 

2023-07-07 15:03:19.014 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 33 row column role 1 0 269 

2023-07-07 15:03:19.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 47 

2023-07-07 15:03:19.014 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 39 

2023-07-07 15:03:19.014 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 34 row column role 1 0 270 

2023-07-07 15:03:19.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 48 

2023-07-07 15:03:19.014 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 40 

2023-07-07 15:03:19.014 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 35 row column role 1 0 271 

2023-07-07 15:03:19.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 49 

2023-07-07 15:03:19.014 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 41 

2023-07-07 15:03:19.014 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 36 row column role 1 0 272 

2023-07-07 15:03:19.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 50 

2023-07-07 15:03:19.015 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 42 

2023-07-07 15:03:19.015 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 37 row column role 1 0 273 

2023-07-07 15:03:19.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 51 

2023-07-07 15:03:19.015 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 43 

2023-07-07 15:03:19.015 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 38 row column role 1 0 274 

2023-07-07 15:03:19.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 52 

2023-07-07 15:03:19.015 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 44 

2023-07-07 15:03:19.015 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 39 row column role 1 0 275 

2023-07-07 15:03:19.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 53 

2023-07-07 15:03:19.015 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 45 

2023-07-07 15:03:19.015 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 40 row column role 1 0 276 

2023-07-07 15:03:19.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 54 

2023-07-07 15:03:19.015 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 46 

2023-07-07 15:03:19.015 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 41 row column role 1 0 277 

2023-07-07 15:03:19.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 55 

2023-07-07 15:03:19.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 47 

2023-07-07 15:03:19.018 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 42 row column role 2 0 257 

2023-07-07 15:03:19.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 56 

2023-07-07 15:03:19.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 48 

2023-07-07 15:03:19.018 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 43 row column role 2 0 258 

2023-07-07 15:03:19.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 57 

2023-07-07 15:03:19.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 49 

2023-07-07 15:03:19.018 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 44 row column role 2 0 259 

2023-07-07 15:03:19.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 58 

2023-07-07 15:03:19.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 50 

2023-07-07 15:03:19.018 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 45 row column role 2 0 260 

2023-07-07 15:03:19.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 59 

2023-07-07 15:03:19.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 51 

2023-07-07 15:03:19.018 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 46 row column role 2 0 261 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 60 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 52 

2023-07-07 15:03:19.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 47 row column role 2 0 262 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 61 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 53 

2023-07-07 15:03:19.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 48 row column role 2 0 263 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 62 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 54 

2023-07-07 15:03:19.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 49 row column role 2 0 264 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 63 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 55 

2023-07-07 15:03:19.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 50 row column role 2 0 265 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 64 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 56 

2023-07-07 15:03:19.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 51 row column role 2 0 266 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 65 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 57 

2023-07-07 15:03:19.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 52 row column role 2 0 267 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 66 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 58 

2023-07-07 15:03:19.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 53 row column role 2 0 268 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 67 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 59 

2023-07-07 15:03:19.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 54 row column role 2 0 269 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 68 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 60 

2023-07-07 15:03:19.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 55 row column role 2 0 270 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 69 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 61 

2023-07-07 15:03:19.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 56 row column role 2 0 271 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 70 

2023-07-07 15:03:19.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 62 

2023-07-07 15:03:19.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 57 row column role 2 0 272 

2023-07-07 15:03:19.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 71 

2023-07-07 15:03:19.021 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 63 

2023-07-07 15:03:19.021 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 58 row column role 2 0 273 

2023-07-07 15:03:19.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 72 

2023-07-07 15:03:19.021 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 64 

2023-07-07 15:03:19.021 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 59 row column role 2 0 274 

2023-07-07 15:03:19.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 73 

2023-07-07 15:03:19.021 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 65 

2023-07-07 15:03:19.021 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 60 row column role 2 0 275 

2023-07-07 15:03:19.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 74 

2023-07-07 15:03:19.021 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 66 

2023-07-07 15:03:19.021 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 61 row column role 2 0 276 

2023-07-07 15:03:19.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 75 

2023-07-07 15:03:19.021 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 67 

2023-07-07 15:03:19.021 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 62 row column role 2 0 277 

2023-07-07 15:03:19.022 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 76 

2023-07-07 15:03:19.022 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 68 

2023-07-07 15:03:19.022 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 63 row column role 3 0 257 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 77 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 69 

2023-07-07 15:03:19.023 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 64 row column role 3 0 258 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 78 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 70 

2023-07-07 15:03:19.023 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 65 row column role 3 0 259 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 79 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 71 

2023-07-07 15:03:19.023 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 66 row column role 3 0 260 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 80 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 72 

2023-07-07 15:03:19.023 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 67 row column role 3 0 261 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 81 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 73 

2023-07-07 15:03:19.023 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 68 row column role 3 0 262 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 82 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 74 

2023-07-07 15:03:19.023 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 69 row column role 3 0 263 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 83 

2023-07-07 15:03:19.023 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 75 

2023-07-07 15:03:19.023 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 70 row column role 3 0 264 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 84 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 76 

2023-07-07 15:03:19.024 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 71 row column role 3 0 265 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 85 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 77 

2023-07-07 15:03:19.024 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 72 row column role 3 0 266 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 86 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 78 

2023-07-07 15:03:19.024 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 73 row column role 3 0 267 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 87 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 79 

2023-07-07 15:03:19.024 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 74 row column role 3 0 268 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 88 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 80 

2023-07-07 15:03:19.024 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 75 row column role 3 0 269 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 89 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 81 

2023-07-07 15:03:19.024 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 76 row column role 3 0 270 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 90 

2023-07-07 15:03:19.024 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 82 

2023-07-07 15:03:19.024 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 77 row column role 3 0 271 

2023-07-07 15:03:19.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 91 

2023-07-07 15:03:19.025 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 83 

2023-07-07 15:03:19.025 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 78 row column role 3 0 272 

2023-07-07 15:03:19.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 92 

2023-07-07 15:03:19.025 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 84 

2023-07-07 15:03:19.025 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 79 row column role 3 0 273 

2023-07-07 15:03:19.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 93 

2023-07-07 15:03:19.025 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 85 

2023-07-07 15:03:19.025 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 80 row column role 3 0 274 

2023-07-07 15:03:19.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 94 

2023-07-07 15:03:19.025 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 86 

2023-07-07 15:03:19.025 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 81 row column role 3 0 275 

2023-07-07 15:03:19.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 95 

2023-07-07 15:03:19.025 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 87 

2023-07-07 15:03:19.025 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 82 row column role 3 0 276 

2023-07-07 15:03:19.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 96 

2023-07-07 15:03:19.025 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 88 

2023-07-07 15:03:19.025 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 83 row column role 3 0 277 

2023-07-07 15:03:22.365 DBG qml: mouse clicked right or left styleData.selected false
2023-07-07 15:03:22.367 DBG qml: clicked cell in table view  3
2023-07-07 15:03:22.368 DBG qml: clicked cell in table view coordinates =  QPointF(1266, 182)
2023-07-07 15:03:22.368 DBG qml: clicked cell in table view clickIndex =  3
2023-07-07 15:03:22.368 DBG qml: clicked cell in table view  3
2023-07-07 15:03:22.368 DBG qml: clicked cell in table view  3
2023-07-07 15:03:22.368 DBG qml: Right
2023-07-07 15:03:23.758 DBG default: int SevaBookingSearchModel::getRowOfDataFromTableViewModel(int) >>>>>>>getRowOfDataFromTableViewModel>>>>1>>>> 3 

2023-07-07 15:03:23.758 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 97 

2023-07-07 15:03:23.758 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 89 

2023-07-07 15:03:23.758 DBG default: int SevaBookingSearchModel::getRowOfDataFromTableViewModel(int) >>>>>>>getRowOfDataFromTableViewModel>>>>1>>>> 3 

2023-07-07 15:03:23.758 DBG qml: ///////////////////3
