2023-04-19 11:31:55.609 WRN default: Invalid QML element name " AccReportDateRangeElement"
2023-04-19 11:31:55.610 WRN default: Invalid QML element name " AccReportMonthRangeElement"
2023-04-19 11:31:55.610 WRN default: Invalid QML element name " BookingReportDateRangeElement"
2023-04-19 11:31:55.610 WRN default: Invalid QML element name " BookingReportMonthRangeElement"
2023-04-19 11:31:55.611 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-04-19 11:31:55.611 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() In static getTrustListModelInstance of TrustListModel inside if 

2023-04-19 11:31:55.611 DBG default: TrustListModel::TrustListModel() 

2023-04-19 11:31:55.611 DBG default: void TrustListModel::init() 

2023-04-19 11:31:55.611 DBG default: TrustConfiguration::TrustConfiguration(QObject*) 

2023-04-19 11:31:55.611 DBG default: void TrustConfiguration::readTrustsFromJsonToList() path  "D:/TempleFile/TempleRamMadirupdatingNew2023/bins" 

2023-04-19 11:31:55.611 DBG default: file opened 

2023-04-19 11:31:55.612 DBG default: read all 

2023-04-19 11:31:55.612 DBG default: void TrustConfiguration::readTrustsFromJsonToList() dddddddoooooooooooocccccccc 

2023-04-19 11:31:55.612 DBG default: Trust::Trust(QObject*) 

2023-04-19 11:31:55.914 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-04-19 11:31:55.914 DBG qml: Screen screenWidth size =1920
2023-04-19 11:31:55.914 DBG qml: Screen screenHeight size =1000
2023-04-19 11:31:55.944 DBG qml: screen height= 1080
2023-04-19 11:31:55.944 DBG qml: screen width= 1920
2023-04-19 11:31:55.944 DBG qml: Screen MyStyles-screecnWidth size =1920
2023-04-19 11:31:55.944 DBG qml: Screen MyStyles-screenHeight size =1000
2023-04-19 11:31:55.944 DBG qml: screen density  == 6.228183399741848
2023-04-19 11:31:55.944 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-04-19 11:31:55.944 DBG qml: Screen screenWidth size =1920
2023-04-19 11:31:55.944 DBG qml: Screen screenHeight size =1000
2023-04-19 11:32:01.011 DBG default: int TrustListModel::getTrustListSize() 

2023-04-19 11:32:01.011 DBG default: int TrustListModel::getTrustListSize() 

2023-04-19 11:32:01.011 DBG qml: in else--------------
2023-04-19 11:32:01.011 DBG qml: in else------trustName--------Hubablli
2023-04-19 11:32:01.011 DBG qml: in else-------trustCode-------Hubablli
2023-04-19 11:32:01.012 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) 

2023-04-19 11:32:01.012 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) m_currentConfigLocation  "D:/TempleFile/TempleRamMadirupdatingNew2023/bins/Config/Hubablli" 

2023-04-19 11:32:01.012 DBG default: Inside lamda 

2023-04-19 11:32:01.012 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) 

2023-04-19 11:32:01.012 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) m_currentDataLocation  "D:/TempleFile/TempleRamMadirupdatingNew2023/bins/Data/Hubablli" 

2023-04-19 11:32:01.012 DBG default: Inside lamda 

2023-04-19 11:32:01.012 DBG default: QString TrustListModel::getConfigLocation() 

2023-04-19 11:32:01.012 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-04-19 11:32:01.012 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-04-19 11:32:01.013 DBG default: Creating the DataBase Connection  

2023-04-19 11:32:01.019 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-04-19 11:32:01.019 DBG default: QString TrustListModel::getDataLocation() 

2023-04-19 11:32:01.020 DBG default: DBInterface::DBInterface(QObject*) ******************* DB "D:/TempleFile/TempleRamMadirupdatingNew2023/bins/Data/Hubablli/nseva.db" 

2023-04-19 11:32:01.020 DBG default: Database is opened  "D:/TempleFile/TempleRamMadirupdatingNew2023/bins/Data/Hubablli/nseva.db" 

2023-04-19 11:32:01.020 DBG default: SevaTypeJsonProcessor::SevaTypeJsonProcessor(QObject*) 

2023-04-19 11:32:01.020 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate() 

2023-04-19 11:32:01.020 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-04-19 11:32:01.020 DBG default: QString TrustListModel::getConfigLocation() 

2023-04-19 11:32:01.021 DBG default: file opened 

2023-04-19 11:32:01.021 DBG default: read all 

2023-04-19 11:32:01.021 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-04-19 11:32:01.021 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  1000 

2023-04-19 11:32:01.021 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 1000 

2023-04-19 11:32:01.021 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  1000 already exist in DB 

2023-04-19 11:32:01.021 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-04-19 11:32:01.021 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  2000 

2023-04-19 11:32:01.021 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 2000 

2023-04-19 11:32:01.021 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  2000 already exist in DB 

2023-04-19 11:32:01.021 DBG default: void SevaTypeJsonProcessor::printSevaTypeNames() 

2023-04-19 11:32:01.021 DBG default: 1000 :  "Regular Seva" , 1000 , "Raj" 

2023-04-19 11:32:01.021 DBG default: 2000 :  "Aradhana Seva" , 2000 , "Abhi" 

2023-04-19 11:32:01.021 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-04-19 11:32:01.021 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-04-19 11:32:01.021 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-04-19 11:32:01.021 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-04-19 11:32:01.021 DBG default: QString TrustListModel::getConfigLocation() 

2023-04-19 11:32:01.021 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  path "D:/TempleFile/TempleRamMadirupdatingNew2023/bins/Config/Hubablli/SevaNames.json" 

2023-04-19 11:32:01.021 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-04-19 11:32:01.022 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() file opened 

2023-04-19 11:32:01.022 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() read all 

2023-04-19 11:32:01.022 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.022 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Udayaasthamaana Seva" 

2023-04-19 11:32:01.022 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.022 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.022 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1001 

2023-04-19 11:32:01.022 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.022 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.022 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.022 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.022 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.022 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Udayaasthamaana Seva"  sevaId=  1001 

2023-04-19 11:32:01.022 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1001 

2023-04-19 11:32:01.022 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1001 

2023-04-19 11:32:01.022 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.022 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Seva" 

2023-04-19 11:32:01.022 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.022 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1002 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.023 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Seva"  sevaId=  1002 

2023-04-19 11:32:01.023 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1002 

2023-04-19 11:32:01.023 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1002 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Samarpana Seva" 

2023-04-19 11:32:01.023 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.023 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1003 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.023 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Samarpana Seva"  sevaId=  1003 

2023-04-19 11:32:01.023 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1003 

2023-04-19 11:32:01.023 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1003 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakaabhisheka" 

2023-04-19 11:32:01.023 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.023 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1004 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.023 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakaabhisheka"  sevaId=  1004 

2023-04-19 11:32:01.023 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1004 

2023-04-19 11:32:01.023 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1004 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Godhana" 

2023-04-19 11:32:01.023 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.023 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1005 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.023 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.024 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Godhana"  sevaId=  1005 

2023-04-19 11:32:01.024 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1005 

2023-04-19 11:32:01.024 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1005 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mahaa Pooja" 

2023-04-19 11:32:01.024 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.024 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1006 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.024 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mahaa Pooja"  sevaId=  1006 

2023-04-19 11:32:01.024 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1006 

2023-04-19 11:32:01.024 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1006 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ksheeraabhisheka" 

2023-04-19 11:32:01.024 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.024 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1007 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.024 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ksheeraabhisheka"  sevaId=  1007 

2023-04-19 11:32:01.024 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1007 

2023-04-19 11:32:01.024 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1007 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Madhu Abhisheka" 

2023-04-19 11:32:01.024 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.024 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1008 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.024 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Madhu Abhisheka"  sevaId=  1008 

2023-04-19 11:32:01.024 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1008 

2023-04-19 11:32:01.024 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1008 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Yella Homagala Seva" 

2023-04-19 11:32:01.024 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.024 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1010 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.024 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.024 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Yella Homagala Seva"  sevaId=  1010 

2023-04-19 11:32:01.025 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1010 

2023-04-19 11:32:01.025 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1010 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Naivedhya/Hasthodaka" 

2023-04-19 11:32:01.025 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.025 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1011 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.025 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Naivedhya/Hasthodaka"  sevaId=  1011 

2023-04-19 11:32:01.025 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1011 

2023-04-19 11:32:01.025 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1011 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Phala - Panchaamrutha" 

2023-04-19 11:32:01.025 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.025 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1012 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.025 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Phala - Panchaamrutha"  sevaId=  1012 

2023-04-19 11:32:01.025 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1012 

2023-04-19 11:32:01.025 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1012 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ganapathi Abhisheka" 

2023-04-19 11:32:01.025 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.025 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1013 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.025 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ganapathi Abhisheka"  sevaId=  1013 

2023-04-19 11:32:01.025 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1013 

2023-04-19 11:32:01.025 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1013 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Nagadevara Abhisheka" 

2023-04-19 11:32:01.025 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.025 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1014 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.025 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Nagadevara Abhisheka"  sevaId=  1014 

2023-04-19 11:32:01.025 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1014 

2023-04-19 11:32:01.025 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1014 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Abhisheka" 

2023-04-19 11:32:01.025 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.025 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1015 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.025 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.025 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Abhisheka"  sevaId=  1015 

2023-04-19 11:32:01.026 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1015 

2023-04-19 11:32:01.026 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1015 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rathothsava" 

2023-04-19 11:32:01.026 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.026 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1016 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.026 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rathothsava"  sevaId=  1016 

2023-04-19 11:32:01.026 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1016 

2023-04-19 11:32:01.026 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1016 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Huggi Naivedhya" 

2023-04-19 11:32:01.026 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.026 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1017 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.026 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Huggi Naivedhya"  sevaId=  1017 

2023-04-19 11:32:01.026 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1017 

2023-04-19 11:32:01.026 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1017 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pongal Naivedhya" 

2023-04-19 11:32:01.026 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.026 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1018 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.026 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pongal Naivedhya"  sevaId=  1018 

2023-04-19 11:32:01.026 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1018 

2023-04-19 11:32:01.026 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1018 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Grahana Shanthi" 

2023-04-19 11:32:01.026 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.026 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1019 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.026 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Grahana Shanthi"  sevaId=  1019 

2023-04-19 11:32:01.026 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1019 

2023-04-19 11:32:01.026 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1019 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika - Rathothsava" 

2023-04-19 11:32:01.026 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.026 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1020 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.026 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika - Rathothsava"  sevaId=  1020 

2023-04-19 11:32:01.026 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1020 

2023-04-19 11:32:01.026 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1020 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika Seva" 

2023-04-19 11:32:01.026 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.026 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1021 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.026 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.027 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika Seva"  sevaId=  1021 

2023-04-19 11:32:01.027 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1021 

2023-04-19 11:32:01.027 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1021 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sri Sathya Narayana Pooja" 

2023-04-19 11:32:01.027 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.027 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1022 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.027 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sri Sathya Narayana Pooja"  sevaId=  1022 

2023-04-19 11:32:01.027 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1022 

2023-04-19 11:32:01.027 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1022 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Tulsi Archane" 

2023-04-19 11:32:01.027 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.027 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1023 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.027 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Tulsi Archane"  sevaId=  1023 

2023-04-19 11:32:01.027 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1023 

2023-04-19 11:32:01.027 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1023 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Chataka Shraadha" 

2023-04-19 11:32:01.027 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.027 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1024 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.027 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Chataka Shraadha"  sevaId=  1024 

2023-04-19 11:32:01.027 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1024 

2023-04-19 11:32:01.027 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1024 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sankalpa Shraadha" 

2023-04-19 11:32:01.027 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.027 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1025 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.027 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sankalpa Shraadha"  sevaId=  1025 

2023-04-19 11:32:01.027 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1025 

2023-04-19 11:32:01.027 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1025 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Vaahana Pooja" 

2023-04-19 11:32:01.027 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.027 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1026 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.027 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Vaahana Pooja"  sevaId=  1026 

2023-04-19 11:32:01.027 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1026 

2023-04-19 11:32:01.027 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1026 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Archane Seva" 

2023-04-19 11:32:01.027 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.027 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1027 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.027 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.028 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Archane Seva"  sevaId=  1027 

2023-04-19 11:32:01.028 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1027 

2023-04-19 11:32:01.028 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1027 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Lakshmi Pooja" 

2023-04-19 11:32:01.028 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.028 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1028 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.028 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Lakshmi Pooja"  sevaId=  1028 

2023-04-19 11:32:01.028 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1028 

2023-04-19 11:32:01.028 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1028 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Devarige Thailaabhisheka" 

2023-04-19 11:32:01.028 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.028 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1029 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.028 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Devarige Thailaabhisheka"  sevaId=  1029 

2023-04-19 11:32:01.028 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1029 

2023-04-19 11:32:01.028 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1029 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pavamaana Homa" 

2023-04-19 11:32:01.028 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.028 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1030 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.028 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pavamaana Homa"  sevaId=  1030 

2023-04-19 11:32:01.028 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1030 

2023-04-19 11:32:01.028 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1030 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Gana Homa" 

2023-04-19 11:32:01.028 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.028 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1031 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.028 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Gana Homa"  sevaId=  1031 

2023-04-19 11:32:01.028 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1031 

2023-04-19 11:32:01.028 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1031 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mruthyunjaya Homa" 

2023-04-19 11:32:01.028 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.028 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1032 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.028 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mruthyunjaya Homa"  sevaId=  1032 

2023-04-19 11:32:01.028 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1032 

2023-04-19 11:32:01.028 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1032 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rudraabhisheka" 

2023-04-19 11:32:01.028 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.028 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.028 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1033 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.029 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rudraabhisheka"  sevaId=  1033 

2023-04-19 11:32:01.029 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1033 

2023-04-19 11:32:01.029 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1033 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Sampurna Seva" 

2023-04-19 11:32:01.029 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.029 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2001 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.029 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Sampurna Seva"  sevaId=  2001 

2023-04-19 11:32:01.029 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2001 

2023-04-19 11:32:01.029 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2001 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Anna Santharpane Seva" 

2023-04-19 11:32:01.029 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.029 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2002 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.029 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Anna Santharpane Seva"  sevaId=  2002 

2023-04-19 11:32:01.029 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2002 

2023-04-19 11:32:01.029 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2002 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva(Huvina Alankara)" 

2023-04-19 11:32:01.029 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.029 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2003 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.029 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva(Huvina Alankara)"  sevaId=  2003 

2023-04-19 11:32:01.029 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2003 

2023-04-19 11:32:01.029 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2003 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva" 

2023-04-19 11:32:01.029 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.029 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2004 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.029 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva"  sevaId=  2004 

2023-04-19 11:32:01.029 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2004 

2023-04-19 11:32:01.029 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2004 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Noothana Vastra Seva" 

2023-04-19 11:32:01.029 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.029 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2005 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.029 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Noothana Vastra Seva"  sevaId=  2005 

2023-04-19 11:32:01.029 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2005 

2023-04-19 11:32:01.029 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2005 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva seva" 

2023-04-19 11:32:01.029 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.029 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2006 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.029 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.030 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva seva"  sevaId=  2006 

2023-04-19 11:32:01.030 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2006 

2023-04-19 11:32:01.030 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2006 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakabhisheka Seva" 

2023-04-19 11:32:01.030 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.030 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2007 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.030 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakabhisheka Seva"  sevaId=  2007 

2023-04-19 11:32:01.030 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2007 

2023-04-19 11:32:01.030 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2007 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Hasthodaka Seva(Prathidina)" 

2023-04-19 11:32:01.030 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.030 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2009 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.030 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Hasthodaka Seva(Prathidina)"  sevaId=  2009 

2023-04-19 11:32:01.030 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2009 

2023-04-19 11:32:01.030 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2009 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "MahaPooje" 

2023-04-19 11:32:01.030 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.030 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2010 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.030 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "MahaPooje"  sevaId=  2010 

2023-04-19 11:32:01.030 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2010 

2023-04-19 11:32:01.030 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2010 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ashtothara Seva(Prathidina)" 

2023-04-19 11:32:01.030 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.030 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2011 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.030 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ashtothara Seva(Prathidina)"  sevaId=  2011 

2023-04-19 11:32:01.030 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2011 

2023-04-19 11:32:01.030 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2011 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Paadakaradhane" 

2023-04-19 11:32:01.030 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.030 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2012 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.030 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Paadakaradhane"  sevaId=  2012 

2023-04-19 11:32:01.030 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2012 

2023-04-19 11:32:01.030 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2012 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "GanaHoma" 

2023-04-19 11:32:01.030 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.030 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2013 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.030 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.031 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.031 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.031 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "GanaHoma"  sevaId=  2013 

2023-04-19 11:32:01.031 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2013 

2023-04-19 11:32:01.031 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2013 

2023-04-19 11:32:01.031 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-04-19 11:32:01.031 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "PhalaPanchamrutha Seva" 

2023-04-19 11:32:01.031 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-04-19 11:32:01.031 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-04-19 11:32:01.031 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2014 

2023-04-19 11:32:01.031 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-04-19 11:32:01.031 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-04-19 11:32:01.031 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-04-19 11:32:01.031 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-04-19 11:32:01.031 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-04-19 11:32:01.031 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "PhalaPanchamrutha Seva"  sevaId=  2014 

2023-04-19 11:32:01.031 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2014 

2023-04-19 11:32:01.031 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2014 

2023-04-19 11:32:01.031 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-04-19 11:32:01.031 DBG default: void SevaTypeJsonProcessor::printSevasNames() 

2023-04-19 11:32:01.031 DBG default: 1001 :  "Udayaasthamaana Seva" , 1001 , 1 , 1000 , 5000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1002 :  "Sarva Seva" , 1002 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1003 :  "Sarva Samarpana Seva" , 1003 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1004 :  "Kanakaabhisheka" , 1004 , 1 , 1000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1005 :  "Godhana" , 1005 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1006 :  "Mahaa Pooja" , 1006 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1007 :  "Ksheeraabhisheka" , 1007 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1008 :  "Madhu Abhisheka" , 1008 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1010 :  "Yella Homagala Seva" , 1010 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1011 :  "Naivedhya/Hasthodaka" , 1011 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1012 :  "Phala - Panchaamrutha" , 1012 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1013 :  "Ganapathi Abhisheka" , 1013 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1014 :  "Nagadevara Abhisheka" , 1014 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1015 :  "Navagraha Abhisheka" , 1015 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1016 :  "Rathothsava" , 1016 , 1 , 1000 , 1000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1017 :  "Huggi Naivedhya" , 1017 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1018 :  "Pongal Naivedhya" , 1018 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1019 :  "Grahana Shanthi" , 1019 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1020 :  "Kaarthika - Rathothsava" , 1020 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1021 :  "Kaarthika Seva" , 1021 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1022 :  "Sri Sathya Narayana Pooja" , 1022 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1023 :  "Tulsi Archane" , 1023 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1024 :  "Chataka Shraadha" , 1024 , 1 , 1000 , 600 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1025 :  "Sankalpa Shraadha" , 1025 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1026 :  "Vaahana Pooja" , 1026 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1027 :  "Archane Seva" , 1027 , 1 , 1000 , 25 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1028 :  "Lakshmi Pooja" , 1028 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1029 :  "Navagraha Devarige Thailaabhisheka" , 1029 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1030 :  "Pavamaana Homa" , 1030 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1031 :  "Gana Homa" , 1031 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1032 :  "Mruthyunjaya Homa" , 1032 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 1033 :  "Rudraabhisheka" , 1033 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 2001 :  "Ondu Dinada Sampurna Seva" , 2001 , 1 , 2000 , 25001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 2002 :  "Ondu Dinada Anna Santharpane Seva" , 2002 , 1 , 2000 , 20001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 2003 :  "Alankara Seva(Huvina Alankara)" , 2003 , 1 , 2000 , 10001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 2004 :  "Alankara Seva" , 2004 , 1 , 2000 , 5001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 2005 :  "Noothana Vastra Seva" , 2005 , 1 , 2000 , 4000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 2006 :  "Sarva seva" , 2006 , 1 , 2000 , 2501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 2007 :  "Kanakabhisheka Seva" , 2007 , 1 , 2000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 2009 :  "Hasthodaka Seva(Prathidina)" , 2009 , 1 , 2000 , 1001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 2010 :  "MahaPooje" , 2010 , 1 , 2000 , 800 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 2011 :  "Ashtothara Seva(Prathidina)" , 2011 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 2012 :  "Paadakaradhane" , 2012 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 2013 :  "GanaHoma" , 2013 , 1 , 2000 , 101 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: 2014 :  "PhalaPanchamrutha Seva" , 2014 , 1 , 2000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-04-19 11:32:01.031 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-04-19 11:32:01.031 DBG default: Creating the SevaTypeNamesDataModel  

2023-04-19 11:32:01.031 DBG default: SevaBookingConformationDataModel::SevaBookingConformationDataModel(QObject*) 

2023-04-19 11:32:01.031 DBG default: JsonWriter::JsonWriter(QObject*) 

2023-04-19 11:32:01.031 DBG default: SevaTypeNamesDataModel::SevaTypeNamesDataModel(QObject*) 

2023-04-19 11:32:01.031 DBG default: void SevaTypeNamesDataModel::connectSignals() 

2023-04-19 11:32:01.031 DBG default: bool SevaTypeNamesDataModel::querySevaTypes() 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 3 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 4 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 5 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 6 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 7 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 8 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 9 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 10 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 11 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 12 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 13 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 14 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 15 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 16 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 0 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 18 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 19 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 20 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 25 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 22 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1000 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2000 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 26 

2023-04-19 11:32:01.032 DBG default: bool DBInterface::querySevaType() querying seva type done 

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::querySevaNames() 

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka"  Type = 1  SevaID = 2 

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))))
2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka"  Type = 1  SevaID = 3 

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))))
2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dwadashi Hasthodaka"  Type = 1  SevaID = 4 

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))))
2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi Homa"  Type = 9  SevaID = 5 

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))), QMap((5, SevaName(0x92d1248))))
2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Panchamrutha/Abhisheka"  Type = 1  SevaID = 6 

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))), QMap((5, SevaName(0x92d1248))))
2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Samanya Kanike"  Type = 1  SevaID = 7 

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))), QMap((5, SevaName(0x92d1248))))
2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shop Kanike"  Type = 11  SevaID = 9 

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))), QMap((5, SevaName(0x92d1248))), QMap((9, SevaName(0x92d0938))))
2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya thaila seva"  Type = 9  SevaID = 10 

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))), QMap((9, SevaName(0x92d0938))))
2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Building Fund"  Type = 12  SevaID = 11 

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))))
2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankar Pankthi"  Type = 4  SevaID = 12 

2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))), QMap((12, SevaName(0x92d12e8))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))))
2023-04-19 11:32:01.032 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Aradhna Kanike"  Type = 4  SevaID = 13 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadhana "  Type = 4  SevaID = 14 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hundi Collections"  Type = 13  SevaID = 15 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Khara Huggi"  Type = 8  SevaID = 16 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sweet Huggi"  Type = 8  SevaID = 17 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thatte Hasthodaka"  Type = 1  SevaID = 18 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Advance Recovered"  Type = 9  SevaID = 19 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PP - Rent"  Type = 14  SevaID = 20 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Annadana Seva"  Type = 3  SevaID = 23 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((23, SevaName(0x932bdc8))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa"  Type = 3  SevaID = 24 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa Sankalp"  Type = 3  SevaID = 25 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachna Seva-All days"  Type = 3  SevaID = 26 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachana seva- 1 day"  Type = 3  SevaID = 27 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami  Annadana Sankalpa Seva"  Type = 3  SevaID = 28 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Hoovina Alankara seva"  Type = 3  SevaID = 29 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navmi Sarva seva"  Type = 3  SevaID = 30 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sumadhwavijaya Parayana seva"  Type = 3  SevaID = 31 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Prakarosthava"  Type = 3  SevaID = 34 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Seva"  Type = 3  SevaID = 35 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Gruha Padapooja"  Type = 3  SevaID = 36 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Serva Seva"  Type = 1  SevaID = 37 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Kanike"  Type = 3  SevaID = 38 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Annadana seva "  Type = 3  SevaID = 39 

2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.033 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pandith Sanman"  Type = 3  SevaID = 40 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M  Navami Panchamurtha "  Type = 3  SevaID = 41 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Shanthi Homa"  Type = 15  SevaID = 42 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Padapooja"  Type = 3  SevaID = 43 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Madhu Abhiseka"  Type = 3  SevaID = 44 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gopaladasara Aradhane"  Type = 16  SevaID = 45 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Additional Sweets"  Type = 9  SevaID = 46 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina alankara Seva"  Type = 1  SevaID = 47 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prasada Seve"  Type = 1  SevaID = 48 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka- 2 Hasthodaka"  Type = 1  SevaID = 49 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sathyanarayana Pooje"  Type = 10  SevaID = 50 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "AYUSH HOMA"  Type = 15  SevaID = 51 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILA ABHYANJANA"  Type = 9  SevaID = 52 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharana"  Type = 9  SevaID = 53 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI  SAMPOORNA SEVE"  Type = 2  SevaID = 54 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI SANKLAPA SEVE"  Type = 2  SevaID = 55 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA"  Type = 2  SevaID = 56 

2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.034 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA SANKALPA"  Type = 2  SevaID = 57 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SITA RAMA KALYANOTSVA"  Type = 2  SevaID = 58 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMA KALYANOTSAVA SANKALPAA"  Type = 2  SevaID = 59 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA PRAVACHANA SEVE "  Type = 2  SevaID = 60 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "YELLA DINAGALA PRAVACHANA SEVE"  Type = 2  SevaID = 61 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "HOOVINA ALANKARA"  Type = 2  SevaID = 62 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi"  Type = 2  SevaID = 63 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA SANJE PRASADA SEVE"  Type = 2  SevaID = 64 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "VISHESHA PANCHAMRUTA"  Type = 2  SevaID = 65 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRAKAROTSVA"  Type = 2  SevaID = 66 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILABYAJANA SEVE"  Type = 2  SevaID = 67 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ARCHANE"  Type = 2  SevaID = 68 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Raghavendra Swamy Aradhane"  Type = 16  SevaID = 69 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Abhisheka Madhu/Panchamrutha"  Type = 4  SevaID = 70 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtottara"  Type = 4  SevaID = 71 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara"  Type = 4  SevaID = 72 

2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))))
2023-04-19 11:32:01.035 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 4  SevaID = 73 

2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))))
2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Deepalankarana Seve"  Type = 7  SevaID = 74 

2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))))
2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tarakari Seve"  Type = 1  SevaID = 75 

2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))))
2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seva"  Type = 4  SevaID = 76 

2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))))
2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Bhiksha kanike"  Type = 18  SevaID = 77 

2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))))
2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "hastodaka P P"  Type = 5  SevaID = 78 

2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))))
2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka P P"  Type = 5  SevaID = 79 

2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))))
2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa  P P"  Type = 5  SevaID = 80 

2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))))
2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Nanda Deepa for 9 days"  Type = 6  SevaID = 81 

2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))))
2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Nanda Deepa for  9 days"  Type = 6  SevaID = 82 

2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))))
2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Deepa for 1 day"  Type = 6  SevaID = 83 

2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))))
2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Deepa for 1 day"  Type = 6  SevaID = 84 

2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))))
2023-04-19 11:32:01.036 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seve"  Type = 1  SevaID = 85 

2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))))
2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadana Kanike"  Type = 1  SevaID = 86 

2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))))
2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana"  Type = 19  SevaID = 87 

2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))))
2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana for one day"  Type = 19  SevaID = 88 

2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana Seva for one day"  Type = 6  SevaID = 89 

2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nitya Deepaseve"  Type = 7  SevaID = 90 

2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjana"  Type = 7  SevaID = 91 

2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Seve"  Type = 7  SevaID = 92 

2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Laksha Deepostava"  Type = 7  SevaID = 93 

2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Pratyekavagi "  Type = 7  SevaID = 94 

2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulasi Damodara Vivaha sankalpa"  Type = 7  SevaID = 95 

2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.037 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sampoorna Seve "  Type = 7  SevaID = 96 

2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sankalpa Seve "  Type = 7  SevaID = 97 

2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Hoovina Alankara "  Type = 7  SevaID = 98 

2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha Abhisheka "  Type = 7  SevaID = 99 

2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vijaya Dasara Aradhane"  Type = 16  SevaID = 100 

2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarotsva"  Type = 1  SevaID = 101 

2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 0  SevaID = 102 

2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 1  SevaID = 103 

2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtotthara Kanike"  Type = 1  SevaID = 104 

2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Santhana Gopala Krishna Homa"  Type = 15  SevaID = 105 

2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.038 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamana Homa"  Type = 15  SevaID = 106 

2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))))
2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shashwatha Seva Pooje"  Type = 20  SevaID = 107 

2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))))
2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Regular"  Type = 1  SevaID = 108 

2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))))
2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Seva"  Type = 8  SevaID = 109 

2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))))
2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mosaranna Naivedya"  Type = 9  SevaID = 110 

2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))))
2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Poorna Pragna Hall Kanike"  Type = 14  SevaID = 111 

2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))), QMap((50, SevaName(0x932bcd8))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))))
2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pratyeka Sathyanarayana Pooja"  Type = 10  SevaID = 112 

2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))))
2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chikka Adige"  Type = 9  SevaID = 113 

2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))))
2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha"  Type = 21  SevaID = 114 

2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))))
2023-04-19 11:32:01.039 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjan seve"  Type = 21  SevaID = 115 

2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))))
2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri SeethaRamanjaneyarige Nuthana Vastra Dharane pratidevarige."  Type = 21  SevaID = 116 

2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))))
2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 21  SevaID = 117 

2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))))
2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane"  Type = 21  SevaID = 118 

2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))))
2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara seve"  Type = 21  SevaID = 119 

2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))))
2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ramanavami Kanike"  Type = 2  SevaID = 120 

2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))))
2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Villeydhele Hara"  Type = 1  SevaID = 121 

2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))))
2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gandha Lepana "  Type = 22  SevaID = 122 

2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))))
2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phalahara Pooja"  Type = 9  SevaID = 123 

2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))))
2023-04-19 11:32:01.040 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 15  SevaID = 124 

2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))))
2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Monthly"  Type = 1  SevaID = 125 

2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))))
2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Jayathirtha Aradhane Kanike"  Type = 16  SevaID = 126 

2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))))
2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Oldarticals sold"  Type = 9  SevaID = 127 

2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))))
2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Udayaasthamaana Seva"  Type = 1000  SevaID = 1001 

2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))))
2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Seva"  Type = 1000  SevaID = 1002 

2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))))
2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Samarpana Seva"  Type = 1000  SevaID = 1003 

2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))))
2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakaabhisheka"  Type = 1000  SevaID = 1004 

2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))))
2023-04-19 11:32:01.041 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Godhana"  Type = 1000  SevaID = 1005 

2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))))
2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mahaa Pooja"  Type = 1000  SevaID = 1006 

2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))))
2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ksheeraabhisheka"  Type = 1000  SevaID = 1007 

2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))))
2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Madhu Abhisheka"  Type = 1000  SevaID = 1008 

2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))))
2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Yella Homagala Seva"  Type = 1000  SevaID = 1010 

2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))))
2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Naivedhya/Hasthodaka"  Type = 1000  SevaID = 1011 

2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))))
2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phala - Panchaamrutha"  Type = 1000  SevaID = 1012 

2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))))
2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ganapathi Abhisheka"  Type = 1000  SevaID = 1013 

2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))))
2023-04-19 11:32:01.042 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nagadevara Abhisheka"  Type = 1000  SevaID = 1014 

2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))))
2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Abhisheka"  Type = 1000  SevaID = 1015 

2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))))
2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rathothsava"  Type = 1000  SevaID = 1016 

2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))))
2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Naivedhya"  Type = 1000  SevaID = 1017 

2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))))
2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pongal Naivedhya"  Type = 1000  SevaID = 1018 

2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))))
2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi"  Type = 1000  SevaID = 1019 

2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))))
2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika - Rathothsava"  Type = 1000  SevaID = 1020 

2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))))
2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika Seva"  Type = 1000  SevaID = 1021 

2023-04-19 11:32:01.043 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))))
2023-04-19 11:32:01.044 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri Sathya Narayana Pooja"  Type = 1000  SevaID = 1022 

2023-04-19 11:32:01.044 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))))
2023-04-19 11:32:01.044 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulsi Archane"  Type = 1000  SevaID = 1023 

2023-04-19 11:32:01.044 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))))
2023-04-19 11:32:01.044 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka Shraadha"  Type = 1000  SevaID = 1024 

2023-04-19 11:32:01.044 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))))
2023-04-19 11:32:01.044 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa Shraadha"  Type = 1000  SevaID = 1025 

2023-04-19 11:32:01.044 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))))
2023-04-19 11:32:01.044 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vaahana Pooja"  Type = 1000  SevaID = 1026 

2023-04-19 11:32:01.044 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))))
2023-04-19 11:32:01.044 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane Seva"  Type = 1000  SevaID = 1027 

2023-04-19 11:32:01.044 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))))
2023-04-19 11:32:01.044 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Lakshmi Pooja"  Type = 1000  SevaID = 1028 

2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))))
2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Devarige Thailaabhisheka"  Type = 1000  SevaID = 1029 

2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))))
2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamaana Homa"  Type = 1000  SevaID = 1030 

2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))))
2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gana Homa"  Type = 1000  SevaID = 1031 

2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))))
2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mruthyunjaya Homa"  Type = 1000  SevaID = 1032 

2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))))
2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rudraabhisheka"  Type = 1000  SevaID = 1033 

2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))))
2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Sampurna Seva"  Type = 2000  SevaID = 2001 

2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))), QMap((2001, SevaName(0x933a760))))
2023-04-19 11:32:01.045 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Anna Santharpane Seva"  Type = 2000  SevaID = 2002 

2023-04-19 11:32:01.046 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))), QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))))
2023-04-19 11:32:01.046 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva(Huvina Alankara)"  Type = 2000  SevaID = 2003 

2023-04-19 11:32:01.046 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))), QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))(2003, SevaName(0x93509a0))))
2023-04-19 11:32:01.046 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva"  Type = 2000  SevaID = 2004 

2023-04-19 11:32:01.046 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))), QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))(2003, SevaName(0x93509a0))(2004, SevaName(0x9350ae0))))
2023-04-19 11:32:01.046 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Noothana Vastra Seva"  Type = 2000  SevaID = 2005 

2023-04-19 11:32:01.046 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))), QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))(2003, SevaName(0x93509a0))(2004, SevaName(0x9350ae0))(2005, SevaName(0x9350cc0))))
2023-04-19 11:32:01.046 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva seva"  Type = 2000  SevaID = 2006 

2023-04-19 11:32:01.046 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))), QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))(2003, SevaName(0x93509a0))(2004, SevaName(0x9350ae0))(2005, SevaName(0x9350cc0))(2006, SevaName(0x9350680))))
2023-04-19 11:32:01.046 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakabhisheka Seva"  Type = 2000  SevaID = 2007 

2023-04-19 11:32:01.046 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))), QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))(2003, SevaName(0x93509a0))(2004, SevaName(0x9350ae0))(2005, SevaName(0x9350cc0))(2006, SevaName(0x9350680))(2007, SevaName(0x93504f0))))
2023-04-19 11:32:01.046 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Seva(Prathidina)"  Type = 2000  SevaID = 2009 

2023-04-19 11:32:01.047 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))), QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))(2003, SevaName(0x93509a0))(2004, SevaName(0x9350ae0))(2005, SevaName(0x9350cc0))(2006, SevaName(0x9350680))(2007, SevaName(0x93504f0))(2009, SevaName(0x9350810))))
2023-04-19 11:32:01.047 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "MahaPooje"  Type = 2000  SevaID = 2010 

2023-04-19 11:32:01.047 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))), QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))(2003, SevaName(0x93509a0))(2004, SevaName(0x9350ae0))(2005, SevaName(0x9350cc0))(2006, SevaName(0x9350680))(2007, SevaName(0x93504f0))(2009, SevaName(0x9350810))(2010, SevaName(0x93506d0))))
2023-04-19 11:32:01.047 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtothara Seva(Prathidina)"  Type = 2000  SevaID = 2011 

2023-04-19 11:32:01.047 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))), QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))(2003, SevaName(0x93509a0))(2004, SevaName(0x9350ae0))(2005, SevaName(0x9350cc0))(2006, SevaName(0x9350680))(2007, SevaName(0x93504f0))(2009, SevaName(0x9350810))(2010, SevaName(0x93506d0))(2011, SevaName(0x9350b30))))
2023-04-19 11:32:01.047 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Paadakaradhane"  Type = 2000  SevaID = 2012 

2023-04-19 11:32:01.047 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))), QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))(2003, SevaName(0x93509a0))(2004, SevaName(0x9350ae0))(2005, SevaName(0x9350cc0))(2006, SevaName(0x9350680))(2007, SevaName(0x93504f0))(2009, SevaName(0x9350810))(2010, SevaName(0x93506d0))(2011, SevaName(0x9350b30))(2012, SevaName(0x9350950))))
2023-04-19 11:32:01.047 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 2000  SevaID = 2013 

2023-04-19 11:32:01.047 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))), QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))(2003, SevaName(0x93509a0))(2004, SevaName(0x9350ae0))(2005, SevaName(0x9350cc0))(2006, SevaName(0x9350680))(2007, SevaName(0x93504f0))(2009, SevaName(0x9350810))(2010, SevaName(0x93506d0))(2011, SevaName(0x9350b30))(2012, SevaName(0x9350950))(2013, SevaName(0x9350bd0))))
2023-04-19 11:32:01.047 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PhalaPanchamrutha Seva"  Type = 2000  SevaID = 2014 

2023-04-19 11:32:01.047 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x933c0b0))), QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))), QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))), QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))), QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))), QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))), QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))), QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))), QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))), QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))), QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))), QMap((9, SevaName(0x92d0938))), QMap((11, SevaName(0x92d1388))), QMap((15, SevaName(0x92d1428))), QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))), QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))), QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))), QMap((77, SevaName(0x933b020))), QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))), QMap((107, SevaName(0x933bca0))), QMap((114, SevaName(0x933c240))(115, SevaName(0x933b8e0))(116, SevaName(0x933b890))(117, SevaName(0x933b930))(118, SevaName(0x933bac0))(119, SevaName(0x933b9d0))), QMap((122, SevaName(0x933bde0))), QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))), QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))(2003, SevaName(0x93509a0))(2004, SevaName(0x9350ae0))(2005, SevaName(0x9350cc0))(2006, SevaName(0x9350680))(2007, SevaName(0x93504f0))(2009, SevaName(0x9350810))(2010, SevaName(0x93506d0))(2011, SevaName(0x9350b30))(2012, SevaName(0x9350950))(2013, SevaName(0x9350bd0))(2014, SevaName(0x93509f0))))
2023-04-19 11:32:01.047 DBG default: bool DBInterface::querySevaNames() querying seva names done 

2023-04-19 11:32:01.047 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:01.047 DBG default: UserManagement::UserManagement(QObject*) 

2023-04-19 11:32:01.047 DBG default: The role number recieved -1 

2023-04-19 11:32:01.047 DBG default: SevaDetailsTableView::SevaDetailsTableView(QObject*) 

2023-04-19 11:32:01.054 DBG default: AccountReportModel::AccountReportModel(QObject*) 

2023-04-19 11:32:01.054 DBG default: AccountReportDateRangeModel::AccountReportDateRangeModel(QObject*) 

2023-04-19 11:32:01.054 DBG default: AccountReportMonthWiseModel::AccountReportMonthWiseModel(QObject*) 

2023-04-19 11:32:01.054 DBG default: BookingReportDateRangeModel::BookingReportDateRangeModel(QObject*) 

2023-04-19 11:32:01.054 DBG default: BookingReportMonthWiseModel::BookingReportMonthWiseModel(QObject*) 

2023-04-19 11:32:01.054 DBG default: SevaBookingTableModel::SevaBookingTableModel(QObject*) 

2023-04-19 11:32:01.054 DBG default: SevaBookingSearchModel::SevaBookingSearchModel(QObject*) 

2023-04-19 11:32:01.054 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-04-19 11:32:01.054 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-04-19 11:32:01.054 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-04-19 11:32:01.054 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-04-19 11:32:01.054 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Date = 19  Mon = 4  Year = 2023
2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "1" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "2" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "3" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "3" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "3" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "4" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "4" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "4" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "5" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "5" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "5" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "6" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "6" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "6" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "6" 

2023-04-19 11:32:01.054 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "7" 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "8" 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "9" 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "9" 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "9" 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "9" 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "10" 

2023-04-19 11:32:01.055 WRN default: QSqlQuery::value: not positioned on a valid record
2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastReceiptNumber()  Size =  -1  receiptNo ID =  10  Value =  QVariant(Invalid) 

2023-04-19 11:32:01.055 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Last ReceiptNo from DB = 11  Generated = "2023_4_0011" 

2023-04-19 11:32:01.055 DBG default: QString SevaViewProxy::getNextReceiptNumber()  r number =  "2023_4_0011" 

2023-04-19 11:32:01.055 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-04-19 11:32:01.055 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-04-19 11:32:01.055 DBG default: SevaCountOnDateModel::SevaCountOnDateModel(QObject*) 

2023-04-19 11:32:01.055 DBG default: saveVoucher::saveVoucher(QObject*) 

2023-04-19 11:32:01.055 DBG default: virtual QString VoucherNumber::getNextVoucherNumber() 

2023-04-19 11:32:01.055 DBG default: int DBInterface::getLastVoucherNumber() 

2023-04-19 11:32:01.055 DBG default: 752 

2023-04-19 11:32:01.055 DBG default: "753" 

2023-04-19 11:32:01.055 DBG default: VoucherReportModel::VoucherReportModel(QObject*) 

2023-04-19 11:32:01.055 DBG default: QString TrustListModel::getConfigLocation() 

2023-04-19 11:32:01.055 DBG default: QString TrustListModel::getDataLocation() 

2023-04-19 11:32:01.055 DBG qml: str1 = --D:/TempleFile/TempleRamMadirupdatingNew2023/bins/Config/Hubablli
2023-04-19 11:32:01.055 DBG qml: str2 = --D:/TempleFile/TempleRamMadirupdatingNew2023/bins/Data/Hubablli
2023-04-19 11:32:01.085 DBG qml: The Page Number=== 0
2023-04-19 11:32:01.085 DBG qml: The page number is 0
2023-04-19 11:32:01.085 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-04-19 11:32:01.085 DBG qml: Screen screenWidth size =1920
2023-04-19 11:32:01.085 DBG qml: Screen screenHeight size =1000
2023-04-19 11:32:01.085 WRN default: qrc:/ui/Login.qml:37:13: Unable to assign [undefined] to bool
2023-04-19 11:32:01.085 WRN default: qrc:/ui/Login.qml:44:13: Unable to assign [undefined] to bool
2023-04-19 11:32:01.085 WRN default: qrc:/ui/Login.qml:80:17: Unable to assign [undefined] to bool
2023-04-19 11:32:01.085 DBG default: int TrustListModel::getTrustListSize() 

2023-04-19 11:32:12.589 DBG default: void UserManagement::authorize(QString, QString) "admin" "admin123" 

2023-04-19 11:32:12.589 DBG qml: Credentials are correct
2023-04-19 11:32:12.589 DBG qml: Wrong credentials 0
2023-04-19 11:32:12.609 DBG qml: the accounts enable false
2023-04-19 11:32:12.609 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-04-19 11:32:12.609 DBG qml: Screen screenWidth size =1920
2023-04-19 11:32:12.609 DBG qml: Screen screenHeight size =1000
2023-04-19 11:32:12.609 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-04-19 11:32:12.609 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-04-19 11:32:12.609 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-04-19 11:32:12.609 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-04-19 11:32:12.609 DBG default: The role number is 1 

2023-04-19 11:32:12.609 DBG default: The role number recieved 1 

2023-04-19 11:32:13.689 DBG qml: loading from main
2023-04-19 11:32:13.695 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-04-19 11:32:13.695 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-04-19 11:32:13.695 DBG qml: admin button clicked
2023-04-19 11:32:13.695 DBG qml: this is admin
2023-04-19 11:32:17.140 DBG qml: User Management button clicked
2023-04-19 11:32:17.140 DBG qml: User Management loading
2023-04-19 11:32:17.173 DBG qml: focus changed
2023-04-19 11:32:17.173 DBG qml: focus changed
2023-04-19 11:32:17.175 WRN default: qrc:/ui/Admin/UserManagement.qml:150:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-04-19 11:32:20.730 DBG qml: loading Menu page from main
2023-04-19 11:32:20.738 DBG qml: the accounts enable true
2023-04-19 11:32:20.738 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-04-19 11:32:20.738 DBG qml: Screen screenWidth size =1920
2023-04-19 11:32:20.738 DBG qml: Screen screenHeight size =1000
2023-04-19 11:32:20.738 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-04-19 11:32:20.738 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-04-19 11:32:20.738 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-04-19 11:32:20.738 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-04-19 11:32:23.047 DBG qml: Seva Booking Button Clicked
2023-04-19 11:32:23.047 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.047 DBG default: bool SevaTypeViewModel::init() 

2023-04-19 11:32:23.047 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.047 DBG default: bool SevaTypeViewModel::init()  Number of Seva Types = 25 

2023-04-19 11:32:23.047 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.047 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.047 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.049 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.049 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-04-19 11:32:23.049 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.049 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.049 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.049 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.049 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-04-19 11:32:23.049 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x933c0b0))) 
(SevaName(0x933c0b0)) 

2023-04-19 11:32:23.049 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933c0b0)) 

2023-04-19 11:32:23.049 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-04-19 11:32:23.049 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x933c0b0))) 
(SevaName(0x933c0b0)) 

2023-04-19 11:32:23.049 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.049 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.049 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.049 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.049 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1 

2023-04-19 11:32:23.049 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.049 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.049 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.049 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.049 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-04-19 11:32:23.050 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))) 
(SevaName(0x92d0e38), SevaName(0x92d0a28), SevaName(0x92d0a78), SevaName(0x92d0e88), SevaName(0x92d1298), SevaName(0x932b5a8), SevaName(0x932b4b8), SevaName(0x932b968), SevaName(0x932b9b8), SevaName(0x932bc88), SevaName(0x933b430), SevaName(0x933afd0), SevaName(0x933b7a0), SevaName(0x933c060), SevaName(0x933bb60), SevaName(0x933b980), SevaName(0x933bf20), SevaName(0x933bb10), SevaName(0x933be80)) 

2023-04-19 11:32:23.050 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x92d0e38), SevaName(0x92d0a28), SevaName(0x92d0a78), SevaName(0x92d0e88), SevaName(0x92d1298), SevaName(0x932b5a8), SevaName(0x932b4b8), SevaName(0x932b968), SevaName(0x932b9b8), SevaName(0x932bc88), SevaName(0x933b430), SevaName(0x933afd0), SevaName(0x933b7a0), SevaName(0x933c060), SevaName(0x933bb60), SevaName(0x933b980), SevaName(0x933bf20), SevaName(0x933bb10), SevaName(0x933be80)) 

2023-04-19 11:32:23.050 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-04-19 11:32:23.050 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x92d0e38))(3, SevaName(0x92d0a28))(4, SevaName(0x92d0a78))(6, SevaName(0x92d0e88))(7, SevaName(0x92d1298))(18, SevaName(0x932b5a8))(37, SevaName(0x932b4b8))(47, SevaName(0x932b968))(48, SevaName(0x932b9b8))(49, SevaName(0x932bc88))(75, SevaName(0x933b430))(85, SevaName(0x933afd0))(86, SevaName(0x933b7a0))(101, SevaName(0x933c060))(103, SevaName(0x933bb60))(104, SevaName(0x933b980))(108, SevaName(0x933bf20))(121, SevaName(0x933bb10))(125, SevaName(0x933be80))) 
(SevaName(0x92d0e38), SevaName(0x92d0a28), SevaName(0x92d0a78), SevaName(0x92d0e88), SevaName(0x92d1298), SevaName(0x932b5a8), SevaName(0x932b4b8), SevaName(0x932b968), SevaName(0x932b9b8), SevaName(0x932bc88), SevaName(0x933b430), SevaName(0x933afd0), SevaName(0x933b7a0), SevaName(0x933c060), SevaName(0x933bb60), SevaName(0x933b980), SevaName(0x933bf20), SevaName(0x933bb10), SevaName(0x933be80)) 

2023-04-19 11:32:23.050 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.050 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.050 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.050 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.050 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 2 

2023-04-19 11:32:23.050 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.050 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.050 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.050 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.050 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-04-19 11:32:23.050 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))) 
(SevaName(0x932c2c8), SevaName(0x932c318), SevaName(0x932c3b8), SevaName(0x932bff8), SevaName(0x932c1d8), SevaName(0x932c368), SevaName(0x932beb8), SevaName(0x932bf58), SevaName(0x932c048), SevaName(0x932c098), SevaName(0x932bfa8), SevaName(0x932c138), SevaName(0x932c228), SevaName(0x932c188), SevaName(0x933b520), SevaName(0x933bd40)) 

2023-04-19 11:32:23.051 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x932c2c8), SevaName(0x932c318), SevaName(0x932c3b8), SevaName(0x932bff8), SevaName(0x932c1d8), SevaName(0x932c368), SevaName(0x932beb8), SevaName(0x932bf58), SevaName(0x932c048), SevaName(0x932c098), SevaName(0x932bfa8), SevaName(0x932c138), SevaName(0x932c228), SevaName(0x932c188), SevaName(0x933b520), SevaName(0x933bd40)) 

2023-04-19 11:32:23.051 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-04-19 11:32:23.051 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x932c2c8))(55, SevaName(0x932c318))(56, SevaName(0x932c3b8))(57, SevaName(0x932bff8))(58, SevaName(0x932c1d8))(59, SevaName(0x932c368))(60, SevaName(0x932beb8))(61, SevaName(0x932bf58))(62, SevaName(0x932c048))(63, SevaName(0x932c098))(64, SevaName(0x932bfa8))(65, SevaName(0x932c138))(66, SevaName(0x932c228))(67, SevaName(0x932c188))(68, SevaName(0x933b520))(120, SevaName(0x933bd40))) 
(SevaName(0x932c2c8), SevaName(0x932c318), SevaName(0x932c3b8), SevaName(0x932bff8), SevaName(0x932c1d8), SevaName(0x932c368), SevaName(0x932beb8), SevaName(0x932bf58), SevaName(0x932c048), SevaName(0x932c098), SevaName(0x932bfa8), SevaName(0x932c138), SevaName(0x932c228), SevaName(0x932c188), SevaName(0x933b520), SevaName(0x933bd40)) 

2023-04-19 11:32:23.051 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.051 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.051 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.051 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.051 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 3 

2023-04-19 11:32:23.051 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.051 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.051 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.051 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.051 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-04-19 11:32:23.051 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))) 
(SevaName(0x932bdc8), SevaName(0x932bbe8), SevaName(0x932bd28), SevaName(0x932b508), SevaName(0x932bb48), SevaName(0x932be18), SevaName(0x932bc38), SevaName(0x932b5f8), SevaName(0x932b878), SevaName(0x932b468), SevaName(0x932ba58), SevaName(0x932ba08), SevaName(0x932b698), SevaName(0x932baa8), SevaName(0x932b8c8), SevaName(0x932b6e8), SevaName(0x932bb98), SevaName(0x932b788)) 

2023-04-19 11:32:23.051 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x932bdc8), SevaName(0x932bbe8), SevaName(0x932bd28), SevaName(0x932b508), SevaName(0x932bb48), SevaName(0x932be18), SevaName(0x932bc38), SevaName(0x932b5f8), SevaName(0x932b878), SevaName(0x932b468), SevaName(0x932ba58), SevaName(0x932ba08), SevaName(0x932b698), SevaName(0x932baa8), SevaName(0x932b8c8), SevaName(0x932b6e8), SevaName(0x932bb98), SevaName(0x932b788)) 

2023-04-19 11:32:23.051 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-04-19 11:32:23.052 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x932bdc8))(24, SevaName(0x932bbe8))(25, SevaName(0x932bd28))(26, SevaName(0x932b508))(27, SevaName(0x932bb48))(28, SevaName(0x932be18))(29, SevaName(0x932bc38))(30, SevaName(0x932b5f8))(31, SevaName(0x932b878))(34, SevaName(0x932b468))(35, SevaName(0x932ba58))(36, SevaName(0x932ba08))(38, SevaName(0x932b698))(39, SevaName(0x932baa8))(40, SevaName(0x932b8c8))(41, SevaName(0x932b6e8))(43, SevaName(0x932bb98))(44, SevaName(0x932b788))) 
(SevaName(0x932bdc8), SevaName(0x932bbe8), SevaName(0x932bd28), SevaName(0x932b508), SevaName(0x932bb48), SevaName(0x932be18), SevaName(0x932bc38), SevaName(0x932b5f8), SevaName(0x932b878), SevaName(0x932b468), SevaName(0x932ba58), SevaName(0x932ba08), SevaName(0x932b698), SevaName(0x932baa8), SevaName(0x932b8c8), SevaName(0x932b6e8), SevaName(0x932bb98), SevaName(0x932b788)) 

2023-04-19 11:32:23.052 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.052 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.052 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.052 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.052 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 4 

2023-04-19 11:32:23.052 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.052 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.052 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.052 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.052 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-04-19 11:32:23.052 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))) 
(SevaName(0x92d12e8), SevaName(0x92d1338), SevaName(0x92d13d8), SevaName(0x933b7f0), SevaName(0x933aee0), SevaName(0x933b840), SevaName(0x933b390), SevaName(0x933b570)) 

2023-04-19 11:32:23.052 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x92d12e8), SevaName(0x92d1338), SevaName(0x92d13d8), SevaName(0x933b7f0), SevaName(0x933aee0), SevaName(0x933b840), SevaName(0x933b390), SevaName(0x933b570)) 

2023-04-19 11:32:23.052 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-04-19 11:32:23.052 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x92d12e8))(13, SevaName(0x92d1338))(14, SevaName(0x92d13d8))(70, SevaName(0x933b7f0))(71, SevaName(0x933aee0))(72, SevaName(0x933b840))(73, SevaName(0x933b390))(76, SevaName(0x933b570))) 
(SevaName(0x92d12e8), SevaName(0x92d1338), SevaName(0x92d13d8), SevaName(0x933b7f0), SevaName(0x933aee0), SevaName(0x933b840), SevaName(0x933b390), SevaName(0x933b570)) 

2023-04-19 11:32:23.052 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.052 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.052 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.052 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.052 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 5 

2023-04-19 11:32:23.052 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.052 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.052 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))) 
(SevaName(0x933b070), SevaName(0x933af30), SevaName(0x933b340)) 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933b070), SevaName(0x933af30), SevaName(0x933b340)) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x933b070))(79, SevaName(0x933af30))(80, SevaName(0x933b340))) 
(SevaName(0x933b070), SevaName(0x933af30), SevaName(0x933b340)) 

2023-04-19 11:32:23.053 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 6 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.053 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))) 
(SevaName(0x933b5c0), SevaName(0x933af80), SevaName(0x933b610), SevaName(0x933b480), SevaName(0x933b160)) 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933b5c0), SevaName(0x933af80), SevaName(0x933b610), SevaName(0x933b480), SevaName(0x933b160)) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x933b5c0))(82, SevaName(0x933af80))(83, SevaName(0x933b610))(84, SevaName(0x933b480))(89, SevaName(0x933b160))) 
(SevaName(0x933b5c0), SevaName(0x933af80), SevaName(0x933b610), SevaName(0x933b480), SevaName(0x933b160)) 

2023-04-19 11:32:23.053 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 7 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.053 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))) 
(SevaName(0x933ae90), SevaName(0x933b660), SevaName(0x933b1b0), SevaName(0x933b2a0), SevaName(0x933b750), SevaName(0x933b250), SevaName(0x933b3e0), SevaName(0x933b2f0), SevaName(0x933bfc0), SevaName(0x933bd90), SevaName(0x933c010)) 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933ae90), SevaName(0x933b660), SevaName(0x933b1b0), SevaName(0x933b2a0), SevaName(0x933b750), SevaName(0x933b250), SevaName(0x933b3e0), SevaName(0x933b2f0), SevaName(0x933bfc0), SevaName(0x933bd90), SevaName(0x933c010)) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x933ae90))(90, SevaName(0x933b660))(91, SevaName(0x933b1b0))(92, SevaName(0x933b2a0))(93, SevaName(0x933b750))(94, SevaName(0x933b250))(95, SevaName(0x933b3e0))(96, SevaName(0x933b2f0))(97, SevaName(0x933bfc0))(98, SevaName(0x933bd90))(99, SevaName(0x933c010))) 
(SevaName(0x933ae90), SevaName(0x933b660), SevaName(0x933b1b0), SevaName(0x933b2a0), SevaName(0x933b750), SevaName(0x933b250), SevaName(0x933b3e0), SevaName(0x933b2f0), SevaName(0x933bfc0), SevaName(0x933bd90), SevaName(0x933c010)) 

2023-04-19 11:32:23.053 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 8 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.053 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))) 
(SevaName(0x932b828), SevaName(0x932b558), SevaName(0x933bcf0)) 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x932b828), SevaName(0x932b558), SevaName(0x933bcf0)) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x932b828))(17, SevaName(0x932b558))(109, SevaName(0x933bcf0))) 
(SevaName(0x932b828), SevaName(0x932b558), SevaName(0x933bcf0)) 

2023-04-19 11:32:23.053 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 9 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.053 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))) 
(SevaName(0x92d1248), SevaName(0x92d0ed8), SevaName(0x932baf8), SevaName(0x932b918), SevaName(0x932c0e8), SevaName(0x932bf08), SevaName(0x933ba20), SevaName(0x933c1f0), SevaName(0x933ba70), SevaName(0x933c2e0)) 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x92d1248), SevaName(0x92d0ed8), SevaName(0x932baf8), SevaName(0x932b918), SevaName(0x932c0e8), SevaName(0x932bf08), SevaName(0x933ba20), SevaName(0x933c1f0), SevaName(0x933ba70), SevaName(0x933c2e0)) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x92d1248))(10, SevaName(0x92d0ed8))(19, SevaName(0x932baf8))(46, SevaName(0x932b918))(52, SevaName(0x932c0e8))(53, SevaName(0x932bf08))(110, SevaName(0x933ba20))(113, SevaName(0x933c1f0))(123, SevaName(0x933ba70))(127, SevaName(0x933c2e0))) 
(SevaName(0x92d1248), SevaName(0x92d0ed8), SevaName(0x932baf8), SevaName(0x932b918), SevaName(0x932c0e8), SevaName(0x932bf08), SevaName(0x933ba20), SevaName(0x933c1f0), SevaName(0x933ba70), SevaName(0x933c2e0)) 

2023-04-19 11:32:23.053 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 10 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.053 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))) 
(SevaName(0x932bcd8), SevaName(0x933c1a0)) 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x932bcd8), SevaName(0x933c1a0)) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x932bcd8))(112, SevaName(0x933c1a0))) 
(SevaName(0x932bcd8), SevaName(0x933c1a0)) 

2023-04-19 11:32:23.053 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 11 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.053 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x92d0938))) 
(SevaName(0x92d0938)) 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x92d0938)) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x92d0938))) 
(SevaName(0x92d0938)) 

2023-04-19 11:32:23.053 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 12 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.053 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x92d1388))) 
(SevaName(0x92d1388)) 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x92d1388)) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x92d1388))) 
(SevaName(0x92d1388)) 

2023-04-19 11:32:23.053 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 13 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.053 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x92d1428))) 
(SevaName(0x92d1428)) 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x92d1428)) 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-04-19 11:32:23.053 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x92d1428))) 
(SevaName(0x92d1428)) 

2023-04-19 11:32:23.053 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.053 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 14 

2023-04-19 11:32:23.053 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.055 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))) 
(SevaName(0x932bd78), SevaName(0x933c150)) 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x932bd78), SevaName(0x933c150)) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x932bd78))(111, SevaName(0x933c150))) 
(SevaName(0x932bd78), SevaName(0x933c150)) 

2023-04-19 11:32:23.055 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 15 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.055 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))) 
(SevaName(0x932b738), SevaName(0x932c278), SevaName(0x933bed0), SevaName(0x933bf70), SevaName(0x933be30)) 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x932b738), SevaName(0x932c278), SevaName(0x933bed0), SevaName(0x933bf70), SevaName(0x933be30)) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x932b738))(51, SevaName(0x932c278))(105, SevaName(0x933bed0))(106, SevaName(0x933bf70))(124, SevaName(0x933be30))) 
(SevaName(0x932b738), SevaName(0x932c278), SevaName(0x933bed0), SevaName(0x933bf70), SevaName(0x933be30)) 

2023-04-19 11:32:23.055 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 16 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.055 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))) 
(SevaName(0x932b7d8), SevaName(0x933b6b0), SevaName(0x933bc00), SevaName(0x933c3d0)) 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x932b7d8), SevaName(0x933b6b0), SevaName(0x933bc00), SevaName(0x933c3d0)) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x932b7d8))(69, SevaName(0x933b6b0))(100, SevaName(0x933bc00))(126, SevaName(0x933c3d0))) 
(SevaName(0x932b7d8), SevaName(0x933b6b0), SevaName(0x933bc00), SevaName(0x933c3d0)) 

2023-04-19 11:32:23.055 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 18 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.055 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x933b020))) 
(SevaName(0x933b020)) 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933b020)) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x933b020))) 
(SevaName(0x933b020)) 

2023-04-19 11:32:23.055 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 19 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.055 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))) 
(SevaName(0x933b200), SevaName(0x933b0c0)) 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933b200), SevaName(0x933b0c0)) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x933b200))(88, SevaName(0x933b0c0))) 
(SevaName(0x933b200), SevaName(0x933b0c0)) 

2023-04-19 11:32:23.055 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 20 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.055 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x933bca0))) 
(SevaName(0x933bca0)) 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933bca0)) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x933bca0))) 
(SevaName(0x933bca0)) 

2023-04-19 11:32:23.055 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 22 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.055 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x933bde0))) 
(SevaName(0x933bde0)) 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933bde0)) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x933bde0))) 
(SevaName(0x933bde0)) 

2023-04-19 11:32:23.055 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 25 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.055 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 25 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) () 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 25 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-04-19 11:32:23.055 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.055 DBG qml: seveListModel  for if((sevaProxy.getSevaModel(100).getSevaListViewModel/*.getSevaListViewModel*/===0))
2023-04-19 11:32:23.055 DBG qml:  countIfSevaNamesPresentInSevaTypes++ 1
2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 26 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.055 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 26 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) () 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 26 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-04-19 11:32:23.055 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.055 DBG qml: seveListModel  for if((sevaProxy.getSevaModel(100).getSevaListViewModel/*.getSevaListViewModel*/===0))
2023-04-19 11:32:23.055 DBG qml:  countIfSevaNamesPresentInSevaTypes++ 2
2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1000 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.055 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1000 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))) 
(SevaName(0x933c290), SevaName(0x933c380), SevaName(0x933c330), SevaName(0x933aa80), SevaName(0x933a530), SevaName(0x933aad0), SevaName(0x933ab20), SevaName(0x933a4e0), SevaName(0x933a580), SevaName(0x933abc0), SevaName(0x933aa30), SevaName(0x933ad50), SevaName(0x933adf0), SevaName(0x933a990), SevaName(0x933a7b0), SevaName(0x933ac60), SevaName(0x933a9e0), SevaName(0x933ab70), SevaName(0x933a800), SevaName(0x933a850), SevaName(0x933ac10), SevaName(0x933ad00), SevaName(0x933acb0), SevaName(0x933a8a0), SevaName(0x933ae40), SevaName(0x933a490), SevaName(0x933a8f0), SevaName(0x933a5d0), SevaName(0x933a940), SevaName(0x933a620), SevaName(0x933a670), SevaName(0x933a6c0)) 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933c290), SevaName(0x933c380), SevaName(0x933c330), SevaName(0x933aa80), SevaName(0x933a530), SevaName(0x933aad0), SevaName(0x933ab20), SevaName(0x933a4e0), SevaName(0x933a580), SevaName(0x933abc0), SevaName(0x933aa30), SevaName(0x933ad50), SevaName(0x933adf0), SevaName(0x933a990), SevaName(0x933a7b0), SevaName(0x933ac60), SevaName(0x933a9e0), SevaName(0x933ab70), SevaName(0x933a800), SevaName(0x933a850), SevaName(0x933ac10), SevaName(0x933ad00), SevaName(0x933acb0), SevaName(0x933a8a0), SevaName(0x933ae40), SevaName(0x933a490), SevaName(0x933a8f0), SevaName(0x933a5d0), SevaName(0x933a940), SevaName(0x933a620), SevaName(0x933a670), SevaName(0x933a6c0)) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1000 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((1001, SevaName(0x933c290))(1002, SevaName(0x933c380))(1003, SevaName(0x933c330))(1004, SevaName(0x933aa80))(1005, SevaName(0x933a530))(1006, SevaName(0x933aad0))(1007, SevaName(0x933ab20))(1008, SevaName(0x933a4e0))(1010, SevaName(0x933a580))(1011, SevaName(0x933abc0))(1012, SevaName(0x933aa30))(1013, SevaName(0x933ad50))(1014, SevaName(0x933adf0))(1015, SevaName(0x933a990))(1016, SevaName(0x933a7b0))(1017, SevaName(0x933ac60))(1018, SevaName(0x933a9e0))(1019, SevaName(0x933ab70))(1020, SevaName(0x933a800))(1021, SevaName(0x933a850))(1022, SevaName(0x933ac10))(1023, SevaName(0x933ad00))(1024, SevaName(0x933acb0))(1025, SevaName(0x933a8a0))(1026, SevaName(0x933ae40))(1027, SevaName(0x933a490))(1028, SevaName(0x933a8f0))(1029, SevaName(0x933a5d0))(1030, SevaName(0x933a940))(1031, SevaName(0x933a620))(1032, SevaName(0x933a670))(1033, SevaName(0x933a6c0))) 
(SevaName(0x933c290), SevaName(0x933c380), SevaName(0x933c330), SevaName(0x933aa80), SevaName(0x933a530), SevaName(0x933aad0), SevaName(0x933ab20), SevaName(0x933a4e0), SevaName(0x933a580), SevaName(0x933abc0), SevaName(0x933aa30), SevaName(0x933ad50), SevaName(0x933adf0), SevaName(0x933a990), SevaName(0x933a7b0), SevaName(0x933ac60), SevaName(0x933a9e0), SevaName(0x933ab70), SevaName(0x933a800), SevaName(0x933a850), SevaName(0x933ac10), SevaName(0x933ad00), SevaName(0x933acb0), SevaName(0x933a8a0), SevaName(0x933ae40), SevaName(0x933a490), SevaName(0x933a8f0), SevaName(0x933a5d0), SevaName(0x933a940), SevaName(0x933a620), SevaName(0x933a670), SevaName(0x933a6c0)) 

2023-04-19 11:32:23.055 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 2000 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.055 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2000 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))(2003, SevaName(0x93509a0))(2004, SevaName(0x9350ae0))(2005, SevaName(0x9350cc0))(2006, SevaName(0x9350680))(2007, SevaName(0x93504f0))(2009, SevaName(0x9350810))(2010, SevaName(0x93506d0))(2011, SevaName(0x9350b30))(2012, SevaName(0x9350950))(2013, SevaName(0x9350bd0))(2014, SevaName(0x93509f0))) 
(SevaName(0x933a760), SevaName(0x9350630), SevaName(0x93509a0), SevaName(0x9350ae0), SevaName(0x9350cc0), SevaName(0x9350680), SevaName(0x93504f0), SevaName(0x9350810), SevaName(0x93506d0), SevaName(0x9350b30), SevaName(0x9350950), SevaName(0x9350bd0), SevaName(0x93509f0)) 

2023-04-19 11:32:23.055 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933a760), SevaName(0x9350630), SevaName(0x93509a0), SevaName(0x9350ae0), SevaName(0x9350cc0), SevaName(0x9350680), SevaName(0x93504f0), SevaName(0x9350810), SevaName(0x93506d0), SevaName(0x9350b30), SevaName(0x9350950), SevaName(0x9350bd0), SevaName(0x93509f0)) 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2000 

2023-04-19 11:32:23.055 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2001, SevaName(0x933a760))(2002, SevaName(0x9350630))(2003, SevaName(0x93509a0))(2004, SevaName(0x9350ae0))(2005, SevaName(0x9350cc0))(2006, SevaName(0x9350680))(2007, SevaName(0x93504f0))(2009, SevaName(0x9350810))(2010, SevaName(0x93506d0))(2011, SevaName(0x9350b30))(2012, SevaName(0x9350950))(2013, SevaName(0x9350bd0))(2014, SevaName(0x93509f0))) 
(SevaName(0x933a760), SevaName(0x9350630), SevaName(0x93509a0), SevaName(0x9350ae0), SevaName(0x9350cc0), SevaName(0x9350680), SevaName(0x93504f0), SevaName(0x9350810), SevaName(0x93506d0), SevaName(0x9350b30), SevaName(0x9350950), SevaName(0x9350bd0), SevaName(0x93509f0)) 

2023-04-19 11:32:23.055 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.055 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.055 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-04-19 11:32:23.055 DBG qml:  if of <<< countIfSevaNamesPresentInSevaTypes++ 2
2023-04-19 11:32:23.057 DBG qml: clicked on Sevabooking
2023-04-19 11:32:23.132 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.139 DBG qml: state changedinitial
2023-04-19 11:32:23.143 WRN default: qrc:/ui/SevaDateTime.qml:98:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-04-19 11:32:23.143 WRN default: qrc:/ui/SevaDateTime.qml:98:5: QML Connections: Cannot assign to non-existent property "onDefaultDates"
2023-04-19 11:32:23.143 WRN default: qrc:/ui/SevaDateTime.qml:92:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-04-19 11:32:23.143 WRN default: qrc:/ui/SevaDateTime.qml:86:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-04-19 11:32:23.202 DBG qml: my seva delegate is created
2023-04-19 11:32:23.202 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-04-19 11:32:23.202 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-04-19 11:32:23.202 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-04-19 11:32:23.202 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-04-19 11:32:23.202 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-04-19 11:32:23.202 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-04-19 11:32:23.202 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.202 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.202 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.202 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.202 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-04-19 11:32:23.202 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x933c0b0))) 
(SevaName(0x933c0b0)) 

2023-04-19 11:32:23.202 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933c0b0)) 

2023-04-19 11:32:23.202 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-04-19 11:32:23.202 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x933c0b0))) 
(SevaName(0x933c0b0)) 

2023-04-19 11:32:23.202 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.202 DBG qml: --------------- onCurrentIndexChanged: of combo box sevaListView1
2023-04-19 11:32:23.202 DBG qml:  Index =0
2023-04-19 11:32:23.202 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-04-19 11:32:23.202 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-04-19 11:32:23.202 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-04-19 11:32:23.202 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.202 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.202 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.202 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.202 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-04-19 11:32:23.202 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x933c0b0))) 
(SevaName(0x933c0b0)) 

2023-04-19 11:32:23.202 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933c0b0)) 

2023-04-19 11:32:23.202 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-04-19 11:32:23.202 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x933c0b0))) 
(SevaName(0x933c0b0)) 

2023-04-19 11:32:23.202 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.202 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-04-19 11:32:23.202 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-04-19 11:32:23.202 DBG qml:  Seva Type Changed: 0
2023-04-19 11:32:23.202 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-04-19 11:32:23.202 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.202 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.202 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.202 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.202 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-04-19 11:32:23.202 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x933c0b0))) 
(SevaName(0x933c0b0)) 

2023-04-19 11:32:23.202 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933c0b0)) 

2023-04-19 11:32:23.202 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-04-19 11:32:23.202 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x933c0b0))) 
(SevaName(0x933c0b0)) 

2023-04-19 11:32:23.203 DBG qml: my seva delegate is created
2023-04-19 11:32:23.203 DBG qml:  Current Index changed0
2023-04-19 11:32:23.203 DBG qml:  VIEW-1 - Index =0
2023-04-19 11:32:23.203 DBG qml:  Seva Selected =0
2023-04-19 11:32:23.203 DBG default: SevaName* SevaViewProxy::getSevaByIndex(int) 0 

2023-04-19 11:32:23.203 DBG default: current.... seva model 

2023-04-19 11:32:23.203 DBG default: current seva model SevaListViewModel(0x1ae3f460) 

2023-04-19 11:32:23.203 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int) (SevaName(0x933c0b0)) 

2023-04-19 11:32:23.203 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int)  Index requested 1= 0 

2023-04-19 11:32:23.203 DBG qml:  Seva Details =0
2023-04-19 11:32:23.203 DBG default: void SevaName::print()  Seva Name   = "Nithya Archane"
2023-04-19 11:32:23.203 DBG default: void SevaName::print()  Seva ID     = 102
2023-04-19 11:32:23.203 DBG default: void SevaName::print()  Seva Number = 102
2023-04-19 11:32:23.203 DBG default: void SevaName::print()  Seva        = 0
2023-04-19 11:32:23.203 DBG default: void SevaName::print()  Seva Date   = "2021-11-25"
2023-04-19 11:32:23.203 DBG default: void SevaName::print()  Seva Type   = 0
2023-04-19 11:32:23.203 DBG default: void SevaName::print()  Seva Cost   = 0
2023-04-19 11:32:23.203 DBG default: void SevaName::print()  Seva Count  = 1
2023-04-19 11:32:23.203 DBG default: void SevaName::print()  Additional Cost = 0
2023-04-19 11:32:23.203 DBG default: void SevaName::print()  Seva Time  = ""
2023-04-19 11:32:23.204 DBG qml: seva name  = Nithya Archane Seva cost = 0
2023-04-19 11:32:23.204 DBG default: QStringList SevaViewProxy::getGothras() 

2023-04-19 11:32:23.204 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.204 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-04-19 11:32:23.204 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("kashyapa", "kkgothra") 

2023-04-19 11:32:23.204 DBG qml: ********* In setGothras function  *********** = 0
2023-04-19 11:32:23.204 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-04-19 11:32:23.204 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.204 DBG qml: ********* In set nakshatra function  *********** = 0
2023-04-19 11:32:23.204 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-04-19 11:32:23.204 DBG qml: Current Text =SevaTypeViewModel(0x190f4fa8)
2023-04-19 11:32:23.204 DBG qml: Model SevaType--------: [object Object]
2023-04-19 11:32:23.204 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-04-19 11:32:23.204 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-04-19 11:32:23.204 DBG qml: Model SevaType: RAMANAVAMI SEVE
2023-04-19 11:32:23.204 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-04-19 11:32:23.204 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-04-19 11:32:23.204 DBG qml: Model SevaType: 0
2023-04-19 11:32:23.204 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-04-19 11:32:23.204 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-04-19 11:32:23.204 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-04-19 11:32:23.204 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-04-19 11:32:23.215 DBG qml: Component.onCompleted: of seva booking view
2023-04-19 11:32:23.215 DBG qml: In Component.onCompleted: of SevaPaymenConfirmationDialog
2023-04-19 11:32:23.215 DBG qml: Dialog object is ccreated in SPCD
2023-04-19 11:32:23.215 DBG default: QStringList SevaTypeNamesDataModel::getBankList() 

2023-04-19 11:32:23.215 DBG default: JsonProcessor::JsonProcessor(QObject*) 

2023-04-19 11:32:23.215 DBG default: void JsonProcessor::readBanksFromJsonToList() 

2023-04-19 11:32:23.215 DBG default: file opened 

2023-04-19 11:32:23.215 DBG default: read all 

2023-04-19 11:32:23.215 DBG default: void JsonProcessor::readBanksFromJsonToList() dddddddoooooooooooocccccccc 

2023-04-19 11:32:23.215 DBG default: BankDetails::BankDetails(QObject*) 

2023-04-19 11:32:23.215 DBG default: BankDetails::BankDetails(QObject*) 

2023-04-19 11:32:23.215 DBG default: BankDetails::BankDetails(QObject*) 

2023-04-19 11:32:23.215 DBG default: BankDetails::BankDetails(QObject*) 

2023-04-19 11:32:23.215 DBG default: BankDetails::BankDetails(QObject*) 

2023-04-19 11:32:23.215 DBG default: BankDetails::BankDetails(QObject*) 

2023-04-19 11:32:23.215 DBG default: virtual JsonProcessor::~JsonProcessor() 

2023-04-19 11:32:23.215 DBG qml:  Trying to get the list category
2023-04-19 11:32:23.215 WRN default: qrc:/ui/SevaDateTime.qml:84: ReferenceError: defaultDates is not defined
2023-04-19 11:32:23.215 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-04-19 11:32:23.215 DBG qml: Screen screenWidth size =1920
2023-04-19 11:32:23.215 DBG qml: Screen screenHeight size =1000
2023-04-19 11:32:23.215 DBG qml:  Name Status =false
2023-04-19 11:32:23.215 DBG qml:  Mobile Status =false
2023-04-19 11:32:23.215 DBG qml: Component.onCompleted: of seva list view
2023-04-19 11:32:23.215 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-04-19 11:32:23.215 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-04-19 11:32:23.215 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-04-19 11:32:23.215 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-04-19 11:32:23.215 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-04-19 11:32:23.215 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-04-19 11:32:23.215 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x9291e18) 

2023-04-19 11:32:23.215 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-04-19 11:32:23.215 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x933c0b0))) 
(SevaName(0x933c0b0)) 

2023-04-19 11:32:23.215 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x933c0b0)) 

2023-04-19 11:32:23.215 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-04-19 11:32:23.215 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x933c0b0))) 
(SevaName(0x933c0b0)) 

2023-04-19 11:32:23.215 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-04-19 11:32:23.215 DBG qml: Component.onCompleted of combo box sevaListView current index =0 1
2023-04-19 11:32:23.215 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-04-19 11:32:23.215 DBG qml: Screen screenWidth size =1920
2023-04-19 11:32:23.215 DBG qml: Screen screenHeight size =1000
2023-04-19 11:32:23.216 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-04-19 11:32:23.216 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-04-19 11:32:23.216 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-04-19 11:32:23.216 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-04-19 11:32:23.216 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-04-19 11:32:23.219 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-04-19 11:32:23.223 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-04-19 11:32:23.223 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-04-19 11:32:23.223 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-04-19 11:32:23.224 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-04-19 11:32:23.224 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-04-19 11:32:23.224 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-04-19 11:32:23.224 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-04-19 11:32:23.224 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
