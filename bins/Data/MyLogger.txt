2023-07-03 11:24:55.140 WRN default: Invalid QML element name " AccReportDateRangeElement"
2023-07-03 11:24:55.140 WRN default: Invalid QML element name " AccReportMonthRangeElement"
2023-07-03 11:24:55.140 WRN default: Invalid QML element name " BookingReportDateRangeElement"
2023-07-03 11:24:55.140 WRN default: Invalid QML element name " BookingReportMonthRangeElement"
2023-07-03 11:24:55.145 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-03 11:24:55.145 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() In static getTrustListModelInstance of TrustListModel inside if 

2023-07-03 11:24:55.145 DBG default: TrustListModel::TrustListModel() 

2023-07-03 11:24:55.145 DBG default: void TrustListModel::init() 

2023-07-03 11:24:55.145 DBG default: TrustConfiguration::TrustConfiguration(QObject*) 

2023-07-03 11:24:55.145 DBG default: void TrustConfiguration::readTrustsFromJsonToList() path  "D:/TempleFiles_suman/Temple-main/bins" 

2023-07-03 11:24:55.157 DBG default: file opened 

2023-07-03 11:24:55.157 DBG default: read all 

2023-07-03 11:24:55.157 DBG default: void TrustConfiguration::readTrustsFromJsonToList() dddddddoooooooooooocccccccc 

2023-07-03 11:24:55.157 DBG default: Trust::Trust(QObject*) 

2023-07-03 11:24:55.648 WRN qt.qpa.fonts: Unable to open default EUDC font: "EUDC.TTE"
2023-07-03 11:24:56.121 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:24:56.121 DBG qml: Screen screenWidth size =1920
2023-07-03 11:24:56.121 DBG qml: Screen screenHeight size =1000
2023-07-03 11:24:56.194 DBG qml: screen height= 1080
2023-07-03 11:24:56.194 DBG qml: screen width= 1920
2023-07-03 11:24:56.194 DBG qml: Screen MyStyles-screecnWidth size =1920
2023-07-03 11:24:56.194 DBG qml: Screen MyStyles-screenHeight size =1000
2023-07-03 11:24:56.194 DBG qml: screen density  == 6.228183399741848
2023-07-03 11:24:56.194 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:24:56.194 DBG qml: Screen screenWidth size =1920
2023-07-03 11:24:56.194 DBG qml: Screen screenHeight size =1000
2023-07-03 11:25:01.282 DBG default: int TrustListModel::getTrustListSize() 

2023-07-03 11:25:01.282 DBG default: int TrustListModel::getTrustListSize() 

2023-07-03 11:25:01.282 DBG qml: in else--------------
2023-07-03 11:25:01.282 DBG qml: in else------trustName--------Hubablli
2023-07-03 11:25:01.282 DBG qml: in else-------trustCode-------Hubablli
2023-07-03 11:25:01.282 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) 

2023-07-03 11:25:01.282 DBG default: void TrustListModel::setCurrentConfigLocation(const QString&) m_currentConfigLocation  "D:/TempleFiles_suman/Temple-main/bins/Config/Hubablli" 

2023-07-03 11:25:01.282 DBG default: Inside lamda 

2023-07-03 11:25:01.282 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) 

2023-07-03 11:25:01.283 DBG default: void TrustListModel::setCurrentDataLocation(const QString&) m_currentDataLocation  "D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli" 

2023-07-03 11:25:01.283 DBG default: Inside lamda 

2023-07-03 11:25:01.283 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-03 11:25:01.304 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-07-03 11:25:01.304 DBG default: void ConfigureApp::loadXMLFile() "123.jpg"
2023-07-03 11:25:01.304 DBG default: Creating the DataBase Connection  

2023-07-03 11:25:01.319 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-03 11:25:01.319 DBG default: QString TrustListModel::getDataLocation() 

2023-07-03 11:25:01.322 DBG default: DBInterface::DBInterface(QObject*) ******************* DB "D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-07-03 11:25:01.322 DBG default: Database is opened  "D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli/nseva.db" 

2023-07-03 11:25:01.324 DBG default: Sevabboking table not created
2023-07-03 11:25:01.324 DBG default: person details creation failed
2023-07-03 11:25:01.324 DBG default: SevaTypeJsonProcessor::SevaTypeJsonProcessor(QObject*) 

2023-07-03 11:25:01.324 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate() 

2023-07-03 11:25:01.324 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-03 11:25:01.324 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-03 11:25:01.339 DBG default: file opened 

2023-07-03 11:25:01.339 DBG default: read all 

2023-07-03 11:25:01.340 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-07-03 11:25:01.340 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  1000 

2023-07-03 11:25:01.340 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 1000 

2023-07-03 11:25:01.340 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  1000 already exist in DB 

2023-07-03 11:25:01.341 DBG default: void SevaTypeJsonProcessor::readSevaTypeFromJsonFormate()  m_sevaTypeList.append(st); 

2023-07-03 11:25:01.341 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type Requested to Add =  2000 

2023-07-03 11:25:01.341 DBG default: bool DBInterface::add_seva_type(SevaType*)  Seva Type in DB = 2000 

2023-07-03 11:25:01.341 WRN default: bool DBInterface::add_seva_type(SevaType*)  Seva Type with ID =  2000 already exist in DB 

2023-07-03 11:25:01.341 DBG default: void SevaTypeJsonProcessor::printSevaTypeNames() 

2023-07-03 11:25:01.341 DBG default: 1000 :  "Regular Seva" , 1000 , "Raj" 

2023-07-03 11:25:01.341 DBG default: 2000 :  "Aradhana Seva" , 2000 , "Abhi" 

2023-07-03 11:25:01.342 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-03 11:25:01.342 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-03 11:25:01.342 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-07-03 11:25:01.342 DBG default: static TrustListModel* TrustListModel::getTrustListModelInstance() 

2023-07-03 11:25:01.342 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-03 11:25:01.342 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  path "D:/TempleFiles_suman/Temple-main/bins/Config/Hubablli/SevaNames.json" 

2023-07-03 11:25:01.342 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 

2023-07-03 11:25:01.360 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() file opened 

2023-07-03 11:25:01.361 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() read all 

2023-07-03 11:25:01.361 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.361 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Udayaasthamaana Seva" 

2023-07-03 11:25:01.362 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.362 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.362 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1001 

2023-07-03 11:25:01.362 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.362 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.362 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.362 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.362 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.362 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Udayaasthamaana Seva"  sevaId=  1001 

2023-07-03 11:25:01.363 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1001 

2023-07-03 11:25:01.363 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1001 

2023-07-03 11:25:01.363 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.363 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Seva" 

2023-07-03 11:25:01.363 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.363 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.363 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1002 

2023-07-03 11:25:01.363 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.364 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.364 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.364 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.364 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.364 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Seva"  sevaId=  1002 

2023-07-03 11:25:01.364 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1002 

2023-07-03 11:25:01.364 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1002 

2023-07-03 11:25:01.364 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.364 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva Samarpana Seva" 

2023-07-03 11:25:01.364 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.365 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.365 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1003 

2023-07-03 11:25:01.365 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.365 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.365 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.365 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.365 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.365 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva Samarpana Seva"  sevaId=  1003 

2023-07-03 11:25:01.365 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1003 

2023-07-03 11:25:01.365 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1003 

2023-07-03 11:25:01.366 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.366 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakaabhisheka" 

2023-07-03 11:25:01.366 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.366 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.366 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1004 

2023-07-03 11:25:01.366 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.366 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.366 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.366 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.366 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.366 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakaabhisheka"  sevaId=  1004 

2023-07-03 11:25:01.367 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1004 

2023-07-03 11:25:01.367 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1004 

2023-07-03 11:25:01.367 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.367 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Godhana" 

2023-07-03 11:25:01.367 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.367 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.367 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1005 

2023-07-03 11:25:01.367 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.367 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.367 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.367 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.368 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.368 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Godhana"  sevaId=  1005 

2023-07-03 11:25:01.368 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1005 

2023-07-03 11:25:01.368 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1005 

2023-07-03 11:25:01.368 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.368 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mahaa Pooja" 

2023-07-03 11:25:01.368 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.368 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.368 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1006 

2023-07-03 11:25:01.368 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.369 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.369 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.369 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.369 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.369 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mahaa Pooja"  sevaId=  1006 

2023-07-03 11:25:01.369 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1006 

2023-07-03 11:25:01.369 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1006 

2023-07-03 11:25:01.369 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.369 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ksheeraabhisheka" 

2023-07-03 11:25:01.370 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.370 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.370 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1007 

2023-07-03 11:25:01.370 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.370 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.370 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.370 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.370 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.370 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ksheeraabhisheka"  sevaId=  1007 

2023-07-03 11:25:01.371 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1007 

2023-07-03 11:25:01.371 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1007 

2023-07-03 11:25:01.371 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.371 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Madhu Abhisheka" 

2023-07-03 11:25:01.371 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.371 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.371 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1008 

2023-07-03 11:25:01.371 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.371 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.371 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.371 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.371 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.371 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Madhu Abhisheka"  sevaId=  1008 

2023-07-03 11:25:01.372 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1008 

2023-07-03 11:25:01.372 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1008 

2023-07-03 11:25:01.372 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.372 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Yella Homagala Seva" 

2023-07-03 11:25:01.372 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.372 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.372 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1010 

2023-07-03 11:25:01.372 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.372 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.373 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.373 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.373 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.373 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Yella Homagala Seva"  sevaId=  1010 

2023-07-03 11:25:01.373 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1010 

2023-07-03 11:25:01.373 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1010 

2023-07-03 11:25:01.373 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.373 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Naivedhya/Hasthodaka" 

2023-07-03 11:25:01.373 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.373 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.374 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1011 

2023-07-03 11:25:01.374 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.374 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.374 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.374 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.374 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.374 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Naivedhya/Hasthodaka"  sevaId=  1011 

2023-07-03 11:25:01.374 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1011 

2023-07-03 11:25:01.375 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1011 

2023-07-03 11:25:01.375 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.375 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Phala - Panchaamrutha" 

2023-07-03 11:25:01.375 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.375 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.375 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1012 

2023-07-03 11:25:01.375 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.375 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.375 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.375 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.375 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.375 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Phala - Panchaamrutha"  sevaId=  1012 

2023-07-03 11:25:01.376 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1012 

2023-07-03 11:25:01.376 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1012 

2023-07-03 11:25:01.376 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.376 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ganapathi Abhisheka" 

2023-07-03 11:25:01.376 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.376 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.376 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1013 

2023-07-03 11:25:01.376 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.376 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.376 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.377 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.377 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.377 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ganapathi Abhisheka"  sevaId=  1013 

2023-07-03 11:25:01.377 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1013 

2023-07-03 11:25:01.377 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1013 

2023-07-03 11:25:01.377 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.377 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Nagadevara Abhisheka" 

2023-07-03 11:25:01.377 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.377 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.378 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1014 

2023-07-03 11:25:01.378 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.378 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.378 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.378 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.378 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.378 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Nagadevara Abhisheka"  sevaId=  1014 

2023-07-03 11:25:01.378 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1014 

2023-07-03 11:25:01.378 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1014 

2023-07-03 11:25:01.378 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.379 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Abhisheka" 

2023-07-03 11:25:01.379 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.379 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.379 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1015 

2023-07-03 11:25:01.379 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.379 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.379 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.379 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.379 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.379 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Abhisheka"  sevaId=  1015 

2023-07-03 11:25:01.379 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1015 

2023-07-03 11:25:01.380 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1015 

2023-07-03 11:25:01.380 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.380 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rathothsava" 

2023-07-03 11:25:01.380 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.380 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.380 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1016 

2023-07-03 11:25:01.380 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.380 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.380 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.380 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.380 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.380 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rathothsava"  sevaId=  1016 

2023-07-03 11:25:01.381 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1016 

2023-07-03 11:25:01.381 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1016 

2023-07-03 11:25:01.381 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.381 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Huggi Naivedhya" 

2023-07-03 11:25:01.381 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.381 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.381 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1017 

2023-07-03 11:25:01.381 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.381 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.381 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.381 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.381 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.381 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Huggi Naivedhya"  sevaId=  1017 

2023-07-03 11:25:01.381 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1017 

2023-07-03 11:25:01.382 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1017 

2023-07-03 11:25:01.382 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.382 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pongal Naivedhya" 

2023-07-03 11:25:01.382 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.382 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.382 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1018 

2023-07-03 11:25:01.382 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.382 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.382 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.382 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.382 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.382 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pongal Naivedhya"  sevaId=  1018 

2023-07-03 11:25:01.383 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1018 

2023-07-03 11:25:01.383 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1018 

2023-07-03 11:25:01.383 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.383 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Grahana Shanthi" 

2023-07-03 11:25:01.383 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.383 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.383 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1019 

2023-07-03 11:25:01.383 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.383 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.383 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.384 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.384 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.384 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Grahana Shanthi"  sevaId=  1019 

2023-07-03 11:25:01.384 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1019 

2023-07-03 11:25:01.384 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1019 

2023-07-03 11:25:01.384 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.384 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika - Rathothsava" 

2023-07-03 11:25:01.384 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.384 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.384 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1020 

2023-07-03 11:25:01.384 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.384 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.384 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.385 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.385 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.385 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika - Rathothsava"  sevaId=  1020 

2023-07-03 11:25:01.385 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1020 

2023-07-03 11:25:01.385 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1020 

2023-07-03 11:25:01.385 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.385 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kaarthika Seva" 

2023-07-03 11:25:01.385 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.385 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.385 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1021 

2023-07-03 11:25:01.385 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.385 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.385 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.385 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.386 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.386 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kaarthika Seva"  sevaId=  1021 

2023-07-03 11:25:01.386 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1021 

2023-07-03 11:25:01.386 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1021 

2023-07-03 11:25:01.386 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.386 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sri Sathya Narayana Pooja" 

2023-07-03 11:25:01.386 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.386 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.386 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1022 

2023-07-03 11:25:01.386 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.386 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.386 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.386 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.386 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.386 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sri Sathya Narayana Pooja"  sevaId=  1022 

2023-07-03 11:25:01.387 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1022 

2023-07-03 11:25:01.387 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1022 

2023-07-03 11:25:01.387 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.387 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Tulsi Archane" 

2023-07-03 11:25:01.387 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.387 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.387 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1023 

2023-07-03 11:25:01.387 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.387 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.387 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.387 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.387 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.387 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Tulsi Archane"  sevaId=  1023 

2023-07-03 11:25:01.388 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1023 

2023-07-03 11:25:01.388 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1023 

2023-07-03 11:25:01.388 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.388 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Chataka Shraadha" 

2023-07-03 11:25:01.388 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.388 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.388 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1024 

2023-07-03 11:25:01.388 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.388 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.388 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.388 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.388 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.388 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Chataka Shraadha"  sevaId=  1024 

2023-07-03 11:25:01.388 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1024 

2023-07-03 11:25:01.389 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1024 

2023-07-03 11:25:01.389 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.389 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sankalpa Shraadha" 

2023-07-03 11:25:01.389 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.389 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.389 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1025 

2023-07-03 11:25:01.389 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.389 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.389 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.389 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.389 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.389 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sankalpa Shraadha"  sevaId=  1025 

2023-07-03 11:25:01.389 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1025 

2023-07-03 11:25:01.389 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1025 

2023-07-03 11:25:01.389 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.389 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Vaahana Pooja" 

2023-07-03 11:25:01.389 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.389 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1026 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.390 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Vaahana Pooja"  sevaId=  1026 

2023-07-03 11:25:01.390 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1026 

2023-07-03 11:25:01.390 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1026 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Archane Seva" 

2023-07-03 11:25:01.390 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.390 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1027 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.390 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.390 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Archane Seva"  sevaId=  1027 

2023-07-03 11:25:01.391 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1027 

2023-07-03 11:25:01.391 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1027 

2023-07-03 11:25:01.391 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.391 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Lakshmi Pooja" 

2023-07-03 11:25:01.391 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.391 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.391 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1028 

2023-07-03 11:25:01.391 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.391 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.391 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.391 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.391 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.391 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Lakshmi Pooja"  sevaId=  1028 

2023-07-03 11:25:01.391 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1028 

2023-07-03 11:25:01.391 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1028 

2023-07-03 11:25:01.391 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.391 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Navagraha Devarige Thailaabhisheka" 

2023-07-03 11:25:01.392 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.392 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.392 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1029 

2023-07-03 11:25:01.392 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.392 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.392 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.392 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.392 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.392 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Navagraha Devarige Thailaabhisheka"  sevaId=  1029 

2023-07-03 11:25:01.392 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1029 

2023-07-03 11:25:01.392 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1029 

2023-07-03 11:25:01.392 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.392 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Pavamaana Homa" 

2023-07-03 11:25:01.392 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.392 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.392 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1030 

2023-07-03 11:25:01.392 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.392 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.392 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.393 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.393 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.393 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Pavamaana Homa"  sevaId=  1030 

2023-07-03 11:25:01.393 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1030 

2023-07-03 11:25:01.393 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1030 

2023-07-03 11:25:01.393 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.393 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Gana Homa" 

2023-07-03 11:25:01.393 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.393 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.393 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1031 

2023-07-03 11:25:01.393 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.393 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.393 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.393 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.393 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.393 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Gana Homa"  sevaId=  1031 

2023-07-03 11:25:01.394 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1031 

2023-07-03 11:25:01.394 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1031 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Mruthyunjaya Homa" 

2023-07-03 11:25:01.394 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.394 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1032 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.394 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Mruthyunjaya Homa"  sevaId=  1032 

2023-07-03 11:25:01.394 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1032 

2023-07-03 11:25:01.394 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1032 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Rudraabhisheka" 

2023-07-03 11:25:01.394 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.394 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  1033 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  1000 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.394 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.394 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Rudraabhisheka"  sevaId=  1033 

2023-07-03 11:25:01.395 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 1033 

2023-07-03 11:25:01.395 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 1033 

2023-07-03 11:25:01.395 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.395 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Sampurna Seva" 

2023-07-03 11:25:01.395 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.395 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.395 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2001 

2023-07-03 11:25:01.395 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-03 11:25:01.395 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.395 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.395 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.395 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.395 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Sampurna Seva"  sevaId=  2001 

2023-07-03 11:25:01.396 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2001 

2023-07-03 11:25:01.396 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2001 

2023-07-03 11:25:01.396 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.396 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ondu Dinada Anna Santharpane Seva" 

2023-07-03 11:25:01.396 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.396 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.396 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2002 

2023-07-03 11:25:01.396 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-03 11:25:01.396 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.396 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.396 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.396 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.396 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ondu Dinada Anna Santharpane Seva"  sevaId=  2002 

2023-07-03 11:25:01.396 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2002 

2023-07-03 11:25:01.396 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2002 

2023-07-03 11:25:01.396 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.396 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva(Huvina Alankara)" 

2023-07-03 11:25:01.396 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.396 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.396 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2003 

2023-07-03 11:25:01.396 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-03 11:25:01.396 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.397 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.397 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.397 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.397 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva(Huvina Alankara)"  sevaId=  2003 

2023-07-03 11:25:01.397 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2003 

2023-07-03 11:25:01.397 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2003 

2023-07-03 11:25:01.397 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.397 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Alankara Seva" 

2023-07-03 11:25:01.397 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.397 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.397 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2004 

2023-07-03 11:25:01.397 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-03 11:25:01.397 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.397 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.397 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.397 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.397 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Alankara Seva"  sevaId=  2004 

2023-07-03 11:25:01.397 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2004 

2023-07-03 11:25:01.397 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2004 

2023-07-03 11:25:01.397 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.397 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Noothana Vastra Seva" 

2023-07-03 11:25:01.397 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.397 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2005 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.398 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Noothana Vastra Seva"  sevaId=  2005 

2023-07-03 11:25:01.398 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2005 

2023-07-03 11:25:01.398 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2005 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Sarva seva" 

2023-07-03 11:25:01.398 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.398 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2006 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.398 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Sarva seva"  sevaId=  2006 

2023-07-03 11:25:01.398 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2006 

2023-07-03 11:25:01.398 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2006 

2023-07-03 11:25:01.398 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Kanakabhisheka Seva" 

2023-07-03 11:25:01.399 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.399 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2007 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.399 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Kanakabhisheka Seva"  sevaId=  2007 

2023-07-03 11:25:01.399 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2007 

2023-07-03 11:25:01.399 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2007 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Hasthodaka Seva(Prathidina)" 

2023-07-03 11:25:01.399 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.399 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2009 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.399 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Hasthodaka Seva(Prathidina)"  sevaId=  2009 

2023-07-03 11:25:01.399 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2009 

2023-07-03 11:25:01.399 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2009 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.399 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "MahaPooje" 

2023-07-03 11:25:01.399 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.399 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2010 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.400 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "MahaPooje"  sevaId=  2010 

2023-07-03 11:25:01.400 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2010 

2023-07-03 11:25:01.400 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2010 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Ashtothara Seva(Prathidina)" 

2023-07-03 11:25:01.400 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.400 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2011 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.400 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Ashtothara Seva(Prathidina)"  sevaId=  2011 

2023-07-03 11:25:01.400 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2011 

2023-07-03 11:25:01.400 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2011 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "Paadakaradhane" 

2023-07-03 11:25:01.400 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.400 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2012 

2023-07-03 11:25:01.400 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.401 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "Paadakaradhane"  sevaId=  2012 

2023-07-03 11:25:01.401 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2012 

2023-07-03 11:25:01.401 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2012 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "GanaHoma" 

2023-07-03 11:25:01.401 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.401 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2013 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.401 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "GanaHoma"  sevaId=  2013 

2023-07-03 11:25:01.401 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2013 

2023-07-03 11:25:01.401 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2013 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  number string =  1 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  SevaName string =  "PhalaPanchamrutha Seva" 

2023-07-03 11:25:01.401 DBG default: void SevaName::setAdditionalCost(int)  Seva additionalCost=   0 

2023-07-03 11:25:01.401 DBG default: void SevaName::setCount(int)  Seva count=   5 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevaID string =  2014 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate()  sevatype string =  2000 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 11 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 22 

2023-07-03 11:25:01.401 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() 33 

2023-07-03 11:25:01.402 DBG default: void SevaTypeJsonProcessor::readSevasFromJsonFormate() emiting sendSevaName signal  

2023-07-03 11:25:01.402 DBG default: bool DBInterface::createSeva(SevaName*) Request add. Seva Name =  "PhalaPanchamrutha Seva"  sevaId=  2014 

2023-07-03 11:25:01.402 DBG default: bool DBInterface::createSeva(SevaName*)  Seva Name in DB = 2014 

2023-07-03 11:25:01.402 CRT default: bool DBInterface::createSeva(SevaName*) Seva with ID = 2014 

2023-07-03 11:25:01.402 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-03 11:25:01.402 DBG default: void SevaTypeJsonProcessor::printSevasNames() 

2023-07-03 11:25:01.402 DBG default: 1001 :  "Udayaasthamaana Seva" , 1001 , 1 , 1000 , 5000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1002 :  "Sarva Seva" , 1002 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1003 :  "Sarva Samarpana Seva" , 1003 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1004 :  "Kanakaabhisheka" , 1004 , 1 , 1000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1005 :  "Godhana" , 1005 , 1 , 1000 , 2000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1006 :  "Mahaa Pooja" , 1006 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1007 :  "Ksheeraabhisheka" , 1007 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1008 :  "Madhu Abhisheka" , 1008 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1010 :  "Yella Homagala Seva" , 1010 , 1 , 1000 , 6000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1011 :  "Naivedhya/Hasthodaka" , 1011 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1012 :  "Phala - Panchaamrutha" , 1012 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1013 :  "Ganapathi Abhisheka" , 1013 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1014 :  "Nagadevara Abhisheka" , 1014 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1015 :  "Navagraha Abhisheka" , 1015 , 1 , 1000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1016 :  "Rathothsava" , 1016 , 1 , 1000 , 1000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1017 :  "Huggi Naivedhya" , 1017 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1018 :  "Pongal Naivedhya" , 1018 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1019 :  "Grahana Shanthi" , 1019 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1020 :  "Kaarthika - Rathothsava" , 1020 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1021 :  "Kaarthika Seva" , 1021 , 1 , 1000 , 250 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.402 DBG default: 1022 :  "Sri Sathya Narayana Pooja" , 1022 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 1023 :  "Tulsi Archane" , 1023 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 1024 :  "Chataka Shraadha" , 1024 , 1 , 1000 , 600 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 1025 :  "Sankalpa Shraadha" , 1025 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 1026 :  "Vaahana Pooja" , 1026 , 1 , 1000 , 50 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 1027 :  "Archane Seva" , 1027 , 1 , 1000 , 25 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 1028 :  "Lakshmi Pooja" , 1028 , 1 , 1000 , 200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 1029 :  "Navagraha Devarige Thailaabhisheka" , 1029 , 1 , 1000 , 500 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 1030 :  "Pavamaana Homa" , 1030 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 1031 :  "Gana Homa" , 1031 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 1032 :  "Mruthyunjaya Homa" , 1032 , 1 , 1000 , 100 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 1033 :  "Rudraabhisheka" , 1033 , 1 , 1000 , 300 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 2001 :  "Ondu Dinada Sampurna Seva" , 2001 , 1 , 2000 , 25001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 2002 :  "Ondu Dinada Anna Santharpane Seva" , 2002 , 1 , 2000 , 20001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 2003 :  "Alankara Seva(Huvina Alankara)" , 2003 , 1 , 2000 , 10001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 2004 :  "Alankara Seva" , 2004 , 1 , 2000 , 5001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 2005 :  "Noothana Vastra Seva" , 2005 , 1 , 2000 , 4000 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 2006 :  "Sarva seva" , 2006 , 1 , 2000 , 2501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 2007 :  "Kanakabhisheka Seva" , 2007 , 1 , 2000 , 1200 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 2009 :  "Hasthodaka Seva(Prathidina)" , 2009 , 1 , 2000 , 1001 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 2010 :  "MahaPooje" , 2010 , 1 , 2000 , 800 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 2011 :  "Ashtothara Seva(Prathidina)" , 2011 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 2012 :  "Paadakaradhane" , 2012 , 1 , 2000 , 501 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 2013 :  "GanaHoma" , 2013 , 1 , 2000 , 101 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: 2014 :  "PhalaPanchamrutha Seva" , 2014 , 1 , 2000 , 150 , 1 , "23-5-2022" , 5 , 0 , "5:00" , "JSA" , true 

2023-07-03 11:25:01.403 DBG default: void DBInterface::readSevaNamesFromJson() 

2023-07-03 11:25:01.403 DBG default: Creating the SevaTypeNamesDataModel  

2023-07-03 11:25:01.403 DBG default: SevaBookingConformationDataModel::SevaBookingConformationDataModel(QObject*) 

2023-07-03 11:25:01.403 DBG default: JsonWriter::JsonWriter(QObject*) 

2023-07-03 11:25:01.403 DBG default: SevaTypeNamesDataModel::SevaTypeNamesDataModel(QObject*) 

2023-07-03 11:25:01.403 DBG default: void SevaTypeNamesDataModel::connectSignals() 

2023-07-03 11:25:01.403 DBG default: bool SevaTypeNamesDataModel::querySevaTypes() 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 3 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 4 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 5 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 6 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 7 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 8 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 9 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 10 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 11 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 12 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 13 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 14 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 15 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 16 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 0 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 18 

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.404 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 19 

2023-07-03 11:25:01.405 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.405 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 20 

2023-07-03 11:25:01.405 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.405 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 25 

2023-07-03 11:25:01.405 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.405 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 22 

2023-07-03 11:25:01.405 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.405 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 1000 

2023-07-03 11:25:01.405 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.405 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 2000 

2023-07-03 11:25:01.405 DBG default: bool DBInterface::querySevaType() Inside while ---before if------ querying seva type  

2023-07-03 11:25:01.405 DBG default: bool DBInterface::querySevaType() Inside while --- after if------ querying seva type  

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaTypes(SevaType*)  Inserting Seva  Type = 26 

2023-07-03 11:25:01.405 DBG default: bool DBInterface::querySevaType() querying seva type done 

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::querySevaNames() 

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka"  Type = 1  SevaID = 2 

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))))
2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka"  Type = 1  SevaID = 3 

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))))
2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dwadashi Hasthodaka"  Type = 1  SevaID = 4 

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))))
2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi Homa"  Type = 9  SevaID = 5 

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))), QMap((5, SevaName(0x9790000))))
2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Panchamrutha/Abhisheka"  Type = 1  SevaID = 6 

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))), QMap((5, SevaName(0x9790000))))
2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Samanya Kanike"  Type = 1  SevaID = 7 

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))), QMap((5, SevaName(0x9790000))))
2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shop Kanike"  Type = 11  SevaID = 9 

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))), QMap((5, SevaName(0x9790000))), QMap((9, SevaName(0x978ff10))))
2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya thaila seva"  Type = 9  SevaID = 10 

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))), QMap((9, SevaName(0x978ff10))))
2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Building Fund"  Type = 12  SevaID = 11 

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))))
2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankar Pankthi"  Type = 4  SevaID = 12 

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))), QMap((12, SevaName(0x9790050))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))))
2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Aradhna Kanike"  Type = 4  SevaID = 13 

2023-07-03 11:25:01.405 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadhana "  Type = 4  SevaID = 14 

2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hundi Collections"  Type = 13  SevaID = 15 

2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Khara Huggi"  Type = 8  SevaID = 16 

2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sweet Huggi"  Type = 8  SevaID = 17 

2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thatte Hasthodaka"  Type = 1  SevaID = 18 

2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Advance Recovered"  Type = 9  SevaID = 19 

2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PP - Rent"  Type = 14  SevaID = 20 

2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Annadana Seva"  Type = 3  SevaID = 23 

2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((23, SevaName(0x9790780))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa"  Type = 3  SevaID = 24 

2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pavamana Homa Sankalp"  Type = 3  SevaID = 25 

2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachna Seva-All days"  Type = 3  SevaID = 26 

2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pravachana seva- 1 day"  Type = 3  SevaID = 27 

2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami  Annadana Sankalpa Seva"  Type = 3  SevaID = 28 

2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.406 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Hoovina Alankara seva"  Type = 3  SevaID = 29 

2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navmi Sarva seva"  Type = 3  SevaID = 30 

2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sumadhwavijaya Parayana seva"  Type = 3  SevaID = 31 

2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Prakarosthava"  Type = 3  SevaID = 34 

2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Sampoorna Seva"  Type = 3  SevaID = 35 

2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Gruha Padapooja"  Type = 3  SevaID = 36 

2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Serva Seva"  Type = 1  SevaID = 37 

2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Kanike"  Type = 3  SevaID = 38 

2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Annadana seva "  Type = 3  SevaID = 39 

2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Pandith Sanman"  Type = 3  SevaID = 40 

2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M  Navami Panchamurtha "  Type = 3  SevaID = 41 

2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))))
2023-07-03 11:25:01.407 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Shanthi Homa"  Type = 15  SevaID = 42 

2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))))
2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Padapooja"  Type = 3  SevaID = 43 

2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))))
2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "M Navami Madhu Abhiseka"  Type = 3  SevaID = 44 

2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))))
2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gopaladasara Aradhane"  Type = 16  SevaID = 45 

2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Additional Sweets"  Type = 9  SevaID = 46 

2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina alankara Seva"  Type = 1  SevaID = 47 

2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prasada Seve"  Type = 1  SevaID = 48 

2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka- 2 Hasthodaka"  Type = 1  SevaID = 49 

2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sathyanarayana Pooje"  Type = 10  SevaID = 50 

2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "AYUSH HOMA"  Type = 15  SevaID = 51 

2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.408 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILA ABHYANJANA"  Type = 9  SevaID = 52 

2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharana"  Type = 9  SevaID = 53 

2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI  SAMPOORNA SEVE"  Type = 2  SevaID = 54 

2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PANAKA KOSAMBARI SANKLAPA SEVE"  Type = 2  SevaID = 55 

2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA"  Type = 2  SevaID = 56 

2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI RAMA TARAKA HOMA SANKALPA"  Type = 2  SevaID = 57 

2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SITA RAMA KALYANOTSVA"  Type = 2  SevaID = 58 

2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMA KALYANOTSAVA SANKALPAA"  Type = 2  SevaID = 59 

2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA PRAVACHANA SEVE "  Type = 2  SevaID = 60 

2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.409 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "YELLA DINAGALA PRAVACHANA SEVE"  Type = 2  SevaID = 61 

2023-07-03 11:25:01.410 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.410 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "HOOVINA ALANKARA"  Type = 2  SevaID = 62 

2023-07-03 11:25:01.410 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.410 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SRI SITA RAMANJANEYARIGE NOOTA VASTRA DHARANE pratyekavagi"  Type = 2  SevaID = 63 

2023-07-03 11:25:01.410 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.410 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRATIDINA SANJE PRASADA SEVE"  Type = 2  SevaID = 64 

2023-07-03 11:25:01.410 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.410 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "VISHESHA PANCHAMRUTA"  Type = 2  SevaID = 65 

2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PRAKAROTSVA"  Type = 2  SevaID = 66 

2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "THAILABYAJANA SEVE"  Type = 2  SevaID = 67 

2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ARCHANE"  Type = 2  SevaID = 68 

2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))))
2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Raghavendra Swamy Aradhane"  Type = 16  SevaID = 69 

2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))))
2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Abhisheka Madhu/Panchamrutha"  Type = 4  SevaID = 70 

2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))))
2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtottara"  Type = 4  SevaID = 71 

2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))))
2023-07-03 11:25:01.411 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara"  Type = 4  SevaID = 72 

2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))))
2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 4  SevaID = 73 

2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))))
2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Deepalankarana Seve"  Type = 7  SevaID = 74 

2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))))
2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tarakari Seve"  Type = 1  SevaID = 75 

2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))))
2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seva"  Type = 4  SevaID = 76 

2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))))
2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Bhiksha kanike"  Type = 18  SevaID = 77 

2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))))
2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "hastodaka P P"  Type = 5  SevaID = 78 

2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))))
2023-07-03 11:25:01.412 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka P P"  Type = 5  SevaID = 79 

2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))))
2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa  P P"  Type = 5  SevaID = 80 

2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))))
2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Nanda Deepa for 9 days"  Type = 6  SevaID = 81 

2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))))
2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Nanda Deepa for  9 days"  Type = 6  SevaID = 82 

2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))))
2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Deepa for 1 day"  Type = 6  SevaID = 83 

2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))))
2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grutha Deepa for 1 day"  Type = 6  SevaID = 84 

2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))))
2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhanya Seve"  Type = 1  SevaID = 85 

2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))))
2023-07-03 11:25:01.413 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Annadana Kanike"  Type = 1  SevaID = 86 

2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))))
2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana"  Type = 19  SevaID = 87 

2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))))
2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana for one day"  Type = 19  SevaID = 88 

2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pravachana Seva for one day"  Type = 6  SevaID = 89 

2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nitya Deepaseve"  Type = 7  SevaID = 90 

2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjana"  Type = 7  SevaID = 91 

2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Seve"  Type = 7  SevaID = 92 

2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.414 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Laksha Deepostava"  Type = 7  SevaID = 93 

2023-07-03 11:25:01.415 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.415 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nuthana Vastra Dharane Pratyekavagi "  Type = 7  SevaID = 94 

2023-07-03 11:25:01.415 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.415 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulasi Damodara Vivaha sankalpa"  Type = 7  SevaID = 95 

2023-07-03 11:25:01.415 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.415 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sampoorna Seve "  Type = 7  SevaID = 96 

2023-07-03 11:25:01.415 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.415 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Dhatri Havana Sankalpa Seve "  Type = 7  SevaID = 97 

2023-07-03 11:25:01.415 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.415 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Hoovina Alankara "  Type = 7  SevaID = 98 

2023-07-03 11:25:01.415 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.415 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha Abhisheka "  Type = 7  SevaID = 99 

2023-07-03 11:25:01.415 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.416 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vijaya Dasara Aradhane"  Type = 16  SevaID = 100 

2023-07-03 11:25:01.416 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.416 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarotsva"  Type = 1  SevaID = 101 

2023-07-03 11:25:01.416 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.416 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 0  SevaID = 102 

2023-07-03 11:25:01.416 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.416 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nithya Archane"  Type = 1  SevaID = 103 

2023-07-03 11:25:01.416 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.416 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtotthara Kanike"  Type = 1  SevaID = 104 

2023-07-03 11:25:01.416 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.416 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Santhana Gopala Krishna Homa"  Type = 15  SevaID = 105 

2023-07-03 11:25:01.416 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.416 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamana Homa"  Type = 15  SevaID = 106 

2023-07-03 11:25:01.417 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))))
2023-07-03 11:25:01.417 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Shashwatha Seva Pooje"  Type = 20  SevaID = 107 

2023-07-03 11:25:01.417 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))))
2023-07-03 11:25:01.417 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Regular"  Type = 1  SevaID = 108 

2023-07-03 11:25:01.417 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))))
2023-07-03 11:25:01.417 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Seva"  Type = 8  SevaID = 109 

2023-07-03 11:25:01.417 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))))
2023-07-03 11:25:01.417 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mosaranna Naivedya"  Type = 9  SevaID = 110 

2023-07-03 11:25:01.417 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))))
2023-07-03 11:25:01.417 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Poorna Pragna Hall Kanike"  Type = 14  SevaID = 111 

2023-07-03 11:25:01.417 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))), QMap((50, SevaName(0x97ea308))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))))
2023-07-03 11:25:01.417 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pratyeka Sathyanarayana Pooja"  Type = 10  SevaID = 112 

2023-07-03 11:25:01.418 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))))
2023-07-03 11:25:01.418 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chikka Adige"  Type = 9  SevaID = 113 

2023-07-03 11:25:01.418 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))))
2023-07-03 11:25:01.418 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vishesha Panchamrutha"  Type = 21  SevaID = 114 

2023-07-03 11:25:01.418 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))))
2023-07-03 11:25:01.418 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Thaila Abhyanjan seve"  Type = 21  SevaID = 115 

2023-07-03 11:25:01.418 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))))
2023-07-03 11:25:01.418 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri SeethaRamanjaneyarige Nuthana Vastra Dharane pratidevarige."  Type = 21  SevaID = 116 

2023-07-03 11:25:01.418 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))))
2023-07-03 11:25:01.418 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Prakarothsava"  Type = 21  SevaID = 117 

2023-07-03 11:25:01.418 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))))
2023-07-03 11:25:01.418 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane"  Type = 21  SevaID = 118 

2023-07-03 11:25:01.419 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))))
2023-07-03 11:25:01.419 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hoovina Alankara seve"  Type = 21  SevaID = 119 

2023-07-03 11:25:01.419 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))))
2023-07-03 11:25:01.419 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ramanavami Kanike"  Type = 2  SevaID = 120 

2023-07-03 11:25:01.419 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))))
2023-07-03 11:25:01.419 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Villeydhele Hara"  Type = 1  SevaID = 121 

2023-07-03 11:25:01.419 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))))
2023-07-03 11:25:01.419 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gandha Lepana "  Type = 22  SevaID = 122 

2023-07-03 11:25:01.419 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))))
2023-07-03 11:25:01.419 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phalahara Pooja"  Type = 9  SevaID = 123 

2023-07-03 11:25:01.419 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))))
2023-07-03 11:25:01.419 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 15  SevaID = 124 

2023-07-03 11:25:01.420 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))))
2023-07-03 11:25:01.420 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Monthly"  Type = 1  SevaID = 125 

2023-07-03 11:25:01.420 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))))
2023-07-03 11:25:01.420 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Jayathirtha Aradhane Kanike"  Type = 16  SevaID = 126 

2023-07-03 11:25:01.420 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))))
2023-07-03 11:25:01.420 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Oldarticals sold"  Type = 9  SevaID = 127 

2023-07-03 11:25:01.420 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))))
2023-07-03 11:25:01.420 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Udayaasthamaana Seva"  Type = 1000  SevaID = 1001 

2023-07-03 11:25:01.420 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))))
2023-07-03 11:25:01.420 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Seva"  Type = 1000  SevaID = 1002 

2023-07-03 11:25:01.420 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))))
2023-07-03 11:25:01.420 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva Samarpana Seva"  Type = 1000  SevaID = 1003 

2023-07-03 11:25:01.421 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))))
2023-07-03 11:25:01.421 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakaabhisheka"  Type = 1000  SevaID = 1004 

2023-07-03 11:25:01.421 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))))
2023-07-03 11:25:01.421 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Godhana"  Type = 1000  SevaID = 1005 

2023-07-03 11:25:01.421 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))))
2023-07-03 11:25:01.421 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mahaa Pooja"  Type = 1000  SevaID = 1006 

2023-07-03 11:25:01.421 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))))
2023-07-03 11:25:01.421 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ksheeraabhisheka"  Type = 1000  SevaID = 1007 

2023-07-03 11:25:01.421 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))))
2023-07-03 11:25:01.421 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Madhu Abhisheka"  Type = 1000  SevaID = 1008 

2023-07-03 11:25:01.421 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))))
2023-07-03 11:25:01.421 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Yella Homagala Seva"  Type = 1000  SevaID = 1010 

2023-07-03 11:25:01.422 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))))
2023-07-03 11:25:01.422 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Naivedhya/Hasthodaka"  Type = 1000  SevaID = 1011 

2023-07-03 11:25:01.422 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))))
2023-07-03 11:25:01.422 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Phala - Panchaamrutha"  Type = 1000  SevaID = 1012 

2023-07-03 11:25:01.422 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))))
2023-07-03 11:25:01.422 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ganapathi Abhisheka"  Type = 1000  SevaID = 1013 

2023-07-03 11:25:01.422 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))))
2023-07-03 11:25:01.422 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Nagadevara Abhisheka"  Type = 1000  SevaID = 1014 

2023-07-03 11:25:01.422 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))))
2023-07-03 11:25:01.422 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Abhisheka"  Type = 1000  SevaID = 1015 

2023-07-03 11:25:01.423 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))))
2023-07-03 11:25:01.423 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rathothsava"  Type = 1000  SevaID = 1016 

2023-07-03 11:25:01.423 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))))
2023-07-03 11:25:01.423 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Huggi Naivedhya"  Type = 1000  SevaID = 1017 

2023-07-03 11:25:01.423 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))))
2023-07-03 11:25:01.423 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pongal Naivedhya"  Type = 1000  SevaID = 1018 

2023-07-03 11:25:01.423 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))))
2023-07-03 11:25:01.423 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Grahana Shanthi"  Type = 1000  SevaID = 1019 

2023-07-03 11:25:01.423 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))))
2023-07-03 11:25:01.423 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika - Rathothsava"  Type = 1000  SevaID = 1020 

2023-07-03 11:25:01.424 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))))
2023-07-03 11:25:01.424 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kaarthika Seva"  Type = 1000  SevaID = 1021 

2023-07-03 11:25:01.424 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))))
2023-07-03 11:25:01.424 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sri Sathya Narayana Pooja"  Type = 1000  SevaID = 1022 

2023-07-03 11:25:01.424 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))))
2023-07-03 11:25:01.424 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Tulsi Archane"  Type = 1000  SevaID = 1023 

2023-07-03 11:25:01.424 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))))
2023-07-03 11:25:01.424 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Chataka Shraadha"  Type = 1000  SevaID = 1024 

2023-07-03 11:25:01.424 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))))
2023-07-03 11:25:01.424 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sankalpa Shraadha"  Type = 1000  SevaID = 1025 

2023-07-03 11:25:01.425 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))))
2023-07-03 11:25:01.425 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Vaahana Pooja"  Type = 1000  SevaID = 1026 

2023-07-03 11:25:01.425 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))))
2023-07-03 11:25:01.425 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Archane Seva"  Type = 1000  SevaID = 1027 

2023-07-03 11:25:01.425 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))))
2023-07-03 11:25:01.425 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Lakshmi Pooja"  Type = 1000  SevaID = 1028 

2023-07-03 11:25:01.425 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))))
2023-07-03 11:25:01.425 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Navagraha Devarige Thailaabhisheka"  Type = 1000  SevaID = 1029 

2023-07-03 11:25:01.425 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))))
2023-07-03 11:25:01.425 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Pavamaana Homa"  Type = 1000  SevaID = 1030 

2023-07-03 11:25:01.426 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))))
2023-07-03 11:25:01.426 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Gana Homa"  Type = 1000  SevaID = 1031 

2023-07-03 11:25:01.426 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))))
2023-07-03 11:25:01.426 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Mruthyunjaya Homa"  Type = 1000  SevaID = 1032 

2023-07-03 11:25:01.426 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))))
2023-07-03 11:25:01.426 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Rudraabhisheka"  Type = 1000  SevaID = 1033 

2023-07-03 11:25:01.426 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))))
2023-07-03 11:25:01.426 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Sampurna Seva"  Type = 2000  SevaID = 2001 

2023-07-03 11:25:01.427 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))))
2023-07-03 11:25:01.427 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ondu Dinada Anna Santharpane Seva"  Type = 2000  SevaID = 2002 

2023-07-03 11:25:01.427 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))))
2023-07-03 11:25:01.427 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva(Huvina Alankara)"  Type = 2000  SevaID = 2003 

2023-07-03 11:25:01.427 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))))
2023-07-03 11:25:01.427 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Alankara Seva"  Type = 2000  SevaID = 2004 

2023-07-03 11:25:01.427 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))))
2023-07-03 11:25:01.427 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Noothana Vastra Seva"  Type = 2000  SevaID = 2005 

2023-07-03 11:25:01.427 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))))
2023-07-03 11:25:01.427 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Sarva seva"  Type = 2000  SevaID = 2006 

2023-07-03 11:25:01.428 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))))
2023-07-03 11:25:01.428 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Kanakabhisheka Seva"  Type = 2000  SevaID = 2007 

2023-07-03 11:25:01.428 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))))
2023-07-03 11:25:01.428 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Hasthodaka Seva(Prathidina)"  Type = 2000  SevaID = 2009 

2023-07-03 11:25:01.428 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))(2009, SevaName(0x97d7df8))))
2023-07-03 11:25:01.428 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "MahaPooje"  Type = 2000  SevaID = 2010 

2023-07-03 11:25:01.428 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))(2009, SevaName(0x97d7df8))(2010, SevaName(0x97d78f8))))
2023-07-03 11:25:01.428 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Ashtothara Seva(Prathidina)"  Type = 2000  SevaID = 2011 

2023-07-03 11:25:01.428 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))(2009, SevaName(0x97d7df8))(2010, SevaName(0x97d78f8))(2011, SevaName(0x97d7768))))
2023-07-03 11:25:01.429 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Paadakaradhane"  Type = 2000  SevaID = 2012 

2023-07-03 11:25:01.429 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))(2009, SevaName(0x97d7df8))(2010, SevaName(0x97d78f8))(2011, SevaName(0x97d7768))(2012, SevaName(0x97d7808))))
2023-07-03 11:25:01.429 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "GanaHoma"  Type = 2000  SevaID = 2013 

2023-07-03 11:25:01.429 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))(2009, SevaName(0x97d7df8))(2010, SevaName(0x97d78f8))(2011, SevaName(0x97d7768))(2012, SevaName(0x97d7808))(2013, SevaName(0x97d7998))))
2023-07-03 11:25:01.429 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "PhalaPanchamrutha Seva"  Type = 2000  SevaID = 2014 

2023-07-03 11:25:01.429 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))(2009, SevaName(0x97d7df8))(2010, SevaName(0x97d78f8))(2011, SevaName(0x97d7768))(2012, SevaName(0x97d7808))(2013, SevaName(0x97d7998))(2014, SevaName(0x97d7e98))))
2023-07-03 11:25:01.429 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "ChatakaN"  Type = 1  SevaID = 2015 

2023-07-03 11:25:01.429 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))(2015, SevaName(0x97d79e8))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))(2009, SevaName(0x97d7df8))(2010, SevaName(0x97d78f8))(2011, SevaName(0x97d7768))(2012, SevaName(0x97d7808))(2013, SevaName(0x97d7998))(2014, SevaName(0x97d7e98))))
2023-07-03 11:25:01.429 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "SankalpaN"  Type = 1  SevaID = 2016 

2023-07-03 11:25:01.430 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))(2015, SevaName(0x97d79e8))(2016, SevaName(0x97d7718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))(2009, SevaName(0x97d7df8))(2010, SevaName(0x97d78f8))(2011, SevaName(0x97d7768))(2012, SevaName(0x97d7808))(2013, SevaName(0x97d7998))(2014, SevaName(0x97d7e98))))
2023-07-03 11:25:01.430 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*)  Inseting Seva Name  "Poornapragna Hall Kanike N "  Type = 14  SevaID = 2017 

2023-07-03 11:25:01.430 DBG default: bool SevaTypeNamesDataModel::processSevaNames(SevaName*) (QMap((102, SevaName(0x97eb488))), QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))(2015, SevaName(0x97d79e8))(2016, SevaName(0x97d7718))), QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))), QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))), QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))), QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))), QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))), QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))), QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))), QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))), QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))), QMap((9, SevaName(0x978ff10))), QMap((11, SevaName(0x9790500))), QMap((15, SevaName(0x978fce0))), QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))(2017, SevaName(0x97d77b8))), QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))), QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))), QMap((77, SevaName(0x97ea8a8))), QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))), QMap((107, SevaName(0x97ebbb8))), QMap((114, SevaName(0x97eba28))(115, SevaName(0x97eba78))(116, SevaName(0x97ebb18))(117, SevaName(0x97ebd48))(118, SevaName(0x97ebca8))(119, SevaName(0x97ebd98))), QMap((122, SevaName(0x97d6f98))), QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))), QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))(2009, SevaName(0x97d7df8))(2010, SevaName(0x97d78f8))(2011, SevaName(0x97d7768))(2012, SevaName(0x97d7808))(2013, SevaName(0x97d7998))(2014, SevaName(0x97d7e98))))
2023-07-03 11:25:01.430 DBG default: bool DBInterface::querySevaNames() querying seva names done 

2023-07-03 11:25:01.430 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:25:01.430 DBG default: UserManagement::UserManagement(QObject*) 

2023-07-03 11:25:01.430 DBG default: The role number recieved -1 

2023-07-03 11:25:01.430 DBG default: SevaDetailsTableView::SevaDetailsTableView(QObject*) 

2023-07-03 11:25:01.435 DBG default: hello suman 

2023-07-03 11:25:01.435 DBG default: AccountReportModel::AccountReportModel(QObject*) 

2023-07-03 11:25:01.435 DBG default: BookingReportModel::BookingReportModel(QObject*) 

2023-07-03 11:25:01.435 DBG default: AccountReportDateRangeModel::AccountReportDateRangeModel(QObject*) 

2023-07-03 11:25:01.435 DBG default: AccountReportMonthWiseModel::AccountReportMonthWiseModel(QObject*) 

2023-07-03 11:25:01.435 DBG default: BookingReportDateRangeModel::BookingReportDateRangeModel(QObject*) 

2023-07-03 11:25:01.435 DBG default: The connect status true 

2023-07-03 11:25:01.435 DBG default: BookingReportMonthWiseModel::BookingReportMonthWiseModel(QObject*) 

2023-07-03 11:25:01.435 DBG default: SevaBookingTableModel::SevaBookingTableModel(QObject*) 

2023-07-03 11:25:01.435 DBG default: SevaBookingSearchModel::SevaBookingSearchModel(QObject*) 

2023-07-03 11:25:01.435 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-03 11:25:01.435 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-03 11:25:01.435 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-03 11:25:01.435 DBG default: virtual QHash<int, QByteArray> SevaBookingTableModel::roleNames() const 

2023-07-03 11:25:01.435 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Date = 3  Mon = 7  Year = 2023
2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "1" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "2" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "3" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "4" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "4" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "5" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "6" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "6" 

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.435 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "7" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "8" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "9" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "10" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "11" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "11" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "12" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "12" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "13" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "13" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "14" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "15" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "16" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "17" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "18" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "18" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "19" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "20" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "21" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "22" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "23" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "24" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "25" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "25" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "26" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "27" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "28" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "29" 

2023-07-03 11:25:01.436 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "30" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "31" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "32" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "33" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "34" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "35" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "36" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "37" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "38" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "39" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "40" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "41" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "42" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "42" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "43" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "44" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "45" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "46" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "47" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "48" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "49" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "50" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "51" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "52" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "53" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "54" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "55" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "55" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "56" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "56" 

2023-07-03 11:25:01.437 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "57" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "58" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "59" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "60" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "61" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "62" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "62" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "63" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "64" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "65" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "66" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "67" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "67" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "68" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "69" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "70" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "71" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "75" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "76" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "77" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "78" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "79" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "80" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element  

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SevaName "" 

2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Found the last record element SNO "80" 

2023-07-03 11:25:01.438 WRN default: QSqlQuery::value: not positioned on a valid record
2023-07-03 11:25:01.438 DBG default: int DBInterface::getLastReceiptNumber()  Size =  -1  receiptNo ID =  80  Value =  QVariant(Invalid) 

2023-07-03 11:25:01.438 DBG default: virtual QString SevaReceiptNumber::getNextReceiptNumber()  Last ReceiptNo from DB = 81  Generated = "2023_7_0081" 

2023-07-03 11:25:01.438 DBG default: QString SevaViewProxy::getNextReceiptNumber()  r number =  "2023_7_0081" 

2023-07-03 11:25:01.438 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:01.438 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-07-03 11:25:01.439 DBG default: SevaCountOnDateModel::SevaCountOnDateModel(QObject*) 

2023-07-03 11:25:01.439 DBG default: hello suman 

2023-07-03 11:25:01.439 DBG default: saveVoucher::saveVoucher(QObject*) 

2023-07-03 11:25:01.439 DBG default: VoucherNumber::VoucherNumber() 

2023-07-03 11:25:01.439 DBG default: virtual QString VoucherNumber::getNextVoucherNumber() 

2023-07-03 11:25:01.439 DBG default: int DBInterface::getLastVoucherNumber() 

2023-07-03 11:25:01.439 DBG default: 3 

2023-07-03 11:25:01.439 DBG default: "4" 

2023-07-03 11:25:01.439 DBG default: VoucherReportModel::VoucherReportModel(QObject*) 

2023-07-03 11:25:01.439 DBG default: QString TrustListModel::getConfigLocation() 

2023-07-03 11:25:01.439 DBG default: QString TrustListModel::getDataLocation() 

2023-07-03 11:25:01.439 DBG qml: str1 = --D:/TempleFiles_suman/Temple-main/bins/Config/Hubablli
2023-07-03 11:25:01.439 DBG qml: str2 = --D:/TempleFiles_suman/Temple-main/bins/Data/Hubablli
2023-07-03 11:25:01.516 DBG qml: The Page Number=== 0
2023-07-03 11:25:01.516 DBG qml: The page number is 0
2023-07-03 11:25:01.516 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:25:01.516 DBG qml: Screen screenWidth size =1920
2023-07-03 11:25:01.516 DBG qml: Screen screenHeight size =1000
2023-07-03 11:25:01.516 WRN default: qrc:/ui/Login.qml:37:13: Unable to assign [undefined] to bool
2023-07-03 11:25:01.516 WRN default: qrc:/ui/Login.qml:44:13: Unable to assign [undefined] to bool
2023-07-03 11:25:01.516 WRN default: qrc:/ui/Login.qml:80:17: Unable to assign [undefined] to bool
2023-07-03 11:25:01.516 DBG default: int TrustListModel::getTrustListSize() 

2023-07-03 11:25:06.044 WRN default: qrc:/ui/Login.qml:128:17: QML QQuickTextInput*: Binding loop detected for property "focus"
2023-07-03 11:25:11.094 DBG default: void UserManagement::authorize(QString, QString) "admin" "admin123" 

2023-07-03 11:25:11.095 DBG qml: Credentials are correct
2023-07-03 11:25:11.095 DBG qml: Wrong credentials 0
2023-07-03 11:25:11.155 DBG qml: the accounts enable false
2023-07-03 11:25:11.155 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:25:11.155 DBG qml: Screen screenWidth size =1920
2023-07-03 11:25:11.155 DBG qml: Screen screenHeight size =1000
2023-07-03 11:25:11.155 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:25:11.156 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:25:11.156 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:25:11.156 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:25:11.156 DBG default: The role number is 1 

2023-07-03 11:25:11.156 DBG default: void UserManagement::user_Recieved(int, QString) 

2023-07-03 11:25:11.156 DBG default: The role number recieved 1 

2023-07-03 11:25:12.361 DBG qml: account details button clicked
2023-07-03 11:25:12.361 DBG qml: Clicked on AccountDetails
2023-07-03 11:25:13.073 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:13.073 DBG default: int AccountReportModel::iGrandTotal() const 0 

2023-07-03 11:25:13.073 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:13.126 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:25:13.433 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-07-03 11:25:13.433 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:25:13.433 DBG qml: accont report Selected year2015
2023-07-03 11:25:13.435 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-07-03 11:25:13.435 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:25:13.435 DBG qml: Selected month1
2023-07-03 11:25:13.436 WRN default: qrc:/ui/components/MyReportFilter.qml:328:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.436 WRN default: qrc:/ui/components/MyReportFilter.qml:339:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.497 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.497 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.519 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.522 WRN default: qrc:/ui/components/MyReportFilter.qml:126:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.522 WRN default: qrc:/ui/components/MyReportFilter.qml:164:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.523 WRN default: qrc:/ui/components/MyReportFilter.qml:328:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.523 WRN default: qrc:/ui/components/MyReportFilter.qml:339:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.523 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.523 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.523 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.523 WRN default: qrc:/ui/components/MyReportFilter.qml:126:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.523 WRN default: qrc:/ui/components/MyReportFilter.qml:164:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.523 DBG qml: In Component.onCompleted: of seva report page
2023-07-03 11:25:13.523 DBG qml: In  Component.onCompleted: loader srp
2023-07-03 11:25:13.523 DBG qml: In Component.onCompleted: of seva report page total text 0.00 ?
2023-07-03 11:25:13.528 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:25:13.528 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:25:13.528 DBG qml: The month and year initial 1   2015
2023-07-03 11:25:13.528 DBG qml:  Trying to get the list category
2023-07-03 11:25:13.528 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:25:13.528 DBG default: bool SevaTypeViewModel::init() 

2023-07-03 11:25:13.528 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:25:13.528 DBG default: bool SevaTypeViewModel::init()  Number of Seva Types = 25 

2023-07-03 11:25:13.528 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:25:13.528 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.528 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.528 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.528 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.528 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:25:13.528 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:25:13.528 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:25:13.528 DBG qml: 0
2023-07-03 11:25:13.528 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.528 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:25:13.528 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:25:13.528 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:25:13.528 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.528 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:25:13.528 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:25:13.528 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:25:13.528 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:25:13.528 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:25:13.528 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:25:13.528 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:25:13.528 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:25:13.528 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:25:13.528 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:25:13.528 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:25:13.528 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-03 11:25:13.528 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:25:13.529 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:25:13.529 DBG qml: Seva name selected : Nithya Archane
2023-07-03 11:25:13.529 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:25:13.529 DBG qml: Seva type selected in report filter : 0
2023-07-03 11:25:13.529 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.529 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.529 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.529 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:25:13.529 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:25:13.529 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:25:13.529 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:25:13.529 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:25:13.529 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:25:13.529 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:25:13.529 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:25:13.529 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:25:13.529 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:25:13.529 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:25:13.529 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:25:13.529 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-03 11:25:13.529 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:25:13.529 DBG default: void SevaReport::generateAccReport(ReportFilterElements*) 

2023-07-03 11:25:13.529 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:25:13.529 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) 0 

2023-07-03 11:25:13.530 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:13.530 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm date "03-07-2023" 

2023-07-03 11:25:13.530 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:25:13.530 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:25:13.530 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm ddetails "All" 0 

2023-07-03 11:25:13.530 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) Inside c date acc rep 

2023-07-03 11:25:13.530 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:13.530 DBG default: QString AccountReportModel::FormatDate(QString) "03-07-2023" 

2023-07-03 11:25:13.530 DBG default: QString AccountReportModel::FormatDate(QString) QDate("2023-07-03") 

2023-07-03 11:25:13.530 DBG default: QString AccountReportModel::FormatDate(QString) "2023-07-03" 

2023-07-03 11:25:13.530 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:25:13.530 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:13.530 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-07-03" 

2023-07-03 11:25:13.530 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:13.530 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:25:13.530 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:25:13.530 DBG default: void DBInterface::account_report_cdate_function(QString, int, QString) 

2023-07-03 11:25:13.530 DBG default: "2023-07-03" ^^^^^^^^^^^^^^^^^^^^^^^^^^  "All"    0 

2023-07-03 11:25:13.530 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-03 11:25:13.530 DBG default: First 

2023-07-03 11:25:13.530 DBG default:  Query string = "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-03' Group by sevabooking.SEVANAME; " 

2023-07-03 11:25:13.530 DBG default: inside cash true 

2023-07-03 11:25:13.530 DBG default:  Query string Acc rep true 

2023-07-03 11:25:13.530 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-03 11:25:13.530 DBG default: true 

2023-07-03 11:25:13.530 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:13.530 DBG default: "2023-07-03" 

2023-07-03 11:25:13.530 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:13.530 DBG qml: ******** 03-07-2023
2023-07-03 11:25:13.530 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:25:13.530 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:13.530 DBG qml:   _rip.sSingleDate 203-07-2023
2023-07-03 11:25:13.530 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:13.530 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-03 11:25:13.530 DBG qml: Component.completed:if of sevaProxy.sevaReport.accReportModel.getAccountReportQryListSize()===0
2023-07-03 11:25:13.530 DBG qml: In onSendError
2023-07-03 11:25:13.531 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-07-03 11:25:13.531 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:25:13.531 DBG qml: accont report Selected year2023
2023-07-03 11:25:13.531 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-07-03 11:25:13.531 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:25:13.531 DBG qml: Selected month7
2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 1 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 2 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 3 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 4 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 5 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 6 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 7 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.531 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 8 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 9 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 10 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 11 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 12 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 13 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 14 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 15 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 16 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 17 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 18 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 19 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 20 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 21 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 22 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 23 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:25:13.532 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 24 

2023-07-03 11:25:13.532 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:25:13.532 DBG qml: Screen screenWidth size =1920
2023-07-03 11:25:13.532 DBG qml: Screen screenHeight size =1000
2023-07-03 11:25:13.532 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:25:13.532 DBG qml: Screen screenWidth size =1920
2023-07-03 11:25:13.532 DBG qml: Screen screenHeight size =1000
2023-07-03 11:25:13.532 DBG qml: this is admin
2023-07-03 11:25:13.533 WRN default: qrc:/ui/components/MyReportFilter.qml:126:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.533 WRN default: qrc:/ui/components/MyReportFilter.qml:164:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.533 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.533 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.533 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.533 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.549 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.549 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.549 WRN default: qrc:/ui/components/MyReportFilter.qml:328:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.549 WRN default: qrc:/ui/components/MyReportFilter.qml:339:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.549 WRN default: qrc:/ui/components/MyReportFilter.qml:328:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:13.549 WRN default: qrc:/ui/components/MyReportFilter.qml:339:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:25:15.178 DBG qml: Ok clicked
2023-07-03 11:25:20.149 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:25:20.149 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:25:20.149 DBG qml: I am hereeee
2023-07-03 11:25:20.149 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-07-03 11:25:20.149 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-07-03 11:25:20.149 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:25:20.149 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-07-03 11:25:20.149 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-07-03 11:25:20.149 DBG qml: In onLoadDateWisePage
2023-07-03 11:25:20.178 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:25:20.195 DBG qml: Component.completed: of SevaAccountReportOnDateRange.qml
2023-07-03 11:25:20.200 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:25:20.200 DBG qml: Screen screenWidth size =1920
2023-07-03 11:25:20.201 DBG qml: Screen screenHeight size =1000
2023-07-03 11:25:20.201 WRN default: qrc:/ui/SevaReportPage.qml:348:17: QML Connections: Detected function "onLoadDateWisePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:25:20.201 WRN default: qrc:/ui/SevaReportPage.qml:348:17: QML Connections: Detected function "onLoadDateWiseForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:25:20.201 DBG qml: ---------11----------------
2023-07-03 11:25:20.201 DBG qml: ---------12----------------
2023-07-03 11:25:20.201 DBG qml: In onSendReportDateRangeInputForWholeMonth
2023-07-03 11:25:20.201 DBG qml: In main
2023-07-03 11:25:20.201 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:25:20.201 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) 0 

2023-07-03 11:25:20.201 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:20.202 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) elm date "03-07-2023" 

2023-07-03 11:25:20.202 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:25:20.202 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:25:20.202 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetails "All" 0 

2023-07-03 11:25:20.202 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetailqqqqqqqqqqqqqqqqqs 2 

2023-07-03 11:25:20.202 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:25:20.202 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:25:20.202 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:25:20.202 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:25:20.202 DBG default:  Query string = "select RECEIPT_DATE,sum(QUANTITY),sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='7' Group by sevabooking.RECEIPT_DATE;" 

2023-07-03 11:25:20.203 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY),sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='7' Group by sevabooking.RECEIPT_DATE;" 

2023-07-03 11:25:20.203 DBG default: AccountReportDateRangeElement::AccountReportDateRangeElement(QObject*) 

2023-07-03 11:25:20.203 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-07-01" 

2023-07-03 11:25:20.203 DBG default: In while of db **********query_other1.value(1).toInt()***************** 6 

2023-07-03 11:25:20.203 DBG default: In while of db **************query_other1.value(2).toFloat()************* 21950 

2023-07-03 11:25:20.203 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) ------------ 

2023-07-03 11:25:20.203 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:25:20.203 DBG default: void AccountReportDateRangeModel::setIGrandTotal(int) 21950 

2023-07-03 11:25:20.205 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) 21950 

2023-07-03 11:25:20.205 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY),sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='7' Group by sevabooking.RECEIPT_DATE;" 

2023-07-03 11:25:20.205 DBG default: AccountReportDateRangeElement::AccountReportDateRangeElement(QObject*) 

2023-07-03 11:25:20.205 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-07-02" 

2023-07-03 11:25:20.205 DBG default: In while of db **********query_other1.value(1).toInt()***************** 9 

2023-07-03 11:25:20.205 DBG default: In while of db **************query_other1.value(2).toFloat()************* 2700 

2023-07-03 11:25:20.205 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) ------------ 

2023-07-03 11:25:20.205 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-07-03 11:25:20.205 DBG default: void AccountReportDateRangeModel::setIGrandTotal(int) 24650 

2023-07-03 11:25:20.206 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) 24650 

2023-07-03 11:25:20.206 DBG default: int AccountReportDateRangeModel::getAccountReportDateRangeQryListSize() 

2023-07-03 11:25:20.206 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:20.206 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-03 11:25:20.206 DBG qml: ---------d----------------
2023-07-03 11:25:20.206 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:20.206 DBG default: int AccountReportModel::iGrandTotal() const 0 

2023-07-03 11:25:20.208 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:20.208 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:20.212 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:20.212 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:20.216 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:20.216 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-01" 

2023-07-03 11:25:20.217 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:20.217 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 6 

2023-07-03 11:25:20.217 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:20.217 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 21950 

2023-07-03 11:25:20.218 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:20.218 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:20.219 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:20.219 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 2 

2023-07-03 11:25:20.220 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:20.220 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-02" 

2023-07-03 11:25:20.220 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:20.220 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 9 

2023-07-03 11:25:20.220 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:20.220 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 2700 

2023-07-03 11:25:24.775 DBG qml: mouse clicked left styleData.selected true
2023-07-03 11:25:24.775 DBG qml: clicked cell in table view  0
2023-07-03 11:25:24.776 DBG qml: clicked cell in table view coordinates =  QPointF(243, 35)
2023-07-03 11:25:24.776 DBG qml: clicked cell in table view clickIndex =  0
2023-07-03 11:25:24.776 DBG qml: clicked cell in table view  0
2023-07-03 11:25:24.776 DBG qml: clicked cell in table view  0
2023-07-03 11:25:24.776 DBG qml: Left 0
2023-07-03 11:25:24.776 DBG default: AccountReportDateRangeElement* AccountReportDateRangeModel::getAccountReportDateRangeElementAt(int) I am index  0 

2023-07-03 11:25:24.777 DBG default: AccountReportDateRangeElement* AccountReportDateRangeModel::getAccountReportDateRangeElementAt(int) "2023-07-01" 

2023-07-03 11:25:24.777 DBG default: AccountReportDateRangeElement* AccountReportDateRangeModel::getAccountReportDateRangeElementAt(int) 6 

2023-07-03 11:25:24.777 DBG default: AccountReportDateRangeElement* AccountReportDateRangeModel::getAccountReportDateRangeElementAt(int) 21950 

2023-07-03 11:25:24.777 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.778 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.778 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.779 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.779 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.780 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.780 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-01" 

2023-07-03 11:25:24.780 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.780 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 6 

2023-07-03 11:25:24.781 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.781 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 21950 

2023-07-03 11:25:24.781 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.781 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.782 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.782 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 2 

2023-07-03 11:25:24.783 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.783 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-02" 

2023-07-03 11:25:24.784 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.784 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 9 

2023-07-03 11:25:24.785 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.785 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 2700 

2023-07-03 11:25:24.785 DBG qml: /////////////////////////////2023-07-01
2023-07-03 11:25:24.785 DBG qml: In   1111111111onLoadSingleDatePage(obj.date) 2023-07-01
2023-07-03 11:25:24.786 DBG qml:  Component.onDestruction of SevaAccountReportOnDateRange.qml
2023-07-03 11:25:24.922 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:24.922 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:24.923 DBG default: int AccountReportModel::iGrandTotal() const 0 

2023-07-03 11:25:24.923 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:24.924 WRN default: qrc:/ui/SevaAccountReportForSingleDate.qml:173:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:25:24.926 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:25:24.929 DBG qml: Component.completed: of SevaAccountReportForSingleDate.qml
2023-07-03 11:25:24.929 DBG qml: In Component.onCompleted: of seva report page single date total text 0.00 ?
2023-07-03 11:25:24.932 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:25:24.932 DBG qml: Screen screenWidth size =1920
2023-07-03 11:25:24.932 DBG qml: Screen screenHeight size =1000
2023-07-03 11:25:24.932 WRN default: qrc:/ui/SevaReportPage.qml:348:17: QML Connections: Detected function "onLoadSingleDatePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:25:24.932 WRN default: qrc:/ui/SevaReportPage.qml:348:17: QML Connections: Detected function "onLoadMonthWisePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:25:24.932 WRN default: qrc:/ui/SevaReportPage.qml:348:17: QML Connections: Detected function "onLoadDateWiseForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:25:24.932 DBG qml: ******** 01-07-2023
2023-07-03 11:25:24.932 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-07-03 11:25:24.932 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-07-03 11:25:24.932 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:25:24.932 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-07-03 11:25:24.932 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-07-03 11:25:24.932 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:25:24.932 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:25:24.932 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:25:24.932 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-03 11:25:24.932 DBG default: bool ReportFilterElements::bSevawise() const 

2023-07-03 11:25:24.932 DBG qml: In Loader of seva report page _rip.bSevawisetrue
2023-07-03 11:25:24.932 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-03 11:25:24.932 DBG qml: In Loader of seva report page _rip.bDatewisefalse
2023-07-03 11:25:24.932 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:24.932 DBG qml: In Loader of seva report page _rip.sSingleDate01-07-2023
2023-07-03 11:25:24.932 DBG default: const QString& ReportFilterElements::sStartDate() const 

2023-07-03 11:25:24.933 DBG qml: In Loader of seva report page  _rip.sStartDatenull
2023-07-03 11:25:24.933 DBG default: const QString& ReportFilterElements::sEndDate() const 

2023-07-03 11:25:24.933 DBG qml: In Loader of seva report page    _rip.sEndDate null
2023-07-03 11:25:24.933 DBG qml: In Loader of seva report page     _rip.iSelectedType0
2023-07-03 11:25:24.933 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:25:24.933 DBG qml: In Loader of seva report page    _rip.iSevaType 0
2023-07-03 11:25:24.933 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:25:24.933 DBG qml: In Loader of seva report page    _rip.sSevaNameAll
2023-07-03 11:25:24.933 DBG qml: In main
2023-07-03 11:25:24.933 DBG default: void SevaReport::generateAccReport(ReportFilterElements*) 

2023-07-03 11:25:24.933 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:25:24.933 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:25:24.933 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) 0 

2023-07-03 11:25:24.933 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:24.933 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm date "01-07-2023" 

2023-07-03 11:25:24.933 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:25:24.933 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:25:24.933 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm ddetails "All" 0 

2023-07-03 11:25:24.933 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) Inside c date acc rep 

2023-07-03 11:25:24.933 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:24.933 DBG default: QString AccountReportModel::FormatDate(QString) "01-07-2023" 

2023-07-03 11:25:24.933 DBG default: QString AccountReportModel::FormatDate(QString) QDate("2023-07-01") 

2023-07-03 11:25:24.933 DBG default: QString AccountReportModel::FormatDate(QString) "2023-07-01" 

2023-07-03 11:25:24.933 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:25:24.933 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:24.933 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-07-01" 

2023-07-03 11:25:24.933 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:24.933 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:25:24.933 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:25:24.933 DBG default: void DBInterface::account_report_cdate_function(QString, int, QString) 

2023-07-03 11:25:24.933 DBG default: "2023-07-01" ^^^^^^^^^^^^^^^^^^^^^^^^^^  "All"    0 

2023-07-03 11:25:24.933 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-03 11:25:24.933 DBG default: First 

2023-07-03 11:25:24.933 DBG default:  Query string = "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-01' Group by sevabooking.SEVANAME; " 

2023-07-03 11:25:24.933 DBG default: inside cash true 

2023-07-03 11:25:24.933 DBG default:  Query string Acc rep true 

2023-07-03 11:25:24.933 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-01' Group by sevabooking.SEVANAME; " 

2023-07-03 11:25:24.933 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-03 11:25:24.933 DBG default: suman cash "200" 

2023-07-03 11:25:24.933 DBG default: suman cash "5000" 

2023-07-03 11:25:24.934 DBG default: suman cash "150" 

2023-07-03 11:25:24.934 DBG default: suman cheque "600" 

2023-07-03 11:25:24.934 DBG default: suman neft "10000" 

2023-07-03 11:25:24.934 DBG default: suman upi "6000" 

2023-07-03 11:25:24.934 DBG default: "Hasthodaka" 

2023-07-03 11:25:24.934 DBG default: "1" 

2023-07-03 11:25:24.934 DBG default: "200" 

2023-07-03 11:25:24.934 DBG default: "200" 

2023-07-03 11:25:24.934 DBG default: before emitting signal  account_report '''''''' 

2023-07-03 11:25:24.934 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-03 11:25:24.934 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:25:24.934 DBG default: void AccountReportModel::setIGrandTotal(int) 200 

2023-07-03 11:25:24.934 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:24.934 DBG default: int AccountReportModel::iGrandTotal() const 200 

2023-07-03 11:25:24.934 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 200 

2023-07-03 11:25:24.934 DBG default: after emitting signal  account_report '''''''' 

2023-07-03 11:25:24.934 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-01' Group by sevabooking.SEVANAME; " 

2023-07-03 11:25:24.934 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-03 11:25:24.934 DBG default: "M Navami Pavamana Homa" 

2023-07-03 11:25:24.934 DBG default: "1" 

2023-07-03 11:25:24.934 DBG default: "5000" 

2023-07-03 11:25:24.934 DBG default: "5000" 

2023-07-03 11:25:24.934 DBG default: before emitting signal  account_report '''''''' 

2023-07-03 11:25:24.934 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-03 11:25:24.934 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 1 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 434285256 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.934 DBG default: void AccountReportModel::setIGrandTotal(int) 5200 

2023-07-03 11:25:24.934 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:24.934 DBG default: int AccountReportModel::iGrandTotal() const 5200 

2023-07-03 11:25:24.934 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 5200 

2023-07-03 11:25:24.934 DBG default: after emitting signal  account_report '''''''' 

2023-07-03 11:25:24.934 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-01' Group by sevabooking.SEVANAME; " 

2023-07-03 11:25:24.934 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-03 11:25:24.934 DBG default: "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.934 DBG default: "1" 

2023-07-03 11:25:24.934 DBG default: "10000" 

2023-07-03 11:25:24.934 DBG default: "10000" 

2023-07-03 11:25:24.934 DBG default: before emitting signal  account_report '''''''' 

2023-07-03 11:25:24.934 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-03 11:25:24.934 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 434285256 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.934 DBG default: void AccountReportModel::setIGrandTotal(int) 15200 

2023-07-03 11:25:24.934 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:24.934 DBG default: int AccountReportModel::iGrandTotal() const 15200 

2023-07-03 11:25:24.934 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 15200 

2023-07-03 11:25:24.934 DBG default: after emitting signal  account_report '''''''' 

2023-07-03 11:25:24.934 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-01' Group by sevabooking.SEVANAME; " 

2023-07-03 11:25:24.934 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-03 11:25:24.934 DBG default: "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.934 DBG default: "1" 

2023-07-03 11:25:24.934 DBG default: "600" 

2023-07-03 11:25:24.934 DBG default: "600" 

2023-07-03 11:25:24.934 DBG default: before emitting signal  account_report '''''''' 

2023-07-03 11:25:24.934 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-03 11:25:24.934 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 3 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 434285256 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.934 DBG default: void AccountReportModel::setIGrandTotal(int) 15800 

2023-07-03 11:25:24.934 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:24.934 DBG default: int AccountReportModel::iGrandTotal() const 15800 

2023-07-03 11:25:24.934 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 15800 

2023-07-03 11:25:24.934 DBG default: after emitting signal  account_report '''''''' 

2023-07-03 11:25:24.934 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-01' Group by sevabooking.SEVANAME; " 

2023-07-03 11:25:24.934 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-03 11:25:24.934 DBG default: "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.934 DBG default: "1" 

2023-07-03 11:25:24.934 DBG default: "150" 

2023-07-03 11:25:24.934 DBG default: "150" 

2023-07-03 11:25:24.934 DBG default: before emitting signal  account_report '''''''' 

2023-07-03 11:25:24.934 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-03 11:25:24.934 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 4 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 434285256 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.934 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.934 DBG default: void AccountReportModel::setIGrandTotal(int) 15950 

2023-07-03 11:25:24.935 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:24.935 DBG default: int AccountReportModel::iGrandTotal() const 15950 

2023-07-03 11:25:24.935 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 15950 

2023-07-03 11:25:24.935 DBG default: after emitting signal  account_report '''''''' 

2023-07-03 11:25:24.935 DBG default:  Query string inside while = Acc rep "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-01' Group by sevabooking.SEVANAME; " 

2023-07-03 11:25:24.935 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-03 11:25:24.935 DBG default: "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.935 DBG default: "1" 

2023-07-03 11:25:24.935 DBG default: "6000" 

2023-07-03 11:25:24.935 DBG default: "6000" 

2023-07-03 11:25:24.935 DBG default: before emitting signal  account_report '''''''' 

2023-07-03 11:25:24.935 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) ------------ 

2023-07-03 11:25:24.935 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 5 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 434285256 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.935 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.935 DBG default: void AccountReportModel::setIGrandTotal(int) 21950 

2023-07-03 11:25:24.935 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:25:24.935 DBG default: int AccountReportModel::iGrandTotal() const 21950 

2023-07-03 11:25:24.935 DBG default: bool AccountReportModel::insertSevaRow(AccountReportElement*) 21950 

2023-07-03 11:25:24.935 DBG default: after emitting signal  account_report '''''''' 

2023-07-03 11:25:24.935 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-03 11:25:24.935 DBG default: false 

2023-07-03 11:25:24.935 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:25:24.935 DBG default: "2023-07-01" 

2023-07-03 11:25:24.936 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 434285256 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.936 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 434285256 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.936 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.937 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 434285256 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.937 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.937 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.938 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.938 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Hasthodaka" 

2023-07-03 11:25:24.938 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.938 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.939 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 200 

2023-07-03 11:25:24.939 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.939 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.939 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.940 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.940 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 200 

2023-07-03 11:25:24.940 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.940 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.940 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.941 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.941 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.942 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 2 

2023-07-03 11:25:24.942 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.942 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.942 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "M Navami Pavamana Homa" 

2023-07-03 11:25:24.943 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.943 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-03 11:25:24.943 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.943 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.943 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.943 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.944 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-03 11:25:24.944 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.944 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.944 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.945 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.945 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.946 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-03 11:25:24.946 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.946 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.946 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.946 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.947 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 10000 

2023-07-03 11:25:24.947 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.947 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.948 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.948 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.948 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 10000 

2023-07-03 11:25:24.948 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.948 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.949 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.949 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.949 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.950 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 4 

2023-07-03 11:25:24.950 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.950 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.950 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.951 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.951 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 600 

2023-07-03 11:25:24.951 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.951 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.952 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.952 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.952 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 600 

2023-07-03 11:25:24.952 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.952 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.953 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.953 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.953 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 401796768 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.954 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5 

2023-07-03 11:25:24.954 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.954 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.954 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.955 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.955 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 150 

2023-07-03 11:25:24.955 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.955 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.956 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.956 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.956 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 150 

2023-07-03 11:25:24.956 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.956 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.957 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.957 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.957 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 0 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.958 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 6 

2023-07-03 11:25:24.958 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.958 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.958 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.959 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.959 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 6000 

2023-07-03 11:25:24.959 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.959 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.959 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.959 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.959 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 6000 

2023-07-03 11:25:24.961 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.961 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.961 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.962 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.962 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.962 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.962 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.963 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "Hasthodaka" 

2023-07-03 11:25:24.963 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.963 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 200 

2023-07-03 11:25:24.963 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.963 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.964 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.964 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.964 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.964 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.965 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.965 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.965 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.965 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.966 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 200 

2023-07-03 11:25:24.966 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.966 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.966 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.967 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.967 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.967 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 2 

2023-07-03 11:25:24.968 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.968 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "M Navami Pavamana Homa" 

2023-07-03 11:25:24.968 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.968 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-03 11:25:24.968 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.968 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.969 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.969 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.969 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.969 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.970 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.970 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.970 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.970 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.971 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5000 

2023-07-03 11:25:24.971 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.971 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.971 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.972 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.972 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 3 

2023-07-03 11:25:24.972 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.972 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.973 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.973 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.973 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 10000 

2023-07-03 11:25:24.973 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.973 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.974 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.974 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.974 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.974 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.975 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.975 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.975 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.975 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.976 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 10000 

2023-07-03 11:25:24.976 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.976 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.976 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.977 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.977 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.977 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 4 

2023-07-03 11:25:24.978 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.978 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.978 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.978 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 600 

2023-07-03 11:25:24.978 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.978 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.979 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.979 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.979 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.979 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.980 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.980 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.980 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.980 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.981 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 600 

2023-07-03 11:25:24.981 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.981 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.981 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.982 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.982 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.983 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 5 

2023-07-03 11:25:24.983 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.983 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.983 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.983 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 150 

2023-07-03 11:25:24.983 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.983 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.984 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.984 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.984 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.984 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.985 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.985 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.985 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.986 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.986 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 150 

2023-07-03 11:25:24.986 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.986 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.986 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.987 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.987 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.988 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 6 

2023-07-03 11:25:24.988 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.988 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.988 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.988 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.988 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 6000 

2023-07-03 11:25:24.989 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.989 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:25:24.989 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.989 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.989 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.990 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.990 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.990 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.991 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 6 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- "Hasthodaka" 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 200 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 2 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- "M Navami Pavamana Homa" 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 5000 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 3 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 10000 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 4 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 600 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 5 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 150 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 6 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 1 

2023-07-03 11:25:24.991 DBG default: Suman Accounts--- 6000 

2023-07-03 11:25:24.991 DBG default: virtual QVariant AccountReportModel::data(const QModelIndex&, int) const 6000 

2023-07-03 11:26:25.681 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:26:25.681 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:26:25.681 DBG qml: I am hereeee
2023-07-03 11:26:25.681 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-07-03 11:26:25.681 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-07-03 11:26:25.681 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:26:25.681 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-07-03 11:26:25.681 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-07-03 11:26:25.681 DBG qml: In onLoadDateWisePage
2023-07-03 11:26:25.681 DBG qml:  Component.onDestruction of SevaAccountReportForSingleDate.qml
2023-07-03 11:26:25.682 DBG default: void SevaReport::resetAccDateRangeModel() 

2023-07-03 11:26:25.682 DBG default: void AccountReportDateRangeModel::resetAccDateRangeModel() 

2023-07-03 11:26:25.694 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.694 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.694 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.700 DBG qml: Component.completed: of SevaAccountReportOnDateRange.qml
2023-07-03 11:26:25.701 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.701 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:26:25.702 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.702 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-01" 

2023-07-03 11:26:25.703 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.703 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 6 

2023-07-03 11:26:25.704 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.704 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 21950 

2023-07-03 11:26:25.704 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:26:25.704 DBG qml: Screen screenWidth size =1920
2023-07-03 11:26:25.704 DBG qml: Screen screenHeight size =1000
2023-07-03 11:26:25.704 WRN default: qrc:/ui/SevaReportPage.qml:348:17: QML Connections: Detected function "onLoadDateWisePage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:26:25.704 WRN default: qrc:/ui/SevaReportPage.qml:348:17: QML Connections: Detected function "onLoadDateWiseForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:26:25.704 DBG qml: ---------11----------------
2023-07-03 11:26:25.704 DBG qml: ---------12----------------
2023-07-03 11:26:25.704 DBG qml: In onSendReportDateRangeInputForWholeMonth
2023-07-03 11:26:25.704 DBG qml: In main
2023-07-03 11:26:25.704 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:26:25.704 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) 0 

2023-07-03 11:26:25.704 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:26:25.704 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) elm date "03-07-2023" 

2023-07-03 11:26:25.704 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:26:25.704 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:26:25.704 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetails "All" 0 

2023-07-03 11:26:25.704 DBG default: void AccountReportDateRangeModel::generateAccDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetailqqqqqqqqqqqqqqqqqs 2 

2023-07-03 11:26:25.704 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:26:25.704 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:26:25.704 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:26:25.704 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:26:25.704 DBG default:  Query string = "select RECEIPT_DATE,sum(QUANTITY),sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='7' Group by sevabooking.RECEIPT_DATE;" 

2023-07-03 11:26:25.705 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY),sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='7' Group by sevabooking.RECEIPT_DATE;" 

2023-07-03 11:26:25.705 DBG default: AccountReportDateRangeElement::AccountReportDateRangeElement(QObject*) 

2023-07-03 11:26:25.705 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-07-01" 

2023-07-03 11:26:25.705 DBG default: In while of db **********query_other1.value(1).toInt()***************** 6 

2023-07-03 11:26:25.705 DBG default: In while of db **************query_other1.value(2).toFloat()************* 21950 

2023-07-03 11:26:25.705 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) ------------ 

2023-07-03 11:26:25.705 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:26:25.705 DBG default: void AccountReportDateRangeModel::setIGrandTotal(int) 21950 

2023-07-03 11:26:25.705 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) 21950 

2023-07-03 11:26:25.705 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY),sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='7' Group by sevabooking.RECEIPT_DATE;" 

2023-07-03 11:26:25.705 DBG default: AccountReportDateRangeElement::AccountReportDateRangeElement(QObject*) 

2023-07-03 11:26:25.705 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-07-02" 

2023-07-03 11:26:25.705 DBG default: In while of db **********query_other1.value(1).toInt()***************** 9 

2023-07-03 11:26:25.705 DBG default: In while of db **************query_other1.value(2).toFloat()************* 2700 

2023-07-03 11:26:25.705 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) ------------ 

2023-07-03 11:26:25.705 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-07-03 11:26:25.705 DBG default: void AccountReportDateRangeModel::setIGrandTotal(int) 24650 

2023-07-03 11:26:25.705 DBG default: bool AccountReportDateRangeModel::insertSevaRow(AccountReportDateRangeElement*) 24650 

2023-07-03 11:26:25.705 DBG default: int AccountReportDateRangeModel::getAccountReportDateRangeQryListSize() 

2023-07-03 11:26:25.705 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:26:25.705 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-03 11:26:25.705 DBG qml: ---------e----------------
2023-07-03 11:26:25.705 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:26:25.705 DBG default: int AccountReportModel::iGrandTotal() const 21950 

2023-07-03 11:26:25.706 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.706 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.706 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.706 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:26:25.706 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.706 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-01" 

2023-07-03 11:26:25.706 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.706 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 6 

2023-07-03 11:26:25.706 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.706 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 21950 

2023-07-03 11:26:25.706 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.706 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.707 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.707 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 2 

2023-07-03 11:26:25.707 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.707 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-02" 

2023-07-03 11:26:25.707 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.707 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 9 

2023-07-03 11:26:25.707 DBG default: virtual int AccountReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:26:25.707 DBG default: virtual QVariant AccountReportDateRangeModel::data(const QModelIndex&, int) const 2700 

2023-07-03 11:26:52.572 DBG qml: Esc pressed in  seva acc report on Date Range pageJuly
2023-07-03 11:26:52.572 DBG qml: Esc pressed in  seva acc report on Date Range page loadMenuPage();
2023-07-03 11:26:52.572 DBG qml: In onLoadMenuPage
2023-07-03 11:26:52.572 DBG qml: loading Menu page from main
2023-07-03 11:26:52.572 DBG qml: Closing the report
2023-07-03 11:26:52.572 DBG qml: reset Model
2023-07-03 11:26:52.572 DBG default: void SevaReport::resetAccModel() 

2023-07-03 11:26:52.572 DBG default: void AccountReportModel::resetAccModel() 

2023-07-03 11:26:52.572 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:26:52.589 DBG qml:  Component.onDestruction of SevaAccountReportOnDateRange.qml
2023-07-03 11:26:52.598 DBG qml: the accounts enable true
2023-07-03 11:26:52.598 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:26:52.598 DBG qml: Screen screenWidth size =1920
2023-07-03 11:26:52.598 DBG qml: Screen screenHeight size =1000
2023-07-03 11:26:52.599 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:26:52.599 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:26:52.599 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:26:52.599 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:26:56.244 DBG qml: Seva Booking Button Clicked
2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))(2015, SevaName(0x97d79e8))(2016, SevaName(0x97d7718))) 
(SevaName(0x978fdd0), SevaName(0x9790460), SevaName(0x978fec0), SevaName(0x978ffb0), SevaName(0x978fc40), SevaName(0x978fe70), SevaName(0x97e9ef8), SevaName(0x97ea678), SevaName(0x97ea128), SevaName(0x97ea718), SevaName(0x97eaad8), SevaName(0x97eb028), SevaName(0x97ea9e8), SevaName(0x97eb438), SevaName(0x97eb8e8), SevaName(0x97eb848), SevaName(0x97eb3e8), SevaName(0x97ebc58), SevaName(0x97d6fe8), SevaName(0x97d79e8), SevaName(0x97d7718)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x978fdd0), SevaName(0x9790460), SevaName(0x978fec0), SevaName(0x978ffb0), SevaName(0x978fc40), SevaName(0x978fe70), SevaName(0x97e9ef8), SevaName(0x97ea678), SevaName(0x97ea128), SevaName(0x97ea718), SevaName(0x97eaad8), SevaName(0x97eb028), SevaName(0x97ea9e8), SevaName(0x97eb438), SevaName(0x97eb8e8), SevaName(0x97eb848), SevaName(0x97eb3e8), SevaName(0x97ebc58), SevaName(0x97d6fe8), SevaName(0x97d79e8), SevaName(0x97d7718)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))(2015, SevaName(0x97d79e8))(2016, SevaName(0x97d7718))) 
(SevaName(0x978fdd0), SevaName(0x9790460), SevaName(0x978fec0), SevaName(0x978ffb0), SevaName(0x978fc40), SevaName(0x978fe70), SevaName(0x97e9ef8), SevaName(0x97ea678), SevaName(0x97ea128), SevaName(0x97ea718), SevaName(0x97eaad8), SevaName(0x97eb028), SevaName(0x97ea9e8), SevaName(0x97eb438), SevaName(0x97eb8e8), SevaName(0x97eb848), SevaName(0x97eb3e8), SevaName(0x97ebc58), SevaName(0x97d6fe8), SevaName(0x97d79e8), SevaName(0x97d7718)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))) 
(SevaName(0x97ea3f8), SevaName(0x97ea3a8), SevaName(0x97ea448), SevaName(0x97ea768), SevaName(0x97ea7b8), SevaName(0x97eada8), SevaName(0x97eb208), SevaName(0x97eb118), SevaName(0x97eab28), SevaName(0x97eb078), SevaName(0x97eb0c8), SevaName(0x97eab78), SevaName(0x97eaee8), SevaName(0x97ead08), SevaName(0x97eae98), SevaName(0x97ebcf8)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ea3f8), SevaName(0x97ea3a8), SevaName(0x97ea448), SevaName(0x97ea768), SevaName(0x97ea7b8), SevaName(0x97eada8), SevaName(0x97eb208), SevaName(0x97eb118), SevaName(0x97eab28), SevaName(0x97eb078), SevaName(0x97eb0c8), SevaName(0x97eab78), SevaName(0x97eaee8), SevaName(0x97ead08), SevaName(0x97eae98), SevaName(0x97ebcf8)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))) 
(SevaName(0x97ea3f8), SevaName(0x97ea3a8), SevaName(0x97ea448), SevaName(0x97ea768), SevaName(0x97ea7b8), SevaName(0x97eada8), SevaName(0x97eb208), SevaName(0x97eb118), SevaName(0x97eab28), SevaName(0x97eb078), SevaName(0x97eb0c8), SevaName(0x97eab78), SevaName(0x97eaee8), SevaName(0x97ead08), SevaName(0x97eae98), SevaName(0x97ebcf8)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 3 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))) 
(SevaName(0x9790780), SevaName(0x97906e0), SevaName(0x9790640), SevaName(0x97e9f48), SevaName(0x97ea808), SevaName(0x97ea4e8), SevaName(0x97e9e58), SevaName(0x97e9ea8), SevaName(0x97ea218), SevaName(0x97ea358), SevaName(0x97ea628), SevaName(0x97ea498), SevaName(0x97ea0d8), SevaName(0x97ea038), SevaName(0x97e9fe8), SevaName(0x97ea538), SevaName(0x97ea1c8), SevaName(0x97ea088)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9790780), SevaName(0x97906e0), SevaName(0x9790640), SevaName(0x97e9f48), SevaName(0x97ea808), SevaName(0x97ea4e8), SevaName(0x97e9e58), SevaName(0x97e9ea8), SevaName(0x97ea218), SevaName(0x97ea358), SevaName(0x97ea628), SevaName(0x97ea498), SevaName(0x97ea0d8), SevaName(0x97ea038), SevaName(0x97e9fe8), SevaName(0x97ea538), SevaName(0x97ea1c8), SevaName(0x97ea088)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))) 
(SevaName(0x9790780), SevaName(0x97906e0), SevaName(0x9790640), SevaName(0x97e9f48), SevaName(0x97ea808), SevaName(0x97ea4e8), SevaName(0x97e9e58), SevaName(0x97e9ea8), SevaName(0x97ea218), SevaName(0x97ea358), SevaName(0x97ea628), SevaName(0x97ea498), SevaName(0x97ea0d8), SevaName(0x97ea038), SevaName(0x97e9fe8), SevaName(0x97ea538), SevaName(0x97ea1c8), SevaName(0x97ea088)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 4 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))) 
(SevaName(0x9790050), SevaName(0x97905f0), SevaName(0x978fc90), SevaName(0x97ea948), SevaName(0x97eaf88), SevaName(0x97eaf38), SevaName(0x97ea858), SevaName(0x97eac68)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9790050), SevaName(0x97905f0), SevaName(0x978fc90), SevaName(0x97ea948), SevaName(0x97eaf88), SevaName(0x97eaf38), SevaName(0x97ea858), SevaName(0x97eac68)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))) 
(SevaName(0x9790050), SevaName(0x97905f0), SevaName(0x978fc90), SevaName(0x97ea948), SevaName(0x97eaf88), SevaName(0x97eaf38), SevaName(0x97ea858), SevaName(0x97eac68)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 5 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))) 
(SevaName(0x97eadf8), SevaName(0x97eac18), SevaName(0x97eacb8)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eadf8), SevaName(0x97eac18), SevaName(0x97eacb8)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))) 
(SevaName(0x97eadf8), SevaName(0x97eac18), SevaName(0x97eacb8)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 6 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))) 
(SevaName(0x97ea998), SevaName(0x97eae48), SevaName(0x97ea8f8), SevaName(0x97ead58), SevaName(0x97eb4d8)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ea998), SevaName(0x97eae48), SevaName(0x97ea8f8), SevaName(0x97ead58), SevaName(0x97eb4d8)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))) 
(SevaName(0x97ea998), SevaName(0x97eae48), SevaName(0x97ea8f8), SevaName(0x97ead58), SevaName(0x97eb4d8)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 7 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))) 
(SevaName(0x97eafd8), SevaName(0x97eb578), SevaName(0x97eb898), SevaName(0x97eb5c8), SevaName(0x97eb2a8), SevaName(0x97ebb68), SevaName(0x97eb2f8), SevaName(0x97eb348), SevaName(0x97eb6b8), SevaName(0x97eb9d8), SevaName(0x97ebac8)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eafd8), SevaName(0x97eb578), SevaName(0x97eb898), SevaName(0x97eb5c8), SevaName(0x97eb2a8), SevaName(0x97ebb68), SevaName(0x97eb2f8), SevaName(0x97eb348), SevaName(0x97eb6b8), SevaName(0x97eb9d8), SevaName(0x97ebac8)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))) 
(SevaName(0x97eafd8), SevaName(0x97eb578), SevaName(0x97eb898), SevaName(0x97eb5c8), SevaName(0x97eb2a8), SevaName(0x97ebb68), SevaName(0x97eb2f8), SevaName(0x97eb348), SevaName(0x97eb6b8), SevaName(0x97eb9d8), SevaName(0x97ebac8)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 8 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))) 
(SevaName(0x978fd80), SevaName(0x978fe20), SevaName(0x97eb938)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x978fd80), SevaName(0x978fe20), SevaName(0x97eb938)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))) 
(SevaName(0x978fd80), SevaName(0x978fe20), SevaName(0x97eb938)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 9 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))) 
(SevaName(0x9790000), SevaName(0x978fd30), SevaName(0x9790690), SevaName(0x97ea5d8), SevaName(0x97ea268), SevaName(0x97ea2b8), SevaName(0x97eb668), SevaName(0x97eb258), SevaName(0x97d6d18), SevaName(0x97d6db8)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9790000), SevaName(0x978fd30), SevaName(0x9790690), SevaName(0x97ea5d8), SevaName(0x97ea268), SevaName(0x97ea2b8), SevaName(0x97eb668), SevaName(0x97eb258), SevaName(0x97d6d18), SevaName(0x97d6db8)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))) 
(SevaName(0x9790000), SevaName(0x978fd30), SevaName(0x9790690), SevaName(0x97ea5d8), SevaName(0x97ea268), SevaName(0x97ea2b8), SevaName(0x97eb668), SevaName(0x97eb258), SevaName(0x97d6d18), SevaName(0x97d6db8)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 10 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))) 
(SevaName(0x97ea308), SevaName(0x97ebc08)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ea308), SevaName(0x97ebc08)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))) 
(SevaName(0x97ea308), SevaName(0x97ebc08)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 11 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x978ff10))) 
(SevaName(0x978ff10)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x978ff10)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x978ff10))) 
(SevaName(0x978ff10)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 12 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x9790500))) 
(SevaName(0x9790500)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9790500)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x9790500))) 
(SevaName(0x9790500)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 13 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x978fce0))) 
(SevaName(0x978fce0)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x978fce0)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x978fce0))) 
(SevaName(0x978fce0)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 14 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))(2017, SevaName(0x97d77b8))) 
(SevaName(0x9790730), SevaName(0x97eb988), SevaName(0x97d77b8)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9790730), SevaName(0x97eb988), SevaName(0x97d77b8)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))(2017, SevaName(0x97d77b8))) 
(SevaName(0x9790730), SevaName(0x97eb988), SevaName(0x97d77b8)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 15 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))) 
(SevaName(0x97ea588), SevaName(0x97ea178), SevaName(0x97eb7f8), SevaName(0x97eb758), SevaName(0x97d6d68)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ea588), SevaName(0x97ea178), SevaName(0x97eb7f8), SevaName(0x97eb758), SevaName(0x97d6d68)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))) 
(SevaName(0x97ea588), SevaName(0x97ea178), SevaName(0x97eb7f8), SevaName(0x97eb758), SevaName(0x97d6d68)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 16 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))) 
(SevaName(0x97ea6c8), SevaName(0x97eb1b8), SevaName(0x97eb398), SevaName(0x97d7038)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ea6c8), SevaName(0x97eb1b8), SevaName(0x97eb398), SevaName(0x97d7038)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))) 
(SevaName(0x97ea6c8), SevaName(0x97eb1b8), SevaName(0x97eb398), SevaName(0x97d7038)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 18 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x97ea8a8))) 
(SevaName(0x97ea8a8)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ea8a8)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x97ea8a8))) 
(SevaName(0x97ea8a8)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 19 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))) 
(SevaName(0x97eaa38), SevaName(0x97eaa88)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eaa38), SevaName(0x97eaa88)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))) 
(SevaName(0x97eaa38), SevaName(0x97eaa88)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 20 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x97ebbb8))) 
(SevaName(0x97ebbb8)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ebbb8)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x97ebbb8))) 
(SevaName(0x97ebbb8)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 22 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x97d6f98))) 
(SevaName(0x97d6f98)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97d6f98)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x97d6f98))) 
(SevaName(0x97d6f98)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 25 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 25 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) () 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 25 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG qml: seveListModel  for if((sevaProxy.getSevaModel(100).getSevaListViewModel/*.getSevaListViewModel*/===0))
2023-07-03 11:26:56.244 DBG qml:  countIfSevaNamesPresentInSevaTypes++ 1
2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 26 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 26 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) () 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 26 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG qml: seveListModel  for if((sevaProxy.getSevaModel(100).getSevaListViewModel/*.getSevaListViewModel*/===0))
2023-07-03 11:26:56.244 DBG qml:  countIfSevaNamesPresentInSevaTypes++ 2
2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1000 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1000 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))) 
(SevaName(0x97d73f8), SevaName(0x97d7588), SevaName(0x97d7128), SevaName(0x97d74e8), SevaName(0x97d6e08), SevaName(0x97d7088), SevaName(0x97d6f48), SevaName(0x97d7178), SevaName(0x97d6e58), SevaName(0x97d70d8), SevaName(0x97d6cc8), SevaName(0x97d71c8), SevaName(0x97d7358), SevaName(0x97d6ea8), SevaName(0x97d6ef8), SevaName(0x97d7448), SevaName(0x97d7538), SevaName(0x97d7218), SevaName(0x97d7268), SevaName(0x97d7498), SevaName(0x97d73a8), SevaName(0x97d6bd8), SevaName(0x97d6c28), SevaName(0x97d6c78), SevaName(0x97d7c18), SevaName(0x97d7da8), SevaName(0x97d7a38), SevaName(0x97d78a8), SevaName(0x97d7b78), SevaName(0x97d7bc8), SevaName(0x97d7b28), SevaName(0x97d7c68)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97d73f8), SevaName(0x97d7588), SevaName(0x97d7128), SevaName(0x97d74e8), SevaName(0x97d6e08), SevaName(0x97d7088), SevaName(0x97d6f48), SevaName(0x97d7178), SevaName(0x97d6e58), SevaName(0x97d70d8), SevaName(0x97d6cc8), SevaName(0x97d71c8), SevaName(0x97d7358), SevaName(0x97d6ea8), SevaName(0x97d6ef8), SevaName(0x97d7448), SevaName(0x97d7538), SevaName(0x97d7218), SevaName(0x97d7268), SevaName(0x97d7498), SevaName(0x97d73a8), SevaName(0x97d6bd8), SevaName(0x97d6c28), SevaName(0x97d6c78), SevaName(0x97d7c18), SevaName(0x97d7da8), SevaName(0x97d7a38), SevaName(0x97d78a8), SevaName(0x97d7b78), SevaName(0x97d7bc8), SevaName(0x97d7b28), SevaName(0x97d7c68)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1000 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))) 
(SevaName(0x97d73f8), SevaName(0x97d7588), SevaName(0x97d7128), SevaName(0x97d74e8), SevaName(0x97d6e08), SevaName(0x97d7088), SevaName(0x97d6f48), SevaName(0x97d7178), SevaName(0x97d6e58), SevaName(0x97d70d8), SevaName(0x97d6cc8), SevaName(0x97d71c8), SevaName(0x97d7358), SevaName(0x97d6ea8), SevaName(0x97d6ef8), SevaName(0x97d7448), SevaName(0x97d7538), SevaName(0x97d7218), SevaName(0x97d7268), SevaName(0x97d7498), SevaName(0x97d73a8), SevaName(0x97d6bd8), SevaName(0x97d6c28), SevaName(0x97d6c78), SevaName(0x97d7c18), SevaName(0x97d7da8), SevaName(0x97d7a38), SevaName(0x97d78a8), SevaName(0x97d7b78), SevaName(0x97d7bc8), SevaName(0x97d7b28), SevaName(0x97d7c68)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 2000 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.244 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2000 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))(2009, SevaName(0x97d7df8))(2010, SevaName(0x97d78f8))(2011, SevaName(0x97d7768))(2012, SevaName(0x97d7808))(2013, SevaName(0x97d7998))(2014, SevaName(0x97d7e98))) 
(SevaName(0x97d76c8), SevaName(0x97d7948), SevaName(0x97d7f88), SevaName(0x97d7cb8), SevaName(0x97d7a88), SevaName(0x97d7858), SevaName(0x97d7d08), SevaName(0x97d7df8), SevaName(0x97d78f8), SevaName(0x97d7768), SevaName(0x97d7808), SevaName(0x97d7998), SevaName(0x97d7e98)) 

2023-07-03 11:26:56.244 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97d76c8), SevaName(0x97d7948), SevaName(0x97d7f88), SevaName(0x97d7cb8), SevaName(0x97d7a88), SevaName(0x97d7858), SevaName(0x97d7d08), SevaName(0x97d7df8), SevaName(0x97d78f8), SevaName(0x97d7768), SevaName(0x97d7808), SevaName(0x97d7998), SevaName(0x97d7e98)) 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2000 

2023-07-03 11:26:56.244 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))(2009, SevaName(0x97d7df8))(2010, SevaName(0x97d78f8))(2011, SevaName(0x97d7768))(2012, SevaName(0x97d7808))(2013, SevaName(0x97d7998))(2014, SevaName(0x97d7e98))) 
(SevaName(0x97d76c8), SevaName(0x97d7948), SevaName(0x97d7f88), SevaName(0x97d7cb8), SevaName(0x97d7a88), SevaName(0x97d7858), SevaName(0x97d7d08), SevaName(0x97d7df8), SevaName(0x97d78f8), SevaName(0x97d7768), SevaName(0x97d7808), SevaName(0x97d7998), SevaName(0x97d7e98)) 

2023-07-03 11:26:56.244 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.244 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:26:56.244 DBG qml:  if of <<< countIfSevaNamesPresentInSevaTypes++ 2
2023-07-03 11:26:56.244 DBG qml: clicked on Sevabooking
2023-07-03 11:26:56.406 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.418 DBG qml: state changedinitial
2023-07-03 11:26:56.422 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:26:56.422 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Cannot assign to non-existent property "onDefaultDates"
2023-07-03 11:26:56.422 WRN default: qrc:/ui/SevaDateTime.qml:97:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:26:56.422 WRN default: qrc:/ui/SevaDateTime.qml:91:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:26:56.489 DBG qml: my seva delegate is created
2023-07-03 11:26:56.489 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:26:56.490 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:26:56.490 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:26:56.490 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:26:56.490 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:26:56.490 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:26:56.490 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.490 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.490 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.490 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.490 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:26:56.490 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:26:56.490 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:26:56.490 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:26:56.490 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:26:56.490 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.490 DBG qml: --------------- onCurrentIndexChanged: of combo box sevaListView1
2023-07-03 11:26:56.490 DBG qml:  Index =0
2023-07-03 11:26:56.490 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:26:56.490 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:26:56.490 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:26:56.490 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.490 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.490 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.490 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.490 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:26:56.490 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:26:56.490 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:26:56.490 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:26:56.490 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:26:56.490 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.490 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:26:56.490 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:26:56.490 DBG qml:  Seva Type Changed: 0
2023-07-03 11:26:56.490 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:26:56.490 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.490 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.490 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.490 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.490 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:26:56.490 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:26:56.490 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:26:56.490 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:26:56.490 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:26:56.491 DBG qml: my seva delegate is created
2023-07-03 11:26:56.491 DBG qml:  Current Index changed0
2023-07-03 11:26:56.491 DBG qml:  VIEW-1 - Index =0
2023-07-03 11:26:56.491 DBG qml:  Seva Selected =0
2023-07-03 11:26:56.491 DBG default: SevaName* SevaViewProxy::getSevaByIndex(int) 0 

2023-07-03 11:26:56.491 DBG default: current.... seva model 

2023-07-03 11:26:56.491 DBG default: current seva model SevaListViewModel(0x19cae300) 

2023-07-03 11:26:56.491 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int) (SevaName(0x97eb488)) 

2023-07-03 11:26:56.491 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int)  Index requested 1= 0 

2023-07-03 11:26:56.491 DBG qml:  Seva Details =0
2023-07-03 11:26:56.491 DBG default: void SevaName::print()  Seva Name   = "Nithya Archane"
2023-07-03 11:26:56.491 DBG default: void SevaName::print()  Seva ID     = 102
2023-07-03 11:26:56.491 DBG default: void SevaName::print()  Seva Number = 102
2023-07-03 11:26:56.491 DBG default: void SevaName::print()  Seva        = 0
2023-07-03 11:26:56.491 DBG default: void SevaName::print()  Seva Date   = "2021-11-25"
2023-07-03 11:26:56.491 DBG default: void SevaName::print()  Seva Type   = 0
2023-07-03 11:26:56.491 DBG default: void SevaName::print()  Seva Cost   = 0
2023-07-03 11:26:56.491 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-03 11:26:56.491 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-03 11:26:56.491 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-03 11:26:56.491 DBG qml: seva name  = Nithya Archane Seva cost = 0
2023-07-03 11:26:56.491 DBG default: QStringList SevaViewProxy::getGothras() 

2023-07-03 11:26:56.491 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.491 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-07-03 11:26:56.492 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Vashistha", "", "Puthamanasa", "Shrivathsa", "Sankhyayanasa", "Jamadagni", "Harithasa", "Kashyapa", "Maudgalya", "Bharadwaja", "Gargeyyesa", "Mounabharghava", "Dhananjaya", "Kaundinya", "Galava", "Athreyasa", "Vishwamitra", "Kaushika", "Gouthama") 

2023-07-03 11:26:56.492 DBG qml: ********* In setGothras function  *********** = 0
2023-07-03 11:26:56.492 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-07-03 11:26:56.492 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.492 DBG qml: ********* In set nakshatra function  *********** = 0
2023-07-03 11:26:56.492 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:26:56.492 DBG qml: Current Text =SevaTypeViewModel(0x19caf9e0)
2023-07-03 11:26:56.492 DBG qml: Model SevaType--------: [object Object]
2023-07-03 11:26:56.492 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:26:56.492 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:26:56.492 DBG qml: Model SevaType: RAMANAVAMI SEVE
2023-07-03 11:26:56.492 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:26:56.492 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:26:56.492 DBG qml: Model SevaType: 0
2023-07-03 11:26:56.492 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:26:56.492 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:26:56.492 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:26:56.492 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:26:56.506 DBG qml: Component.onCompleted: of seva booking view
2023-07-03 11:26:56.506 DBG qml: In Component.onCompleted: of SevaPaymenConfirmationDialog
2023-07-03 11:26:56.506 DBG qml: Dialog object is ccreated in SPCD
2023-07-03 11:26:56.506 DBG default: QStringList SevaTypeNamesDataModel::getBankList() 

2023-07-03 11:26:56.506 DBG default: JsonProcessor::JsonProcessor(QObject*) 

2023-07-03 11:26:56.506 DBG default: void JsonProcessor::readBanksFromJsonToList() 

2023-07-03 11:26:56.511 DBG default: file opened 

2023-07-03 11:26:56.511 DBG default: read all 

2023-07-03 11:26:56.511 DBG default: void JsonProcessor::readBanksFromJsonToList() dddddddoooooooooooocccccccc 

2023-07-03 11:26:56.511 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:26:56.511 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:26:56.511 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:26:56.511 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:26:56.511 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:26:56.511 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:26:56.511 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:26:56.511 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:26:56.511 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:26:56.511 DBG default: virtual JsonProcessor::~JsonProcessor() 

2023-07-03 11:26:56.512 DBG qml:  Trying to get the list category
2023-07-03 11:26:56.512 WRN default: qrc:/ui/SevaDateTime.qml:89: ReferenceError: defaultDates is not defined
2023-07-03 11:26:56.512 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:26:56.512 DBG qml: Screen screenWidth size =1920
2023-07-03 11:26:56.512 DBG qml: Screen screenHeight size =1000
2023-07-03 11:26:56.512 DBG qml:  Name Status =false
2023-07-03 11:26:56.512 DBG qml:  Mobile Status =false
2023-07-03 11:26:56.512 DBG qml: Component.onCompleted: of seva list view
2023-07-03 11:26:56.512 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:26:56.512 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:26:56.512 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:26:56.512 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:26:56.512 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:26:56.512 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:26:56.512 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:26:56.512 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:26:56.512 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:26:56.512 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:26:56.512 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:26:56.512 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:26:56.512 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:26:56.512 DBG qml: Component.onCompleted of combo box sevaListView current index =0 1
2023-07-03 11:26:56.512 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:26:56.512 DBG qml: Screen screenWidth size =1920
2023-07-03 11:26:56.512 DBG qml: Screen screenHeight size =1000
2023-07-03 11:26:56.513 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.513 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.513 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.513 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.513 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.517 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.521 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.521 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.521 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.521 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.521 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.522 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.522 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.522 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:26:56.522 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:27:01.469 DBG qml: show all button clicked
2023-07-03 11:27:01.469 DBG qml: Show all Data
2023-07-03 11:27:01.469 DBG default: bool SevaViewProxy::showAllData() 

2023-07-03 11:27:01.469 DBG default: void AllViewReports::clearModel()  clear data called 

2023-07-03 11:27:01.469 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^1111111^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.470 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^222222^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.471 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^3333333^^^^^^^^^^^^^^^^^^   -1 

2023-07-03 11:27:01.471 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.471 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.471 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.471 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.471 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.472 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  0 

2023-07-03 11:27:01.472 DBG default: void SevaBookingElement::print()  SNO      = "1" 

2023-07-03 11:27:01.472 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.472 DBG default: void SevaBookingElement::print()  Person   = "1" 

2023-07-03 11:27:01.472 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.472 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.472 DBG default:  Name = "Nagabhushan"
2023-07-03 11:27:01.472 DBG default:  Nakshatra  "Anuradha"
2023-07-03 11:27:01.472 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:27:01.472 DBG default:  Mobile  "9663650110" 

2023-07-03 11:27:01.472 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.472 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 0 0 

2023-07-03 11:27:01.472 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 0 0 

2023-07-03 11:27:01.472 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 0 1 

2023-07-03 11:27:01.472 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  0 0 

2023-07-03 11:27:01.473 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 1 2 

2023-07-03 11:27:01.473 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 1 1 

2023-07-03 11:27:01.473 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  0 

2023-07-03 11:27:01.473 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 1 3 

2023-07-03 11:27:01.473 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 1 

2023-07-03 11:27:01.473 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  0 

2023-07-03 11:27:01.473 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.473 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.473 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.474 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.474 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.474 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  1 

2023-07-03 11:27:01.474 DBG default: void SevaBookingElement::print()  SNO      = "2" 

2023-07-03 11:27:01.474 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.474 DBG default: void SevaBookingElement::print()  Person   = "2" 

2023-07-03 11:27:01.474 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.474 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.474 DBG default:  Name = "Sudhanva"
2023-07-03 11:27:01.475 DBG default:  Nakshatra  ""
2023-07-03 11:27:01.475 DBG default:  Gothra  "" 

2023-07-03 11:27:01.475 DBG default:  Mobile  "9980510563" 

2023-07-03 11:27:01.475 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.475 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 1 4 

2023-07-03 11:27:01.475 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  1 1 

2023-07-03 11:27:01.475 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 2 5 

2023-07-03 11:27:01.475 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 2 2 

2023-07-03 11:27:01.475 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  1 

2023-07-03 11:27:01.475 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 2 6 

2023-07-03 11:27:01.475 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 2 

2023-07-03 11:27:01.475 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  1 

2023-07-03 11:27:01.475 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.476 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.476 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.476 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.476 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.476 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  2 

2023-07-03 11:27:01.476 DBG default: void SevaBookingElement::print()  SNO      = "3" 

2023-07-03 11:27:01.476 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.476 DBG default: void SevaBookingElement::print()  Person   = "3" 

2023-07-03 11:27:01.476 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.476 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.477 DBG default:  Name = "Sachin Kulkarni"
2023-07-03 11:27:01.477 DBG default:  Nakshatra  ""
2023-07-03 11:27:01.477 DBG default:  Gothra  "" 

2023-07-03 11:27:01.477 DBG default:  Mobile  "9916962524" 

2023-07-03 11:27:01.477 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.477 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 2 7 

2023-07-03 11:27:01.477 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  2 2 

2023-07-03 11:27:01.477 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 3 8 

2023-07-03 11:27:01.477 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 3 3 

2023-07-03 11:27:01.477 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  2 

2023-07-03 11:27:01.477 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 3 9 

2023-07-03 11:27:01.477 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 3 

2023-07-03 11:27:01.477 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  2 

2023-07-03 11:27:01.477 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.477 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.478 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.478 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.478 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.478 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  3 

2023-07-03 11:27:01.478 DBG default: void SevaBookingElement::print()  SNO      = "4" 

2023-07-03 11:27:01.478 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:27:01.478 DBG default: void SevaBookingElement::print()  Person   = "4" 

2023-07-03 11:27:01.478 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.478 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.479 DBG default:  Name = "Sham Bhat Joshi"
2023-07-03 11:27:01.479 DBG default:  Nakshatra  "Bharani"
2023-07-03 11:27:01.479 DBG default:  Gothra  "Puthamanasa" 

2023-07-03 11:27:01.479 DBG default:  Mobile  "8073869420" 

2023-07-03 11:27:01.479 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.479 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 3 10 

2023-07-03 11:27:01.479 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  3 3 

2023-07-03 11:27:01.479 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 11 

2023-07-03 11:27:01.479 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 4 4 

2023-07-03 11:27:01.479 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  3 

2023-07-03 11:27:01.479 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 12 

2023-07-03 11:27:01.479 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 4 

2023-07-03 11:27:01.479 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  3 

2023-07-03 11:27:01.479 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.479 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.480 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.480 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.480 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.480 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  4 

2023-07-03 11:27:01.480 DBG default: void SevaBookingElement::print()  SNO      = "4" 

2023-07-03 11:27:01.480 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:27:01.480 DBG default: void SevaBookingElement::print()  Person   = "5" 

2023-07-03 11:27:01.480 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.480 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.480 DBG default:  Name = "Sham Bhat Joshi"
2023-07-03 11:27:01.480 DBG default:  Nakshatra  "Bharani"
2023-07-03 11:27:01.480 DBG default:  Gothra  "Puthamanasa" 

2023-07-03 11:27:01.481 DBG default:  Mobile  "8073869420" 

2023-07-03 11:27:01.481 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.481 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 4 13 

2023-07-03 11:27:01.481 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  4 4 

2023-07-03 11:27:01.481 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 5 14 

2023-07-03 11:27:01.481 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 5 5 

2023-07-03 11:27:01.481 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  4 

2023-07-03 11:27:01.481 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 5 15 

2023-07-03 11:27:01.481 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 5 

2023-07-03 11:27:01.481 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  4 

2023-07-03 11:27:01.481 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.481 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.481 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.482 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.482 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.482 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  5 

2023-07-03 11:27:01.482 DBG default: void SevaBookingElement::print()  SNO      = "5" 

2023-07-03 11:27:01.482 DBG default: void SevaBookingElement::print()  SName    = "Panchamrutha/Abhisheka" 

2023-07-03 11:27:01.482 DBG default: void SevaBookingElement::print()  Person   = "6" 

2023-07-03 11:27:01.482 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.482 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.482 DBG default:  Name = "Vijayendra Kulkarni"
2023-07-03 11:27:01.482 DBG default:  Nakshatra  "Vishakha"
2023-07-03 11:27:01.482 DBG default:  Gothra  "Shrivathsa" 

2023-07-03 11:27:01.482 DBG default:  Mobile  "9880470969" 

2023-07-03 11:27:01.483 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.483 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 5 16 

2023-07-03 11:27:01.483 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  5 5 

2023-07-03 11:27:01.483 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 6 17 

2023-07-03 11:27:01.483 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 6 6 

2023-07-03 11:27:01.483 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  5 

2023-07-03 11:27:01.483 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 6 18 

2023-07-03 11:27:01.483 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 6 

2023-07-03 11:27:01.483 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  5 

2023-07-03 11:27:01.483 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.483 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.483 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.483 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.484 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.484 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  6 

2023-07-03 11:27:01.484 DBG default: void SevaBookingElement::print()  SNO      = "6" 

2023-07-03 11:27:01.484 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:27:01.484 DBG default: void SevaBookingElement::print()  Person   = "7" 

2023-07-03 11:27:01.484 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.484 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.484 DBG default:  Name = "Vinay Kumar"
2023-07-03 11:27:01.484 DBG default:  Nakshatra  "Uttarabhadrapada"
2023-07-03 11:27:01.484 DBG default:  Gothra  "Sankhyayanasa" 

2023-07-03 11:27:01.484 DBG default:  Mobile  "9886058482" 

2023-07-03 11:27:01.484 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.484 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 6 19 

2023-07-03 11:27:01.484 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  6 6 

2023-07-03 11:27:01.484 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 7 20 

2023-07-03 11:27:01.484 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 7 7 

2023-07-03 11:27:01.485 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  6 

2023-07-03 11:27:01.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 7 21 

2023-07-03 11:27:01.485 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 7 

2023-07-03 11:27:01.485 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  6 

2023-07-03 11:27:01.485 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.485 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.485 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.485 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.486 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.486 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  7 

2023-07-03 11:27:01.486 DBG default: void SevaBookingElement::print()  SNO      = "6" 

2023-07-03 11:27:01.486 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.486 DBG default: void SevaBookingElement::print()  Person   = "8" 

2023-07-03 11:27:01.486 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.486 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:27:01.486 DBG default:  Name = "Vinay Kumar"
2023-07-03 11:27:01.486 DBG default:  Nakshatra  "Uttarabhadrapada"
2023-07-03 11:27:01.486 DBG default:  Gothra  "Sankhyayanasa" 

2023-07-03 11:27:01.486 DBG default:  Mobile  "9886058482" 

2023-07-03 11:27:01.486 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.486 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 7 22 

2023-07-03 11:27:01.486 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  7 7 

2023-07-03 11:27:01.486 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 8 23 

2023-07-03 11:27:01.486 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 8 8 

2023-07-03 11:27:01.486 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  7 

2023-07-03 11:27:01.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 8 24 

2023-07-03 11:27:01.487 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 8 

2023-07-03 11:27:01.487 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  7 

2023-07-03 11:27:01.487 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.487 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.487 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.487 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.487 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.487 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  8 

2023-07-03 11:27:01.487 DBG default: void SevaBookingElement::print()  SNO      = "7" 

2023-07-03 11:27:01.487 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.488 DBG default: void SevaBookingElement::print()  Person   = "9" 

2023-07-03 11:27:01.488 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.488 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:27:01.488 DBG default:  Name = "Sripadachar"
2023-07-03 11:27:01.488 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:27:01.488 DBG default:  Gothra  "" 

2023-07-03 11:27:01.488 DBG default:  Mobile  "9480585854" 

2023-07-03 11:27:01.488 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.488 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 8 25 

2023-07-03 11:27:01.488 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  8 8 

2023-07-03 11:27:01.488 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 9 26 

2023-07-03 11:27:01.488 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 9 9 

2023-07-03 11:27:01.488 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  8 

2023-07-03 11:27:01.488 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 9 27 

2023-07-03 11:27:01.488 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 9 

2023-07-03 11:27:01.488 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  8 

2023-07-03 11:27:01.488 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.489 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.489 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.489 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.489 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.489 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  9 

2023-07-03 11:27:01.489 DBG default: void SevaBookingElement::print()  SNO      = "8" 

2023-07-03 11:27:01.489 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.489 DBG default: void SevaBookingElement::print()  Person   = "10" 

2023-07-03 11:27:01.489 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.489 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.489 DBG default:  Name = "Raghunadan"
2023-07-03 11:27:01.489 DBG default:  Nakshatra  "Bharani"
2023-07-03 11:27:01.489 DBG default:  Gothra  "Jamadagni" 

2023-07-03 11:27:01.489 DBG default:  Mobile  "9741599842" 

2023-07-03 11:27:01.489 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.489 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 9 28 

2023-07-03 11:27:01.489 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  9 9 

2023-07-03 11:27:01.489 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 10 29 

2023-07-03 11:27:01.489 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 10 10 

2023-07-03 11:27:01.489 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  9 

2023-07-03 11:27:01.489 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 10 30 

2023-07-03 11:27:01.489 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 10 

2023-07-03 11:27:01.489 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  9 

2023-07-03 11:27:01.489 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.489 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.490 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.490 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.490 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.490 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  10 

2023-07-03 11:27:01.490 DBG default: void SevaBookingElement::print()  SNO      = "9" 

2023-07-03 11:27:01.490 DBG default: void SevaBookingElement::print()  SName    = "Sathyanarayana Pooje" 

2023-07-03 11:27:01.490 DBG default: void SevaBookingElement::print()  Person   = "11" 

2023-07-03 11:27:01.490 DBG default: void SevaBookingElement::print()  SevaType = "10" 

2023-07-03 11:27:01.490 DBG default: void SevaBookingElement::print()  Qty      = "12" 

2023-07-03 11:27:01.490 DBG default:  Name = "Ravindra Malagi"
2023-07-03 11:27:01.490 DBG default:  Nakshatra  "Ashlesha"
2023-07-03 11:27:01.490 DBG default:  Gothra  "Harithasa" 

2023-07-03 11:27:01.490 DBG default:  Mobile  "9483957542" 

2023-07-03 11:27:01.491 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.491 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 10 31 

2023-07-03 11:27:01.491 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  10 10 

2023-07-03 11:27:01.491 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 11 32 

2023-07-03 11:27:01.491 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 11 11 

2023-07-03 11:27:01.491 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  10 

2023-07-03 11:27:01.491 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 11 33 

2023-07-03 11:27:01.491 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 11 

2023-07-03 11:27:01.491 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  10 

2023-07-03 11:27:01.491 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.491 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.491 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.491 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.492 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.492 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  11 

2023-07-03 11:27:01.492 DBG default: void SevaBookingElement::print()  SNO      = "10" 

2023-07-03 11:27:01.492 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.492 DBG default: void SevaBookingElement::print()  Person   = "12" 

2023-07-03 11:27:01.492 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.492 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.492 DBG default:  Name = "Murali"
2023-07-03 11:27:01.492 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:27:01.492 DBG default:  Gothra  "" 

2023-07-03 11:27:01.492 DBG default:  Mobile  "9686669462" 

2023-07-03 11:27:01.492 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.492 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 11 34 

2023-07-03 11:27:01.493 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  11 11 

2023-07-03 11:27:01.493 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 12 35 

2023-07-03 11:27:01.493 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 12 12 

2023-07-03 11:27:01.493 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  11 

2023-07-03 11:27:01.493 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 12 36 

2023-07-03 11:27:01.493 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 12 

2023-07-03 11:27:01.493 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  11 

2023-07-03 11:27:01.493 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.493 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.493 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.493 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.494 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.494 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  12 

2023-07-03 11:27:01.494 DBG default: void SevaBookingElement::print()  SNO      = "11" 

2023-07-03 11:27:01.494 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:27:01.494 DBG default: void SevaBookingElement::print()  Person   = "13" 

2023-07-03 11:27:01.494 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.494 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.494 DBG default:  Name = "A Raghavendra Murthy"
2023-07-03 11:27:01.494 DBG default:  Nakshatra  "Swati"
2023-07-03 11:27:01.494 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.494 DBG default:  Mobile  "8123886837" 

2023-07-03 11:27:01.494 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.494 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 12 37 

2023-07-03 11:27:01.494 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  12 12 

2023-07-03 11:27:01.494 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 13 38 

2023-07-03 11:27:01.494 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 13 13 

2023-07-03 11:27:01.494 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  12 

2023-07-03 11:27:01.494 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 13 39 

2023-07-03 11:27:01.494 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 13 

2023-07-03 11:27:01.494 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  12 

2023-07-03 11:27:01.494 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.494 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.495 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.495 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.495 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.495 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  13 

2023-07-03 11:27:01.495 DBG default: void SevaBookingElement::print()  SNO      = "11" 

2023-07-03 11:27:01.495 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:27:01.495 DBG default: void SevaBookingElement::print()  Person   = "14" 

2023-07-03 11:27:01.495 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.495 DBG default: void SevaBookingElement::print()  Qty      = "10" 

2023-07-03 11:27:01.495 DBG default:  Name = "A Raghavendra Murthy"
2023-07-03 11:27:01.495 DBG default:  Nakshatra  "Swati"
2023-07-03 11:27:01.495 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.495 DBG default:  Mobile  "8123886837" 

2023-07-03 11:27:01.495 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.495 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 13 40 

2023-07-03 11:27:01.495 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  13 13 

2023-07-03 11:27:01.495 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 14 41 

2023-07-03 11:27:01.495 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 14 14 

2023-07-03 11:27:01.495 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  13 

2023-07-03 11:27:01.495 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 14 42 

2023-07-03 11:27:01.496 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 14 

2023-07-03 11:27:01.496 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  13 

2023-07-03 11:27:01.496 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.496 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.496 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.496 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.496 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.496 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  14 

2023-07-03 11:27:01.496 DBG default: void SevaBookingElement::print()  SNO      = "12" 

2023-07-03 11:27:01.496 DBG default: void SevaBookingElement::print()  SName    = "SankalpaN" 

2023-07-03 11:27:01.496 DBG default: void SevaBookingElement::print()  Person   = "15" 

2023-07-03 11:27:01.496 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.496 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.496 DBG default:  Name = "R S Kulkarni"
2023-07-03 11:27:01.496 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:27:01.496 DBG default:  Gothra  "" 

2023-07-03 11:27:01.496 DBG default:  Mobile  "9916835446" 

2023-07-03 11:27:01.496 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.497 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 14 43 

2023-07-03 11:27:01.497 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  14 14 

2023-07-03 11:27:01.497 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 15 44 

2023-07-03 11:27:01.497 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 15 15 

2023-07-03 11:27:01.497 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  14 

2023-07-03 11:27:01.497 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 15 45 

2023-07-03 11:27:01.497 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 15 

2023-07-03 11:27:01.497 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  14 

2023-07-03 11:27:01.497 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.497 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.497 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.497 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.497 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.497 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  15 

2023-07-03 11:27:01.497 DBG default: void SevaBookingElement::print()  SNO      = "12" 

2023-07-03 11:27:01.498 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.498 DBG default: void SevaBookingElement::print()  Person   = "16" 

2023-07-03 11:27:01.498 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.498 DBG default: void SevaBookingElement::print()  Qty      = "5" 

2023-07-03 11:27:01.498 DBG default:  Name = "R S Kulkarni"
2023-07-03 11:27:01.498 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:27:01.498 DBG default:  Gothra  "" 

2023-07-03 11:27:01.498 DBG default:  Mobile  "9916835446" 

2023-07-03 11:27:01.498 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.498 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 15 46 

2023-07-03 11:27:01.498 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  15 15 

2023-07-03 11:27:01.498 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 16 47 

2023-07-03 11:27:01.498 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 16 16 

2023-07-03 11:27:01.498 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  15 

2023-07-03 11:27:01.498 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 16 48 

2023-07-03 11:27:01.498 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 16 

2023-07-03 11:27:01.498 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  15 

2023-07-03 11:27:01.498 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.498 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.498 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.498 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.499 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.499 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  16 

2023-07-03 11:27:01.499 DBG default: void SevaBookingElement::print()  SNO      = "13" 

2023-07-03 11:27:01.499 DBG default: void SevaBookingElement::print()  SName    = "Panchamrutha/Abhisheka" 

2023-07-03 11:27:01.499 DBG default: void SevaBookingElement::print()  Person   = "17" 

2023-07-03 11:27:01.499 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.499 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.499 DBG default:  Name = "Mohan Kumar"
2023-07-03 11:27:01.499 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:27:01.499 DBG default:  Gothra  "Maudgalya" 

2023-07-03 11:27:01.499 DBG default:  Mobile  "9481804498" 

2023-07-03 11:27:01.499 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.499 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 16 49 

2023-07-03 11:27:01.499 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  16 16 

2023-07-03 11:27:01.499 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 17 50 

2023-07-03 11:27:01.499 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 17 17 

2023-07-03 11:27:01.499 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  16 

2023-07-03 11:27:01.499 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 17 51 

2023-07-03 11:27:01.499 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 17 

2023-07-03 11:27:01.499 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  16 

2023-07-03 11:27:01.499 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.499 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.499 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.499 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.500 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.500 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  17 

2023-07-03 11:27:01.500 DBG default: void SevaBookingElement::print()  SNO      = "13" 

2023-07-03 11:27:01.500 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.500 DBG default: void SevaBookingElement::print()  Person   = "18" 

2023-07-03 11:27:01.500 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.500 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:27:01.500 DBG default:  Name = "Mohan Kumar"
2023-07-03 11:27:01.500 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:27:01.500 DBG default:  Gothra  "Maudgalya" 

2023-07-03 11:27:01.500 DBG default:  Mobile  "9481804498" 

2023-07-03 11:27:01.500 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.500 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 17 52 

2023-07-03 11:27:01.500 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  17 17 

2023-07-03 11:27:01.500 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 18 53 

2023-07-03 11:27:01.500 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 18 18 

2023-07-03 11:27:01.500 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  17 

2023-07-03 11:27:01.500 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 18 54 

2023-07-03 11:27:01.500 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 18 

2023-07-03 11:27:01.500 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  17 

2023-07-03 11:27:01.500 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.500 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.500 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.500 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.500 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.501 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  18 

2023-07-03 11:27:01.501 DBG default: void SevaBookingElement::print()  SNO      = "14" 

2023-07-03 11:27:01.501 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.501 DBG default: void SevaBookingElement::print()  Person   = "19" 

2023-07-03 11:27:01.501 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.501 DBG default: void SevaBookingElement::print()  Qty      = "5" 

2023-07-03 11:27:01.501 DBG default:  Name = "Rakshit"
2023-07-03 11:27:01.501 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:27:01.501 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:27:01.501 DBG default:  Mobile  "9880033002" 

2023-07-03 11:27:01.501 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.501 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 18 55 

2023-07-03 11:27:01.501 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  18 18 

2023-07-03 11:27:01.501 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 19 56 

2023-07-03 11:27:01.501 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 19 19 

2023-07-03 11:27:01.501 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  18 

2023-07-03 11:27:01.501 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 19 57 

2023-07-03 11:27:01.501 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 19 

2023-07-03 11:27:01.501 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  18 

2023-07-03 11:27:01.501 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.501 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.501 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.501 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.501 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.501 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  19 

2023-07-03 11:27:01.501 DBG default: void SevaBookingElement::print()  SNO      = "15" 

2023-07-03 11:27:01.501 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.501 DBG default: void SevaBookingElement::print()  Person   = "20" 

2023-07-03 11:27:01.502 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.502 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.502 DBG default:  Name = "Ritthi Sripada Rao"
2023-07-03 11:27:01.502 DBG default:  Nakshatra  "Purvaphalguni"
2023-07-03 11:27:01.502 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:27:01.502 DBG default:  Mobile  "9844018826" 

2023-07-03 11:27:01.502 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.502 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 19 58 

2023-07-03 11:27:01.502 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  19 19 

2023-07-03 11:27:01.502 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 20 59 

2023-07-03 11:27:01.502 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 20 20 

2023-07-03 11:27:01.502 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  19 

2023-07-03 11:27:01.502 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 20 60 

2023-07-03 11:27:01.502 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 20 

2023-07-03 11:27:01.502 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  19 

2023-07-03 11:27:01.502 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.502 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.502 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.502 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.502 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.502 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  20 

2023-07-03 11:27:01.502 DBG default: void SevaBookingElement::print()  SNO      = "16" 

2023-07-03 11:27:01.502 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.502 DBG default: void SevaBookingElement::print()  Person   = "21" 

2023-07-03 11:27:01.502 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.502 DBG default: void SevaBookingElement::print()  Qty      = "6" 

2023-07-03 11:27:01.502 DBG default:  Name = "Pavamana M"
2023-07-03 11:27:01.503 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:27:01.503 DBG default:  Gothra  "Gargeyyesa" 

2023-07-03 11:27:01.503 DBG default:  Mobile  "9986013228" 

2023-07-03 11:27:01.503 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.503 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 20 61 

2023-07-03 11:27:01.503 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  20 20 

2023-07-03 11:27:01.503 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 21 62 

2023-07-03 11:27:01.503 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 21 21 

2023-07-03 11:27:01.503 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  20 

2023-07-03 11:27:01.503 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 21 63 

2023-07-03 11:27:01.503 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 21 

2023-07-03 11:27:01.503 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  20 

2023-07-03 11:27:01.503 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.503 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.503 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.503 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.503 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.503 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  21 

2023-07-03 11:27:01.503 DBG default: void SevaBookingElement::print()  SNO      = "17" 

2023-07-03 11:27:01.503 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.503 DBG default: void SevaBookingElement::print()  Person   = "22" 

2023-07-03 11:27:01.503 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.503 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.503 DBG default:  Name = "Naveen"
2023-07-03 11:27:01.503 DBG default:  Nakshatra  "Revati"
2023-07-03 11:27:01.503 DBG default:  Gothra  "Gargeyyesa" 

2023-07-03 11:27:01.503 DBG default:  Mobile  "9880932546" 

2023-07-03 11:27:01.504 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.504 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 21 64 

2023-07-03 11:27:01.504 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  21 21 

2023-07-03 11:27:01.504 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 22 65 

2023-07-03 11:27:01.504 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 22 22 

2023-07-03 11:27:01.504 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  21 

2023-07-03 11:27:01.504 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 22 66 

2023-07-03 11:27:01.504 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 22 

2023-07-03 11:27:01.504 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  21 

2023-07-03 11:27:01.504 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.504 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.504 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.504 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.504 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.504 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  22 

2023-07-03 11:27:01.504 DBG default: void SevaBookingElement::print()  SNO      = "18" 

2023-07-03 11:27:01.504 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:27:01.504 DBG default: void SevaBookingElement::print()  Person   = "23" 

2023-07-03 11:27:01.504 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.504 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.504 DBG default:  Name = "Adavi Acharya"
2023-07-03 11:27:01.504 DBG default:  Nakshatra  "Hasta"
2023-07-03 11:27:01.504 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:27:01.504 DBG default:  Mobile  "8310285283" 

2023-07-03 11:27:01.504 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.504 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 22 67 

2023-07-03 11:27:01.504 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  22 22 

2023-07-03 11:27:01.504 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 23 68 

2023-07-03 11:27:01.504 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 23 23 

2023-07-03 11:27:01.504 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  22 

2023-07-03 11:27:01.504 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 23 69 

2023-07-03 11:27:01.505 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 23 

2023-07-03 11:27:01.505 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  22 

2023-07-03 11:27:01.505 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.505 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.505 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.505 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.505 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.505 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  23 

2023-07-03 11:27:01.505 DBG default: void SevaBookingElement::print()  SNO      = "18" 

2023-07-03 11:27:01.505 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.505 DBG default: void SevaBookingElement::print()  Person   = "24" 

2023-07-03 11:27:01.505 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.505 DBG default: void SevaBookingElement::print()  Qty      = "8" 

2023-07-03 11:27:01.505 DBG default:  Name = "Adavi Acharya"
2023-07-03 11:27:01.505 DBG default:  Nakshatra  "Hasta"
2023-07-03 11:27:01.505 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:27:01.505 DBG default:  Mobile  "8310285283" 

2023-07-03 11:27:01.505 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.505 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 23 70 

2023-07-03 11:27:01.505 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  23 23 

2023-07-03 11:27:01.505 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 24 71 

2023-07-03 11:27:01.505 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 24 24 

2023-07-03 11:27:01.505 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  23 

2023-07-03 11:27:01.505 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 24 72 

2023-07-03 11:27:01.505 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 24 

2023-07-03 11:27:01.505 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  23 

2023-07-03 11:27:01.505 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.505 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.505 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.505 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.505 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.506 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  24 

2023-07-03 11:27:01.506 DBG default: void SevaBookingElement::print()  SNO      = "19" 

2023-07-03 11:27:01.506 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.506 DBG default: void SevaBookingElement::print()  Person   = "25" 

2023-07-03 11:27:01.506 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.506 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.506 DBG default:  Name = "Sumanth"
2023-07-03 11:27:01.506 DBG default:  Nakshatra  "Jyeshtha"
2023-07-03 11:27:01.506 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:27:01.506 DBG default:  Mobile  "9964144411" 

2023-07-03 11:27:01.506 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.506 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 24 73 

2023-07-03 11:27:01.506 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  24 24 

2023-07-03 11:27:01.506 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 25 74 

2023-07-03 11:27:01.506 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 25 25 

2023-07-03 11:27:01.506 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  24 

2023-07-03 11:27:01.506 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 25 75 

2023-07-03 11:27:01.506 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 25 

2023-07-03 11:27:01.506 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  24 

2023-07-03 11:27:01.506 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.506 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.506 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.506 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.506 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.506 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  25 

2023-07-03 11:27:01.506 DBG default: void SevaBookingElement::print()  SNO      = "20" 

2023-07-03 11:27:01.506 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.506 DBG default: void SevaBookingElement::print()  Person   = "26" 

2023-07-03 11:27:01.506 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.506 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.506 DBG default:  Name = "Krishnamurthy"
2023-07-03 11:27:01.506 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:27:01.506 DBG default:  Gothra  "" 

2023-07-03 11:27:01.506 DBG default:  Mobile  "9980632348" 

2023-07-03 11:27:01.506 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.506 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 25 76 

2023-07-03 11:27:01.506 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  25 25 

2023-07-03 11:27:01.507 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 26 77 

2023-07-03 11:27:01.507 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 26 26 

2023-07-03 11:27:01.507 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  25 

2023-07-03 11:27:01.507 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 26 78 

2023-07-03 11:27:01.507 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 26 

2023-07-03 11:27:01.507 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  25 

2023-07-03 11:27:01.507 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.507 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.507 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.507 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.507 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.507 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  26 

2023-07-03 11:27:01.507 DBG default: void SevaBookingElement::print()  SNO      = "21" 

2023-07-03 11:27:01.507 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.507 DBG default: void SevaBookingElement::print()  Person   = "27" 

2023-07-03 11:27:01.507 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.507 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.507 DBG default:  Name = "N Shridar"
2023-07-03 11:27:01.507 DBG default:  Nakshatra  "Hasta"
2023-07-03 11:27:01.507 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:27:01.507 DBG default:  Mobile  "9845370210" 

2023-07-03 11:27:01.507 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.507 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 26 79 

2023-07-03 11:27:01.507 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  26 26 

2023-07-03 11:27:01.507 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 27 80 

2023-07-03 11:27:01.507 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 27 27 

2023-07-03 11:27:01.507 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  26 

2023-07-03 11:27:01.507 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 27 81 

2023-07-03 11:27:01.507 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 27 

2023-07-03 11:27:01.507 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  26 

2023-07-03 11:27:01.507 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.508 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.508 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.508 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.508 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.508 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  27 

2023-07-03 11:27:01.508 DBG default: void SevaBookingElement::print()  SNO      = "22" 

2023-07-03 11:27:01.508 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.508 DBG default: void SevaBookingElement::print()  Person   = "28" 

2023-07-03 11:27:01.508 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.508 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.508 DBG default:  Name = "Raghavendra"
2023-07-03 11:27:01.508 DBG default:  Nakshatra  ""
2023-07-03 11:27:01.508 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.508 DBG default:  Mobile  "9945272433" 

2023-07-03 11:27:01.508 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.508 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 27 82 

2023-07-03 11:27:01.508 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  27 27 

2023-07-03 11:27:01.508 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 28 83 

2023-07-03 11:27:01.508 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 28 28 

2023-07-03 11:27:01.508 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  27 

2023-07-03 11:27:01.508 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 28 84 

2023-07-03 11:27:01.508 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 28 

2023-07-03 11:27:01.508 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  27 

2023-07-03 11:27:01.508 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.508 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.508 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.508 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.508 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.508 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  28 

2023-07-03 11:27:01.508 DBG default: void SevaBookingElement::print()  SNO      = "23" 

2023-07-03 11:27:01.509 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.509 DBG default: void SevaBookingElement::print()  Person   = "29" 

2023-07-03 11:27:01.509 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.509 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:27:01.509 DBG default:  Name = "Rashmi"
2023-07-03 11:27:01.509 DBG default:  Nakshatra  "Purvashadha"
2023-07-03 11:27:01.509 DBG default:  Gothra  "Mounabharghava" 

2023-07-03 11:27:01.509 DBG default:  Mobile  "7204316233" 

2023-07-03 11:27:01.509 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.509 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 28 85 

2023-07-03 11:27:01.509 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  28 28 

2023-07-03 11:27:01.509 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 29 86 

2023-07-03 11:27:01.509 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 29 29 

2023-07-03 11:27:01.509 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  28 

2023-07-03 11:27:01.509 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 29 87 

2023-07-03 11:27:01.509 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 29 

2023-07-03 11:27:01.509 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  28 

2023-07-03 11:27:01.509 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.509 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.509 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.509 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.509 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.509 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  29 

2023-07-03 11:27:01.509 DBG default: void SevaBookingElement::print()  SNO      = "24" 

2023-07-03 11:27:01.509 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.509 DBG default: void SevaBookingElement::print()  Person   = "30" 

2023-07-03 11:27:01.509 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.509 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.509 DBG default:  Name = "Sowmya"
2023-07-03 11:27:01.509 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:27:01.509 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:27:01.509 DBG default:  Mobile  "9739044304" 

2023-07-03 11:27:01.509 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.509 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 29 88 

2023-07-03 11:27:01.509 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  29 29 

2023-07-03 11:27:01.509 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 30 89 

2023-07-03 11:27:01.509 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 30 30 

2023-07-03 11:27:01.509 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  29 

2023-07-03 11:27:01.509 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 30 90 

2023-07-03 11:27:01.509 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 30 

2023-07-03 11:27:01.509 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  29 

2023-07-03 11:27:01.509 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.509 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.510 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.510 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.510 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.510 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  30 

2023-07-03 11:27:01.510 DBG default: void SevaBookingElement::print()  SNO      = "25" 

2023-07-03 11:27:01.510 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:27:01.510 DBG default: void SevaBookingElement::print()  Person   = "31" 

2023-07-03 11:27:01.510 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.510 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.510 DBG default:  Name = "Umesh"
2023-07-03 11:27:01.510 DBG default:  Nakshatra  "Shravana"
2023-07-03 11:27:01.510 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.510 DBG default:  Mobile  "9845512180" 

2023-07-03 11:27:01.510 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.510 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 30 91 

2023-07-03 11:27:01.510 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  30 30 

2023-07-03 11:27:01.510 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 31 92 

2023-07-03 11:27:01.510 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 31 31 

2023-07-03 11:27:01.510 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  30 

2023-07-03 11:27:01.510 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 31 93 

2023-07-03 11:27:01.510 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 31 

2023-07-03 11:27:01.510 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  30 

2023-07-03 11:27:01.510 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.510 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.510 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.510 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.510 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.510 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  31 

2023-07-03 11:27:01.510 DBG default: void SevaBookingElement::print()  SNO      = "25" 

2023-07-03 11:27:01.510 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:27:01.510 DBG default: void SevaBookingElement::print()  Person   = "32" 

2023-07-03 11:27:01.510 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.510 DBG default: void SevaBookingElement::print()  Qty      = "7" 

2023-07-03 11:27:01.510 DBG default:  Name = "Umesh"
2023-07-03 11:27:01.510 DBG default:  Nakshatra  "Shravana"
2023-07-03 11:27:01.510 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.510 DBG default:  Mobile  "9845512180" 

2023-07-03 11:27:01.510 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.510 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 31 94 

2023-07-03 11:27:01.510 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  31 31 

2023-07-03 11:27:01.510 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 32 95 

2023-07-03 11:27:01.511 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 32 32 

2023-07-03 11:27:01.511 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  31 

2023-07-03 11:27:01.511 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 32 96 

2023-07-03 11:27:01.511 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 32 

2023-07-03 11:27:01.511 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  31 

2023-07-03 11:27:01.511 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.511 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.511 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.511 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.511 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.511 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  32 

2023-07-03 11:27:01.511 DBG default: void SevaBookingElement::print()  SNO      = "26" 

2023-07-03 11:27:01.511 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.511 DBG default: void SevaBookingElement::print()  Person   = "33" 

2023-07-03 11:27:01.511 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.511 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.511 DBG default:  Name = "Harini"
2023-07-03 11:27:01.511 DBG default:  Nakshatra  "Punarvasu"
2023-07-03 11:27:01.511 DBG default:  Gothra  "Dhananjaya" 

2023-07-03 11:27:01.511 DBG default:  Mobile  "9342555155" 

2023-07-03 11:27:01.511 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.511 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 32 97 

2023-07-03 11:27:01.511 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  32 32 

2023-07-03 11:27:01.511 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 33 98 

2023-07-03 11:27:01.511 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 33 33 

2023-07-03 11:27:01.511 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  32 

2023-07-03 11:27:01.511 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 33 99 

2023-07-03 11:27:01.511 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 33 

2023-07-03 11:27:01.511 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  32 

2023-07-03 11:27:01.511 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.511 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.511 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.511 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.511 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.512 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  33 

2023-07-03 11:27:01.512 DBG default: void SevaBookingElement::print()  SNO      = "27" 

2023-07-03 11:27:01.512 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.512 DBG default: void SevaBookingElement::print()  Person   = "34" 

2023-07-03 11:27:01.512 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.512 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.512 DBG default:  Name = "Badari Vishal"
2023-07-03 11:27:01.512 DBG default:  Nakshatra  "Revati"
2023-07-03 11:27:01.512 DBG default:  Gothra  "Jamadagni" 

2023-07-03 11:27:01.512 DBG default:  Mobile  "9535798004" 

2023-07-03 11:27:01.512 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.512 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 33 100 

2023-07-03 11:27:01.512 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  33 33 

2023-07-03 11:27:01.512 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 34 101 

2023-07-03 11:27:01.512 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 34 34 

2023-07-03 11:27:01.512 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  33 

2023-07-03 11:27:01.512 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 34 102 

2023-07-03 11:27:01.512 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 34 

2023-07-03 11:27:01.512 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  33 

2023-07-03 11:27:01.512 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.512 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.512 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.512 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.512 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.512 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  34 

2023-07-03 11:27:01.512 DBG default: void SevaBookingElement::print()  SNO      = "28" 

2023-07-03 11:27:01.512 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka Regular" 

2023-07-03 11:27:01.512 DBG default: void SevaBookingElement::print()  Person   = "35" 

2023-07-03 11:27:01.512 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.512 DBG default: void SevaBookingElement::print()  Qty      = "10" 

2023-07-03 11:27:01.512 DBG default:  Name = "Akshay Desai"
2023-07-03 11:27:01.512 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:27:01.512 DBG default:  Gothra  "Kaundinya" 

2023-07-03 11:27:01.512 DBG default:  Mobile  "9742083477" 

2023-07-03 11:27:01.512 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.512 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 34 103 

2023-07-03 11:27:01.512 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  34 34 

2023-07-03 11:27:01.512 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 35 104 

2023-07-03 11:27:01.512 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 35 35 

2023-07-03 11:27:01.512 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  34 

2023-07-03 11:27:01.512 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 35 105 

2023-07-03 11:27:01.512 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 35 

2023-07-03 11:27:01.513 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  34 

2023-07-03 11:27:01.513 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.513 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.513 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.513 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.513 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.513 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  35 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  SNO      = "29" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka Regular" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  Person   = "36" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  Qty      = "10" 

2023-07-03 11:27:01.513 DBG default:  Name = "Abhay Desai"
2023-07-03 11:27:01.513 DBG default:  Nakshatra  "Anuradha"
2023-07-03 11:27:01.513 DBG default:  Gothra  "Kaundinya" 

2023-07-03 11:27:01.513 DBG default:  Mobile  "9148653143" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.513 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 35 106 

2023-07-03 11:27:01.513 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  35 35 

2023-07-03 11:27:01.513 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 36 107 

2023-07-03 11:27:01.513 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 36 36 

2023-07-03 11:27:01.513 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  35 

2023-07-03 11:27:01.513 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 36 108 

2023-07-03 11:27:01.513 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 36 

2023-07-03 11:27:01.513 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  35 

2023-07-03 11:27:01.513 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.513 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.513 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.513 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.513 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.513 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  36 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  SNO      = "30" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  Person   = "37" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:27:01.513 DBG default:  Name = "Anand Avadhani"
2023-07-03 11:27:01.513 DBG default:  Nakshatra  "Swati"
2023-07-03 11:27:01.513 DBG default:  Gothra  "Mounabharghava" 

2023-07-03 11:27:01.513 DBG default:  Mobile  "9845923575" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.513 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 36 109 

2023-07-03 11:27:01.513 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  36 36 

2023-07-03 11:27:01.513 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 37 110 

2023-07-03 11:27:01.513 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 37 37 

2023-07-03 11:27:01.513 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  36 

2023-07-03 11:27:01.513 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 37 111 

2023-07-03 11:27:01.513 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 37 

2023-07-03 11:27:01.513 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  36 

2023-07-03 11:27:01.513 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.513 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.513 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.513 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.513 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.513 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  37 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  SNO      = "31" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  Person   = "38" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.513 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:27:01.513 DBG default:  Name = "Gururaj Bidikar"
2023-07-03 11:27:01.513 DBG default:  Nakshatra  "Pushya"
2023-07-03 11:27:01.515 DBG default:  Gothra  "Galava" 

2023-07-03 11:27:01.515 DBG default:  Mobile  "9538974640" 

2023-07-03 11:27:01.515 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.515 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 37 112 

2023-07-03 11:27:01.515 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  37 37 

2023-07-03 11:27:01.515 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 38 113 

2023-07-03 11:27:01.515 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 38 38 

2023-07-03 11:27:01.515 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  37 

2023-07-03 11:27:01.515 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 38 114 

2023-07-03 11:27:01.515 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 38 

2023-07-03 11:27:01.515 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  37 

2023-07-03 11:27:01.515 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.515 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.515 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.515 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.515 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.515 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  38 

2023-07-03 11:27:01.515 DBG default: void SevaBookingElement::print()  SNO      = "32" 

2023-07-03 11:27:01.515 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka Monthly" 

2023-07-03 11:27:01.515 DBG default: void SevaBookingElement::print()  Person   = "39" 

2023-07-03 11:27:01.515 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.515 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.515 DBG default:  Name = "Sanjay Rao A N"
2023-07-03 11:27:01.515 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:27:01.515 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:27:01.515 DBG default:  Mobile  "7353989225" 

2023-07-03 11:27:01.515 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.515 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 38 115 

2023-07-03 11:27:01.515 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  38 38 

2023-07-03 11:27:01.515 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 39 116 

2023-07-03 11:27:01.515 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 39 39 

2023-07-03 11:27:01.515 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  38 

2023-07-03 11:27:01.515 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 39 117 

2023-07-03 11:27:01.515 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 39 

2023-07-03 11:27:01.515 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  38 

2023-07-03 11:27:01.515 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.515 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.515 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.515 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.515 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.516 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  39 

2023-07-03 11:27:01.516 DBG default: void SevaBookingElement::print()  SNO      = "33" 

2023-07-03 11:27:01.516 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.516 DBG default: void SevaBookingElement::print()  Person   = "40" 

2023-07-03 11:27:01.516 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.516 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:27:01.516 DBG default:  Name = "Raghottamachar"
2023-07-03 11:27:01.516 DBG default:  Nakshatra  "Bharani"
2023-07-03 11:27:01.516 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.516 DBG default:  Mobile  "9880216226" 

2023-07-03 11:27:01.516 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.516 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 39 118 

2023-07-03 11:27:01.516 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  39 39 

2023-07-03 11:27:01.516 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 40 119 

2023-07-03 11:27:01.516 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 40 40 

2023-07-03 11:27:01.516 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  39 

2023-07-03 11:27:01.516 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 40 120 

2023-07-03 11:27:01.516 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 40 

2023-07-03 11:27:01.516 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  39 

2023-07-03 11:27:01.516 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.516 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.516 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.516 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.516 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.516 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  40 

2023-07-03 11:27:01.516 DBG default: void SevaBookingElement::print()  SNO      = "34" 

2023-07-03 11:27:01.516 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.516 DBG default: void SevaBookingElement::print()  Person   = "41" 

2023-07-03 11:27:01.516 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.516 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:27:01.516 DBG default:  Name = "Arundathi"
2023-07-03 11:27:01.516 DBG default:  Nakshatra  ""
2023-07-03 11:27:01.516 DBG default:  Gothra  "" 

2023-07-03 11:27:01.516 DBG default:  Mobile  "9742920275" 

2023-07-03 11:27:01.516 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.516 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 40 121 

2023-07-03 11:27:01.516 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  40 40 

2023-07-03 11:27:01.516 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 41 122 

2023-07-03 11:27:01.516 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 41 41 

2023-07-03 11:27:01.516 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  40 

2023-07-03 11:27:01.516 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 41 123 

2023-07-03 11:27:01.516 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 41 

2023-07-03 11:27:01.516 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  40 

2023-07-03 11:27:01.516 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.516 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.517 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.517 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.517 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.517 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  41 

2023-07-03 11:27:01.517 DBG default: void SevaBookingElement::print()  SNO      = "35" 

2023-07-03 11:27:01.517 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.517 DBG default: void SevaBookingElement::print()  Person   = "42" 

2023-07-03 11:27:01.517 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.517 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.517 DBG default:  Name = "Sudheendra"
2023-07-03 11:27:01.517 DBG default:  Nakshatra  "Pushya"
2023-07-03 11:27:01.517 DBG default:  Gothra  "Athreyasa" 

2023-07-03 11:27:01.517 DBG default:  Mobile  "8310845727" 

2023-07-03 11:27:01.517 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.517 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 41 124 

2023-07-03 11:27:01.517 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  41 41 

2023-07-03 11:27:01.517 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 42 125 

2023-07-03 11:27:01.517 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 42 42 

2023-07-03 11:27:01.517 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  41 

2023-07-03 11:27:01.517 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 42 126 

2023-07-03 11:27:01.517 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 42 

2023-07-03 11:27:01.517 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  41 

2023-07-03 11:27:01.517 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.517 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.517 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.517 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.517 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.517 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  42 

2023-07-03 11:27:01.517 DBG default: void SevaBookingElement::print()  SNO      = "36" 

2023-07-03 11:27:01.517 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka Regular" 

2023-07-03 11:27:01.517 DBG default: void SevaBookingElement::print()  Person   = "43" 

2023-07-03 11:27:01.517 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.517 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:27:01.517 DBG default:  Name = "Vadiraj"
2023-07-03 11:27:01.517 DBG default:  Nakshatra  "Chitra"
2023-07-03 11:27:01.517 DBG default:  Gothra  "Jamadagni" 

2023-07-03 11:27:01.517 DBG default:  Mobile  "9886249774" 

2023-07-03 11:27:01.517 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.517 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 42 127 

2023-07-03 11:27:01.517 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  42 42 

2023-07-03 11:27:01.517 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 43 128 

2023-07-03 11:27:01.517 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 43 43 

2023-07-03 11:27:01.517 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  42 

2023-07-03 11:27:01.517 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 43 129 

2023-07-03 11:27:01.517 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 43 

2023-07-03 11:27:01.517 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  42 

2023-07-03 11:27:01.517 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.518 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.518 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.518 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.518 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.518 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  43 

2023-07-03 11:27:01.518 DBG default: void SevaBookingElement::print()  SNO      = "37" 

2023-07-03 11:27:01.518 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.518 DBG default: void SevaBookingElement::print()  Person   = "44" 

2023-07-03 11:27:01.518 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.518 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:27:01.518 DBG default:  Name = "Srinath A Adhani"
2023-07-03 11:27:01.518 DBG default:  Nakshatra  "Rohini"
2023-07-03 11:27:01.518 DBG default:  Gothra  "Mounabharghava" 

2023-07-03 11:27:01.518 DBG default:  Mobile  "9886809959" 

2023-07-03 11:27:01.518 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.518 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 43 130 

2023-07-03 11:27:01.518 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  43 43 

2023-07-03 11:27:01.518 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 44 131 

2023-07-03 11:27:01.518 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 44 44 

2023-07-03 11:27:01.518 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  43 

2023-07-03 11:27:01.518 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 44 132 

2023-07-03 11:27:01.518 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 44 

2023-07-03 11:27:01.518 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  43 

2023-07-03 11:27:01.518 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.518 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.518 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.518 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.518 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.518 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  44 

2023-07-03 11:27:01.518 DBG default: void SevaBookingElement::print()  SNO      = "38" 

2023-07-03 11:27:01.518 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.518 DBG default: void SevaBookingElement::print()  Person   = "45" 

2023-07-03 11:27:01.518 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.518 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.518 DBG default:  Name = "R S Kulkarni"
2023-07-03 11:27:01.518 DBG default:  Nakshatra  ""
2023-07-03 11:27:01.518 DBG default:  Gothra  "" 

2023-07-03 11:27:01.518 DBG default:  Mobile  "9916835446" 

2023-07-03 11:27:01.518 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.518 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 44 133 

2023-07-03 11:27:01.518 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  44 44 

2023-07-03 11:27:01.518 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 45 134 

2023-07-03 11:27:01.518 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 45 45 

2023-07-03 11:27:01.518 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  44 

2023-07-03 11:27:01.518 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 45 135 

2023-07-03 11:27:01.518 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 45 

2023-07-03 11:27:01.518 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  44 

2023-07-03 11:27:01.519 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.519 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.519 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.519 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.519 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.519 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  45 

2023-07-03 11:27:01.519 DBG default: void SevaBookingElement::print()  SNO      = "39" 

2023-07-03 11:27:01.519 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.519 DBG default: void SevaBookingElement::print()  Person   = "46" 

2023-07-03 11:27:01.519 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.519 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.519 DBG default:  Name = "Jayathirtha Achar"
2023-07-03 11:27:01.519 DBG default:  Nakshatra  "Anuradha"
2023-07-03 11:27:01.519 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:27:01.519 DBG default:  Mobile  "9449294055" 

2023-07-03 11:27:01.519 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.519 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 45 136 

2023-07-03 11:27:01.519 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  45 45 

2023-07-03 11:27:01.519 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 46 137 

2023-07-03 11:27:01.519 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 46 46 

2023-07-03 11:27:01.519 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  45 

2023-07-03 11:27:01.519 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 46 138 

2023-07-03 11:27:01.519 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 46 

2023-07-03 11:27:01.519 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  45 

2023-07-03 11:27:01.519 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.519 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.519 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.519 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.519 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.519 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  46 

2023-07-03 11:27:01.519 DBG default: void SevaBookingElement::print()  SNO      = "40" 

2023-07-03 11:27:01.519 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.519 DBG default: void SevaBookingElement::print()  Person   = "47" 

2023-07-03 11:27:01.519 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.519 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.519 DBG default:  Name = "B K Sudheendra"
2023-07-03 11:27:01.519 DBG default:  Nakshatra  "Revati"
2023-07-03 11:27:01.519 DBG default:  Gothra  "Athreyasa" 

2023-07-03 11:27:01.519 DBG default:  Mobile  "9902167768" 

2023-07-03 11:27:01.519 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.520 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 46 139 

2023-07-03 11:27:01.520 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  46 46 

2023-07-03 11:27:01.520 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 47 140 

2023-07-03 11:27:01.520 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 47 47 

2023-07-03 11:27:01.520 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  46 

2023-07-03 11:27:01.520 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 47 141 

2023-07-03 11:27:01.520 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 47 

2023-07-03 11:27:01.520 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  46 

2023-07-03 11:27:01.520 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.520 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.520 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.520 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.520 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.520 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  47 

2023-07-03 11:27:01.520 DBG default: void SevaBookingElement::print()  SNO      = "41" 

2023-07-03 11:27:01.520 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.520 DBG default: void SevaBookingElement::print()  Person   = "48" 

2023-07-03 11:27:01.520 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.520 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.520 DBG default:  Name = "Sanket kulkarni"
2023-07-03 11:27:01.520 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:27:01.520 DBG default:  Gothra  "Vishwamitra" 

2023-07-03 11:27:01.520 DBG default:  Mobile  "9916860118" 

2023-07-03 11:27:01.520 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.520 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 47 142 

2023-07-03 11:27:01.520 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  47 47 

2023-07-03 11:27:01.520 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 48 143 

2023-07-03 11:27:01.520 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 48 48 

2023-07-03 11:27:01.520 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  47 

2023-07-03 11:27:01.520 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 48 144 

2023-07-03 11:27:01.520 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 48 

2023-07-03 11:27:01.520 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  47 

2023-07-03 11:27:01.520 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.520 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.520 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.520 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.520 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.520 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  48 

2023-07-03 11:27:01.520 DBG default: void SevaBookingElement::print()  SNO      = "42" 

2023-07-03 11:27:01.520 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:27:01.520 DBG default: void SevaBookingElement::print()  Person   = "49" 

2023-07-03 11:27:01.520 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.520 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.520 DBG default:  Name = "Mohan"
2023-07-03 11:27:01.520 DBG default:  Nakshatra  "Anuradha"
2023-07-03 11:27:01.520 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.520 DBG default:  Mobile  "9980039531" 

2023-07-03 11:27:01.520 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.520 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 48 145 

2023-07-03 11:27:01.520 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  48 48 

2023-07-03 11:27:01.521 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 49 146 

2023-07-03 11:27:01.521 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 49 49 

2023-07-03 11:27:01.521 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  48 

2023-07-03 11:27:01.521 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 49 147 

2023-07-03 11:27:01.521 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 49 

2023-07-03 11:27:01.521 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  48 

2023-07-03 11:27:01.521 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.521 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.521 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.521 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.521 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.521 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  49 

2023-07-03 11:27:01.521 DBG default: void SevaBookingElement::print()  SNO      = "42" 

2023-07-03 11:27:01.521 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.521 DBG default: void SevaBookingElement::print()  Person   = "50" 

2023-07-03 11:27:01.521 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.521 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.521 DBG default:  Name = "Mohan"
2023-07-03 11:27:01.521 DBG default:  Nakshatra  "Anuradha"
2023-07-03 11:27:01.521 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.521 DBG default:  Mobile  "9980039531" 

2023-07-03 11:27:01.521 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.521 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 49 148 

2023-07-03 11:27:01.521 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  49 49 

2023-07-03 11:27:01.521 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 50 149 

2023-07-03 11:27:01.521 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 50 50 

2023-07-03 11:27:01.521 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  49 

2023-07-03 11:27:01.521 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 50 150 

2023-07-03 11:27:01.521 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 50 

2023-07-03 11:27:01.521 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  49 

2023-07-03 11:27:01.521 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.521 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.521 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.521 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.521 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.521 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  50 

2023-07-03 11:27:01.521 DBG default: void SevaBookingElement::print()  SNO      = "43" 

2023-07-03 11:27:01.521 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.521 DBG default: void SevaBookingElement::print()  Person   = "51" 

2023-07-03 11:27:01.521 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.521 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.521 DBG default:  Name = "Madwamurthy"
2023-07-03 11:27:01.521 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:27:01.521 DBG default:  Gothra  "" 

2023-07-03 11:27:01.521 DBG default:  Mobile  "9448882578" 

2023-07-03 11:27:01.521 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.521 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 50 151 

2023-07-03 11:27:01.521 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  50 50 

2023-07-03 11:27:01.521 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 51 152 

2023-07-03 11:27:01.521 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 51 51 

2023-07-03 11:27:01.521 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  50 

2023-07-03 11:27:01.521 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 51 153 

2023-07-03 11:27:01.521 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 51 

2023-07-03 11:27:01.521 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  50 

2023-07-03 11:27:01.522 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.522 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.522 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.522 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.522 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.522 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  51 

2023-07-03 11:27:01.522 DBG default: void SevaBookingElement::print()  SNO      = "44" 

2023-07-03 11:27:01.522 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.522 DBG default: void SevaBookingElement::print()  Person   = "52" 

2023-07-03 11:27:01.522 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.522 DBG default: void SevaBookingElement::print()  Qty      = "5" 

2023-07-03 11:27:01.522 DBG default:  Name = "Madhusudan Gudi"
2023-07-03 11:27:01.522 DBG default:  Nakshatra  "Moola"
2023-07-03 11:27:01.522 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:27:01.522 DBG default:  Mobile  "9886521762" 

2023-07-03 11:27:01.522 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.522 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 51 154 

2023-07-03 11:27:01.522 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  51 51 

2023-07-03 11:27:01.522 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 52 155 

2023-07-03 11:27:01.522 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 52 52 

2023-07-03 11:27:01.522 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  51 

2023-07-03 11:27:01.522 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 52 156 

2023-07-03 11:27:01.522 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 52 

2023-07-03 11:27:01.522 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  51 

2023-07-03 11:27:01.522 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.522 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.522 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.522 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.522 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.522 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  52 

2023-07-03 11:27:01.522 DBG default: void SevaBookingElement::print()  SNO      = "45" 

2023-07-03 11:27:01.522 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.522 DBG default: void SevaBookingElement::print()  Person   = "53" 

2023-07-03 11:27:01.522 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.522 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.522 DBG default:  Name = "Dr Madhva Rao H R"
2023-07-03 11:27:01.522 DBG default:  Nakshatra  "Uttarabhadrapada"
2023-07-03 11:27:01.522 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.522 DBG default:  Mobile  "9980044875" 

2023-07-03 11:27:01.522 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.522 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 52 157 

2023-07-03 11:27:01.522 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  52 52 

2023-07-03 11:27:01.522 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 53 158 

2023-07-03 11:27:01.522 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 53 53 

2023-07-03 11:27:01.522 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  52 

2023-07-03 11:27:01.522 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 53 159 

2023-07-03 11:27:01.522 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 53 

2023-07-03 11:27:01.522 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  52 

2023-07-03 11:27:01.522 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.522 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.522 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.522 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.523 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.523 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  53 

2023-07-03 11:27:01.523 DBG default: void SevaBookingElement::print()  SNO      = "46" 

2023-07-03 11:27:01.523 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.523 DBG default: void SevaBookingElement::print()  Person   = "54" 

2023-07-03 11:27:01.523 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.523 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.523 DBG default:  Name = "Pranesh Mannari"
2023-07-03 11:27:01.523 DBG default:  Nakshatra  "Vishakha"
2023-07-03 11:27:01.523 DBG default:  Gothra  "Harithasa" 

2023-07-03 11:27:01.523 DBG default:  Mobile  "9844246596" 

2023-07-03 11:27:01.523 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.523 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 53 160 

2023-07-03 11:27:01.523 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  53 53 

2023-07-03 11:27:01.523 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 54 161 

2023-07-03 11:27:01.523 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 54 54 

2023-07-03 11:27:01.523 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  53 

2023-07-03 11:27:01.523 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 54 162 

2023-07-03 11:27:01.523 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 54 

2023-07-03 11:27:01.523 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  53 

2023-07-03 11:27:01.523 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.523 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.523 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.523 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.523 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.523 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  54 

2023-07-03 11:27:01.523 DBG default: void SevaBookingElement::print()  SNO      = "47" 

2023-07-03 11:27:01.523 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.523 DBG default: void SevaBookingElement::print()  Person   = "55" 

2023-07-03 11:27:01.523 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.523 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:27:01.523 DBG default:  Name = "Dwarakanath"
2023-07-03 11:27:01.523 DBG default:  Nakshatra  "Dhanishtha"
2023-07-03 11:27:01.523 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:27:01.523 DBG default:  Mobile  "7829769769" 

2023-07-03 11:27:01.523 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.523 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 54 163 

2023-07-03 11:27:01.523 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  54 54 

2023-07-03 11:27:01.523 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 55 164 

2023-07-03 11:27:01.523 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 55 55 

2023-07-03 11:27:01.523 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  54 

2023-07-03 11:27:01.523 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 55 165 

2023-07-03 11:27:01.523 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 55 

2023-07-03 11:27:01.523 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  54 

2023-07-03 11:27:01.523 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.523 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.523 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.523 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.524 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.524 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  55 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  SNO      = "48" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  Person   = "56" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.524 DBG default:  Name = "Vivek Kulkarni"
2023-07-03 11:27:01.524 DBG default:  Nakshatra  "Chitra"
2023-07-03 11:27:01.524 DBG default:  Gothra  "Athreyasa" 

2023-07-03 11:27:01.524 DBG default:  Mobile  "9008466500" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.524 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 55 166 

2023-07-03 11:27:01.524 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  55 55 

2023-07-03 11:27:01.524 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 56 167 

2023-07-03 11:27:01.524 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 56 56 

2023-07-03 11:27:01.524 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  55 

2023-07-03 11:27:01.524 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 56 168 

2023-07-03 11:27:01.524 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 56 

2023-07-03 11:27:01.524 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  55 

2023-07-03 11:27:01.524 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.524 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.524 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.524 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.524 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.524 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  56 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  SNO      = "49" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  Person   = "57" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.524 DBG default:  Name = "Gopala Krishna"
2023-07-03 11:27:01.524 DBG default:  Nakshatra  "Punarvasu"
2023-07-03 11:27:01.524 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:27:01.524 DBG default:  Mobile  "9845232210" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.524 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 56 169 

2023-07-03 11:27:01.524 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  56 56 

2023-07-03 11:27:01.524 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 57 170 

2023-07-03 11:27:01.524 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 57 57 

2023-07-03 11:27:01.524 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  56 

2023-07-03 11:27:01.524 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 57 171 

2023-07-03 11:27:01.524 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 57 

2023-07-03 11:27:01.524 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  56 

2023-07-03 11:27:01.524 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.524 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.524 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.524 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.524 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.524 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  57 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  SNO      = "50" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  Person   = "58" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.524 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.525 DBG default:  Name = "Lakshmana Rao"
2023-07-03 11:27:01.525 DBG default:  Nakshatra  "Anuradha"
2023-07-03 11:27:01.525 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.525 DBG default:  Mobile  "9886459736" 

2023-07-03 11:27:01.525 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.525 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 57 172 

2023-07-03 11:27:01.525 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  57 57 

2023-07-03 11:27:01.525 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 58 173 

2023-07-03 11:27:01.525 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 58 58 

2023-07-03 11:27:01.525 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  57 

2023-07-03 11:27:01.525 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 58 174 

2023-07-03 11:27:01.525 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 58 

2023-07-03 11:27:01.525 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  57 

2023-07-03 11:27:01.525 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.525 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.525 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.525 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.525 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.525 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  58 

2023-07-03 11:27:01.525 DBG default: void SevaBookingElement::print()  SNO      = "51" 

2023-07-03 11:27:01.525 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:27:01.525 DBG default: void SevaBookingElement::print()  Person   = "59" 

2023-07-03 11:27:01.525 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.525 DBG default: void SevaBookingElement::print()  Qty      = "11" 

2023-07-03 11:27:01.525 DBG default:  Name = "Gopalakrishna Mangalgi"
2023-07-03 11:27:01.525 DBG default:  Nakshatra  "Uttarabhadrapada"
2023-07-03 11:27:01.525 DBG default:  Gothra  "Kaushika" 

2023-07-03 11:27:01.525 DBG default:  Mobile  "9449851799" 

2023-07-03 11:27:01.525 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.525 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 58 175 

2023-07-03 11:27:01.525 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  58 58 

2023-07-03 11:27:01.525 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 59 176 

2023-07-03 11:27:01.525 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 59 59 

2023-07-03 11:27:01.525 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  58 

2023-07-03 11:27:01.525 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 59 177 

2023-07-03 11:27:01.525 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 59 

2023-07-03 11:27:01.525 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  58 

2023-07-03 11:27:01.525 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.525 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.525 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.525 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.525 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.525 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  59 

2023-07-03 11:27:01.525 DBG default: void SevaBookingElement::print()  SNO      = "52" 

2023-07-03 11:27:01.525 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.525 DBG default: void SevaBookingElement::print()  Person   = "60" 

2023-07-03 11:27:01.525 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.525 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:27:01.525 DBG default:  Name = "Muralidhar A N"
2023-07-03 11:27:01.525 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:27:01.525 DBG default:  Gothra  "Kaundinya" 

2023-07-03 11:27:01.525 DBG default:  Mobile  "6362274483" 

2023-07-03 11:27:01.525 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.525 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 59 178 

2023-07-03 11:27:01.525 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  59 59 

2023-07-03 11:27:01.525 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 60 179 

2023-07-03 11:27:01.525 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 60 60 

2023-07-03 11:27:01.525 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  59 

2023-07-03 11:27:01.525 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 60 180 

2023-07-03 11:27:01.525 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 60 

2023-07-03 11:27:01.525 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  59 

2023-07-03 11:27:01.525 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.525 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.526 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.526 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.526 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.526 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  60 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  SNO      = "53" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  Person   = "61" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:27:01.526 DBG default:  Name = "Vasumathi"
2023-07-03 11:27:01.526 DBG default:  Nakshatra  "Vishakha"
2023-07-03 11:27:01.526 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.526 DBG default:  Mobile  "7349359929" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.526 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 60 181 

2023-07-03 11:27:01.526 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  60 60 

2023-07-03 11:27:01.526 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 61 182 

2023-07-03 11:27:01.526 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 61 61 

2023-07-03 11:27:01.526 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  60 

2023-07-03 11:27:01.526 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 61 183 

2023-07-03 11:27:01.526 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 61 

2023-07-03 11:27:01.526 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  60 

2023-07-03 11:27:01.526 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.526 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.526 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.526 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.526 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.526 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  61 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  SNO      = "54" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  Person   = "62" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.526 DBG default:  Name = "Krishna H Math"
2023-07-03 11:27:01.526 DBG default:  Nakshatra  "Punarvasu"
2023-07-03 11:27:01.526 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.526 DBG default:  Mobile  "9731316254" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.526 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 61 184 

2023-07-03 11:27:01.526 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  61 61 

2023-07-03 11:27:01.526 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 62 185 

2023-07-03 11:27:01.526 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 62 62 

2023-07-03 11:27:01.526 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  61 

2023-07-03 11:27:01.526 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 62 186 

2023-07-03 11:27:01.526 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 62 

2023-07-03 11:27:01.526 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  61 

2023-07-03 11:27:01.526 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.526 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.526 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.526 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.526 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.526 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  62 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  SNO      = "55" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  Person   = "63" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.526 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.526 DBG default:  Name = "Subrahmanya"
2023-07-03 11:27:01.526 DBG default:  Nakshatra  ""
2023-07-03 11:27:01.527 DBG default:  Gothra  "" 

2023-07-03 11:27:01.527 DBG default:  Mobile  "8884101784" 

2023-07-03 11:27:01.527 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 62 187 

2023-07-03 11:27:01.527 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  62 62 

2023-07-03 11:27:01.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 63 188 

2023-07-03 11:27:01.527 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 63 63 

2023-07-03 11:27:01.527 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  62 

2023-07-03 11:27:01.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 63 189 

2023-07-03 11:27:01.527 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 63 

2023-07-03 11:27:01.527 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  62 

2023-07-03 11:27:01.527 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.527 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.527 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.527 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.527 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.527 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  63 

2023-07-03 11:27:01.527 DBG default: void SevaBookingElement::print()  SNO      = "55" 

2023-07-03 11:27:01.527 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:27:01.527 DBG default: void SevaBookingElement::print()  Person   = "64" 

2023-07-03 11:27:01.527 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.527 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:27:01.527 DBG default:  Name = "Subrahmanya"
2023-07-03 11:27:01.527 DBG default:  Nakshatra  ""
2023-07-03 11:27:01.527 DBG default:  Gothra  "" 

2023-07-03 11:27:01.527 DBG default:  Mobile  "8884101784" 

2023-07-03 11:27:01.527 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 63 190 

2023-07-03 11:27:01.527 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  63 63 

2023-07-03 11:27:01.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 64 191 

2023-07-03 11:27:01.527 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 64 64 

2023-07-03 11:27:01.527 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  63 

2023-07-03 11:27:01.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 64 192 

2023-07-03 11:27:01.527 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 64 

2023-07-03 11:27:01.527 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  63 

2023-07-03 11:27:01.527 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.527 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.527 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.527 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.527 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.527 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  64 

2023-07-03 11:27:01.527 DBG default: void SevaBookingElement::print()  SNO      = "56" 

2023-07-03 11:27:01.527 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:27:01.527 DBG default: void SevaBookingElement::print()  Person   = "65" 

2023-07-03 11:27:01.527 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.527 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.527 DBG default:  Name = "Jayaram Pandurangi"
2023-07-03 11:27:01.527 DBG default:  Nakshatra  "Purvabhadrapada"
2023-07-03 11:27:01.527 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:27:01.527 DBG default:  Mobile  "9739976101" 

2023-07-03 11:27:01.527 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 64 193 

2023-07-03 11:27:01.527 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  64 64 

2023-07-03 11:27:01.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 65 194 

2023-07-03 11:27:01.527 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 65 65 

2023-07-03 11:27:01.527 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  64 

2023-07-03 11:27:01.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 65 195 

2023-07-03 11:27:01.527 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 65 

2023-07-03 11:27:01.527 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  64 

2023-07-03 11:27:01.527 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.527 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.528 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.528 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.528 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.528 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  65 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  SNO      = "56" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  Person   = "66" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  Qty      = "6" 

2023-07-03 11:27:01.528 DBG default:  Name = "Jayaram Pandurangi"
2023-07-03 11:27:01.528 DBG default:  Nakshatra  "Purvabhadrapada"
2023-07-03 11:27:01.528 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:27:01.528 DBG default:  Mobile  "9739976101" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 65 196 

2023-07-03 11:27:01.528 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  65 65 

2023-07-03 11:27:01.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 66 197 

2023-07-03 11:27:01.528 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 66 66 

2023-07-03 11:27:01.528 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  65 

2023-07-03 11:27:01.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 66 198 

2023-07-03 11:27:01.528 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 66 

2023-07-03 11:27:01.528 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  65 

2023-07-03 11:27:01.528 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.528 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.528 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.528 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.528 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.528 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  66 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  SNO      = "57" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  SName    = "Poornapragna Hall Kanike N " 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  Person   = "67" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  SevaType = "14" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.528 DBG default:  Name = "Srinidhi"
2023-07-03 11:27:01.528 DBG default:  Nakshatra  "Purvashadha"
2023-07-03 11:27:01.528 DBG default:  Gothra  "Kaundinya" 

2023-07-03 11:27:01.528 DBG default:  Mobile  "7760884275" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 66 199 

2023-07-03 11:27:01.528 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  66 66 

2023-07-03 11:27:01.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 67 200 

2023-07-03 11:27:01.528 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 67 67 

2023-07-03 11:27:01.528 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  66 

2023-07-03 11:27:01.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 67 201 

2023-07-03 11:27:01.528 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 67 

2023-07-03 11:27:01.528 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  66 

2023-07-03 11:27:01.528 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.528 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.528 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.528 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.528 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.528 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  67 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  SNO      = "58" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  Person   = "68" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.528 DBG default:  Name = "Vijaya Vittala"
2023-07-03 11:27:01.528 DBG default:  Nakshatra  "Magha"
2023-07-03 11:27:01.528 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.528 DBG default:  Mobile  "9964619005" 

2023-07-03 11:27:01.528 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 67 202 

2023-07-03 11:27:01.528 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  67 67 

2023-07-03 11:27:01.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 68 203 

2023-07-03 11:27:01.528 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 68 68 

2023-07-03 11:27:01.529 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  67 

2023-07-03 11:27:01.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 68 204 

2023-07-03 11:27:01.529 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 68 

2023-07-03 11:27:01.529 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  67 

2023-07-03 11:27:01.529 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.529 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.529 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.529 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.529 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.529 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  68 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  SNO      = "59" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  Person   = "69" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.529 DBG default:  Name = "Keshava"
2023-07-03 11:27:01.529 DBG default:  Nakshatra  "Magha"
2023-07-03 11:27:01.529 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:27:01.529 DBG default:  Mobile  "9844613366" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 68 205 

2023-07-03 11:27:01.529 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  68 68 

2023-07-03 11:27:01.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 69 206 

2023-07-03 11:27:01.529 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 69 69 

2023-07-03 11:27:01.529 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  68 

2023-07-03 11:27:01.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 69 207 

2023-07-03 11:27:01.529 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 69 

2023-07-03 11:27:01.529 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  68 

2023-07-03 11:27:01.529 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.529 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.529 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.529 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.529 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.529 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  69 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  SNO      = "60" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  Person   = "70" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.529 DBG default:  Name = "SathyaNarayana"
2023-07-03 11:27:01.529 DBG default:  Nakshatra  "Ashlesha"
2023-07-03 11:27:01.529 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.529 DBG default:  Mobile  "9741002738" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 69 208 

2023-07-03 11:27:01.529 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  69 69 

2023-07-03 11:27:01.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 70 209 

2023-07-03 11:27:01.529 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 70 70 

2023-07-03 11:27:01.529 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  69 

2023-07-03 11:27:01.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 70 210 

2023-07-03 11:27:01.529 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 70 

2023-07-03 11:27:01.529 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  69 

2023-07-03 11:27:01.529 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.529 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.529 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.529 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.529 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.529 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  70 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  SNO      = "61" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  Person   = "71" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.529 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.529 DBG default:  Name = "Sunil Bannur"
2023-07-03 11:27:01.530 DBG default:  Nakshatra  "Uttarabhadrapada"
2023-07-03 11:27:01.530 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:27:01.530 DBG default:  Mobile  "9900139304" 

2023-07-03 11:27:01.530 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 70 211 

2023-07-03 11:27:01.530 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  70 70 

2023-07-03 11:27:01.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 71 212 

2023-07-03 11:27:01.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 71 71 

2023-07-03 11:27:01.530 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  70 

2023-07-03 11:27:01.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 71 213 

2023-07-03 11:27:01.530 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 71 

2023-07-03 11:27:01.530 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  70 

2023-07-03 11:27:01.530 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.530 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.530 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.530 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.530 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.530 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  71 

2023-07-03 11:27:01.530 DBG default: void SevaBookingElement::print()  SNO      = "62" 

2023-07-03 11:27:01.530 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:27:01.530 DBG default: void SevaBookingElement::print()  Person   = "72" 

2023-07-03 11:27:01.530 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.530 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.530 DBG default:  Name = "Sathya Prakash"
2023-07-03 11:27:01.530 DBG default:  Nakshatra  "Purvaphalguni"
2023-07-03 11:27:01.530 DBG default:  Gothra  "Mounabharghava" 

2023-07-03 11:27:01.530 DBG default:  Mobile  "7760441901" 

2023-07-03 11:27:01.530 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 71 214 

2023-07-03 11:27:01.530 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  71 71 

2023-07-03 11:27:01.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 72 215 

2023-07-03 11:27:01.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 72 72 

2023-07-03 11:27:01.530 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  71 

2023-07-03 11:27:01.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 72 216 

2023-07-03 11:27:01.530 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 72 

2023-07-03 11:27:01.530 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  71 

2023-07-03 11:27:01.530 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.530 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.530 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.530 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.530 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.530 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  72 

2023-07-03 11:27:01.530 DBG default: void SevaBookingElement::print()  SNO      = "62" 

2023-07-03 11:27:01.530 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.530 DBG default: void SevaBookingElement::print()  Person   = "73" 

2023-07-03 11:27:01.530 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.530 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:27:01.530 DBG default:  Name = "Sathya Prakash"
2023-07-03 11:27:01.530 DBG default:  Nakshatra  "Purvaphalguni"
2023-07-03 11:27:01.530 DBG default:  Gothra  "Mounabharghava" 

2023-07-03 11:27:01.530 DBG default:  Mobile  "7760441901" 

2023-07-03 11:27:01.530 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 72 217 

2023-07-03 11:27:01.530 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  72 72 

2023-07-03 11:27:01.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 73 218 

2023-07-03 11:27:01.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 73 73 

2023-07-03 11:27:01.530 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  72 

2023-07-03 11:27:01.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 73 219 

2023-07-03 11:27:01.530 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 73 

2023-07-03 11:27:01.530 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  72 

2023-07-03 11:27:01.530 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.530 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.530 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.530 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.530 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.531 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  73 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  SNO      = "63" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  Person   = "74" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.531 DBG default:  Name = "Raghavendra Rao"
2023-07-03 11:27:01.531 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:27:01.531 DBG default:  Gothra  "Kaundinya" 

2023-07-03 11:27:01.531 DBG default:  Mobile  "9448395797" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 73 220 

2023-07-03 11:27:01.531 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  73 73 

2023-07-03 11:27:01.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 74 221 

2023-07-03 11:27:01.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 74 74 

2023-07-03 11:27:01.531 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  73 

2023-07-03 11:27:01.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 74 222 

2023-07-03 11:27:01.531 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 74 

2023-07-03 11:27:01.531 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  73 

2023-07-03 11:27:01.531 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.531 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.531 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.531 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.531 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.531 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  74 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  SNO      = "64" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  Person   = "75" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.531 DBG default:  Name = "Chandrika Burly"
2023-07-03 11:27:01.531 DBG default:  Nakshatra  ""
2023-07-03 11:27:01.531 DBG default:  Gothra  "" 

2023-07-03 11:27:01.531 DBG default:  Mobile  "9845908028" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 74 223 

2023-07-03 11:27:01.531 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  74 74 

2023-07-03 11:27:01.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 75 224 

2023-07-03 11:27:01.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 75 75 

2023-07-03 11:27:01.531 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  74 

2023-07-03 11:27:01.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 75 225 

2023-07-03 11:27:01.531 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 75 

2023-07-03 11:27:01.531 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  74 

2023-07-03 11:27:01.531 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.531 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.531 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.531 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.531 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.531 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  75 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  SNO      = "65" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  SName    = "Thatte Hasthodaka" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  Person   = "76" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.531 DBG default:  Name = "Krishnamurthy"
2023-07-03 11:27:01.531 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:27:01.531 DBG default:  Gothra  "Kaushika" 

2023-07-03 11:27:01.531 DBG default:  Mobile  "9632216698" 

2023-07-03 11:27:01.531 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 75 226 

2023-07-03 11:27:01.531 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  75 75 

2023-07-03 11:27:01.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 76 227 

2023-07-03 11:27:01.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 76 76 

2023-07-03 11:27:01.531 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  75 

2023-07-03 11:27:01.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 76 228 

2023-07-03 11:27:01.531 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 76 

2023-07-03 11:27:01.531 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  75 

2023-07-03 11:27:01.531 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.531 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.532 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.532 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.532 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.532 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  76 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  SNO      = "66" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  Person   = "77" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:27:01.532 DBG default:  Name = "Srikanth R Kulkarni"
2023-07-03 11:27:01.532 DBG default:  Nakshatra  ""
2023-07-03 11:27:01.532 DBG default:  Gothra  "Harithasa" 

2023-07-03 11:27:01.532 DBG default:  Mobile  "9741371042" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 76 229 

2023-07-03 11:27:01.532 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  76 76 

2023-07-03 11:27:01.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 77 230 

2023-07-03 11:27:01.532 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 77 77 

2023-07-03 11:27:01.532 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  76 

2023-07-03 11:27:01.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 77 231 

2023-07-03 11:27:01.532 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 77 

2023-07-03 11:27:01.532 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  76 

2023-07-03 11:27:01.532 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.532 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.532 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.532 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.532 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.532 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  77 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  SNO      = "67" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  Person   = "78" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.532 DBG default:  Name = "Jagadish Rao"
2023-07-03 11:27:01.532 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:27:01.532 DBG default:  Gothra  "Gouthama" 

2023-07-03 11:27:01.532 DBG default:  Mobile  "9810295322" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 77 232 

2023-07-03 11:27:01.532 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  77 77 

2023-07-03 11:27:01.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 78 233 

2023-07-03 11:27:01.532 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 78 78 

2023-07-03 11:27:01.532 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  77 

2023-07-03 11:27:01.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 78 234 

2023-07-03 11:27:01.532 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 78 

2023-07-03 11:27:01.532 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  77 

2023-07-03 11:27:01.532 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.532 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.532 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.532 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.532 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.532 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  78 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  SNO      = "67" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  Person   = "79" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.532 DBG default:  Name = "Jagadish Rao"
2023-07-03 11:27:01.532 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:27:01.532 DBG default:  Gothra  "Gouthama" 

2023-07-03 11:27:01.532 DBG default:  Mobile  "9810295322" 

2023-07-03 11:27:01.532 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 78 235 

2023-07-03 11:27:01.532 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  78 78 

2023-07-03 11:27:01.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 79 236 

2023-07-03 11:27:01.532 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 79 79 

2023-07-03 11:27:01.532 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  78 

2023-07-03 11:27:01.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 79 237 

2023-07-03 11:27:01.532 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 79 

2023-07-03 11:27:01.532 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  78 

2023-07-03 11:27:01.532 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.532 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.533 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.533 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.533 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.533 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  79 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  SNO      = "68" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  Person   = "80" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:27:01.533 DBG default:  Name = "Gopalakrishna Mangalgi"
2023-07-03 11:27:01.533 DBG default:  Nakshatra  "Uttarabhadrapada"
2023-07-03 11:27:01.533 DBG default:  Gothra  "Kaushika" 

2023-07-03 11:27:01.533 DBG default:  Mobile  "9449851799" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 79 238 

2023-07-03 11:27:01.533 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  79 79 

2023-07-03 11:27:01.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 80 239 

2023-07-03 11:27:01.533 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 80 80 

2023-07-03 11:27:01.533 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  79 

2023-07-03 11:27:01.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 80 240 

2023-07-03 11:27:01.533 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 80 

2023-07-03 11:27:01.533 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  79 

2023-07-03 11:27:01.533 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.533 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.533 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.533 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.533 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.533 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  80 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  SNO      = "69" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  Person   = "81" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:27:01.533 DBG default:  Name = "Sham Bhat Joshi"
2023-07-03 11:27:01.533 DBG default:  Nakshatra  "Bharani"
2023-07-03 11:27:01.533 DBG default:  Gothra  "Puthamanasa" 

2023-07-03 11:27:01.533 DBG default:  Mobile  "8073869420" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 80 241 

2023-07-03 11:27:01.533 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  80 80 

2023-07-03 11:27:01.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 81 242 

2023-07-03 11:27:01.533 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 81 81 

2023-07-03 11:27:01.533 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  80 

2023-07-03 11:27:01.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 81 243 

2023-07-03 11:27:01.533 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 81 

2023-07-03 11:27:01.533 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  80 

2023-07-03 11:27:01.533 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.533 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.533 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.533 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.533 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.533 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  81 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  SNO      = "70" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  SName    = "Poornapragna Hall Kanike N " 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  Person   = "82" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  SevaType = "14" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.533 DBG default:  Name = "Rajkumar"
2023-07-03 11:27:01.533 DBG default:  Nakshatra  "Purvaphalguni"
2023-07-03 11:27:01.533 DBG default:  Gothra  "Athreyasa" 

2023-07-03 11:27:01.533 DBG default:  Mobile  "9740252962" 

2023-07-03 11:27:01.533 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 81 244 

2023-07-03 11:27:01.533 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  81 81 

2023-07-03 11:27:01.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 82 245 

2023-07-03 11:27:01.533 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 82 82 

2023-07-03 11:27:01.533 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  81 

2023-07-03 11:27:01.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 82 246 

2023-07-03 11:27:01.533 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 82 

2023-07-03 11:27:01.533 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  81 

2023-07-03 11:27:01.533 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.533 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.534 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.534 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.534 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.534 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  82 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  SNO      = "71" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  Person   = "83" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.534 DBG default:  Name = "Suman N"
2023-07-03 11:27:01.534 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:27:01.534 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.534 DBG default:  Mobile  "9481914363" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 82 247 

2023-07-03 11:27:01.534 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  82 82 

2023-07-03 11:27:01.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 83 248 

2023-07-03 11:27:01.534 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 83 83 

2023-07-03 11:27:01.534 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  82 

2023-07-03 11:27:01.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 83 249 

2023-07-03 11:27:01.534 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 83 

2023-07-03 11:27:01.534 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  82 

2023-07-03 11:27:01.534 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.534 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.534 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.534 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.534 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.534 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  83 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  SNO      = "75" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  SName    = "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  Person   = "88" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  SevaType = "3" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.534 DBG default:  Name = "Suman N"
2023-07-03 11:27:01.534 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:27:01.534 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.534 DBG default:  Mobile  "9481914363" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 83 250 

2023-07-03 11:27:01.534 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  83 83 

2023-07-03 11:27:01.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 84 251 

2023-07-03 11:27:01.534 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 84 84 

2023-07-03 11:27:01.534 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  83 

2023-07-03 11:27:01.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 84 252 

2023-07-03 11:27:01.534 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 84 

2023-07-03 11:27:01.534 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  83 

2023-07-03 11:27:01.534 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.534 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.534 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.534 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.534 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.534 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  84 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  SNO      = "76" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  SName    = "M Navami Pavamana Homa" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  Person   = "89" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  SevaType = "3" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.534 DBG default:  Name = "Suman N"
2023-07-03 11:27:01.534 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:27:01.534 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.534 DBG default:  Mobile  "9481914363" 

2023-07-03 11:27:01.534 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 84 253 

2023-07-03 11:27:01.534 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  84 84 

2023-07-03 11:27:01.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 85 254 

2023-07-03 11:27:01.534 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 85 85 

2023-07-03 11:27:01.534 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  84 

2023-07-03 11:27:01.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 85 255 

2023-07-03 11:27:01.534 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 85 

2023-07-03 11:27:01.535 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  84 

2023-07-03 11:27:01.535 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.535 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.535 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.535 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.535 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.535 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  85 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  SNO      = "77" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  SName    = "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  Person   = "90" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  SevaType = "2" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.535 DBG default:  Name = "Suman N"
2023-07-03 11:27:01.535 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:27:01.535 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.535 DBG default:  Mobile  "9481914363" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.535 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 85 256 

2023-07-03 11:27:01.535 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  85 85 

2023-07-03 11:27:01.535 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 86 257 

2023-07-03 11:27:01.535 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 86 86 

2023-07-03 11:27:01.535 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  85 

2023-07-03 11:27:01.535 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 86 258 

2023-07-03 11:27:01.535 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 86 

2023-07-03 11:27:01.535 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  85 

2023-07-03 11:27:01.535 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.535 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.535 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.535 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.535 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.535 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  86 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  SNO      = "78" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  SName    = "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  Person   = "91" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  SevaType = "2" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.535 DBG default:  Name = "Suman N"
2023-07-03 11:27:01.535 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:27:01.535 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.535 DBG default:  Mobile  "9481914363" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.535 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 86 259 

2023-07-03 11:27:01.535 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  86 86 

2023-07-03 11:27:01.535 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 87 260 

2023-07-03 11:27:01.535 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 87 87 

2023-07-03 11:27:01.535 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  86 

2023-07-03 11:27:01.535 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 87 261 

2023-07-03 11:27:01.535 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 87 

2023-07-03 11:27:01.535 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  86 

2023-07-03 11:27:01.535 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.535 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.535 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.535 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.535 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.535 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  87 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  SNO      = "79" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  SName    = "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  Person   = "92" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  SevaType = "2" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:27:01.535 DBG default:  Name = "Suman N"
2023-07-03 11:27:01.535 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:27:01.535 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.535 DBG default:  Mobile  "9481914363" 

2023-07-03 11:27:01.535 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.535 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 87 262 

2023-07-03 11:27:01.535 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  87 87 

2023-07-03 11:27:01.535 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 88 263 

2023-07-03 11:27:01.536 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 88 88 

2023-07-03 11:27:01.536 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  87 

2023-07-03 11:27:01.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 88 264 

2023-07-03 11:27:01.536 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 88 

2023-07-03 11:27:01.536 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  87 

2023-07-03 11:27:01.536 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.536 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.536 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.536 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.536 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.536 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  88 

2023-07-03 11:27:01.536 DBG default: void SevaBookingElement::print()  SNO      = "80" 

2023-07-03 11:27:01.536 DBG default: void SevaBookingElement::print()  SName    = "Serva Seva" 

2023-07-03 11:27:01.536 DBG default: void SevaBookingElement::print()  Person   = "93" 

2023-07-03 11:27:01.536 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.536 DBG default: void SevaBookingElement::print()  Qty      = "5" 

2023-07-03 11:27:01.536 DBG default:  Name = "Suman N"
2023-07-03 11:27:01.536 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:27:01.536 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.536 DBG default:  Mobile  "9481914363" 

2023-07-03 11:27:01.536 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 88 265 

2023-07-03 11:27:01.536 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  88 88 

2023-07-03 11:27:01.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 89 266 

2023-07-03 11:27:01.536 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 89 89 

2023-07-03 11:27:01.536 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  88 

2023-07-03 11:27:01.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 89 267 

2023-07-03 11:27:01.536 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 89 

2023-07-03 11:27:01.536 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  88 

2023-07-03 11:27:01.536 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.536 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.536 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:27:01.536 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.536 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:27:01.536 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  89 

2023-07-03 11:27:01.536 DBG default: void SevaBookingElement::print()  SNO      = "80" 

2023-07-03 11:27:01.536 DBG default: void SevaBookingElement::print()  SName    = "Panchamrutha/Abhisheka" 

2023-07-03 11:27:01.536 DBG default: void SevaBookingElement::print()  Person   = "94" 

2023-07-03 11:27:01.536 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:27:01.536 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:27:01.536 DBG default:  Name = "Suman N"
2023-07-03 11:27:01.536 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:27:01.536 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:27:01.536 DBG default:  Mobile  "9481914363" 

2023-07-03 11:27:01.536 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:27:01.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 89 268 

2023-07-03 11:27:01.536 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  89 89 

2023-07-03 11:27:01.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 269 

2023-07-03 11:27:01.536 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 90 

2023-07-03 11:27:01.536 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  89 

2023-07-03 11:27:01.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 270 

2023-07-03 11:27:01.536 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 90 

2023-07-03 11:27:01.536 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  89 

2023-07-03 11:27:01.536 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^3333333^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:27:01.536 DBG default: bool SevaViewProxy::showAllData() 

2023-07-03 11:27:01.572 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:27:01.597 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 271 

2023-07-03 11:27:01.597 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 91 

2023-07-03 11:27:01.597 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 0 row column role 0 0 257 

2023-07-03 11:27:01.598 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 272 

2023-07-03 11:27:01.598 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 92 

2023-07-03 11:27:01.598 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1 row column role 0 0 258 

2023-07-03 11:27:01.599 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 273 

2023-07-03 11:27:01.599 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 93 

2023-07-03 11:27:01.599 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2 row column role 0 0 259 

2023-07-03 11:27:01.600 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 274 

2023-07-03 11:27:01.600 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 94 

2023-07-03 11:27:01.600 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3 row column role 0 0 260 

2023-07-03 11:27:01.600 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 275 

2023-07-03 11:27:01.600 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 95 

2023-07-03 11:27:01.600 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4 row column role 0 0 261 

2023-07-03 11:27:01.601 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 276 

2023-07-03 11:27:01.601 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 96 

2023-07-03 11:27:01.601 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 5 row column role 0 0 262 

2023-07-03 11:27:01.602 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 277 

2023-07-03 11:27:01.602 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 97 

2023-07-03 11:27:01.602 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 6 row column role 0 0 263 

2023-07-03 11:27:01.602 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 278 

2023-07-03 11:27:01.603 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 98 

2023-07-03 11:27:01.603 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 7 row column role 0 0 264 

2023-07-03 11:27:01.603 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 279 

2023-07-03 11:27:01.603 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 99 

2023-07-03 11:27:01.603 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 8 row column role 0 0 265 

2023-07-03 11:27:01.604 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 280 

2023-07-03 11:27:01.604 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 100 

2023-07-03 11:27:01.604 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 9 row column role 0 0 266 

2023-07-03 11:27:01.604 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 281 

2023-07-03 11:27:01.604 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 101 

2023-07-03 11:27:01.604 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 10 row column role 0 0 267 

2023-07-03 11:27:01.605 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 282 

2023-07-03 11:27:01.605 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 102 

2023-07-03 11:27:01.605 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 11 row column role 0 0 268 

2023-07-03 11:27:01.605 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 283 

2023-07-03 11:27:01.605 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 103 

2023-07-03 11:27:01.605 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 12 row column role 0 0 269 

2023-07-03 11:27:01.606 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 284 

2023-07-03 11:27:01.606 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 104 

2023-07-03 11:27:01.606 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 13 row column role 0 0 270 

2023-07-03 11:27:01.606 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 285 

2023-07-03 11:27:01.606 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 105 

2023-07-03 11:27:01.606 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 14 row column role 0 0 271 

2023-07-03 11:27:01.607 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 286 

2023-07-03 11:27:01.607 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 106 

2023-07-03 11:27:01.607 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 15 row column role 0 0 272 

2023-07-03 11:27:01.607 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 287 

2023-07-03 11:27:01.607 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 107 

2023-07-03 11:27:01.607 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 16 row column role 0 0 273 

2023-07-03 11:27:01.609 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 288 

2023-07-03 11:27:01.609 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 108 

2023-07-03 11:27:01.609 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 17 row column role 0 0 274 

2023-07-03 11:27:01.609 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 289 

2023-07-03 11:27:01.609 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 109 

2023-07-03 11:27:01.609 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 18 row column role 0 0 275 

2023-07-03 11:27:01.609 DBG qml: Seva All view Page is created
2023-07-03 11:27:01.609 WRN default: qrc:/ui/SevaBookingView.qml:380:9: QML Connections: Detected function "onLoadMenuPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:27:01.613 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 290 

2023-07-03 11:27:01.613 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 110 

2023-07-03 11:27:01.613 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 19 row column role 1 0 257 

2023-07-03 11:27:01.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 291 

2023-07-03 11:27:01.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 111 

2023-07-03 11:27:01.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 20 row column role 1 0 258 

2023-07-03 11:27:01.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 292 

2023-07-03 11:27:01.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 112 

2023-07-03 11:27:01.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 21 row column role 1 0 259 

2023-07-03 11:27:01.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 293 

2023-07-03 11:27:01.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 113 

2023-07-03 11:27:01.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 22 row column role 1 0 260 

2023-07-03 11:27:01.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 294 

2023-07-03 11:27:01.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 114 

2023-07-03 11:27:01.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 23 row column role 1 0 261 

2023-07-03 11:27:01.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 295 

2023-07-03 11:27:01.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 115 

2023-07-03 11:27:01.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 24 row column role 1 0 262 

2023-07-03 11:27:01.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 296 

2023-07-03 11:27:01.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 116 

2023-07-03 11:27:01.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 25 row column role 1 0 263 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 297 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 117 

2023-07-03 11:27:01.615 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 26 row column role 1 0 264 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 298 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 118 

2023-07-03 11:27:01.615 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 27 row column role 1 0 265 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 299 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 119 

2023-07-03 11:27:01.615 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 28 row column role 1 0 266 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 300 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 120 

2023-07-03 11:27:01.615 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 29 row column role 1 0 267 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 301 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 121 

2023-07-03 11:27:01.615 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 30 row column role 1 0 268 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 302 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 122 

2023-07-03 11:27:01.615 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 31 row column role 1 0 269 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 303 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 123 

2023-07-03 11:27:01.615 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 32 row column role 1 0 270 

2023-07-03 11:27:01.615 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 304 

2023-07-03 11:27:01.616 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 124 

2023-07-03 11:27:01.616 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 33 row column role 1 0 271 

2023-07-03 11:27:01.616 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 305 

2023-07-03 11:27:01.616 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 125 

2023-07-03 11:27:01.616 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 34 row column role 1 0 272 

2023-07-03 11:27:01.616 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 306 

2023-07-03 11:27:01.616 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 126 

2023-07-03 11:27:01.616 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 35 row column role 1 0 273 

2023-07-03 11:27:01.616 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 307 

2023-07-03 11:27:01.616 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 127 

2023-07-03 11:27:01.616 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 36 row column role 1 0 274 

2023-07-03 11:27:01.616 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 308 

2023-07-03 11:27:01.616 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 128 

2023-07-03 11:27:01.616 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 37 row column role 1 0 275 

2023-07-03 11:27:01.617 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 309 

2023-07-03 11:27:01.617 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 129 

2023-07-03 11:27:01.617 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 38 row column role 2 0 257 

2023-07-03 11:27:01.617 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 310 

2023-07-03 11:27:01.617 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 130 

2023-07-03 11:27:01.617 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 39 row column role 2 0 258 

2023-07-03 11:27:01.617 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 311 

2023-07-03 11:27:01.617 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 131 

2023-07-03 11:27:01.617 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 40 row column role 2 0 259 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 312 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 132 

2023-07-03 11:27:01.618 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 41 row column role 2 0 260 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 313 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 133 

2023-07-03 11:27:01.618 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 42 row column role 2 0 261 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 314 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 134 

2023-07-03 11:27:01.618 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 43 row column role 2 0 262 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 315 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 135 

2023-07-03 11:27:01.618 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 44 row column role 2 0 263 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 316 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 136 

2023-07-03 11:27:01.618 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 45 row column role 2 0 264 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 317 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 137 

2023-07-03 11:27:01.618 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 46 row column role 2 0 265 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 318 

2023-07-03 11:27:01.618 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 138 

2023-07-03 11:27:01.618 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 47 row column role 2 0 266 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 319 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 139 

2023-07-03 11:27:01.619 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 48 row column role 2 0 267 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 320 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 140 

2023-07-03 11:27:01.619 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 49 row column role 2 0 268 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 321 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 141 

2023-07-03 11:27:01.619 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 50 row column role 2 0 269 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 322 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 142 

2023-07-03 11:27:01.619 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 51 row column role 2 0 270 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 323 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 143 

2023-07-03 11:27:01.619 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 52 row column role 2 0 271 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 324 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 144 

2023-07-03 11:27:01.619 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 53 row column role 2 0 272 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 325 

2023-07-03 11:27:01.619 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 145 

2023-07-03 11:27:01.619 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 54 row column role 2 0 273 

2023-07-03 11:27:01.620 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 326 

2023-07-03 11:27:01.620 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 146 

2023-07-03 11:27:01.620 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 55 row column role 2 0 274 

2023-07-03 11:27:01.620 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 327 

2023-07-03 11:27:01.620 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 147 

2023-07-03 11:27:01.620 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 56 row column role 2 0 275 

2023-07-03 11:27:01.621 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 328 

2023-07-03 11:27:01.621 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 148 

2023-07-03 11:27:01.621 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 57 row column role 3 0 257 

2023-07-03 11:27:01.621 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 329 

2023-07-03 11:27:01.621 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 149 

2023-07-03 11:27:01.621 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 58 row column role 3 0 258 

2023-07-03 11:27:01.621 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 330 

2023-07-03 11:27:01.621 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 150 

2023-07-03 11:27:01.621 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 59 row column role 3 0 259 

2023-07-03 11:27:01.621 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 331 

2023-07-03 11:27:01.621 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 151 

2023-07-03 11:27:01.621 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 60 row column role 3 0 260 

2023-07-03 11:27:01.621 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 332 

2023-07-03 11:27:01.621 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 152 

2023-07-03 11:27:01.621 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 61 row column role 3 0 261 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 333 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 153 

2023-07-03 11:27:01.622 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 62 row column role 3 0 262 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 334 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 154 

2023-07-03 11:27:01.622 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 63 row column role 3 0 263 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 335 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 155 

2023-07-03 11:27:01.622 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 64 row column role 3 0 264 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 336 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 156 

2023-07-03 11:27:01.622 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 65 row column role 3 0 265 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 337 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 157 

2023-07-03 11:27:01.622 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 66 row column role 3 0 266 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 338 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 158 

2023-07-03 11:27:01.622 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 67 row column role 3 0 267 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 339 

2023-07-03 11:27:01.622 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 159 

2023-07-03 11:27:01.622 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 68 row column role 3 0 268 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 340 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 160 

2023-07-03 11:27:01.623 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 69 row column role 3 0 269 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 341 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 161 

2023-07-03 11:27:01.623 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 70 row column role 3 0 270 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 342 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 162 

2023-07-03 11:27:01.623 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 71 row column role 3 0 271 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 343 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 163 

2023-07-03 11:27:01.623 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 72 row column role 3 0 272 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 344 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 164 

2023-07-03 11:27:01.623 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 73 row column role 3 0 273 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 345 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 165 

2023-07-03 11:27:01.623 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 74 row column role 3 0 274 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 346 

2023-07-03 11:27:01.623 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 166 

2023-07-03 11:27:01.623 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 75 row column role 3 0 275 

2023-07-03 11:27:01.625 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 347 

2023-07-03 11:27:01.625 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 167 

2023-07-03 11:27:01.625 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 76 row column role 4 0 257 

2023-07-03 11:27:01.625 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 348 

2023-07-03 11:27:01.625 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 168 

2023-07-03 11:27:01.625 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 77 row column role 4 0 258 

2023-07-03 11:27:01.625 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 349 

2023-07-03 11:27:01.625 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 169 

2023-07-03 11:27:01.625 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 78 row column role 4 0 259 

2023-07-03 11:27:01.625 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 350 

2023-07-03 11:27:01.625 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 170 

2023-07-03 11:27:01.625 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 79 row column role 4 0 260 

2023-07-03 11:27:01.625 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 351 

2023-07-03 11:27:01.625 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 171 

2023-07-03 11:27:01.625 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 80 row column role 4 0 261 

2023-07-03 11:27:01.625 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 352 

2023-07-03 11:27:01.625 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 172 

2023-07-03 11:27:01.625 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 81 row column role 4 0 262 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 353 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 173 

2023-07-03 11:27:01.626 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 82 row column role 4 0 263 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 354 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 174 

2023-07-03 11:27:01.626 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 83 row column role 4 0 264 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 355 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 175 

2023-07-03 11:27:01.626 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 84 row column role 4 0 265 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 356 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 176 

2023-07-03 11:27:01.626 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 85 row column role 4 0 266 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 357 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 177 

2023-07-03 11:27:01.626 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 86 row column role 4 0 267 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 358 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 178 

2023-07-03 11:27:01.626 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 87 row column role 4 0 268 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 359 

2023-07-03 11:27:01.626 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 179 

2023-07-03 11:27:01.626 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 88 row column role 4 0 269 

2023-07-03 11:27:01.627 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 360 

2023-07-03 11:27:01.627 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 180 

2023-07-03 11:27:01.627 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 89 row column role 4 0 270 

2023-07-03 11:27:01.627 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 361 

2023-07-03 11:27:01.627 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 181 

2023-07-03 11:27:01.627 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 90 row column role 4 0 271 

2023-07-03 11:27:01.627 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 362 

2023-07-03 11:27:01.627 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 182 

2023-07-03 11:27:01.627 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 91 row column role 4 0 272 

2023-07-03 11:27:01.627 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 363 

2023-07-03 11:27:01.627 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 183 

2023-07-03 11:27:01.627 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 92 row column role 4 0 273 

2023-07-03 11:27:01.627 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 364 

2023-07-03 11:27:01.627 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 184 

2023-07-03 11:27:01.627 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 93 row column role 4 0 274 

2023-07-03 11:27:01.627 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 365 

2023-07-03 11:27:01.627 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 185 

2023-07-03 11:27:01.627 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 94 row column role 4 0 275 

2023-07-03 11:27:01.628 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 366 

2023-07-03 11:27:01.628 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 186 

2023-07-03 11:27:01.628 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 95 row column role 5 0 257 

2023-07-03 11:27:01.628 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 367 

2023-07-03 11:27:01.628 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 187 

2023-07-03 11:27:01.629 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 96 row column role 5 0 258 

2023-07-03 11:27:01.629 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 368 

2023-07-03 11:27:01.629 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 188 

2023-07-03 11:27:01.629 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 97 row column role 5 0 259 

2023-07-03 11:27:01.629 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 369 

2023-07-03 11:27:01.629 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 189 

2023-07-03 11:27:01.629 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 98 row column role 5 0 260 

2023-07-03 11:27:01.629 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 370 

2023-07-03 11:27:01.629 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 190 

2023-07-03 11:27:01.629 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 99 row column role 5 0 261 

2023-07-03 11:27:01.629 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 371 

2023-07-03 11:27:01.629 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 191 

2023-07-03 11:27:01.629 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 100 row column role 5 0 262 

2023-07-03 11:27:01.629 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 372 

2023-07-03 11:27:01.629 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 192 

2023-07-03 11:27:01.629 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 101 row column role 5 0 263 

2023-07-03 11:27:01.629 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 373 

2023-07-03 11:27:01.629 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 193 

2023-07-03 11:27:01.629 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 102 row column role 5 0 264 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 374 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 194 

2023-07-03 11:27:01.630 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 103 row column role 5 0 265 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 375 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 195 

2023-07-03 11:27:01.630 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 104 row column role 5 0 266 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 376 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 196 

2023-07-03 11:27:01.630 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 105 row column role 5 0 267 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 377 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 197 

2023-07-03 11:27:01.630 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 106 row column role 5 0 268 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 378 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 198 

2023-07-03 11:27:01.630 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 107 row column role 5 0 269 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 379 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 199 

2023-07-03 11:27:01.630 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 108 row column role 5 0 270 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 380 

2023-07-03 11:27:01.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 200 

2023-07-03 11:27:01.630 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 109 row column role 5 0 271 

2023-07-03 11:27:01.631 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 381 

2023-07-03 11:27:01.631 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 201 

2023-07-03 11:27:01.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 110 row column role 5 0 272 

2023-07-03 11:27:01.631 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 382 

2023-07-03 11:27:01.631 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 202 

2023-07-03 11:27:01.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 111 row column role 5 0 273 

2023-07-03 11:27:01.631 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 383 

2023-07-03 11:27:01.631 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 203 

2023-07-03 11:27:01.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 112 row column role 5 0 274 

2023-07-03 11:27:01.631 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 384 

2023-07-03 11:27:01.631 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 204 

2023-07-03 11:27:01.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 113 row column role 5 0 275 

2023-07-03 11:27:01.632 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 385 

2023-07-03 11:27:01.632 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 205 

2023-07-03 11:27:01.632 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 114 row column role 6 0 257 

2023-07-03 11:27:01.632 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 386 

2023-07-03 11:27:01.632 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 206 

2023-07-03 11:27:01.632 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 115 row column role 6 0 258 

2023-07-03 11:27:01.632 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 387 

2023-07-03 11:27:01.632 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 207 

2023-07-03 11:27:01.632 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 116 row column role 6 0 259 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 388 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 208 

2023-07-03 11:27:01.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 117 row column role 6 0 260 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 389 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 209 

2023-07-03 11:27:01.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 118 row column role 6 0 261 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 390 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 210 

2023-07-03 11:27:01.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 119 row column role 6 0 262 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 391 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 211 

2023-07-03 11:27:01.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 120 row column role 6 0 263 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 392 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 212 

2023-07-03 11:27:01.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 121 row column role 6 0 264 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 393 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 213 

2023-07-03 11:27:01.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 122 row column role 6 0 265 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 394 

2023-07-03 11:27:01.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 214 

2023-07-03 11:27:01.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 123 row column role 6 0 266 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 395 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 215 

2023-07-03 11:27:01.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 124 row column role 6 0 267 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 396 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 216 

2023-07-03 11:27:01.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 125 row column role 6 0 268 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 397 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 217 

2023-07-03 11:27:01.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 126 row column role 6 0 269 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 398 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 218 

2023-07-03 11:27:01.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 127 row column role 6 0 270 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 399 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 219 

2023-07-03 11:27:01.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 128 row column role 6 0 271 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 400 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 220 

2023-07-03 11:27:01.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 129 row column role 6 0 272 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 401 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 221 

2023-07-03 11:27:01.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 130 row column role 6 0 273 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 402 

2023-07-03 11:27:01.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 222 

2023-07-03 11:27:01.635 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 131 row column role 6 0 274 

2023-07-03 11:27:01.635 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 403 

2023-07-03 11:27:01.635 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 223 

2023-07-03 11:27:01.635 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 132 row column role 6 0 275 

2023-07-03 11:27:01.636 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 404 

2023-07-03 11:27:01.636 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 224 

2023-07-03 11:27:01.636 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 133 row column role 7 0 257 

2023-07-03 11:27:01.636 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 405 

2023-07-03 11:27:01.636 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 225 

2023-07-03 11:27:01.636 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 134 row column role 7 0 258 

2023-07-03 11:27:01.636 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 406 

2023-07-03 11:27:01.636 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 226 

2023-07-03 11:27:01.636 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 135 row column role 7 0 259 

2023-07-03 11:27:01.636 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 407 

2023-07-03 11:27:01.636 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 227 

2023-07-03 11:27:01.636 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 136 row column role 7 0 260 

2023-07-03 11:27:01.636 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 408 

2023-07-03 11:27:01.636 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 228 

2023-07-03 11:27:01.636 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 137 row column role 7 0 261 

2023-07-03 11:27:01.636 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 409 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 229 

2023-07-03 11:27:01.637 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 138 row column role 7 0 262 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 410 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 230 

2023-07-03 11:27:01.637 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 139 row column role 7 0 263 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 411 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 231 

2023-07-03 11:27:01.637 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 140 row column role 7 0 264 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 412 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 232 

2023-07-03 11:27:01.637 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 141 row column role 7 0 265 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 413 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 233 

2023-07-03 11:27:01.637 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 142 row column role 7 0 266 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 414 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 234 

2023-07-03 11:27:01.637 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 143 row column role 7 0 267 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 415 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 235 

2023-07-03 11:27:01.637 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 144 row column role 7 0 268 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 416 

2023-07-03 11:27:01.637 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 236 

2023-07-03 11:27:01.637 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 145 row column role 7 0 269 

2023-07-03 11:27:01.638 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 417 

2023-07-03 11:27:01.638 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 237 

2023-07-03 11:27:01.638 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 146 row column role 7 0 270 

2023-07-03 11:27:01.638 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 418 

2023-07-03 11:27:01.638 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 238 

2023-07-03 11:27:01.638 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 147 row column role 7 0 271 

2023-07-03 11:27:01.638 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 419 

2023-07-03 11:27:01.638 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 239 

2023-07-03 11:27:01.638 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 148 row column role 7 0 272 

2023-07-03 11:27:01.638 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 420 

2023-07-03 11:27:01.638 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 240 

2023-07-03 11:27:01.638 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 149 row column role 7 0 273 

2023-07-03 11:27:01.638 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 421 

2023-07-03 11:27:01.638 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 241 

2023-07-03 11:27:01.638 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 150 row column role 7 0 274 

2023-07-03 11:27:01.638 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 422 

2023-07-03 11:27:01.638 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 242 

2023-07-03 11:27:01.638 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 151 row column role 7 0 275 

2023-07-03 11:27:01.639 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 423 

2023-07-03 11:27:01.639 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 243 

2023-07-03 11:27:01.639 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 152 row column role 8 0 257 

2023-07-03 11:27:01.639 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 424 

2023-07-03 11:27:01.639 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 244 

2023-07-03 11:27:01.639 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 153 row column role 8 0 258 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 425 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 245 

2023-07-03 11:27:01.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 154 row column role 8 0 259 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 426 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 246 

2023-07-03 11:27:01.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 155 row column role 8 0 260 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 427 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 247 

2023-07-03 11:27:01.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 156 row column role 8 0 261 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 428 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 248 

2023-07-03 11:27:01.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 157 row column role 8 0 262 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 429 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 249 

2023-07-03 11:27:01.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 158 row column role 8 0 263 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 430 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 250 

2023-07-03 11:27:01.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 159 row column role 8 0 264 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 431 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 251 

2023-07-03 11:27:01.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 160 row column role 8 0 265 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 432 

2023-07-03 11:27:01.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 252 

2023-07-03 11:27:01.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 161 row column role 8 0 266 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 433 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 253 

2023-07-03 11:27:01.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 162 row column role 8 0 267 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 434 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 254 

2023-07-03 11:27:01.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 163 row column role 8 0 268 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 435 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 255 

2023-07-03 11:27:01.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 164 row column role 8 0 269 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 436 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 256 

2023-07-03 11:27:01.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 165 row column role 8 0 270 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 437 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 257 

2023-07-03 11:27:01.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 166 row column role 8 0 271 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 438 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 258 

2023-07-03 11:27:01.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 167 row column role 8 0 272 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 439 

2023-07-03 11:27:01.641 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 259 

2023-07-03 11:27:01.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 168 row column role 8 0 273 

2023-07-03 11:27:01.642 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 440 

2023-07-03 11:27:01.642 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 260 

2023-07-03 11:27:01.642 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 169 row column role 8 0 274 

2023-07-03 11:27:01.642 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 441 

2023-07-03 11:27:01.642 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 261 

2023-07-03 11:27:01.642 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 170 row column role 8 0 275 

2023-07-03 11:27:01.643 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 442 

2023-07-03 11:27:01.643 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 262 

2023-07-03 11:27:01.643 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 171 row column role 9 0 257 

2023-07-03 11:27:01.643 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 443 

2023-07-03 11:27:01.643 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 263 

2023-07-03 11:27:01.643 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 172 row column role 9 0 258 

2023-07-03 11:27:01.643 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 444 

2023-07-03 11:27:01.643 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 264 

2023-07-03 11:27:01.643 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 173 row column role 9 0 259 

2023-07-03 11:27:01.643 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 445 

2023-07-03 11:27:01.643 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 265 

2023-07-03 11:27:01.643 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 174 row column role 9 0 260 

2023-07-03 11:27:01.643 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 446 

2023-07-03 11:27:01.643 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 266 

2023-07-03 11:27:01.643 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 175 row column role 9 0 261 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 447 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 267 

2023-07-03 11:27:01.644 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 176 row column role 9 0 262 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 448 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 268 

2023-07-03 11:27:01.644 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 177 row column role 9 0 263 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 449 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 269 

2023-07-03 11:27:01.644 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 178 row column role 9 0 264 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 450 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 270 

2023-07-03 11:27:01.644 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 179 row column role 9 0 265 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 451 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 271 

2023-07-03 11:27:01.644 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 180 row column role 9 0 266 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 452 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 272 

2023-07-03 11:27:01.644 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 181 row column role 9 0 267 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 453 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 273 

2023-07-03 11:27:01.644 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 182 row column role 9 0 268 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 454 

2023-07-03 11:27:01.644 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 274 

2023-07-03 11:27:01.644 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 183 row column role 9 0 269 

2023-07-03 11:27:01.645 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 455 

2023-07-03 11:27:01.645 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 275 

2023-07-03 11:27:01.645 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 184 row column role 9 0 270 

2023-07-03 11:27:01.645 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 456 

2023-07-03 11:27:01.645 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 276 

2023-07-03 11:27:01.645 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 185 row column role 9 0 271 

2023-07-03 11:27:01.645 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 457 

2023-07-03 11:27:01.645 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 277 

2023-07-03 11:27:01.645 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 186 row column role 9 0 272 

2023-07-03 11:27:01.645 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 458 

2023-07-03 11:27:01.645 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 278 

2023-07-03 11:27:01.645 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 187 row column role 9 0 273 

2023-07-03 11:27:01.645 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 459 

2023-07-03 11:27:01.645 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 279 

2023-07-03 11:27:01.645 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 188 row column role 9 0 274 

2023-07-03 11:27:01.645 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 460 

2023-07-03 11:27:01.645 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 280 

2023-07-03 11:27:01.645 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 189 row column role 9 0 275 

2023-07-03 11:27:01.646 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 461 

2023-07-03 11:27:01.646 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 281 

2023-07-03 11:27:01.646 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 190 row column role 10 0 257 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 462 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 282 

2023-07-03 11:27:01.647 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 191 row column role 10 0 258 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 463 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 283 

2023-07-03 11:27:01.647 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 192 row column role 10 0 259 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 464 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 284 

2023-07-03 11:27:01.647 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 193 row column role 10 0 260 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 465 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 285 

2023-07-03 11:27:01.647 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 194 row column role 10 0 261 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 466 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 286 

2023-07-03 11:27:01.647 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 195 row column role 10 0 262 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 467 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 287 

2023-07-03 11:27:01.647 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 196 row column role 10 0 263 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 468 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 288 

2023-07-03 11:27:01.647 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 197 row column role 10 0 264 

2023-07-03 11:27:01.647 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 469 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 289 

2023-07-03 11:27:01.648 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 198 row column role 10 0 265 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 470 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 290 

2023-07-03 11:27:01.648 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 199 row column role 10 0 266 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 471 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 291 

2023-07-03 11:27:01.648 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 200 row column role 10 0 267 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 472 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 292 

2023-07-03 11:27:01.648 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 201 row column role 10 0 268 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 473 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 293 

2023-07-03 11:27:01.648 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 202 row column role 10 0 269 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 474 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 294 

2023-07-03 11:27:01.648 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 203 row column role 10 0 270 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 475 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 295 

2023-07-03 11:27:01.648 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 204 row column role 10 0 271 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 476 

2023-07-03 11:27:01.648 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 296 

2023-07-03 11:27:01.648 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 205 row column role 10 0 272 

2023-07-03 11:27:01.649 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 477 

2023-07-03 11:27:01.649 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 297 

2023-07-03 11:27:01.649 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 206 row column role 10 0 273 

2023-07-03 11:27:01.649 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 478 

2023-07-03 11:27:01.649 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 298 

2023-07-03 11:27:01.649 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 207 row column role 10 0 274 

2023-07-03 11:27:01.649 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 479 

2023-07-03 11:27:01.649 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 299 

2023-07-03 11:27:01.649 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 208 row column role 10 0 275 

2023-07-03 11:27:01.650 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 480 

2023-07-03 11:27:01.650 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 300 

2023-07-03 11:27:01.650 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 209 row column role 11 0 257 

2023-07-03 11:27:01.650 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 481 

2023-07-03 11:27:01.650 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 301 

2023-07-03 11:27:01.650 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 210 row column role 11 0 258 

2023-07-03 11:27:01.650 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 482 

2023-07-03 11:27:01.650 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 302 

2023-07-03 11:27:01.650 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 211 row column role 11 0 259 

2023-07-03 11:27:01.650 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 483 

2023-07-03 11:27:01.650 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 303 

2023-07-03 11:27:01.650 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 212 row column role 11 0 260 

2023-07-03 11:27:01.650 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 484 

2023-07-03 11:27:01.650 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 304 

2023-07-03 11:27:01.650 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 213 row column role 11 0 261 

2023-07-03 11:27:01.650 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 485 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 305 

2023-07-03 11:27:01.651 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 214 row column role 11 0 262 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 486 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 306 

2023-07-03 11:27:01.651 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 215 row column role 11 0 263 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 487 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 307 

2023-07-03 11:27:01.651 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 216 row column role 11 0 264 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 488 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 308 

2023-07-03 11:27:01.651 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 217 row column role 11 0 265 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 489 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 309 

2023-07-03 11:27:01.651 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 218 row column role 11 0 266 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 490 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 310 

2023-07-03 11:27:01.651 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 219 row column role 11 0 267 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 491 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 311 

2023-07-03 11:27:01.651 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 220 row column role 11 0 268 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 492 

2023-07-03 11:27:01.651 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 312 

2023-07-03 11:27:01.651 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 221 row column role 11 0 269 

2023-07-03 11:27:01.652 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 493 

2023-07-03 11:27:01.652 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 313 

2023-07-03 11:27:01.652 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 222 row column role 11 0 270 

2023-07-03 11:27:01.652 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 494 

2023-07-03 11:27:01.652 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 314 

2023-07-03 11:27:01.652 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 223 row column role 11 0 271 

2023-07-03 11:27:01.652 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 495 

2023-07-03 11:27:01.652 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 315 

2023-07-03 11:27:01.652 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 224 row column role 11 0 272 

2023-07-03 11:27:01.652 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 496 

2023-07-03 11:27:01.652 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 316 

2023-07-03 11:27:01.652 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 225 row column role 11 0 273 

2023-07-03 11:27:01.652 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 497 

2023-07-03 11:27:01.652 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 317 

2023-07-03 11:27:01.652 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 226 row column role 11 0 274 

2023-07-03 11:27:01.652 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 498 

2023-07-03 11:27:01.652 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 318 

2023-07-03 11:27:01.652 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 227 row column role 11 0 275 

2023-07-03 11:27:01.653 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 499 

2023-07-03 11:27:01.653 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 319 

2023-07-03 11:27:01.653 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 228 row column role 12 0 257 

2023-07-03 11:27:01.653 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 500 

2023-07-03 11:27:01.653 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 320 

2023-07-03 11:27:01.653 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 229 row column role 12 0 258 

2023-07-03 11:27:01.654 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 501 

2023-07-03 11:27:01.654 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 321 

2023-07-03 11:27:01.654 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 230 row column role 12 0 259 

2023-07-03 11:27:01.654 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 502 

2023-07-03 11:27:01.654 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 322 

2023-07-03 11:27:01.654 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 231 row column role 12 0 260 

2023-07-03 11:27:01.654 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 503 

2023-07-03 11:27:01.654 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 323 

2023-07-03 11:27:01.654 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 232 row column role 12 0 261 

2023-07-03 11:27:01.654 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 504 

2023-07-03 11:27:01.654 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 324 

2023-07-03 11:27:01.654 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 233 row column role 12 0 262 

2023-07-03 11:27:01.654 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 505 

2023-07-03 11:27:01.654 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 325 

2023-07-03 11:27:01.654 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 234 row column role 12 0 263 

2023-07-03 11:27:01.654 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 506 

2023-07-03 11:27:01.654 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 326 

2023-07-03 11:27:01.654 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 235 row column role 12 0 264 

2023-07-03 11:27:01.654 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 507 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 327 

2023-07-03 11:27:01.655 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 236 row column role 12 0 265 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 508 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 328 

2023-07-03 11:27:01.655 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 237 row column role 12 0 266 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 509 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 329 

2023-07-03 11:27:01.655 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 238 row column role 12 0 267 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 510 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 330 

2023-07-03 11:27:01.655 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 239 row column role 12 0 268 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 511 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 331 

2023-07-03 11:27:01.655 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 240 row column role 12 0 269 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 512 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 332 

2023-07-03 11:27:01.655 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 241 row column role 12 0 270 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 513 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 333 

2023-07-03 11:27:01.655 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 242 row column role 12 0 271 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 514 

2023-07-03 11:27:01.655 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 334 

2023-07-03 11:27:01.656 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 243 row column role 12 0 272 

2023-07-03 11:27:01.656 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 515 

2023-07-03 11:27:01.656 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 335 

2023-07-03 11:27:01.656 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 244 row column role 12 0 273 

2023-07-03 11:27:01.656 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 516 

2023-07-03 11:27:01.656 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 336 

2023-07-03 11:27:01.656 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 245 row column role 12 0 274 

2023-07-03 11:27:01.656 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 517 

2023-07-03 11:27:01.656 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 337 

2023-07-03 11:27:01.656 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 246 row column role 12 0 275 

2023-07-03 11:27:01.657 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 518 

2023-07-03 11:27:01.657 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 338 

2023-07-03 11:27:01.657 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 247 row column role 13 0 257 

2023-07-03 11:27:01.657 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 519 

2023-07-03 11:27:01.657 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 339 

2023-07-03 11:27:01.657 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 248 row column role 13 0 258 

2023-07-03 11:27:01.657 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 520 

2023-07-03 11:27:01.657 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 340 

2023-07-03 11:27:01.657 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 249 row column role 13 0 259 

2023-07-03 11:27:01.657 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 521 

2023-07-03 11:27:01.657 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 341 

2023-07-03 11:27:01.657 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 250 row column role 13 0 260 

2023-07-03 11:27:01.657 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 522 

2023-07-03 11:27:01.657 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 342 

2023-07-03 11:27:01.657 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 251 row column role 13 0 261 

2023-07-03 11:27:01.658 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 523 

2023-07-03 11:27:01.658 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 343 

2023-07-03 11:27:01.658 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 252 row column role 13 0 262 

2023-07-03 11:27:01.658 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 524 

2023-07-03 11:27:01.658 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 344 

2023-07-03 11:27:01.658 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 253 row column role 13 0 263 

2023-07-03 11:27:01.658 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 525 

2023-07-03 11:27:01.658 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 345 

2023-07-03 11:27:01.658 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 254 row column role 13 0 264 

2023-07-03 11:27:01.660 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 526 

2023-07-03 11:27:01.660 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 346 

2023-07-03 11:27:01.660 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 255 row column role 13 0 265 

2023-07-03 11:27:01.660 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 527 

2023-07-03 11:27:01.660 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 347 

2023-07-03 11:27:01.660 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 256 row column role 13 0 266 

2023-07-03 11:27:01.660 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 528 

2023-07-03 11:27:01.660 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 348 

2023-07-03 11:27:01.660 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 257 row column role 13 0 267 

2023-07-03 11:27:01.660 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 529 

2023-07-03 11:27:01.660 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 349 

2023-07-03 11:27:01.660 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 258 row column role 13 0 268 

2023-07-03 11:27:01.660 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 530 

2023-07-03 11:27:01.660 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 350 

2023-07-03 11:27:01.660 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 259 row column role 13 0 269 

2023-07-03 11:27:01.661 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 531 

2023-07-03 11:27:01.661 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 351 

2023-07-03 11:27:01.661 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 260 row column role 13 0 270 

2023-07-03 11:27:01.661 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 532 

2023-07-03 11:27:01.661 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 352 

2023-07-03 11:27:01.661 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 261 row column role 13 0 271 

2023-07-03 11:27:01.661 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 533 

2023-07-03 11:27:01.661 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 353 

2023-07-03 11:27:01.661 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 262 row column role 13 0 272 

2023-07-03 11:27:01.661 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 534 

2023-07-03 11:27:01.661 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 354 

2023-07-03 11:27:01.661 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 263 row column role 13 0 273 

2023-07-03 11:27:01.661 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 535 

2023-07-03 11:27:01.661 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 355 

2023-07-03 11:27:01.661 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 264 row column role 13 0 274 

2023-07-03 11:27:01.661 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 536 

2023-07-03 11:27:01.661 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 356 

2023-07-03 11:27:01.661 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 265 row column role 13 0 275 

2023-07-03 11:27:01.662 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 537 

2023-07-03 11:27:01.662 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 357 

2023-07-03 11:27:01.662 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 266 row column role 14 0 257 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 538 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 358 

2023-07-03 11:27:01.663 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 267 row column role 14 0 258 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 539 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 359 

2023-07-03 11:27:01.663 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 268 row column role 14 0 259 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 540 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 360 

2023-07-03 11:27:01.663 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 269 row column role 14 0 260 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 541 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 361 

2023-07-03 11:27:01.663 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 270 row column role 14 0 261 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 542 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 362 

2023-07-03 11:27:01.663 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 271 row column role 14 0 262 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 543 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 363 

2023-07-03 11:27:01.663 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 272 row column role 14 0 263 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 544 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 364 

2023-07-03 11:27:01.663 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 273 row column role 14 0 264 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 545 

2023-07-03 11:27:01.663 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 365 

2023-07-03 11:27:01.663 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 274 row column role 14 0 265 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 546 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 366 

2023-07-03 11:27:01.664 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 275 row column role 14 0 266 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 547 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 367 

2023-07-03 11:27:01.664 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 276 row column role 14 0 267 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 548 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 368 

2023-07-03 11:27:01.664 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 277 row column role 14 0 268 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 549 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 369 

2023-07-03 11:27:01.664 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 278 row column role 14 0 269 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 550 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 370 

2023-07-03 11:27:01.664 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 279 row column role 14 0 270 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 551 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 371 

2023-07-03 11:27:01.664 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 280 row column role 14 0 271 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 552 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 372 

2023-07-03 11:27:01.664 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 281 row column role 14 0 272 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 553 

2023-07-03 11:27:01.664 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 373 

2023-07-03 11:27:01.664 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 282 row column role 14 0 273 

2023-07-03 11:27:01.665 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 554 

2023-07-03 11:27:01.665 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 374 

2023-07-03 11:27:01.665 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 283 row column role 14 0 274 

2023-07-03 11:27:01.665 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 555 

2023-07-03 11:27:01.665 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 375 

2023-07-03 11:27:01.665 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 284 row column role 14 0 275 

2023-07-03 11:27:01.666 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 556 

2023-07-03 11:27:01.666 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 376 

2023-07-03 11:27:01.666 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 285 row column role 15 0 257 

2023-07-03 11:27:01.666 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 557 

2023-07-03 11:27:01.666 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 377 

2023-07-03 11:27:01.666 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 286 row column role 15 0 258 

2023-07-03 11:27:01.666 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 558 

2023-07-03 11:27:01.666 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 378 

2023-07-03 11:27:01.666 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 287 row column role 15 0 259 

2023-07-03 11:27:01.666 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 559 

2023-07-03 11:27:01.666 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 379 

2023-07-03 11:27:01.666 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 288 row column role 15 0 260 

2023-07-03 11:27:01.666 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 560 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 380 

2023-07-03 11:27:01.667 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 289 row column role 15 0 261 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 561 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 381 

2023-07-03 11:27:01.667 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 290 row column role 15 0 262 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 562 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 382 

2023-07-03 11:27:01.667 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 291 row column role 15 0 263 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 563 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 383 

2023-07-03 11:27:01.667 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 292 row column role 15 0 264 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 564 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 384 

2023-07-03 11:27:01.667 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 293 row column role 15 0 265 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 565 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 385 

2023-07-03 11:27:01.667 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 294 row column role 15 0 266 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 566 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 386 

2023-07-03 11:27:01.667 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 295 row column role 15 0 267 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 567 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 387 

2023-07-03 11:27:01.667 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 296 row column role 15 0 268 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 568 

2023-07-03 11:27:01.667 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 388 

2023-07-03 11:27:01.668 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 297 row column role 15 0 269 

2023-07-03 11:27:01.668 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 569 

2023-07-03 11:27:01.668 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 389 

2023-07-03 11:27:01.668 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 298 row column role 15 0 270 

2023-07-03 11:27:01.668 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 570 

2023-07-03 11:27:01.668 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 390 

2023-07-03 11:27:01.668 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 299 row column role 15 0 271 

2023-07-03 11:27:01.668 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 571 

2023-07-03 11:27:01.668 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 391 

2023-07-03 11:27:01.668 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 300 row column role 15 0 272 

2023-07-03 11:27:01.668 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 572 

2023-07-03 11:27:01.668 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 392 

2023-07-03 11:27:01.668 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 301 row column role 15 0 273 

2023-07-03 11:27:01.668 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 573 

2023-07-03 11:27:01.668 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 393 

2023-07-03 11:27:01.668 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 302 row column role 15 0 274 

2023-07-03 11:27:01.668 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 574 

2023-07-03 11:27:01.668 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 394 

2023-07-03 11:27:01.668 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 303 row column role 15 0 275 

2023-07-03 11:27:01.669 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 575 

2023-07-03 11:27:01.669 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 395 

2023-07-03 11:27:01.669 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 304 row column role 16 0 257 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 576 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 396 

2023-07-03 11:27:01.670 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 305 row column role 16 0 258 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 577 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 397 

2023-07-03 11:27:01.670 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 306 row column role 16 0 259 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 578 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 398 

2023-07-03 11:27:01.670 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 307 row column role 16 0 260 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 579 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 399 

2023-07-03 11:27:01.670 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 308 row column role 16 0 261 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 580 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 400 

2023-07-03 11:27:01.670 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 309 row column role 16 0 262 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 581 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 401 

2023-07-03 11:27:01.670 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 310 row column role 16 0 263 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 582 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 402 

2023-07-03 11:27:01.670 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 311 row column role 16 0 264 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 583 

2023-07-03 11:27:01.670 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 403 

2023-07-03 11:27:01.670 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 312 row column role 16 0 265 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 584 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 404 

2023-07-03 11:27:01.671 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 313 row column role 16 0 266 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 585 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 405 

2023-07-03 11:27:01.671 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 314 row column role 16 0 267 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 586 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 406 

2023-07-03 11:27:01.671 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 315 row column role 16 0 268 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 587 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 407 

2023-07-03 11:27:01.671 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 316 row column role 16 0 269 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 588 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 408 

2023-07-03 11:27:01.671 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 317 row column role 16 0 270 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 589 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 409 

2023-07-03 11:27:01.671 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 318 row column role 16 0 271 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 590 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 410 

2023-07-03 11:27:01.671 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 319 row column role 16 0 272 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 591 

2023-07-03 11:27:01.671 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 411 

2023-07-03 11:27:01.671 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 320 row column role 16 0 273 

2023-07-03 11:27:01.672 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 592 

2023-07-03 11:27:01.672 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 412 

2023-07-03 11:27:01.672 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 321 row column role 16 0 274 

2023-07-03 11:27:01.672 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 593 

2023-07-03 11:27:01.672 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 413 

2023-07-03 11:27:01.672 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 322 row column role 16 0 275 

2023-07-03 11:27:01.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 594 

2023-07-03 11:27:01.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 414 

2023-07-03 11:27:01.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 323 row column role 17 0 257 

2023-07-03 11:27:01.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 595 

2023-07-03 11:27:01.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 415 

2023-07-03 11:27:01.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 324 row column role 17 0 258 

2023-07-03 11:27:01.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 596 

2023-07-03 11:27:01.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 416 

2023-07-03 11:27:01.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 325 row column role 17 0 259 

2023-07-03 11:27:01.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 597 

2023-07-03 11:27:01.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 417 

2023-07-03 11:27:01.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 326 row column role 17 0 260 

2023-07-03 11:27:01.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 598 

2023-07-03 11:27:01.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 418 

2023-07-03 11:27:01.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 327 row column role 17 0 261 

2023-07-03 11:27:01.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 599 

2023-07-03 11:27:01.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 419 

2023-07-03 11:27:01.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 328 row column role 17 0 262 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 600 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 420 

2023-07-03 11:27:01.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 329 row column role 17 0 263 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 601 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 421 

2023-07-03 11:27:01.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 330 row column role 17 0 264 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 602 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 422 

2023-07-03 11:27:01.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 331 row column role 17 0 265 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 603 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 423 

2023-07-03 11:27:01.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 332 row column role 17 0 266 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 604 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 424 

2023-07-03 11:27:01.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 333 row column role 17 0 267 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 605 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 425 

2023-07-03 11:27:01.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 334 row column role 17 0 268 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 606 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 426 

2023-07-03 11:27:01.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 335 row column role 17 0 269 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 607 

2023-07-03 11:27:01.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 427 

2023-07-03 11:27:01.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 336 row column role 17 0 270 

2023-07-03 11:27:01.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 608 

2023-07-03 11:27:01.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 428 

2023-07-03 11:27:01.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 337 row column role 17 0 271 

2023-07-03 11:27:01.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 609 

2023-07-03 11:27:01.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 429 

2023-07-03 11:27:01.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 338 row column role 17 0 272 

2023-07-03 11:27:01.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 610 

2023-07-03 11:27:01.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 430 

2023-07-03 11:27:01.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 339 row column role 17 0 273 

2023-07-03 11:27:01.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 611 

2023-07-03 11:27:01.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 431 

2023-07-03 11:27:01.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 340 row column role 17 0 274 

2023-07-03 11:27:01.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 612 

2023-07-03 11:27:01.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 432 

2023-07-03 11:27:01.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 341 row column role 17 0 275 

2023-07-03 11:27:01.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 613 

2023-07-03 11:27:01.676 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 433 

2023-07-03 11:27:01.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 342 row column role 18 0 257 

2023-07-03 11:27:01.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 614 

2023-07-03 11:27:01.676 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 434 

2023-07-03 11:27:01.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 343 row column role 18 0 258 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 615 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 435 

2023-07-03 11:27:01.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 344 row column role 18 0 259 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 616 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 436 

2023-07-03 11:27:01.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 345 row column role 18 0 260 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 617 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 437 

2023-07-03 11:27:01.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 346 row column role 18 0 261 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 618 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 438 

2023-07-03 11:27:01.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 347 row column role 18 0 262 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 619 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 439 

2023-07-03 11:27:01.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 348 row column role 18 0 263 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 620 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 440 

2023-07-03 11:27:01.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 349 row column role 18 0 264 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 621 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 441 

2023-07-03 11:27:01.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 350 row column role 18 0 265 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 622 

2023-07-03 11:27:01.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 442 

2023-07-03 11:27:01.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 351 row column role 18 0 266 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 623 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 443 

2023-07-03 11:27:01.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 352 row column role 18 0 267 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 624 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 444 

2023-07-03 11:27:01.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 353 row column role 18 0 268 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 625 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 445 

2023-07-03 11:27:01.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 354 row column role 18 0 269 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 626 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 446 

2023-07-03 11:27:01.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 355 row column role 18 0 270 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 627 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 447 

2023-07-03 11:27:01.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 356 row column role 18 0 271 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 628 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 448 

2023-07-03 11:27:01.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 357 row column role 18 0 272 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 629 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 449 

2023-07-03 11:27:01.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 358 row column role 18 0 273 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 630 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 450 

2023-07-03 11:27:01.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 359 row column role 18 0 274 

2023-07-03 11:27:01.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 631 

2023-07-03 11:27:01.679 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 451 

2023-07-03 11:27:01.679 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 360 row column role 18 0 275 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 632 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 452 

2023-07-03 11:27:01.680 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 361 row column role 19 0 257 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 633 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 453 

2023-07-03 11:27:01.680 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 362 row column role 19 0 258 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 634 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 454 

2023-07-03 11:27:01.680 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 363 row column role 19 0 259 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 635 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 455 

2023-07-03 11:27:01.680 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 364 row column role 19 0 260 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 636 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 456 

2023-07-03 11:27:01.680 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 365 row column role 19 0 261 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 637 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 457 

2023-07-03 11:27:01.680 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 366 row column role 19 0 262 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 638 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 458 

2023-07-03 11:27:01.680 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 367 row column role 19 0 263 

2023-07-03 11:27:01.680 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 639 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 459 

2023-07-03 11:27:01.681 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 368 row column role 19 0 264 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 640 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 460 

2023-07-03 11:27:01.681 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 369 row column role 19 0 265 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 641 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 461 

2023-07-03 11:27:01.681 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 370 row column role 19 0 266 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 642 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 462 

2023-07-03 11:27:01.681 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 371 row column role 19 0 267 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 643 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 463 

2023-07-03 11:27:01.681 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 372 row column role 19 0 268 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 644 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 464 

2023-07-03 11:27:01.681 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 373 row column role 19 0 269 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 645 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 465 

2023-07-03 11:27:01.681 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 374 row column role 19 0 270 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 646 

2023-07-03 11:27:01.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 466 

2023-07-03 11:27:01.681 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 375 row column role 19 0 271 

2023-07-03 11:27:01.682 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 647 

2023-07-03 11:27:01.682 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 467 

2023-07-03 11:27:01.682 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 376 row column role 19 0 272 

2023-07-03 11:27:01.682 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 648 

2023-07-03 11:27:01.682 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 468 

2023-07-03 11:27:01.682 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 377 row column role 19 0 273 

2023-07-03 11:27:01.682 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 649 

2023-07-03 11:27:01.682 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 469 

2023-07-03 11:27:01.682 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 378 row column role 19 0 274 

2023-07-03 11:27:01.682 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 650 

2023-07-03 11:27:01.682 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 470 

2023-07-03 11:27:01.682 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 379 row column role 19 0 275 

2023-07-03 11:27:01.683 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 651 

2023-07-03 11:27:01.683 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 471 

2023-07-03 11:27:01.683 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 380 row column role 20 0 257 

2023-07-03 11:27:01.683 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 652 

2023-07-03 11:27:01.683 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 472 

2023-07-03 11:27:01.683 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 381 row column role 20 0 258 

2023-07-03 11:27:01.683 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 653 

2023-07-03 11:27:01.683 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 473 

2023-07-03 11:27:01.683 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 382 row column role 20 0 259 

2023-07-03 11:27:01.683 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 654 

2023-07-03 11:27:01.683 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 474 

2023-07-03 11:27:01.683 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 383 row column role 20 0 260 

2023-07-03 11:27:01.683 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 655 

2023-07-03 11:27:01.683 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 475 

2023-07-03 11:27:01.683 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 384 row column role 20 0 261 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 656 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 476 

2023-07-03 11:27:01.684 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 385 row column role 20 0 262 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 657 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 477 

2023-07-03 11:27:01.684 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 386 row column role 20 0 263 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 658 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 478 

2023-07-03 11:27:01.684 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 387 row column role 20 0 264 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 659 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 479 

2023-07-03 11:27:01.684 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 388 row column role 20 0 265 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 660 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 480 

2023-07-03 11:27:01.684 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 389 row column role 20 0 266 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 661 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 481 

2023-07-03 11:27:01.684 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 390 row column role 20 0 267 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 662 

2023-07-03 11:27:01.684 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 482 

2023-07-03 11:27:01.684 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 391 row column role 20 0 268 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 663 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 483 

2023-07-03 11:27:01.685 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 392 row column role 20 0 269 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 664 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 484 

2023-07-03 11:27:01.685 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 393 row column role 20 0 270 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 665 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 485 

2023-07-03 11:27:01.685 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 394 row column role 20 0 271 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 666 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 486 

2023-07-03 11:27:01.685 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 395 row column role 20 0 272 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 667 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 487 

2023-07-03 11:27:01.685 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 396 row column role 20 0 273 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 668 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 488 

2023-07-03 11:27:01.685 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 397 row column role 20 0 274 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 669 

2023-07-03 11:27:01.685 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 489 

2023-07-03 11:27:01.685 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 398 row column role 20 0 275 

2023-07-03 11:27:01.686 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 670 

2023-07-03 11:27:01.686 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 490 

2023-07-03 11:27:01.686 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 399 row column role 21 0 257 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 671 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 491 

2023-07-03 11:27:01.687 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 400 row column role 21 0 258 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 672 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 492 

2023-07-03 11:27:01.687 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 401 row column role 21 0 259 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 673 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 493 

2023-07-03 11:27:01.687 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 402 row column role 21 0 260 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 674 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 494 

2023-07-03 11:27:01.687 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 403 row column role 21 0 261 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 675 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 495 

2023-07-03 11:27:01.687 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 404 row column role 21 0 262 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 676 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 496 

2023-07-03 11:27:01.687 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 405 row column role 21 0 263 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 677 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 497 

2023-07-03 11:27:01.687 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 406 row column role 21 0 264 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 678 

2023-07-03 11:27:01.687 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 498 

2023-07-03 11:27:01.687 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 407 row column role 21 0 265 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 679 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 499 

2023-07-03 11:27:01.688 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 408 row column role 21 0 266 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 680 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 500 

2023-07-03 11:27:01.688 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 409 row column role 21 0 267 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 681 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 501 

2023-07-03 11:27:01.688 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 410 row column role 21 0 268 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 682 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 502 

2023-07-03 11:27:01.688 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 411 row column role 21 0 269 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 683 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 503 

2023-07-03 11:27:01.688 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 412 row column role 21 0 270 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 684 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 504 

2023-07-03 11:27:01.688 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 413 row column role 21 0 271 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 685 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 505 

2023-07-03 11:27:01.688 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 414 row column role 21 0 272 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 686 

2023-07-03 11:27:01.688 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 506 

2023-07-03 11:27:01.689 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 415 row column role 21 0 273 

2023-07-03 11:27:01.689 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 687 

2023-07-03 11:27:01.689 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 507 

2023-07-03 11:27:01.689 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 416 row column role 21 0 274 

2023-07-03 11:27:01.689 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 688 

2023-07-03 11:27:01.689 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 508 

2023-07-03 11:27:01.689 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 417 row column role 21 0 275 

2023-07-03 11:27:01.690 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 689 

2023-07-03 11:27:01.690 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 509 

2023-07-03 11:27:01.690 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 418 row column role 22 0 257 

2023-07-03 11:27:01.690 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 690 

2023-07-03 11:27:01.690 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 510 

2023-07-03 11:27:01.690 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 419 row column role 22 0 258 

2023-07-03 11:27:01.690 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 691 

2023-07-03 11:27:01.690 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 511 

2023-07-03 11:27:01.690 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 420 row column role 22 0 259 

2023-07-03 11:27:01.690 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 692 

2023-07-03 11:27:01.690 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 512 

2023-07-03 11:27:01.690 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 421 row column role 22 0 260 

2023-07-03 11:27:01.690 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 693 

2023-07-03 11:27:01.690 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 513 

2023-07-03 11:27:01.691 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 422 row column role 22 0 261 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 694 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 514 

2023-07-03 11:27:01.691 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 423 row column role 22 0 262 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 695 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 515 

2023-07-03 11:27:01.691 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 424 row column role 22 0 263 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 696 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 516 

2023-07-03 11:27:01.691 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 425 row column role 22 0 264 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 697 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 517 

2023-07-03 11:27:01.691 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 426 row column role 22 0 265 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 698 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 518 

2023-07-03 11:27:01.691 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 427 row column role 22 0 266 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 699 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 519 

2023-07-03 11:27:01.691 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 428 row column role 22 0 267 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 700 

2023-07-03 11:27:01.691 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 520 

2023-07-03 11:27:01.691 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 429 row column role 22 0 268 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 701 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 521 

2023-07-03 11:27:01.692 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 430 row column role 22 0 269 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 702 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 522 

2023-07-03 11:27:01.692 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 431 row column role 22 0 270 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 703 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 523 

2023-07-03 11:27:01.692 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 432 row column role 22 0 271 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 704 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 524 

2023-07-03 11:27:01.692 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 433 row column role 22 0 272 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 705 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 525 

2023-07-03 11:27:01.692 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 434 row column role 22 0 273 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 706 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 526 

2023-07-03 11:27:01.692 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 435 row column role 22 0 274 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 707 

2023-07-03 11:27:01.692 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 527 

2023-07-03 11:27:01.692 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 436 row column role 22 0 275 

2023-07-03 11:27:01.705 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 708 

2023-07-03 11:27:01.705 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 528 

2023-07-03 11:27:01.705 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 437 row column role 23 0 257 

2023-07-03 11:27:01.705 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 709 

2023-07-03 11:27:01.705 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 529 

2023-07-03 11:27:01.705 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 438 row column role 23 0 258 

2023-07-03 11:27:01.705 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 710 

2023-07-03 11:27:01.705 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 530 

2023-07-03 11:27:01.705 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 439 row column role 23 0 259 

2023-07-03 11:27:01.705 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 711 

2023-07-03 11:27:01.705 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 531 

2023-07-03 11:27:01.705 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 440 row column role 23 0 260 

2023-07-03 11:27:01.706 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 712 

2023-07-03 11:27:01.706 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 532 

2023-07-03 11:27:01.706 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 441 row column role 23 0 261 

2023-07-03 11:27:01.706 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 713 

2023-07-03 11:27:01.706 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 533 

2023-07-03 11:27:01.706 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 442 row column role 23 0 262 

2023-07-03 11:27:01.706 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 714 

2023-07-03 11:27:01.706 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 534 

2023-07-03 11:27:01.706 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 443 row column role 23 0 263 

2023-07-03 11:27:01.707 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 715 

2023-07-03 11:27:01.707 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 535 

2023-07-03 11:27:01.707 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 444 row column role 23 0 264 

2023-07-03 11:27:01.707 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 716 

2023-07-03 11:27:01.707 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 536 

2023-07-03 11:27:01.707 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 445 row column role 23 0 265 

2023-07-03 11:27:01.707 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 717 

2023-07-03 11:27:01.707 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 537 

2023-07-03 11:27:01.707 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 446 row column role 23 0 266 

2023-07-03 11:27:01.707 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 718 

2023-07-03 11:27:01.707 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 538 

2023-07-03 11:27:01.707 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 447 row column role 23 0 267 

2023-07-03 11:27:01.707 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 719 

2023-07-03 11:27:01.707 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 539 

2023-07-03 11:27:01.707 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 448 row column role 23 0 268 

2023-07-03 11:27:01.707 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 720 

2023-07-03 11:27:01.707 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 540 

2023-07-03 11:27:01.707 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 449 row column role 23 0 269 

2023-07-03 11:27:01.708 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 721 

2023-07-03 11:27:01.708 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 541 

2023-07-03 11:27:01.708 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 450 row column role 23 0 270 

2023-07-03 11:27:01.708 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 722 

2023-07-03 11:27:01.708 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 542 

2023-07-03 11:27:01.708 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 451 row column role 23 0 271 

2023-07-03 11:27:01.708 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 723 

2023-07-03 11:27:01.708 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 543 

2023-07-03 11:27:01.708 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 452 row column role 23 0 272 

2023-07-03 11:27:01.708 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 724 

2023-07-03 11:27:01.708 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 544 

2023-07-03 11:27:01.708 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 453 row column role 23 0 273 

2023-07-03 11:27:01.708 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 725 

2023-07-03 11:27:01.708 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 545 

2023-07-03 11:27:01.708 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 454 row column role 23 0 274 

2023-07-03 11:27:01.708 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 726 

2023-07-03 11:27:01.708 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 546 

2023-07-03 11:27:01.708 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 455 row column role 23 0 275 

2023-07-03 11:27:01.709 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 727 

2023-07-03 11:27:01.709 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 547 

2023-07-03 11:27:01.709 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 456 row column role 24 0 257 

2023-07-03 11:27:01.709 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 728 

2023-07-03 11:27:01.709 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 548 

2023-07-03 11:27:01.709 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 457 row column role 24 0 258 

2023-07-03 11:27:01.709 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 729 

2023-07-03 11:27:01.709 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 549 

2023-07-03 11:27:01.709 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 458 row column role 24 0 259 

2023-07-03 11:27:01.709 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 730 

2023-07-03 11:27:01.709 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 550 

2023-07-03 11:27:01.709 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 459 row column role 24 0 260 

2023-07-03 11:27:01.710 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 731 

2023-07-03 11:27:01.710 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 551 

2023-07-03 11:27:01.710 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 460 row column role 24 0 261 

2023-07-03 11:27:01.710 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 732 

2023-07-03 11:27:01.710 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 552 

2023-07-03 11:27:01.710 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 461 row column role 24 0 262 

2023-07-03 11:27:01.710 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 733 

2023-07-03 11:27:01.710 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 553 

2023-07-03 11:27:01.710 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 462 row column role 24 0 263 

2023-07-03 11:27:01.710 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 734 

2023-07-03 11:27:01.710 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 554 

2023-07-03 11:27:01.710 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 463 row column role 24 0 264 

2023-07-03 11:27:01.710 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 735 

2023-07-03 11:27:01.710 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 555 

2023-07-03 11:27:01.710 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 464 row column role 24 0 265 

2023-07-03 11:27:01.710 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 736 

2023-07-03 11:27:01.710 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 556 

2023-07-03 11:27:01.710 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 465 row column role 24 0 266 

2023-07-03 11:27:01.710 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 737 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 557 

2023-07-03 11:27:01.711 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 466 row column role 24 0 267 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 738 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 558 

2023-07-03 11:27:01.711 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 467 row column role 24 0 268 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 739 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 559 

2023-07-03 11:27:01.711 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 468 row column role 24 0 269 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 740 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 560 

2023-07-03 11:27:01.711 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 469 row column role 24 0 270 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 741 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 561 

2023-07-03 11:27:01.711 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 470 row column role 24 0 271 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 742 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 562 

2023-07-03 11:27:01.711 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 471 row column role 24 0 272 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 743 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 563 

2023-07-03 11:27:01.711 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 472 row column role 24 0 273 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 744 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 564 

2023-07-03 11:27:01.711 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 473 row column role 24 0 274 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 745 

2023-07-03 11:27:01.711 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 565 

2023-07-03 11:27:01.711 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 474 row column role 24 0 275 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 746 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 566 

2023-07-03 11:27:01.713 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 475 row column role 25 0 257 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 747 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 567 

2023-07-03 11:27:01.713 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 476 row column role 25 0 258 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 748 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 568 

2023-07-03 11:27:01.713 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 477 row column role 25 0 259 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 749 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 569 

2023-07-03 11:27:01.713 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 478 row column role 25 0 260 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 750 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 570 

2023-07-03 11:27:01.713 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 479 row column role 25 0 261 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 751 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 571 

2023-07-03 11:27:01.713 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 480 row column role 25 0 262 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 752 

2023-07-03 11:27:01.713 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 572 

2023-07-03 11:27:01.713 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 481 row column role 25 0 263 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 753 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 573 

2023-07-03 11:27:01.714 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 482 row column role 25 0 264 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 754 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 574 

2023-07-03 11:27:01.714 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 483 row column role 25 0 265 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 755 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 575 

2023-07-03 11:27:01.714 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 484 row column role 25 0 266 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 756 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 576 

2023-07-03 11:27:01.714 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 485 row column role 25 0 267 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 757 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 577 

2023-07-03 11:27:01.714 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 486 row column role 25 0 268 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 758 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 578 

2023-07-03 11:27:01.714 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 487 row column role 25 0 269 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 759 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 579 

2023-07-03 11:27:01.714 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 488 row column role 25 0 270 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 760 

2023-07-03 11:27:01.714 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 580 

2023-07-03 11:27:01.714 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 489 row column role 25 0 271 

2023-07-03 11:27:01.715 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 761 

2023-07-03 11:27:01.715 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 581 

2023-07-03 11:27:01.715 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 490 row column role 25 0 272 

2023-07-03 11:27:01.715 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 762 

2023-07-03 11:27:01.715 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 582 

2023-07-03 11:27:01.715 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 491 row column role 25 0 273 

2023-07-03 11:27:01.715 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 763 

2023-07-03 11:27:01.715 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 583 

2023-07-03 11:27:01.715 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 492 row column role 25 0 274 

2023-07-03 11:27:01.715 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 764 

2023-07-03 11:27:01.715 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 584 

2023-07-03 11:27:01.715 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 493 row column role 25 0 275 

2023-07-03 11:27:01.716 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 765 

2023-07-03 11:27:01.716 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 585 

2023-07-03 11:27:01.716 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 494 row column role 26 0 257 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 766 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 586 

2023-07-03 11:27:01.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 495 row column role 26 0 258 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 767 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 587 

2023-07-03 11:27:01.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 496 row column role 26 0 259 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 768 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 588 

2023-07-03 11:27:01.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 497 row column role 26 0 260 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 769 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 589 

2023-07-03 11:27:01.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 498 row column role 26 0 261 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 770 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 590 

2023-07-03 11:27:01.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 499 row column role 26 0 262 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 771 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 591 

2023-07-03 11:27:01.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 500 row column role 26 0 263 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 772 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 592 

2023-07-03 11:27:01.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 501 row column role 26 0 264 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 773 

2023-07-03 11:27:01.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 593 

2023-07-03 11:27:01.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 502 row column role 26 0 265 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 774 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 594 

2023-07-03 11:27:01.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 503 row column role 26 0 266 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 775 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 595 

2023-07-03 11:27:01.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 504 row column role 26 0 267 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 776 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 596 

2023-07-03 11:27:01.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 505 row column role 26 0 268 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 777 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 597 

2023-07-03 11:27:01.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 506 row column role 26 0 269 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 778 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 598 

2023-07-03 11:27:01.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 507 row column role 26 0 270 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 779 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 599 

2023-07-03 11:27:01.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 508 row column role 26 0 271 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 780 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 600 

2023-07-03 11:27:01.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 509 row column role 26 0 272 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 781 

2023-07-03 11:27:01.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 601 

2023-07-03 11:27:01.719 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 510 row column role 26 0 273 

2023-07-03 11:27:01.719 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 782 

2023-07-03 11:27:01.719 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 602 

2023-07-03 11:27:01.719 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 511 row column role 26 0 274 

2023-07-03 11:27:01.719 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 783 

2023-07-03 11:27:01.719 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 603 

2023-07-03 11:27:01.719 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 512 row column role 26 0 275 

2023-07-03 11:27:01.721 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 784 

2023-07-03 11:27:01.721 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 604 

2023-07-03 11:27:01.721 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 513 row column role 27 0 257 

2023-07-03 11:27:01.721 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 785 

2023-07-03 11:27:01.721 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 605 

2023-07-03 11:27:01.721 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 514 row column role 27 0 258 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 786 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 606 

2023-07-03 11:27:01.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 515 row column role 27 0 259 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 787 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 607 

2023-07-03 11:27:01.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 516 row column role 27 0 260 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 788 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 608 

2023-07-03 11:27:01.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 517 row column role 27 0 261 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 789 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 609 

2023-07-03 11:27:01.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 518 row column role 27 0 262 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 790 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 610 

2023-07-03 11:27:01.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 519 row column role 27 0 263 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 791 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 611 

2023-07-03 11:27:01.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 520 row column role 27 0 264 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 792 

2023-07-03 11:27:01.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 612 

2023-07-03 11:27:01.723 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 521 row column role 27 0 265 

2023-07-03 11:27:01.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 793 

2023-07-03 11:27:01.723 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 613 

2023-07-03 11:27:01.723 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 522 row column role 27 0 266 

2023-07-03 11:27:01.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 794 

2023-07-03 11:27:01.723 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 614 

2023-07-03 11:27:01.723 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 523 row column role 27 0 267 

2023-07-03 11:27:01.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 795 

2023-07-03 11:27:01.723 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 615 

2023-07-03 11:27:01.723 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 524 row column role 27 0 268 

2023-07-03 11:27:01.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 796 

2023-07-03 11:27:01.723 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 616 

2023-07-03 11:27:01.723 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 525 row column role 27 0 269 

2023-07-03 11:27:01.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 797 

2023-07-03 11:27:01.723 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 617 

2023-07-03 11:27:01.723 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 526 row column role 27 0 270 

2023-07-03 11:27:01.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 798 

2023-07-03 11:27:01.723 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 618 

2023-07-03 11:27:01.723 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 527 row column role 27 0 271 

2023-07-03 11:27:01.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 799 

2023-07-03 11:27:01.724 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 619 

2023-07-03 11:27:01.724 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 528 row column role 27 0 272 

2023-07-03 11:27:01.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 800 

2023-07-03 11:27:01.724 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 620 

2023-07-03 11:27:01.724 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 529 row column role 27 0 273 

2023-07-03 11:27:01.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 801 

2023-07-03 11:27:01.724 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 621 

2023-07-03 11:27:01.724 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 530 row column role 27 0 274 

2023-07-03 11:27:01.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 802 

2023-07-03 11:27:01.724 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 622 

2023-07-03 11:27:01.724 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 531 row column role 27 0 275 

2023-07-03 11:27:01.725 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 803 

2023-07-03 11:27:01.725 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 623 

2023-07-03 11:27:01.725 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 532 row column role 28 0 257 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 804 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 624 

2023-07-03 11:27:01.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 533 row column role 28 0 258 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 805 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 625 

2023-07-03 11:27:01.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 534 row column role 28 0 259 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 806 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 626 

2023-07-03 11:27:01.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 535 row column role 28 0 260 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 807 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 627 

2023-07-03 11:27:01.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 536 row column role 28 0 261 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 808 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 628 

2023-07-03 11:27:01.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 537 row column role 28 0 262 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 809 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 629 

2023-07-03 11:27:01.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 538 row column role 28 0 263 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 810 

2023-07-03 11:27:01.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 630 

2023-07-03 11:27:01.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 539 row column role 28 0 264 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 811 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 631 

2023-07-03 11:27:01.727 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 540 row column role 28 0 265 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 812 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 632 

2023-07-03 11:27:01.727 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 541 row column role 28 0 266 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 813 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 633 

2023-07-03 11:27:01.727 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 542 row column role 28 0 267 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 814 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 634 

2023-07-03 11:27:01.727 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 543 row column role 28 0 268 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 815 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 635 

2023-07-03 11:27:01.727 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 544 row column role 28 0 269 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 816 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 636 

2023-07-03 11:27:01.727 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 545 row column role 28 0 270 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 817 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 637 

2023-07-03 11:27:01.727 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 546 row column role 28 0 271 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 818 

2023-07-03 11:27:01.727 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 638 

2023-07-03 11:27:01.727 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 547 row column role 28 0 272 

2023-07-03 11:27:01.728 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 819 

2023-07-03 11:27:01.728 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 639 

2023-07-03 11:27:01.728 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 548 row column role 28 0 273 

2023-07-03 11:27:01.728 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 820 

2023-07-03 11:27:01.728 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 640 

2023-07-03 11:27:01.728 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 549 row column role 28 0 274 

2023-07-03 11:27:01.728 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 821 

2023-07-03 11:27:01.728 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 641 

2023-07-03 11:27:01.728 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 550 row column role 28 0 275 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 822 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 642 

2023-07-03 11:27:01.729 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 551 row column role 29 0 257 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 823 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 643 

2023-07-03 11:27:01.729 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 552 row column role 29 0 258 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 824 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 644 

2023-07-03 11:27:01.729 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 553 row column role 29 0 259 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 825 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 645 

2023-07-03 11:27:01.729 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 554 row column role 29 0 260 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 826 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 646 

2023-07-03 11:27:01.729 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 555 row column role 29 0 261 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 827 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 647 

2023-07-03 11:27:01.729 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 556 row column role 29 0 262 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 828 

2023-07-03 11:27:01.729 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 648 

2023-07-03 11:27:01.729 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 557 row column role 29 0 263 

2023-07-03 11:27:01.730 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 829 

2023-07-03 11:27:01.730 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 649 

2023-07-03 11:27:01.730 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 558 row column role 29 0 264 

2023-07-03 11:27:01.730 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 830 

2023-07-03 11:27:01.730 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 650 

2023-07-03 11:27:01.730 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 559 row column role 29 0 265 

2023-07-03 11:27:01.730 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 831 

2023-07-03 11:27:01.730 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 651 

2023-07-03 11:27:01.730 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 560 row column role 29 0 266 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 832 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 652 

2023-07-03 11:27:01.731 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 561 row column role 29 0 267 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 833 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 653 

2023-07-03 11:27:01.731 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 562 row column role 29 0 268 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 834 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 654 

2023-07-03 11:27:01.731 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 563 row column role 29 0 269 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 835 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 655 

2023-07-03 11:27:01.731 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 564 row column role 29 0 270 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 836 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 656 

2023-07-03 11:27:01.731 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 565 row column role 29 0 271 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 837 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 657 

2023-07-03 11:27:01.731 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 566 row column role 29 0 272 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 838 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 658 

2023-07-03 11:27:01.731 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 567 row column role 29 0 273 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 839 

2023-07-03 11:27:01.731 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 659 

2023-07-03 11:27:01.731 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 568 row column role 29 0 274 

2023-07-03 11:27:01.732 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 840 

2023-07-03 11:27:01.732 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 660 

2023-07-03 11:27:01.732 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 569 row column role 29 0 275 

2023-07-03 11:27:01.733 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 841 

2023-07-03 11:27:01.733 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 661 

2023-07-03 11:27:01.733 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 570 row column role 30 0 257 

2023-07-03 11:27:01.733 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 842 

2023-07-03 11:27:01.733 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 662 

2023-07-03 11:27:01.733 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 571 row column role 30 0 258 

2023-07-03 11:27:01.733 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 843 

2023-07-03 11:27:01.733 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 663 

2023-07-03 11:27:01.733 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 572 row column role 30 0 259 

2023-07-03 11:27:01.733 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 844 

2023-07-03 11:27:01.733 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 664 

2023-07-03 11:27:01.733 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 573 row column role 30 0 260 

2023-07-03 11:27:01.733 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 845 

2023-07-03 11:27:01.733 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 665 

2023-07-03 11:27:01.733 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 574 row column role 30 0 261 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 846 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 666 

2023-07-03 11:27:01.734 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 575 row column role 30 0 262 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 847 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 667 

2023-07-03 11:27:01.734 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 576 row column role 30 0 263 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 848 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 668 

2023-07-03 11:27:01.734 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 577 row column role 30 0 264 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 849 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 669 

2023-07-03 11:27:01.734 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 578 row column role 30 0 265 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 850 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 670 

2023-07-03 11:27:01.734 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 579 row column role 30 0 266 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 851 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 671 

2023-07-03 11:27:01.734 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 580 row column role 30 0 267 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 852 

2023-07-03 11:27:01.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 672 

2023-07-03 11:27:01.734 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 581 row column role 30 0 268 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 853 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 673 

2023-07-03 11:27:01.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 582 row column role 30 0 269 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 854 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 674 

2023-07-03 11:27:01.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 583 row column role 30 0 270 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 855 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 675 

2023-07-03 11:27:01.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 584 row column role 30 0 271 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 856 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 676 

2023-07-03 11:27:01.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 585 row column role 30 0 272 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 857 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 677 

2023-07-03 11:27:01.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 586 row column role 30 0 273 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 858 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 678 

2023-07-03 11:27:01.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 587 row column role 30 0 274 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 859 

2023-07-03 11:27:01.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 679 

2023-07-03 11:27:01.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 588 row column role 30 0 275 

2023-07-03 11:27:24.901 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 860 

2023-07-03 11:27:24.901 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 680 

2023-07-03 11:27:24.901 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 589 row column role 31 0 257 

2023-07-03 11:27:24.901 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 861 

2023-07-03 11:27:24.901 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 681 

2023-07-03 11:27:24.901 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 590 row column role 31 0 258 

2023-07-03 11:27:24.901 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 862 

2023-07-03 11:27:24.901 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 682 

2023-07-03 11:27:24.901 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 591 row column role 31 0 259 

2023-07-03 11:27:24.901 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 863 

2023-07-03 11:27:24.901 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 683 

2023-07-03 11:27:24.901 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 592 row column role 31 0 260 

2023-07-03 11:27:24.902 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 864 

2023-07-03 11:27:24.902 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 684 

2023-07-03 11:27:24.902 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 593 row column role 31 0 261 

2023-07-03 11:27:24.902 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 865 

2023-07-03 11:27:24.902 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 685 

2023-07-03 11:27:24.902 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 594 row column role 31 0 262 

2023-07-03 11:27:24.902 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 866 

2023-07-03 11:27:24.902 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 686 

2023-07-03 11:27:24.902 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 595 row column role 31 0 263 

2023-07-03 11:27:24.902 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 867 

2023-07-03 11:27:24.902 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 687 

2023-07-03 11:27:24.902 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 596 row column role 31 0 264 

2023-07-03 11:27:24.902 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 868 

2023-07-03 11:27:24.903 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 688 

2023-07-03 11:27:24.903 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 597 row column role 31 0 265 

2023-07-03 11:27:24.903 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 869 

2023-07-03 11:27:24.903 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 689 

2023-07-03 11:27:24.903 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 598 row column role 31 0 266 

2023-07-03 11:27:24.903 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 870 

2023-07-03 11:27:24.903 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 690 

2023-07-03 11:27:24.903 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 599 row column role 31 0 267 

2023-07-03 11:27:24.903 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 871 

2023-07-03 11:27:24.903 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 691 

2023-07-03 11:27:24.903 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 600 row column role 31 0 268 

2023-07-03 11:27:24.903 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 872 

2023-07-03 11:27:24.903 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 692 

2023-07-03 11:27:24.903 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 601 row column role 31 0 269 

2023-07-03 11:27:24.904 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 873 

2023-07-03 11:27:24.904 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 693 

2023-07-03 11:27:24.904 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 602 row column role 31 0 270 

2023-07-03 11:27:24.904 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 874 

2023-07-03 11:27:24.904 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 694 

2023-07-03 11:27:24.904 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 603 row column role 31 0 271 

2023-07-03 11:27:24.904 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 875 

2023-07-03 11:27:24.904 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 695 

2023-07-03 11:27:24.904 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 604 row column role 31 0 272 

2023-07-03 11:27:24.904 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 876 

2023-07-03 11:27:24.904 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 696 

2023-07-03 11:27:24.904 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 605 row column role 31 0 273 

2023-07-03 11:27:24.904 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 877 

2023-07-03 11:27:24.904 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 697 

2023-07-03 11:27:24.904 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 606 row column role 31 0 274 

2023-07-03 11:27:24.905 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 878 

2023-07-03 11:27:24.905 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 698 

2023-07-03 11:27:24.905 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 607 row column role 31 0 275 

2023-07-03 11:27:25.348 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 879 

2023-07-03 11:27:25.348 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 699 

2023-07-03 11:27:25.348 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 608 row column role 32 0 257 

2023-07-03 11:27:25.349 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 880 

2023-07-03 11:27:25.349 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 700 

2023-07-03 11:27:25.349 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 609 row column role 32 0 258 

2023-07-03 11:27:25.350 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 881 

2023-07-03 11:27:25.350 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 701 

2023-07-03 11:27:25.350 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 610 row column role 32 0 259 

2023-07-03 11:27:25.350 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 882 

2023-07-03 11:27:25.350 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 702 

2023-07-03 11:27:25.350 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 611 row column role 32 0 260 

2023-07-03 11:27:25.351 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 883 

2023-07-03 11:27:25.351 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 703 

2023-07-03 11:27:25.351 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 612 row column role 32 0 261 

2023-07-03 11:27:25.352 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 884 

2023-07-03 11:27:25.352 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 704 

2023-07-03 11:27:25.352 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 613 row column role 32 0 262 

2023-07-03 11:27:25.352 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 885 

2023-07-03 11:27:25.353 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 705 

2023-07-03 11:27:25.353 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 614 row column role 32 0 263 

2023-07-03 11:27:25.353 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 886 

2023-07-03 11:27:25.353 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 706 

2023-07-03 11:27:25.353 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 615 row column role 32 0 264 

2023-07-03 11:27:25.354 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 887 

2023-07-03 11:27:25.354 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 707 

2023-07-03 11:27:25.354 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 616 row column role 32 0 265 

2023-07-03 11:27:25.354 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 888 

2023-07-03 11:27:25.355 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 708 

2023-07-03 11:27:25.355 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 617 row column role 32 0 266 

2023-07-03 11:27:25.355 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 889 

2023-07-03 11:27:25.355 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 709 

2023-07-03 11:27:25.355 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 618 row column role 32 0 267 

2023-07-03 11:27:25.356 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 890 

2023-07-03 11:27:25.356 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 710 

2023-07-03 11:27:25.356 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 619 row column role 32 0 268 

2023-07-03 11:27:25.356 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 891 

2023-07-03 11:27:25.356 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 711 

2023-07-03 11:27:25.356 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 620 row column role 32 0 269 

2023-07-03 11:27:25.357 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 892 

2023-07-03 11:27:25.357 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 712 

2023-07-03 11:27:25.357 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 621 row column role 32 0 270 

2023-07-03 11:27:25.358 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 893 

2023-07-03 11:27:25.358 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 713 

2023-07-03 11:27:25.358 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 622 row column role 32 0 271 

2023-07-03 11:27:25.358 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 894 

2023-07-03 11:27:25.358 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 714 

2023-07-03 11:27:25.358 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 623 row column role 32 0 272 

2023-07-03 11:27:25.359 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 895 

2023-07-03 11:27:25.359 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 715 

2023-07-03 11:27:25.359 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 624 row column role 32 0 273 

2023-07-03 11:27:25.359 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 896 

2023-07-03 11:27:25.359 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 716 

2023-07-03 11:27:25.359 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 625 row column role 32 0 274 

2023-07-03 11:27:25.360 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 897 

2023-07-03 11:27:25.360 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 717 

2023-07-03 11:27:25.360 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 626 row column role 32 0 275 

2023-07-03 11:27:25.372 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 898 

2023-07-03 11:27:25.372 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 718 

2023-07-03 11:27:25.372 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 627 row column role 33 0 257 

2023-07-03 11:27:25.373 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 899 

2023-07-03 11:27:25.373 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 719 

2023-07-03 11:27:25.373 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 628 row column role 33 0 258 

2023-07-03 11:27:25.374 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 900 

2023-07-03 11:27:25.374 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 720 

2023-07-03 11:27:25.374 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 629 row column role 33 0 259 

2023-07-03 11:27:25.374 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 901 

2023-07-03 11:27:25.374 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 721 

2023-07-03 11:27:25.374 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 630 row column role 33 0 260 

2023-07-03 11:27:25.375 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 902 

2023-07-03 11:27:25.375 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 722 

2023-07-03 11:27:25.375 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 631 row column role 33 0 261 

2023-07-03 11:27:25.376 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 903 

2023-07-03 11:27:25.376 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 723 

2023-07-03 11:27:25.376 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 632 row column role 33 0 262 

2023-07-03 11:27:25.376 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 904 

2023-07-03 11:27:25.376 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 724 

2023-07-03 11:27:25.376 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 633 row column role 33 0 263 

2023-07-03 11:27:25.377 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 905 

2023-07-03 11:27:25.377 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 725 

2023-07-03 11:27:25.377 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 634 row column role 33 0 264 

2023-07-03 11:27:25.378 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 906 

2023-07-03 11:27:25.378 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 726 

2023-07-03 11:27:25.378 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 635 row column role 33 0 265 

2023-07-03 11:27:25.378 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 907 

2023-07-03 11:27:25.378 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 727 

2023-07-03 11:27:25.378 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 636 row column role 33 0 266 

2023-07-03 11:27:25.379 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 908 

2023-07-03 11:27:25.379 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 728 

2023-07-03 11:27:25.379 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 637 row column role 33 0 267 

2023-07-03 11:27:25.380 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 909 

2023-07-03 11:27:25.380 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 729 

2023-07-03 11:27:25.380 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 638 row column role 33 0 268 

2023-07-03 11:27:25.380 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 910 

2023-07-03 11:27:25.380 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 730 

2023-07-03 11:27:25.380 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 639 row column role 33 0 269 

2023-07-03 11:27:25.381 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 911 

2023-07-03 11:27:25.381 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 731 

2023-07-03 11:27:25.381 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 640 row column role 33 0 270 

2023-07-03 11:27:25.381 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 912 

2023-07-03 11:27:25.381 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 732 

2023-07-03 11:27:25.381 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 641 row column role 33 0 271 

2023-07-03 11:27:25.382 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 913 

2023-07-03 11:27:25.382 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 733 

2023-07-03 11:27:25.382 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 642 row column role 33 0 272 

2023-07-03 11:27:25.382 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 914 

2023-07-03 11:27:25.382 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 734 

2023-07-03 11:27:25.383 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 643 row column role 33 0 273 

2023-07-03 11:27:25.383 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 915 

2023-07-03 11:27:25.383 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 735 

2023-07-03 11:27:25.383 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 644 row column role 33 0 274 

2023-07-03 11:27:25.384 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 916 

2023-07-03 11:27:25.384 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 736 

2023-07-03 11:27:25.384 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 645 row column role 33 0 275 

2023-07-03 11:27:25.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 917 

2023-07-03 11:27:25.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 737 

2023-07-03 11:27:25.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 646 row column role 34 0 257 

2023-07-03 11:27:25.488 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 918 

2023-07-03 11:27:25.488 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 738 

2023-07-03 11:27:25.488 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 647 row column role 34 0 258 

2023-07-03 11:27:25.488 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 919 

2023-07-03 11:27:25.488 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 739 

2023-07-03 11:27:25.488 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 648 row column role 34 0 259 

2023-07-03 11:27:25.488 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 920 

2023-07-03 11:27:25.488 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 740 

2023-07-03 11:27:25.488 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 649 row column role 34 0 260 

2023-07-03 11:27:25.489 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 921 

2023-07-03 11:27:25.489 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 741 

2023-07-03 11:27:25.489 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 650 row column role 34 0 261 

2023-07-03 11:27:25.489 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 922 

2023-07-03 11:27:25.489 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 742 

2023-07-03 11:27:25.489 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 651 row column role 34 0 262 

2023-07-03 11:27:25.490 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 923 

2023-07-03 11:27:25.490 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 743 

2023-07-03 11:27:25.490 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 652 row column role 34 0 263 

2023-07-03 11:27:25.490 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 924 

2023-07-03 11:27:25.490 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 744 

2023-07-03 11:27:25.490 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 653 row column role 34 0 264 

2023-07-03 11:27:25.490 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 925 

2023-07-03 11:27:25.490 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 745 

2023-07-03 11:27:25.490 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 654 row column role 34 0 265 

2023-07-03 11:27:25.491 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 926 

2023-07-03 11:27:25.491 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 746 

2023-07-03 11:27:25.491 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 655 row column role 34 0 266 

2023-07-03 11:27:25.491 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 927 

2023-07-03 11:27:25.491 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 747 

2023-07-03 11:27:25.491 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 656 row column role 34 0 267 

2023-07-03 11:27:25.492 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 928 

2023-07-03 11:27:25.492 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 748 

2023-07-03 11:27:25.492 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 657 row column role 34 0 268 

2023-07-03 11:27:25.492 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 929 

2023-07-03 11:27:25.492 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 749 

2023-07-03 11:27:25.492 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 658 row column role 34 0 269 

2023-07-03 11:27:25.492 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 930 

2023-07-03 11:27:25.492 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 750 

2023-07-03 11:27:25.492 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 659 row column role 34 0 270 

2023-07-03 11:27:25.493 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 931 

2023-07-03 11:27:25.493 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 751 

2023-07-03 11:27:25.493 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 660 row column role 34 0 271 

2023-07-03 11:27:25.493 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 932 

2023-07-03 11:27:25.493 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 752 

2023-07-03 11:27:25.493 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 661 row column role 34 0 272 

2023-07-03 11:27:25.493 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 933 

2023-07-03 11:27:25.493 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 753 

2023-07-03 11:27:25.493 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 662 row column role 34 0 273 

2023-07-03 11:27:25.494 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 934 

2023-07-03 11:27:25.494 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 754 

2023-07-03 11:27:25.494 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 663 row column role 34 0 274 

2023-07-03 11:27:25.494 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 935 

2023-07-03 11:27:25.494 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 755 

2023-07-03 11:27:25.494 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 664 row column role 34 0 275 

2023-07-03 11:27:25.720 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 936 

2023-07-03 11:27:25.720 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 756 

2023-07-03 11:27:25.720 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 665 row column role 35 0 257 

2023-07-03 11:27:25.721 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 937 

2023-07-03 11:27:25.721 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 757 

2023-07-03 11:27:25.721 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 666 row column role 35 0 258 

2023-07-03 11:27:25.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 938 

2023-07-03 11:27:25.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 758 

2023-07-03 11:27:25.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 667 row column role 35 0 259 

2023-07-03 11:27:25.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 939 

2023-07-03 11:27:25.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 759 

2023-07-03 11:27:25.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 668 row column role 35 0 260 

2023-07-03 11:27:25.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 940 

2023-07-03 11:27:25.723 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 760 

2023-07-03 11:27:25.723 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 669 row column role 35 0 261 

2023-07-03 11:27:25.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 941 

2023-07-03 11:27:25.724 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 761 

2023-07-03 11:27:25.724 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 670 row column role 35 0 262 

2023-07-03 11:27:25.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 942 

2023-07-03 11:27:25.724 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 762 

2023-07-03 11:27:25.725 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 671 row column role 35 0 263 

2023-07-03 11:27:25.725 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 943 

2023-07-03 11:27:25.725 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 763 

2023-07-03 11:27:25.725 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 672 row column role 35 0 264 

2023-07-03 11:27:25.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 944 

2023-07-03 11:27:25.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 764 

2023-07-03 11:27:25.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 673 row column role 35 0 265 

2023-07-03 11:27:25.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 945 

2023-07-03 11:27:25.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 765 

2023-07-03 11:27:25.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 674 row column role 35 0 266 

2023-07-03 11:27:25.727 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 946 

2023-07-03 11:27:25.727 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 766 

2023-07-03 11:27:25.727 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 675 row column role 35 0 267 

2023-07-03 11:27:25.728 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 947 

2023-07-03 11:27:25.728 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 767 

2023-07-03 11:27:25.728 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 676 row column role 35 0 268 

2023-07-03 11:27:25.728 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 948 

2023-07-03 11:27:25.728 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 768 

2023-07-03 11:27:25.728 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 677 row column role 35 0 269 

2023-07-03 11:27:25.729 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 949 

2023-07-03 11:27:25.729 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 769 

2023-07-03 11:27:25.729 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 678 row column role 35 0 270 

2023-07-03 11:27:25.729 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 950 

2023-07-03 11:27:25.730 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 770 

2023-07-03 11:27:25.730 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 679 row column role 35 0 271 

2023-07-03 11:27:25.730 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 951 

2023-07-03 11:27:25.730 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 771 

2023-07-03 11:27:25.730 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 680 row column role 35 0 272 

2023-07-03 11:27:25.730 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 952 

2023-07-03 11:27:25.730 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 772 

2023-07-03 11:27:25.730 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 681 row column role 35 0 273 

2023-07-03 11:27:25.731 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 953 

2023-07-03 11:27:25.731 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 773 

2023-07-03 11:27:25.731 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 682 row column role 35 0 274 

2023-07-03 11:27:25.731 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 954 

2023-07-03 11:27:25.731 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 774 

2023-07-03 11:27:25.731 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 683 row column role 35 0 275 

2023-07-03 11:27:25.779 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 955 

2023-07-03 11:27:25.779 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 775 

2023-07-03 11:27:25.779 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 684 row column role 36 0 257 

2023-07-03 11:27:25.779 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 956 

2023-07-03 11:27:25.779 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 776 

2023-07-03 11:27:25.779 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 685 row column role 36 0 258 

2023-07-03 11:27:25.780 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 957 

2023-07-03 11:27:25.780 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 777 

2023-07-03 11:27:25.780 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 686 row column role 36 0 259 

2023-07-03 11:27:25.780 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 958 

2023-07-03 11:27:25.780 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 778 

2023-07-03 11:27:25.780 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 687 row column role 36 0 260 

2023-07-03 11:27:25.780 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 959 

2023-07-03 11:27:25.780 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 779 

2023-07-03 11:27:25.780 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 688 row column role 36 0 261 

2023-07-03 11:27:25.781 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 960 

2023-07-03 11:27:25.781 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 780 

2023-07-03 11:27:25.781 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 689 row column role 36 0 262 

2023-07-03 11:27:25.781 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 961 

2023-07-03 11:27:25.781 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 781 

2023-07-03 11:27:25.781 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 690 row column role 36 0 263 

2023-07-03 11:27:25.781 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 962 

2023-07-03 11:27:25.781 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 782 

2023-07-03 11:27:25.782 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 691 row column role 36 0 264 

2023-07-03 11:27:25.782 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 963 

2023-07-03 11:27:25.782 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 783 

2023-07-03 11:27:25.782 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 692 row column role 36 0 265 

2023-07-03 11:27:25.782 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 964 

2023-07-03 11:27:25.782 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 784 

2023-07-03 11:27:25.782 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 693 row column role 36 0 266 

2023-07-03 11:27:25.783 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 965 

2023-07-03 11:27:25.783 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 785 

2023-07-03 11:27:25.783 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 694 row column role 36 0 267 

2023-07-03 11:27:25.783 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 966 

2023-07-03 11:27:25.783 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 786 

2023-07-03 11:27:25.783 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 695 row column role 36 0 268 

2023-07-03 11:27:25.783 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 967 

2023-07-03 11:27:25.783 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 787 

2023-07-03 11:27:25.783 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 696 row column role 36 0 269 

2023-07-03 11:27:25.784 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 968 

2023-07-03 11:27:25.784 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 788 

2023-07-03 11:27:25.784 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 697 row column role 36 0 270 

2023-07-03 11:27:25.784 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 969 

2023-07-03 11:27:25.784 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 789 

2023-07-03 11:27:25.784 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 698 row column role 36 0 271 

2023-07-03 11:27:25.784 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 970 

2023-07-03 11:27:25.784 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 790 

2023-07-03 11:27:25.784 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 699 row column role 36 0 272 

2023-07-03 11:27:25.785 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 971 

2023-07-03 11:27:25.785 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 791 

2023-07-03 11:27:25.785 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 700 row column role 36 0 273 

2023-07-03 11:27:25.785 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 972 

2023-07-03 11:27:25.785 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 792 

2023-07-03 11:27:25.785 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 701 row column role 36 0 274 

2023-07-03 11:27:25.785 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 973 

2023-07-03 11:27:25.785 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 793 

2023-07-03 11:27:25.785 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 702 row column role 36 0 275 

2023-07-03 11:27:26.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 974 

2023-07-03 11:27:26.761 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 794 

2023-07-03 11:27:26.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 703 row column role 33 0 257 

2023-07-03 11:27:26.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 975 

2023-07-03 11:27:26.761 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 795 

2023-07-03 11:27:26.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 704 row column role 33 0 258 

2023-07-03 11:27:26.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 976 

2023-07-03 11:27:26.761 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 796 

2023-07-03 11:27:26.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 705 row column role 33 0 259 

2023-07-03 11:27:26.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 977 

2023-07-03 11:27:26.763 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 797 

2023-07-03 11:27:26.763 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 706 row column role 33 0 260 

2023-07-03 11:27:26.763 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 978 

2023-07-03 11:27:26.763 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 798 

2023-07-03 11:27:26.763 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 707 row column role 33 0 261 

2023-07-03 11:27:26.763 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 979 

2023-07-03 11:27:26.763 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 799 

2023-07-03 11:27:26.763 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 708 row column role 33 0 262 

2023-07-03 11:27:26.763 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 980 

2023-07-03 11:27:26.764 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 800 

2023-07-03 11:27:26.764 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 709 row column role 33 0 263 

2023-07-03 11:27:26.764 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 981 

2023-07-03 11:27:26.764 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 801 

2023-07-03 11:27:26.764 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 710 row column role 33 0 264 

2023-07-03 11:27:26.764 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 982 

2023-07-03 11:27:26.765 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 802 

2023-07-03 11:27:26.765 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 711 row column role 33 0 265 

2023-07-03 11:27:26.765 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 983 

2023-07-03 11:27:26.765 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 803 

2023-07-03 11:27:26.765 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 712 row column role 33 0 266 

2023-07-03 11:27:26.766 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 984 

2023-07-03 11:27:26.766 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 804 

2023-07-03 11:27:26.766 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 713 row column role 33 0 267 

2023-07-03 11:27:26.766 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 985 

2023-07-03 11:27:26.766 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 805 

2023-07-03 11:27:26.766 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 714 row column role 33 0 268 

2023-07-03 11:27:26.766 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 986 

2023-07-03 11:27:26.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 806 

2023-07-03 11:27:26.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 715 row column role 33 0 269 

2023-07-03 11:27:26.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 987 

2023-07-03 11:27:26.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 807 

2023-07-03 11:27:26.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 716 row column role 33 0 270 

2023-07-03 11:27:26.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 988 

2023-07-03 11:27:26.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 808 

2023-07-03 11:27:26.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 717 row column role 33 0 271 

2023-07-03 11:27:26.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 989 

2023-07-03 11:27:26.769 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 809 

2023-07-03 11:27:26.769 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 718 row column role 33 0 272 

2023-07-03 11:27:26.769 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 990 

2023-07-03 11:27:26.769 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 810 

2023-07-03 11:27:26.769 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 719 row column role 33 0 273 

2023-07-03 11:27:26.769 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 991 

2023-07-03 11:27:26.769 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 811 

2023-07-03 11:27:26.769 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 720 row column role 33 0 274 

2023-07-03 11:27:26.769 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 992 

2023-07-03 11:27:26.769 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 812 

2023-07-03 11:27:26.769 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 721 row column role 33 0 275 

2023-07-03 11:27:26.796 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 993 

2023-07-03 11:27:26.796 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 813 

2023-07-03 11:27:26.796 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 722 row column role 34 0 257 

2023-07-03 11:27:26.796 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 994 

2023-07-03 11:27:26.796 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 814 

2023-07-03 11:27:26.796 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 723 row column role 34 0 258 

2023-07-03 11:27:26.797 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 995 

2023-07-03 11:27:26.797 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 815 

2023-07-03 11:27:26.797 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 724 row column role 34 0 259 

2023-07-03 11:27:26.797 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 996 

2023-07-03 11:27:26.797 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 816 

2023-07-03 11:27:26.797 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 725 row column role 34 0 260 

2023-07-03 11:27:26.797 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 997 

2023-07-03 11:27:26.797 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 817 

2023-07-03 11:27:26.797 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 726 row column role 34 0 261 

2023-07-03 11:27:26.798 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 998 

2023-07-03 11:27:26.798 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 818 

2023-07-03 11:27:26.798 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 727 row column role 34 0 262 

2023-07-03 11:27:26.798 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 999 

2023-07-03 11:27:26.798 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 819 

2023-07-03 11:27:26.798 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 728 row column role 34 0 263 

2023-07-03 11:27:26.798 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1000 

2023-07-03 11:27:26.798 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 820 

2023-07-03 11:27:26.799 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 729 row column role 34 0 264 

2023-07-03 11:27:26.799 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1001 

2023-07-03 11:27:26.799 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 821 

2023-07-03 11:27:26.799 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 730 row column role 34 0 265 

2023-07-03 11:27:26.799 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1002 

2023-07-03 11:27:26.799 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 822 

2023-07-03 11:27:26.799 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 731 row column role 34 0 266 

2023-07-03 11:27:26.799 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1003 

2023-07-03 11:27:26.799 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 823 

2023-07-03 11:27:26.800 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 732 row column role 34 0 267 

2023-07-03 11:27:26.800 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1004 

2023-07-03 11:27:26.800 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 824 

2023-07-03 11:27:26.800 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 733 row column role 34 0 268 

2023-07-03 11:27:26.800 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1005 

2023-07-03 11:27:26.800 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 825 

2023-07-03 11:27:26.800 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 734 row column role 34 0 269 

2023-07-03 11:27:26.800 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1006 

2023-07-03 11:27:26.801 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 826 

2023-07-03 11:27:26.801 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 735 row column role 34 0 270 

2023-07-03 11:27:26.801 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1007 

2023-07-03 11:27:26.801 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 827 

2023-07-03 11:27:26.801 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 736 row column role 34 0 271 

2023-07-03 11:27:26.801 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1008 

2023-07-03 11:27:26.801 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 828 

2023-07-03 11:27:26.801 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 737 row column role 34 0 272 

2023-07-03 11:27:26.801 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1009 

2023-07-03 11:27:26.801 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 829 

2023-07-03 11:27:26.801 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 738 row column role 34 0 273 

2023-07-03 11:27:26.802 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1010 

2023-07-03 11:27:26.802 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 830 

2023-07-03 11:27:26.802 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 739 row column role 34 0 274 

2023-07-03 11:27:26.802 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1011 

2023-07-03 11:27:26.802 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 831 

2023-07-03 11:27:26.802 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 740 row column role 34 0 275 

2023-07-03 11:27:26.882 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1012 

2023-07-03 11:27:26.882 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 832 

2023-07-03 11:27:26.882 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 741 row column role 35 0 257 

2023-07-03 11:27:26.883 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1013 

2023-07-03 11:27:26.883 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 833 

2023-07-03 11:27:26.883 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 742 row column role 35 0 258 

2023-07-03 11:27:26.883 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1014 

2023-07-03 11:27:26.883 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 834 

2023-07-03 11:27:26.884 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 743 row column role 35 0 259 

2023-07-03 11:27:26.884 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1015 

2023-07-03 11:27:26.884 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 835 

2023-07-03 11:27:26.884 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 744 row column role 35 0 260 

2023-07-03 11:27:26.884 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1016 

2023-07-03 11:27:26.884 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 836 

2023-07-03 11:27:26.884 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 745 row column role 35 0 261 

2023-07-03 11:27:26.885 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1017 

2023-07-03 11:27:26.885 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 837 

2023-07-03 11:27:26.885 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 746 row column role 35 0 262 

2023-07-03 11:27:26.885 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1018 

2023-07-03 11:27:26.885 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 838 

2023-07-03 11:27:26.885 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 747 row column role 35 0 263 

2023-07-03 11:27:26.886 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1019 

2023-07-03 11:27:26.886 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 839 

2023-07-03 11:27:26.886 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 748 row column role 35 0 264 

2023-07-03 11:27:26.886 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1020 

2023-07-03 11:27:26.886 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 840 

2023-07-03 11:27:26.886 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 749 row column role 35 0 265 

2023-07-03 11:27:26.887 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1021 

2023-07-03 11:27:26.887 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 841 

2023-07-03 11:27:26.887 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 750 row column role 35 0 266 

2023-07-03 11:27:26.887 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1022 

2023-07-03 11:27:26.887 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 842 

2023-07-03 11:27:26.887 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 751 row column role 35 0 267 

2023-07-03 11:27:26.888 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1023 

2023-07-03 11:27:26.888 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 843 

2023-07-03 11:27:26.888 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 752 row column role 35 0 268 

2023-07-03 11:27:26.888 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1024 

2023-07-03 11:27:26.888 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 844 

2023-07-03 11:27:26.888 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 753 row column role 35 0 269 

2023-07-03 11:27:26.888 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1025 

2023-07-03 11:27:26.889 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 845 

2023-07-03 11:27:26.889 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 754 row column role 35 0 270 

2023-07-03 11:27:26.889 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1026 

2023-07-03 11:27:26.889 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 846 

2023-07-03 11:27:26.889 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 755 row column role 35 0 271 

2023-07-03 11:27:26.889 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1027 

2023-07-03 11:27:26.889 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 847 

2023-07-03 11:27:26.889 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 756 row column role 35 0 272 

2023-07-03 11:27:26.890 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1028 

2023-07-03 11:27:26.890 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 848 

2023-07-03 11:27:26.890 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 757 row column role 35 0 273 

2023-07-03 11:27:26.890 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1029 

2023-07-03 11:27:26.890 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 849 

2023-07-03 11:27:26.890 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 758 row column role 35 0 274 

2023-07-03 11:27:26.890 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1030 

2023-07-03 11:27:26.891 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 850 

2023-07-03 11:27:26.891 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 759 row column role 35 0 275 

2023-07-03 11:27:28.760 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1031 

2023-07-03 11:27:28.760 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 851 

2023-07-03 11:27:28.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 760 row column role 36 0 257 

2023-07-03 11:27:28.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1032 

2023-07-03 11:27:28.761 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 852 

2023-07-03 11:27:28.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 761 row column role 36 0 258 

2023-07-03 11:27:28.762 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1033 

2023-07-03 11:27:28.762 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 853 

2023-07-03 11:27:28.762 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 762 row column role 36 0 259 

2023-07-03 11:27:28.762 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1034 

2023-07-03 11:27:28.762 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 854 

2023-07-03 11:27:28.762 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 763 row column role 36 0 260 

2023-07-03 11:27:28.763 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1035 

2023-07-03 11:27:28.763 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 855 

2023-07-03 11:27:28.763 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 764 row column role 36 0 261 

2023-07-03 11:27:28.763 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1036 

2023-07-03 11:27:28.764 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 856 

2023-07-03 11:27:28.764 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 765 row column role 36 0 262 

2023-07-03 11:27:28.764 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1037 

2023-07-03 11:27:28.764 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 857 

2023-07-03 11:27:28.764 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 766 row column role 36 0 263 

2023-07-03 11:27:28.765 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1038 

2023-07-03 11:27:28.765 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 858 

2023-07-03 11:27:28.765 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 767 row column role 36 0 264 

2023-07-03 11:27:28.765 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1039 

2023-07-03 11:27:28.765 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 859 

2023-07-03 11:27:28.765 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 768 row column role 36 0 265 

2023-07-03 11:27:28.766 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1040 

2023-07-03 11:27:28.766 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 860 

2023-07-03 11:27:28.766 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 769 row column role 36 0 266 

2023-07-03 11:27:28.766 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1041 

2023-07-03 11:27:28.766 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 861 

2023-07-03 11:27:28.766 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 770 row column role 36 0 267 

2023-07-03 11:27:28.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1042 

2023-07-03 11:27:28.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 862 

2023-07-03 11:27:28.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 771 row column role 36 0 268 

2023-07-03 11:27:28.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1043 

2023-07-03 11:27:28.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 863 

2023-07-03 11:27:28.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 772 row column role 36 0 269 

2023-07-03 11:27:28.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1044 

2023-07-03 11:27:28.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 864 

2023-07-03 11:27:28.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 773 row column role 36 0 270 

2023-07-03 11:27:28.769 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1045 

2023-07-03 11:27:28.769 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 865 

2023-07-03 11:27:28.769 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 774 row column role 36 0 271 

2023-07-03 11:27:28.769 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1046 

2023-07-03 11:27:28.769 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 866 

2023-07-03 11:27:28.769 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 775 row column role 36 0 272 

2023-07-03 11:27:28.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1047 

2023-07-03 11:27:28.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 867 

2023-07-03 11:27:28.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 776 row column role 36 0 273 

2023-07-03 11:27:28.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1048 

2023-07-03 11:27:28.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 868 

2023-07-03 11:27:28.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 777 row column role 36 0 274 

2023-07-03 11:27:28.771 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1049 

2023-07-03 11:27:28.771 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 869 

2023-07-03 11:27:28.771 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 778 row column role 36 0 275 

2023-07-03 11:27:28.825 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1050 

2023-07-03 11:27:28.825 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 870 

2023-07-03 11:27:28.826 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 779 row column role 37 0 257 

2023-07-03 11:27:28.826 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1051 

2023-07-03 11:27:28.826 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 871 

2023-07-03 11:27:28.826 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 780 row column role 37 0 258 

2023-07-03 11:27:28.827 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1052 

2023-07-03 11:27:28.827 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 872 

2023-07-03 11:27:28.827 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 781 row column role 37 0 259 

2023-07-03 11:27:28.828 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1053 

2023-07-03 11:27:28.828 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 873 

2023-07-03 11:27:28.828 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 782 row column role 37 0 260 

2023-07-03 11:27:28.828 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1054 

2023-07-03 11:27:28.829 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 874 

2023-07-03 11:27:28.829 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 783 row column role 37 0 261 

2023-07-03 11:27:28.829 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1055 

2023-07-03 11:27:28.829 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 875 

2023-07-03 11:27:28.829 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 784 row column role 37 0 262 

2023-07-03 11:27:28.830 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1056 

2023-07-03 11:27:28.830 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 876 

2023-07-03 11:27:28.830 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 785 row column role 37 0 263 

2023-07-03 11:27:28.831 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1057 

2023-07-03 11:27:28.831 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 877 

2023-07-03 11:27:28.831 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 786 row column role 37 0 264 

2023-07-03 11:27:28.831 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1058 

2023-07-03 11:27:28.832 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 878 

2023-07-03 11:27:28.832 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 787 row column role 37 0 265 

2023-07-03 11:27:28.832 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1059 

2023-07-03 11:27:28.832 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 879 

2023-07-03 11:27:28.832 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 788 row column role 37 0 266 

2023-07-03 11:27:28.833 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1060 

2023-07-03 11:27:28.833 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 880 

2023-07-03 11:27:28.833 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 789 row column role 37 0 267 

2023-07-03 11:27:28.834 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1061 

2023-07-03 11:27:28.834 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 881 

2023-07-03 11:27:28.834 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 790 row column role 37 0 268 

2023-07-03 11:27:28.834 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1062 

2023-07-03 11:27:28.834 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 882 

2023-07-03 11:27:28.834 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 791 row column role 37 0 269 

2023-07-03 11:27:28.835 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1063 

2023-07-03 11:27:28.835 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 883 

2023-07-03 11:27:28.835 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 792 row column role 37 0 270 

2023-07-03 11:27:28.836 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1064 

2023-07-03 11:27:28.836 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 884 

2023-07-03 11:27:28.836 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 793 row column role 37 0 271 

2023-07-03 11:27:28.837 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1065 

2023-07-03 11:27:28.837 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 885 

2023-07-03 11:27:28.837 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 794 row column role 37 0 272 

2023-07-03 11:27:28.837 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1066 

2023-07-03 11:27:28.837 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 886 

2023-07-03 11:27:28.837 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 795 row column role 37 0 273 

2023-07-03 11:27:28.838 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1067 

2023-07-03 11:27:28.838 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 887 

2023-07-03 11:27:28.838 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 796 row column role 37 0 274 

2023-07-03 11:27:28.839 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1068 

2023-07-03 11:27:28.839 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 888 

2023-07-03 11:27:28.839 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 797 row column role 37 0 275 

2023-07-03 11:27:28.860 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1069 

2023-07-03 11:27:28.860 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 889 

2023-07-03 11:27:28.860 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 798 row column role 37 0 257 

2023-07-03 11:27:28.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1070 

2023-07-03 11:27:28.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 890 

2023-07-03 11:27:28.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 799 row column role 37 0 258 

2023-07-03 11:27:28.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1071 

2023-07-03 11:27:28.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 891 

2023-07-03 11:27:28.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 800 row column role 37 0 259 

2023-07-03 11:27:28.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1072 

2023-07-03 11:27:28.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 892 

2023-07-03 11:27:28.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 801 row column role 37 0 260 

2023-07-03 11:27:28.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1073 

2023-07-03 11:27:28.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 893 

2023-07-03 11:27:28.862 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 802 row column role 37 0 261 

2023-07-03 11:27:28.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1074 

2023-07-03 11:27:28.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 894 

2023-07-03 11:27:28.862 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 803 row column role 37 0 262 

2023-07-03 11:27:28.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1075 

2023-07-03 11:27:28.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 895 

2023-07-03 11:27:28.862 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 804 row column role 37 0 263 

2023-07-03 11:27:28.863 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1076 

2023-07-03 11:27:28.863 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 896 

2023-07-03 11:27:28.863 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 805 row column role 37 0 264 

2023-07-03 11:27:28.863 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1077 

2023-07-03 11:27:28.863 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 897 

2023-07-03 11:27:28.863 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 806 row column role 37 0 265 

2023-07-03 11:27:28.863 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1078 

2023-07-03 11:27:28.863 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 898 

2023-07-03 11:27:28.863 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 807 row column role 37 0 266 

2023-07-03 11:27:28.864 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1079 

2023-07-03 11:27:28.864 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 899 

2023-07-03 11:27:28.864 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 808 row column role 37 0 267 

2023-07-03 11:27:28.864 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1080 

2023-07-03 11:27:28.864 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 900 

2023-07-03 11:27:28.864 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 809 row column role 37 0 268 

2023-07-03 11:27:28.864 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1081 

2023-07-03 11:27:28.864 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 901 

2023-07-03 11:27:28.864 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 810 row column role 37 0 269 

2023-07-03 11:27:28.865 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1082 

2023-07-03 11:27:28.865 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 902 

2023-07-03 11:27:28.865 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 811 row column role 37 0 270 

2023-07-03 11:27:28.865 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1083 

2023-07-03 11:27:28.865 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 903 

2023-07-03 11:27:28.865 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 812 row column role 37 0 271 

2023-07-03 11:27:28.865 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1084 

2023-07-03 11:27:28.865 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 904 

2023-07-03 11:27:28.865 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 813 row column role 37 0 272 

2023-07-03 11:27:28.865 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1085 

2023-07-03 11:27:28.865 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 905 

2023-07-03 11:27:28.865 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 814 row column role 37 0 273 

2023-07-03 11:27:28.866 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1086 

2023-07-03 11:27:28.866 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 906 

2023-07-03 11:27:28.866 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 815 row column role 37 0 274 

2023-07-03 11:27:28.866 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1087 

2023-07-03 11:27:28.866 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 907 

2023-07-03 11:27:28.866 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 816 row column role 37 0 275 

2023-07-03 11:27:28.930 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1088 

2023-07-03 11:27:28.930 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 908 

2023-07-03 11:27:28.930 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 817 row column role 38 0 257 

2023-07-03 11:27:28.931 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1089 

2023-07-03 11:27:28.931 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 909 

2023-07-03 11:27:28.931 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 818 row column role 38 0 258 

2023-07-03 11:27:28.931 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1090 

2023-07-03 11:27:28.931 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 910 

2023-07-03 11:27:28.932 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 819 row column role 38 0 259 

2023-07-03 11:27:28.932 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1091 

2023-07-03 11:27:28.932 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 911 

2023-07-03 11:27:28.932 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 820 row column role 38 0 260 

2023-07-03 11:27:28.933 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1092 

2023-07-03 11:27:28.933 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 912 

2023-07-03 11:27:28.933 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 821 row column role 38 0 261 

2023-07-03 11:27:28.933 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1093 

2023-07-03 11:27:28.933 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 913 

2023-07-03 11:27:28.933 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 822 row column role 38 0 262 

2023-07-03 11:27:28.934 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1094 

2023-07-03 11:27:28.934 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 914 

2023-07-03 11:27:28.934 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 823 row column role 38 0 263 

2023-07-03 11:27:28.935 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1095 

2023-07-03 11:27:28.935 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 915 

2023-07-03 11:27:28.935 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 824 row column role 38 0 264 

2023-07-03 11:27:28.935 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1096 

2023-07-03 11:27:28.935 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 916 

2023-07-03 11:27:28.935 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 825 row column role 38 0 265 

2023-07-03 11:27:28.936 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1097 

2023-07-03 11:27:28.936 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 917 

2023-07-03 11:27:28.936 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 826 row column role 38 0 266 

2023-07-03 11:27:28.937 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1098 

2023-07-03 11:27:28.937 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 918 

2023-07-03 11:27:28.937 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 827 row column role 38 0 267 

2023-07-03 11:27:28.937 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1099 

2023-07-03 11:27:28.937 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 919 

2023-07-03 11:27:28.937 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 828 row column role 38 0 268 

2023-07-03 11:27:28.938 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1100 

2023-07-03 11:27:28.938 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 920 

2023-07-03 11:27:28.938 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 829 row column role 38 0 269 

2023-07-03 11:27:28.939 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1101 

2023-07-03 11:27:28.939 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 921 

2023-07-03 11:27:28.939 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 830 row column role 38 0 270 

2023-07-03 11:27:28.939 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1102 

2023-07-03 11:27:28.939 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 922 

2023-07-03 11:27:28.939 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 831 row column role 38 0 271 

2023-07-03 11:27:28.939 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1103 

2023-07-03 11:27:28.940 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 923 

2023-07-03 11:27:28.940 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 832 row column role 38 0 272 

2023-07-03 11:27:28.940 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1104 

2023-07-03 11:27:28.940 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 924 

2023-07-03 11:27:28.940 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 833 row column role 38 0 273 

2023-07-03 11:27:28.940 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1105 

2023-07-03 11:27:28.940 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 925 

2023-07-03 11:27:28.940 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 834 row column role 38 0 274 

2023-07-03 11:27:28.941 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1106 

2023-07-03 11:27:28.941 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 926 

2023-07-03 11:27:28.941 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 835 row column role 38 0 275 

2023-07-03 11:27:28.987 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1107 

2023-07-03 11:27:28.987 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 927 

2023-07-03 11:27:28.987 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 836 row column role 39 0 257 

2023-07-03 11:27:28.987 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1108 

2023-07-03 11:27:28.987 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 928 

2023-07-03 11:27:28.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 837 row column role 39 0 258 

2023-07-03 11:27:28.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1109 

2023-07-03 11:27:28.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 929 

2023-07-03 11:27:28.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 838 row column role 39 0 259 

2023-07-03 11:27:28.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1110 

2023-07-03 11:27:28.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 930 

2023-07-03 11:27:28.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 839 row column role 39 0 260 

2023-07-03 11:27:28.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1111 

2023-07-03 11:27:28.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 931 

2023-07-03 11:27:28.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 840 row column role 39 0 261 

2023-07-03 11:27:28.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1112 

2023-07-03 11:27:28.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 932 

2023-07-03 11:27:28.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 841 row column role 39 0 262 

2023-07-03 11:27:28.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1113 

2023-07-03 11:27:28.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 933 

2023-07-03 11:27:28.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 842 row column role 39 0 263 

2023-07-03 11:27:28.990 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1114 

2023-07-03 11:27:28.990 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 934 

2023-07-03 11:27:28.990 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 843 row column role 39 0 264 

2023-07-03 11:27:28.990 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1115 

2023-07-03 11:27:28.990 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 935 

2023-07-03 11:27:28.990 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 844 row column role 39 0 265 

2023-07-03 11:27:28.990 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1116 

2023-07-03 11:27:28.991 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 936 

2023-07-03 11:27:28.991 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 845 row column role 39 0 266 

2023-07-03 11:27:28.991 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1117 

2023-07-03 11:27:28.991 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 937 

2023-07-03 11:27:28.991 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 846 row column role 39 0 267 

2023-07-03 11:27:28.991 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1118 

2023-07-03 11:27:28.991 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 938 

2023-07-03 11:27:28.991 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 847 row column role 39 0 268 

2023-07-03 11:27:28.992 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1119 

2023-07-03 11:27:28.992 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 939 

2023-07-03 11:27:28.992 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 848 row column role 39 0 269 

2023-07-03 11:27:28.992 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1120 

2023-07-03 11:27:28.992 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 940 

2023-07-03 11:27:28.992 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 849 row column role 39 0 270 

2023-07-03 11:27:28.992 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1121 

2023-07-03 11:27:28.993 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 941 

2023-07-03 11:27:28.993 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 850 row column role 39 0 271 

2023-07-03 11:27:28.993 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1122 

2023-07-03 11:27:28.993 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 942 

2023-07-03 11:27:28.993 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 851 row column role 39 0 272 

2023-07-03 11:27:28.993 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1123 

2023-07-03 11:27:28.993 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 943 

2023-07-03 11:27:28.993 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 852 row column role 39 0 273 

2023-07-03 11:27:28.993 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1124 

2023-07-03 11:27:28.994 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 944 

2023-07-03 11:27:28.994 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 853 row column role 39 0 274 

2023-07-03 11:27:28.994 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1125 

2023-07-03 11:27:28.994 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 945 

2023-07-03 11:27:28.994 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 854 row column role 39 0 275 

2023-07-03 11:27:29.321 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1126 

2023-07-03 11:27:29.321 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 946 

2023-07-03 11:27:29.321 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 855 row column role 40 0 257 

2023-07-03 11:27:29.322 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1127 

2023-07-03 11:27:29.322 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 947 

2023-07-03 11:27:29.322 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 856 row column role 40 0 258 

2023-07-03 11:27:29.323 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1128 

2023-07-03 11:27:29.323 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 948 

2023-07-03 11:27:29.323 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 857 row column role 40 0 259 

2023-07-03 11:27:29.323 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1129 

2023-07-03 11:27:29.323 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 949 

2023-07-03 11:27:29.323 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 858 row column role 40 0 260 

2023-07-03 11:27:29.324 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1130 

2023-07-03 11:27:29.324 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 950 

2023-07-03 11:27:29.324 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 859 row column role 40 0 261 

2023-07-03 11:27:29.325 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1131 

2023-07-03 11:27:29.325 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 951 

2023-07-03 11:27:29.325 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 860 row column role 40 0 262 

2023-07-03 11:27:29.325 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1132 

2023-07-03 11:27:29.325 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 952 

2023-07-03 11:27:29.325 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 861 row column role 40 0 263 

2023-07-03 11:27:29.326 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1133 

2023-07-03 11:27:29.326 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 953 

2023-07-03 11:27:29.326 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 862 row column role 40 0 264 

2023-07-03 11:27:29.326 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1134 

2023-07-03 11:27:29.327 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 954 

2023-07-03 11:27:29.327 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 863 row column role 40 0 265 

2023-07-03 11:27:29.327 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1135 

2023-07-03 11:27:29.327 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 955 

2023-07-03 11:27:29.327 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 864 row column role 40 0 266 

2023-07-03 11:27:29.328 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1136 

2023-07-03 11:27:29.328 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 956 

2023-07-03 11:27:29.328 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 865 row column role 40 0 267 

2023-07-03 11:27:29.329 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1137 

2023-07-03 11:27:29.329 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 957 

2023-07-03 11:27:29.329 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 866 row column role 40 0 268 

2023-07-03 11:27:29.329 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1138 

2023-07-03 11:27:29.329 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 958 

2023-07-03 11:27:29.329 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 867 row column role 40 0 269 

2023-07-03 11:27:29.330 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1139 

2023-07-03 11:27:29.330 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 959 

2023-07-03 11:27:29.330 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 868 row column role 40 0 270 

2023-07-03 11:27:29.331 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1140 

2023-07-03 11:27:29.331 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 960 

2023-07-03 11:27:29.331 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 869 row column role 40 0 271 

2023-07-03 11:27:29.331 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1141 

2023-07-03 11:27:29.331 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 961 

2023-07-03 11:27:29.332 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 870 row column role 40 0 272 

2023-07-03 11:27:29.332 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1142 

2023-07-03 11:27:29.332 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 962 

2023-07-03 11:27:29.332 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 871 row column role 40 0 273 

2023-07-03 11:27:29.333 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1143 

2023-07-03 11:27:29.333 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 963 

2023-07-03 11:27:29.333 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 872 row column role 40 0 274 

2023-07-03 11:27:29.333 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1144 

2023-07-03 11:27:29.334 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 964 

2023-07-03 11:27:29.334 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 873 row column role 40 0 275 

2023-07-03 11:27:29.445 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1145 

2023-07-03 11:27:29.446 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 965 

2023-07-03 11:27:29.446 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 874 row column role 41 0 257 

2023-07-03 11:27:29.446 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1146 

2023-07-03 11:27:29.446 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 966 

2023-07-03 11:27:29.447 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 875 row column role 41 0 258 

2023-07-03 11:27:29.447 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1147 

2023-07-03 11:27:29.447 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 967 

2023-07-03 11:27:29.447 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 876 row column role 41 0 259 

2023-07-03 11:27:29.447 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1148 

2023-07-03 11:27:29.448 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 968 

2023-07-03 11:27:29.448 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 877 row column role 41 0 260 

2023-07-03 11:27:29.448 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1149 

2023-07-03 11:27:29.448 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 969 

2023-07-03 11:27:29.448 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 878 row column role 41 0 261 

2023-07-03 11:27:29.449 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1150 

2023-07-03 11:27:29.449 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 970 

2023-07-03 11:27:29.449 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 879 row column role 41 0 262 

2023-07-03 11:27:29.449 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1151 

2023-07-03 11:27:29.449 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 971 

2023-07-03 11:27:29.450 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 880 row column role 41 0 263 

2023-07-03 11:27:29.450 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1152 

2023-07-03 11:27:29.450 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 972 

2023-07-03 11:27:29.450 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 881 row column role 41 0 264 

2023-07-03 11:27:29.450 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1153 

2023-07-03 11:27:29.450 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 973 

2023-07-03 11:27:29.451 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 882 row column role 41 0 265 

2023-07-03 11:27:29.451 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1154 

2023-07-03 11:27:29.451 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 974 

2023-07-03 11:27:29.451 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 883 row column role 41 0 266 

2023-07-03 11:27:29.452 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1155 

2023-07-03 11:27:29.452 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 975 

2023-07-03 11:27:29.452 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 884 row column role 41 0 267 

2023-07-03 11:27:29.452 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1156 

2023-07-03 11:27:29.452 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 976 

2023-07-03 11:27:29.452 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 885 row column role 41 0 268 

2023-07-03 11:27:29.453 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1157 

2023-07-03 11:27:29.453 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 977 

2023-07-03 11:27:29.453 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 886 row column role 41 0 269 

2023-07-03 11:27:29.453 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1158 

2023-07-03 11:27:29.453 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 978 

2023-07-03 11:27:29.454 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 887 row column role 41 0 270 

2023-07-03 11:27:29.454 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1159 

2023-07-03 11:27:29.454 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 979 

2023-07-03 11:27:29.454 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 888 row column role 41 0 271 

2023-07-03 11:27:29.455 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1160 

2023-07-03 11:27:29.455 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 980 

2023-07-03 11:27:29.455 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 889 row column role 41 0 272 

2023-07-03 11:27:29.455 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1161 

2023-07-03 11:27:29.455 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 981 

2023-07-03 11:27:29.455 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 890 row column role 41 0 273 

2023-07-03 11:27:29.455 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1162 

2023-07-03 11:27:29.455 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 982 

2023-07-03 11:27:29.456 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 891 row column role 41 0 274 

2023-07-03 11:27:29.456 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1163 

2023-07-03 11:27:29.456 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 90 983 

2023-07-03 11:27:29.456 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 892 row column role 41 0 275 

2023-07-03 11:28:56.813 DBG qml: Keys.onEscapePressed: Seva All view Page 
2023-07-03 11:28:56.813 DBG qml:  In onLoadSevaBookingView
2023-07-03 11:28:56.847 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:28:56.853 DBG qml: state changedinitial
2023-07-03 11:28:56.856 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:28:56.856 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Cannot assign to non-existent property "onDefaultDates"
2023-07-03 11:28:56.856 WRN default: qrc:/ui/SevaDateTime.qml:97:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:28:56.856 WRN default: qrc:/ui/SevaDateTime.qml:91:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:28:56.922 DBG qml: my seva delegate is created
2023-07-03 11:28:56.922 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:28:56.922 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:28:56.922 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:28:56.922 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:28:56.922 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:28:56.922 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:28:56.922 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:28:56.922 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:28:56.922 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:28:56.922 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:28:56.922 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:28:56.922 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:28:56.922 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:28:56.922 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:28:56.922 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:28:56.922 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:28:56.922 DBG qml: --------------- onCurrentIndexChanged: of combo box sevaListView1
2023-07-03 11:28:56.922 DBG qml:  Index =0
2023-07-03 11:28:56.922 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:28:56.922 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:28:56.922 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:28:56.922 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:28:56.922 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:28:56.922 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:28:56.922 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:28:56.922 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:28:56.922 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:28:56.922 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:28:56.922 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:28:56.922 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:28:56.922 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:28:56.922 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:28:56.922 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:28:56.922 DBG qml:  Seva Type Changed: 0
2023-07-03 11:28:56.922 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:28:56.923 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:28:56.923 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:28:56.923 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:28:56.923 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:28:56.923 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:28:56.923 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:28:56.923 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:28:56.923 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:28:56.923 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:28:56.923 DBG qml: my seva delegate is created
2023-07-03 11:28:56.923 DBG qml:  Current Index changed0
2023-07-03 11:28:56.923 DBG qml:  VIEW-1 - Index =0
2023-07-03 11:28:56.923 DBG qml:  Seva Selected =0
2023-07-03 11:28:56.923 DBG default: SevaName* SevaViewProxy::getSevaByIndex(int) 0 

2023-07-03 11:28:56.923 DBG default: current.... seva model 

2023-07-03 11:28:56.923 DBG default: current seva model SevaListViewModel(0x1b5027e0) 

2023-07-03 11:28:56.923 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int) (SevaName(0x97eb488)) 

2023-07-03 11:28:56.923 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int)  Index requested 1= 0 

2023-07-03 11:28:56.923 DBG qml:  Seva Details =0
2023-07-03 11:28:56.923 DBG default: void SevaName::print()  Seva Name   = "Nithya Archane"
2023-07-03 11:28:56.923 DBG default: void SevaName::print()  Seva ID     = 102
2023-07-03 11:28:56.923 DBG default: void SevaName::print()  Seva Number = 102
2023-07-03 11:28:56.923 DBG default: void SevaName::print()  Seva        = 0
2023-07-03 11:28:56.923 DBG default: void SevaName::print()  Seva Date   = "2021-11-25"
2023-07-03 11:28:56.923 DBG default: void SevaName::print()  Seva Type   = 0
2023-07-03 11:28:56.923 DBG default: void SevaName::print()  Seva Cost   = 0
2023-07-03 11:28:56.923 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-03 11:28:56.923 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-03 11:28:56.923 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-03 11:28:56.924 DBG qml: seva name  = Nithya Archane Seva cost = 0
2023-07-03 11:28:56.924 DBG default: QStringList SevaViewProxy::getGothras() 

2023-07-03 11:28:56.924 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:28:56.924 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-07-03 11:28:56.924 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Vashistha", "", "Puthamanasa", "Shrivathsa", "Sankhyayanasa", "Jamadagni", "Harithasa", "Kashyapa", "Maudgalya", "Bharadwaja", "Gargeyyesa", "Mounabharghava", "Dhananjaya", "Kaundinya", "Galava", "Athreyasa", "Vishwamitra", "Kaushika", "Gouthama") 

2023-07-03 11:28:56.924 DBG qml: ********* In setGothras function  *********** = 0
2023-07-03 11:28:56.924 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-07-03 11:28:56.924 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:28:56.924 DBG qml: ********* In set nakshatra function  *********** = 0
2023-07-03 11:28:56.924 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:28:56.924 DBG qml: Current Text =SevaTypeViewModel(0x19caf9e0)
2023-07-03 11:28:56.924 DBG qml: Model SevaType--------: [object Object]
2023-07-03 11:28:56.924 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:28:56.924 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:28:56.924 DBG qml: Model SevaType: RAMANAVAMI SEVE
2023-07-03 11:28:56.924 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:28:56.924 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:28:56.924 DBG qml: Model SevaType: 0
2023-07-03 11:28:56.924 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:28:56.924 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:28:56.924 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:28:56.924 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:28:56.935 DBG qml: Component.onCompleted: of seva booking view
2023-07-03 11:28:56.935 DBG qml: In Component.onCompleted: of SevaPaymenConfirmationDialog
2023-07-03 11:28:56.935 DBG qml: Dialog object is ccreated in SPCD
2023-07-03 11:28:56.935 DBG default: QStringList SevaTypeNamesDataModel::getBankList() 

2023-07-03 11:28:56.935 DBG default: JsonProcessor::JsonProcessor(QObject*) 

2023-07-03 11:28:56.935 DBG default: void JsonProcessor::readBanksFromJsonToList() 

2023-07-03 11:28:56.935 DBG default: file opened 

2023-07-03 11:28:56.935 DBG default: read all 

2023-07-03 11:28:56.935 DBG default: void JsonProcessor::readBanksFromJsonToList() dddddddoooooooooooocccccccc 

2023-07-03 11:28:56.935 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:28:56.935 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:28:56.935 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:28:56.935 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:28:56.935 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:28:56.935 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:28:56.935 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:28:56.935 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:28:56.935 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:28:56.935 DBG default: virtual JsonProcessor::~JsonProcessor() 

2023-07-03 11:28:56.935 DBG qml:  Trying to get the list category
2023-07-03 11:28:56.936 WRN default: qrc:/ui/SevaDateTime.qml:89: ReferenceError: defaultDates is not defined
2023-07-03 11:28:56.936 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:28:56.936 DBG qml: Screen screenWidth size =1920
2023-07-03 11:28:56.936 DBG qml: Screen screenHeight size =1000
2023-07-03 11:28:56.936 DBG qml:  Name Status =false
2023-07-03 11:28:56.936 DBG qml:  Mobile Status =false
2023-07-03 11:28:56.936 DBG qml: Component.onCompleted: of seva list view
2023-07-03 11:28:56.936 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:28:56.936 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:28:56.936 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:28:56.936 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:28:56.936 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:28:56.936 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:28:56.936 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:28:56.936 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:28:56.936 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:28:56.936 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:28:56.936 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:28:56.936 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:28:56.936 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:28:56.936 DBG qml: Component.onCompleted of combo box sevaListView current index =0 1
2023-07-03 11:28:56.936 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:28:56.936 DBG qml: Screen screenWidth size =1920
2023-07-03 11:28:56.936 DBG qml: Screen screenHeight size =1000
2023-07-03 11:28:56.936 WRN default: qrc:/ui/SevaBookingView.qml:380:9: QML Connections: Detected function "onLoadSevaBookingView" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:28:56.936 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.936 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.936 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.936 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.937 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.940 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.943 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.943 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.943 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.944 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.944 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.944 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.944 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.944 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:56.944 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:28:58.240 DBG qml: Esc pressed in select seva type view
2023-07-03 11:28:58.240 DBG qml:  In onLoadMenuPage
2023-07-03 11:28:58.240 DBG qml: loading Menu page from main
2023-07-03 11:28:58.251 DBG qml: the accounts enable true
2023-07-03 11:28:58.251 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:28:58.251 DBG qml: Screen screenWidth size =1920
2023-07-03 11:28:58.251 DBG qml: Screen screenHeight size =1000
2023-07-03 11:28:58.251 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:28:58.251 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:28:58.251 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:28:58.251 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:29:01.689 DBG qml: Seva Booking Button Clicked
2023-07-03 11:29:01.689 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.689 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.689 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.689 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.689 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.689 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:29:01.689 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.689 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.689 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.689 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))(2015, SevaName(0x97d79e8))(2016, SevaName(0x97d7718))) 
(SevaName(0x978fdd0), SevaName(0x9790460), SevaName(0x978fec0), SevaName(0x978ffb0), SevaName(0x978fc40), SevaName(0x978fe70), SevaName(0x97e9ef8), SevaName(0x97ea678), SevaName(0x97ea128), SevaName(0x97ea718), SevaName(0x97eaad8), SevaName(0x97eb028), SevaName(0x97ea9e8), SevaName(0x97eb438), SevaName(0x97eb8e8), SevaName(0x97eb848), SevaName(0x97eb3e8), SevaName(0x97ebc58), SevaName(0x97d6fe8), SevaName(0x97d79e8), SevaName(0x97d7718)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x978fdd0), SevaName(0x9790460), SevaName(0x978fec0), SevaName(0x978ffb0), SevaName(0x978fc40), SevaName(0x978fe70), SevaName(0x97e9ef8), SevaName(0x97ea678), SevaName(0x97ea128), SevaName(0x97ea718), SevaName(0x97eaad8), SevaName(0x97eb028), SevaName(0x97ea9e8), SevaName(0x97eb438), SevaName(0x97eb8e8), SevaName(0x97eb848), SevaName(0x97eb3e8), SevaName(0x97ebc58), SevaName(0x97d6fe8), SevaName(0x97d79e8), SevaName(0x97d7718)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2, SevaName(0x978fdd0))(3, SevaName(0x9790460))(4, SevaName(0x978fec0))(6, SevaName(0x978ffb0))(7, SevaName(0x978fc40))(18, SevaName(0x978fe70))(37, SevaName(0x97e9ef8))(47, SevaName(0x97ea678))(48, SevaName(0x97ea128))(49, SevaName(0x97ea718))(75, SevaName(0x97eaad8))(85, SevaName(0x97eb028))(86, SevaName(0x97ea9e8))(101, SevaName(0x97eb438))(103, SevaName(0x97eb8e8))(104, SevaName(0x97eb848))(108, SevaName(0x97eb3e8))(121, SevaName(0x97ebc58))(125, SevaName(0x97d6fe8))(2015, SevaName(0x97d79e8))(2016, SevaName(0x97d7718))) 
(SevaName(0x978fdd0), SevaName(0x9790460), SevaName(0x978fec0), SevaName(0x978ffb0), SevaName(0x978fc40), SevaName(0x978fe70), SevaName(0x97e9ef8), SevaName(0x97ea678), SevaName(0x97ea128), SevaName(0x97ea718), SevaName(0x97eaad8), SevaName(0x97eb028), SevaName(0x97ea9e8), SevaName(0x97eb438), SevaName(0x97eb8e8), SevaName(0x97eb848), SevaName(0x97eb3e8), SevaName(0x97ebc58), SevaName(0x97d6fe8), SevaName(0x97d79e8), SevaName(0x97d7718)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))) 
(SevaName(0x97ea3f8), SevaName(0x97ea3a8), SevaName(0x97ea448), SevaName(0x97ea768), SevaName(0x97ea7b8), SevaName(0x97eada8), SevaName(0x97eb208), SevaName(0x97eb118), SevaName(0x97eab28), SevaName(0x97eb078), SevaName(0x97eb0c8), SevaName(0x97eab78), SevaName(0x97eaee8), SevaName(0x97ead08), SevaName(0x97eae98), SevaName(0x97ebcf8)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ea3f8), SevaName(0x97ea3a8), SevaName(0x97ea448), SevaName(0x97ea768), SevaName(0x97ea7b8), SevaName(0x97eada8), SevaName(0x97eb208), SevaName(0x97eb118), SevaName(0x97eab28), SevaName(0x97eb078), SevaName(0x97eb0c8), SevaName(0x97eab78), SevaName(0x97eaee8), SevaName(0x97ead08), SevaName(0x97eae98), SevaName(0x97ebcf8)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((54, SevaName(0x97ea3f8))(55, SevaName(0x97ea3a8))(56, SevaName(0x97ea448))(57, SevaName(0x97ea768))(58, SevaName(0x97ea7b8))(59, SevaName(0x97eada8))(60, SevaName(0x97eb208))(61, SevaName(0x97eb118))(62, SevaName(0x97eab28))(63, SevaName(0x97eb078))(64, SevaName(0x97eb0c8))(65, SevaName(0x97eab78))(66, SevaName(0x97eaee8))(67, SevaName(0x97ead08))(68, SevaName(0x97eae98))(120, SevaName(0x97ebcf8))) 
(SevaName(0x97ea3f8), SevaName(0x97ea3a8), SevaName(0x97ea448), SevaName(0x97ea768), SevaName(0x97ea7b8), SevaName(0x97eada8), SevaName(0x97eb208), SevaName(0x97eb118), SevaName(0x97eab28), SevaName(0x97eb078), SevaName(0x97eb0c8), SevaName(0x97eab78), SevaName(0x97eaee8), SevaName(0x97ead08), SevaName(0x97eae98), SevaName(0x97ebcf8)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 3 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))) 
(SevaName(0x9790780), SevaName(0x97906e0), SevaName(0x9790640), SevaName(0x97e9f48), SevaName(0x97ea808), SevaName(0x97ea4e8), SevaName(0x97e9e58), SevaName(0x97e9ea8), SevaName(0x97ea218), SevaName(0x97ea358), SevaName(0x97ea628), SevaName(0x97ea498), SevaName(0x97ea0d8), SevaName(0x97ea038), SevaName(0x97e9fe8), SevaName(0x97ea538), SevaName(0x97ea1c8), SevaName(0x97ea088)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9790780), SevaName(0x97906e0), SevaName(0x9790640), SevaName(0x97e9f48), SevaName(0x97ea808), SevaName(0x97ea4e8), SevaName(0x97e9e58), SevaName(0x97e9ea8), SevaName(0x97ea218), SevaName(0x97ea358), SevaName(0x97ea628), SevaName(0x97ea498), SevaName(0x97ea0d8), SevaName(0x97ea038), SevaName(0x97e9fe8), SevaName(0x97ea538), SevaName(0x97ea1c8), SevaName(0x97ea088)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 3 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((23, SevaName(0x9790780))(24, SevaName(0x97906e0))(25, SevaName(0x9790640))(26, SevaName(0x97e9f48))(27, SevaName(0x97ea808))(28, SevaName(0x97ea4e8))(29, SevaName(0x97e9e58))(30, SevaName(0x97e9ea8))(31, SevaName(0x97ea218))(34, SevaName(0x97ea358))(35, SevaName(0x97ea628))(36, SevaName(0x97ea498))(38, SevaName(0x97ea0d8))(39, SevaName(0x97ea038))(40, SevaName(0x97e9fe8))(41, SevaName(0x97ea538))(43, SevaName(0x97ea1c8))(44, SevaName(0x97ea088))) 
(SevaName(0x9790780), SevaName(0x97906e0), SevaName(0x9790640), SevaName(0x97e9f48), SevaName(0x97ea808), SevaName(0x97ea4e8), SevaName(0x97e9e58), SevaName(0x97e9ea8), SevaName(0x97ea218), SevaName(0x97ea358), SevaName(0x97ea628), SevaName(0x97ea498), SevaName(0x97ea0d8), SevaName(0x97ea038), SevaName(0x97e9fe8), SevaName(0x97ea538), SevaName(0x97ea1c8), SevaName(0x97ea088)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 4 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))) 
(SevaName(0x9790050), SevaName(0x97905f0), SevaName(0x978fc90), SevaName(0x97ea948), SevaName(0x97eaf88), SevaName(0x97eaf38), SevaName(0x97ea858), SevaName(0x97eac68)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9790050), SevaName(0x97905f0), SevaName(0x978fc90), SevaName(0x97ea948), SevaName(0x97eaf88), SevaName(0x97eaf38), SevaName(0x97ea858), SevaName(0x97eac68)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 4 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((12, SevaName(0x9790050))(13, SevaName(0x97905f0))(14, SevaName(0x978fc90))(70, SevaName(0x97ea948))(71, SevaName(0x97eaf88))(72, SevaName(0x97eaf38))(73, SevaName(0x97ea858))(76, SevaName(0x97eac68))) 
(SevaName(0x9790050), SevaName(0x97905f0), SevaName(0x978fc90), SevaName(0x97ea948), SevaName(0x97eaf88), SevaName(0x97eaf38), SevaName(0x97ea858), SevaName(0x97eac68)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 5 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))) 
(SevaName(0x97eadf8), SevaName(0x97eac18), SevaName(0x97eacb8)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eadf8), SevaName(0x97eac18), SevaName(0x97eacb8)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 5 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((78, SevaName(0x97eadf8))(79, SevaName(0x97eac18))(80, SevaName(0x97eacb8))) 
(SevaName(0x97eadf8), SevaName(0x97eac18), SevaName(0x97eacb8)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 6 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))) 
(SevaName(0x97ea998), SevaName(0x97eae48), SevaName(0x97ea8f8), SevaName(0x97ead58), SevaName(0x97eb4d8)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ea998), SevaName(0x97eae48), SevaName(0x97ea8f8), SevaName(0x97ead58), SevaName(0x97eb4d8)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 6 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((81, SevaName(0x97ea998))(82, SevaName(0x97eae48))(83, SevaName(0x97ea8f8))(84, SevaName(0x97ead58))(89, SevaName(0x97eb4d8))) 
(SevaName(0x97ea998), SevaName(0x97eae48), SevaName(0x97ea8f8), SevaName(0x97ead58), SevaName(0x97eb4d8)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 7 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))) 
(SevaName(0x97eafd8), SevaName(0x97eb578), SevaName(0x97eb898), SevaName(0x97eb5c8), SevaName(0x97eb2a8), SevaName(0x97ebb68), SevaName(0x97eb2f8), SevaName(0x97eb348), SevaName(0x97eb6b8), SevaName(0x97eb9d8), SevaName(0x97ebac8)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eafd8), SevaName(0x97eb578), SevaName(0x97eb898), SevaName(0x97eb5c8), SevaName(0x97eb2a8), SevaName(0x97ebb68), SevaName(0x97eb2f8), SevaName(0x97eb348), SevaName(0x97eb6b8), SevaName(0x97eb9d8), SevaName(0x97ebac8)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 7 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((74, SevaName(0x97eafd8))(90, SevaName(0x97eb578))(91, SevaName(0x97eb898))(92, SevaName(0x97eb5c8))(93, SevaName(0x97eb2a8))(94, SevaName(0x97ebb68))(95, SevaName(0x97eb2f8))(96, SevaName(0x97eb348))(97, SevaName(0x97eb6b8))(98, SevaName(0x97eb9d8))(99, SevaName(0x97ebac8))) 
(SevaName(0x97eafd8), SevaName(0x97eb578), SevaName(0x97eb898), SevaName(0x97eb5c8), SevaName(0x97eb2a8), SevaName(0x97ebb68), SevaName(0x97eb2f8), SevaName(0x97eb348), SevaName(0x97eb6b8), SevaName(0x97eb9d8), SevaName(0x97ebac8)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 8 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))) 
(SevaName(0x978fd80), SevaName(0x978fe20), SevaName(0x97eb938)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x978fd80), SevaName(0x978fe20), SevaName(0x97eb938)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 8 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((16, SevaName(0x978fd80))(17, SevaName(0x978fe20))(109, SevaName(0x97eb938))) 
(SevaName(0x978fd80), SevaName(0x978fe20), SevaName(0x97eb938)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 9 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))) 
(SevaName(0x9790000), SevaName(0x978fd30), SevaName(0x9790690), SevaName(0x97ea5d8), SevaName(0x97ea268), SevaName(0x97ea2b8), SevaName(0x97eb668), SevaName(0x97eb258), SevaName(0x97d6d18), SevaName(0x97d6db8)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9790000), SevaName(0x978fd30), SevaName(0x9790690), SevaName(0x97ea5d8), SevaName(0x97ea268), SevaName(0x97ea2b8), SevaName(0x97eb668), SevaName(0x97eb258), SevaName(0x97d6d18), SevaName(0x97d6db8)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 9 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((5, SevaName(0x9790000))(10, SevaName(0x978fd30))(19, SevaName(0x9790690))(46, SevaName(0x97ea5d8))(52, SevaName(0x97ea268))(53, SevaName(0x97ea2b8))(110, SevaName(0x97eb668))(113, SevaName(0x97eb258))(123, SevaName(0x97d6d18))(127, SevaName(0x97d6db8))) 
(SevaName(0x9790000), SevaName(0x978fd30), SevaName(0x9790690), SevaName(0x97ea5d8), SevaName(0x97ea268), SevaName(0x97ea2b8), SevaName(0x97eb668), SevaName(0x97eb258), SevaName(0x97d6d18), SevaName(0x97d6db8)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 10 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))) 
(SevaName(0x97ea308), SevaName(0x97ebc08)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ea308), SevaName(0x97ebc08)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 10 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((50, SevaName(0x97ea308))(112, SevaName(0x97ebc08))) 
(SevaName(0x97ea308), SevaName(0x97ebc08)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 11 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x978ff10))) 
(SevaName(0x978ff10)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x978ff10)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 11 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((9, SevaName(0x978ff10))) 
(SevaName(0x978ff10)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 12 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x9790500))) 
(SevaName(0x9790500)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9790500)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 12 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((11, SevaName(0x9790500))) 
(SevaName(0x9790500)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 13 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x978fce0))) 
(SevaName(0x978fce0)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x978fce0)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 13 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((15, SevaName(0x978fce0))) 
(SevaName(0x978fce0)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 14 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))(2017, SevaName(0x97d77b8))) 
(SevaName(0x9790730), SevaName(0x97eb988), SevaName(0x97d77b8)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x9790730), SevaName(0x97eb988), SevaName(0x97d77b8)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 14 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((20, SevaName(0x9790730))(111, SevaName(0x97eb988))(2017, SevaName(0x97d77b8))) 
(SevaName(0x9790730), SevaName(0x97eb988), SevaName(0x97d77b8)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 15 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))) 
(SevaName(0x97ea588), SevaName(0x97ea178), SevaName(0x97eb7f8), SevaName(0x97eb758), SevaName(0x97d6d68)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ea588), SevaName(0x97ea178), SevaName(0x97eb7f8), SevaName(0x97eb758), SevaName(0x97d6d68)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 15 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((42, SevaName(0x97ea588))(51, SevaName(0x97ea178))(105, SevaName(0x97eb7f8))(106, SevaName(0x97eb758))(124, SevaName(0x97d6d68))) 
(SevaName(0x97ea588), SevaName(0x97ea178), SevaName(0x97eb7f8), SevaName(0x97eb758), SevaName(0x97d6d68)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 16 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))) 
(SevaName(0x97ea6c8), SevaName(0x97eb1b8), SevaName(0x97eb398), SevaName(0x97d7038)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ea6c8), SevaName(0x97eb1b8), SevaName(0x97eb398), SevaName(0x97d7038)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 16 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((45, SevaName(0x97ea6c8))(69, SevaName(0x97eb1b8))(100, SevaName(0x97eb398))(126, SevaName(0x97d7038))) 
(SevaName(0x97ea6c8), SevaName(0x97eb1b8), SevaName(0x97eb398), SevaName(0x97d7038)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 18 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x97ea8a8))) 
(SevaName(0x97ea8a8)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ea8a8)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 18 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((77, SevaName(0x97ea8a8))) 
(SevaName(0x97ea8a8)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 19 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))) 
(SevaName(0x97eaa38), SevaName(0x97eaa88)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eaa38), SevaName(0x97eaa88)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 19 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((87, SevaName(0x97eaa38))(88, SevaName(0x97eaa88))) 
(SevaName(0x97eaa38), SevaName(0x97eaa88)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 20 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x97ebbb8))) 
(SevaName(0x97ebbb8)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97ebbb8)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 20 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((107, SevaName(0x97ebbb8))) 
(SevaName(0x97ebbb8)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 22 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x97d6f98))) 
(SevaName(0x97d6f98)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97d6f98)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 22 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((122, SevaName(0x97d6f98))) 
(SevaName(0x97d6f98)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 25 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 25 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) () 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 25 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG qml: seveListModel  for if((sevaProxy.getSevaModel(100).getSevaListViewModel/*.getSevaListViewModel*/===0))
2023-07-03 11:29:01.690 DBG qml:  countIfSevaNamesPresentInSevaTypes++ 1
2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 26 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 26 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) () 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 26 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap() 
() 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG qml: seveListModel  for if((sevaProxy.getSevaModel(100).getSevaListViewModel/*.getSevaListViewModel*/===0))
2023-07-03 11:29:01.690 DBG qml:  countIfSevaNamesPresentInSevaTypes++ 2
2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 1000 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1000 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))) 
(SevaName(0x97d73f8), SevaName(0x97d7588), SevaName(0x97d7128), SevaName(0x97d74e8), SevaName(0x97d6e08), SevaName(0x97d7088), SevaName(0x97d6f48), SevaName(0x97d7178), SevaName(0x97d6e58), SevaName(0x97d70d8), SevaName(0x97d6cc8), SevaName(0x97d71c8), SevaName(0x97d7358), SevaName(0x97d6ea8), SevaName(0x97d6ef8), SevaName(0x97d7448), SevaName(0x97d7538), SevaName(0x97d7218), SevaName(0x97d7268), SevaName(0x97d7498), SevaName(0x97d73a8), SevaName(0x97d6bd8), SevaName(0x97d6c28), SevaName(0x97d6c78), SevaName(0x97d7c18), SevaName(0x97d7da8), SevaName(0x97d7a38), SevaName(0x97d78a8), SevaName(0x97d7b78), SevaName(0x97d7bc8), SevaName(0x97d7b28), SevaName(0x97d7c68)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97d73f8), SevaName(0x97d7588), SevaName(0x97d7128), SevaName(0x97d74e8), SevaName(0x97d6e08), SevaName(0x97d7088), SevaName(0x97d6f48), SevaName(0x97d7178), SevaName(0x97d6e58), SevaName(0x97d70d8), SevaName(0x97d6cc8), SevaName(0x97d71c8), SevaName(0x97d7358), SevaName(0x97d6ea8), SevaName(0x97d6ef8), SevaName(0x97d7448), SevaName(0x97d7538), SevaName(0x97d7218), SevaName(0x97d7268), SevaName(0x97d7498), SevaName(0x97d73a8), SevaName(0x97d6bd8), SevaName(0x97d6c28), SevaName(0x97d6c78), SevaName(0x97d7c18), SevaName(0x97d7da8), SevaName(0x97d7a38), SevaName(0x97d78a8), SevaName(0x97d7b78), SevaName(0x97d7bc8), SevaName(0x97d7b28), SevaName(0x97d7c68)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 1000 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((1001, SevaName(0x97d73f8))(1002, SevaName(0x97d7588))(1003, SevaName(0x97d7128))(1004, SevaName(0x97d74e8))(1005, SevaName(0x97d6e08))(1006, SevaName(0x97d7088))(1007, SevaName(0x97d6f48))(1008, SevaName(0x97d7178))(1010, SevaName(0x97d6e58))(1011, SevaName(0x97d70d8))(1012, SevaName(0x97d6cc8))(1013, SevaName(0x97d71c8))(1014, SevaName(0x97d7358))(1015, SevaName(0x97d6ea8))(1016, SevaName(0x97d6ef8))(1017, SevaName(0x97d7448))(1018, SevaName(0x97d7538))(1019, SevaName(0x97d7218))(1020, SevaName(0x97d7268))(1021, SevaName(0x97d7498))(1022, SevaName(0x97d73a8))(1023, SevaName(0x97d6bd8))(1024, SevaName(0x97d6c28))(1025, SevaName(0x97d6c78))(1026, SevaName(0x97d7c18))(1027, SevaName(0x97d7da8))(1028, SevaName(0x97d7a38))(1029, SevaName(0x97d78a8))(1030, SevaName(0x97d7b78))(1031, SevaName(0x97d7bc8))(1032, SevaName(0x97d7b28))(1033, SevaName(0x97d7c68))) 
(SevaName(0x97d73f8), SevaName(0x97d7588), SevaName(0x97d7128), SevaName(0x97d74e8), SevaName(0x97d6e08), SevaName(0x97d7088), SevaName(0x97d6f48), SevaName(0x97d7178), SevaName(0x97d6e58), SevaName(0x97d70d8), SevaName(0x97d6cc8), SevaName(0x97d71c8), SevaName(0x97d7358), SevaName(0x97d6ea8), SevaName(0x97d6ef8), SevaName(0x97d7448), SevaName(0x97d7538), SevaName(0x97d7218), SevaName(0x97d7268), SevaName(0x97d7498), SevaName(0x97d73a8), SevaName(0x97d6bd8), SevaName(0x97d6c28), SevaName(0x97d6c78), SevaName(0x97d7c18), SevaName(0x97d7da8), SevaName(0x97d7a38), SevaName(0x97d78a8), SevaName(0x97d7b78), SevaName(0x97d7bc8), SevaName(0x97d7b28), SevaName(0x97d7c68)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 2000 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.690 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2000 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))(2009, SevaName(0x97d7df8))(2010, SevaName(0x97d78f8))(2011, SevaName(0x97d7768))(2012, SevaName(0x97d7808))(2013, SevaName(0x97d7998))(2014, SevaName(0x97d7e98))) 
(SevaName(0x97d76c8), SevaName(0x97d7948), SevaName(0x97d7f88), SevaName(0x97d7cb8), SevaName(0x97d7a88), SevaName(0x97d7858), SevaName(0x97d7d08), SevaName(0x97d7df8), SevaName(0x97d78f8), SevaName(0x97d7768), SevaName(0x97d7808), SevaName(0x97d7998), SevaName(0x97d7e98)) 

2023-07-03 11:29:01.690 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97d76c8), SevaName(0x97d7948), SevaName(0x97d7f88), SevaName(0x97d7cb8), SevaName(0x97d7a88), SevaName(0x97d7858), SevaName(0x97d7d08), SevaName(0x97d7df8), SevaName(0x97d78f8), SevaName(0x97d7768), SevaName(0x97d7808), SevaName(0x97d7998), SevaName(0x97d7e98)) 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 2000 

2023-07-03 11:29:01.690 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((2001, SevaName(0x97d76c8))(2002, SevaName(0x97d7948))(2003, SevaName(0x97d7f88))(2004, SevaName(0x97d7cb8))(2005, SevaName(0x97d7a88))(2006, SevaName(0x97d7858))(2007, SevaName(0x97d7d08))(2009, SevaName(0x97d7df8))(2010, SevaName(0x97d78f8))(2011, SevaName(0x97d7768))(2012, SevaName(0x97d7808))(2013, SevaName(0x97d7998))(2014, SevaName(0x97d7e98))) 
(SevaName(0x97d76c8), SevaName(0x97d7948), SevaName(0x97d7f88), SevaName(0x97d7cb8), SevaName(0x97d7a88), SevaName(0x97d7858), SevaName(0x97d7d08), SevaName(0x97d7df8), SevaName(0x97d78f8), SevaName(0x97d7768), SevaName(0x97d7808), SevaName(0x97d7998), SevaName(0x97d7e98)) 

2023-07-03 11:29:01.690 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.690 DBG default: int SevaTypeViewModel::getSevaTypeListSize() 

2023-07-03 11:29:01.690 DBG qml:  if of <<< countIfSevaNamesPresentInSevaTypes++ 2
2023-07-03 11:29:01.690 DBG qml: clicked on Sevabooking
2023-07-03 11:29:01.715 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.722 DBG qml: state changedinitial
2023-07-03 11:29:01.727 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:29:01.727 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Cannot assign to non-existent property "onDefaultDates"
2023-07-03 11:29:01.727 WRN default: qrc:/ui/SevaDateTime.qml:97:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:29:01.727 WRN default: qrc:/ui/SevaDateTime.qml:91:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:29:01.805 DBG qml: my seva delegate is created
2023-07-03 11:29:01.805 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:29:01.805 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:29:01.805 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:29:01.806 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:29:01.806 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:29:01.806 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:29:01.806 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.806 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.806 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.806 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.806 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:29:01.806 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:29:01.806 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:29:01.806 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:29:01.806 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:29:01.806 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.806 DBG qml: --------------- onCurrentIndexChanged: of combo box sevaListView1
2023-07-03 11:29:01.806 DBG qml:  Index =0
2023-07-03 11:29:01.806 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:29:01.806 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:29:01.806 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:29:01.806 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.806 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.806 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.806 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.806 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:29:01.806 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:29:01.806 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:29:01.806 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:29:01.806 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:29:01.806 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.806 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:29:01.806 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:29:01.806 DBG qml:  Seva Type Changed: 0
2023-07-03 11:29:01.806 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:29:01.806 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.806 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.806 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.806 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.806 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:29:01.806 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:29:01.806 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:29:01.806 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:29:01.806 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:29:01.806 DBG qml: my seva delegate is created
2023-07-03 11:29:01.807 DBG qml:  Current Index changed0
2023-07-03 11:29:01.807 DBG qml:  VIEW-1 - Index =0
2023-07-03 11:29:01.807 DBG qml:  Seva Selected =0
2023-07-03 11:29:01.807 DBG default: SevaName* SevaViewProxy::getSevaByIndex(int) 0 

2023-07-03 11:29:01.807 DBG default: current.... seva model 

2023-07-03 11:29:01.807 DBG default: current seva model SevaListViewModel(0x1b0092f8) 

2023-07-03 11:29:01.807 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int) (SevaName(0x97eb488)) 

2023-07-03 11:29:01.807 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int)  Index requested 1= 0 

2023-07-03 11:29:01.807 DBG qml:  Seva Details =0
2023-07-03 11:29:01.807 DBG default: void SevaName::print()  Seva Name   = "Nithya Archane"
2023-07-03 11:29:01.807 DBG default: void SevaName::print()  Seva ID     = 102
2023-07-03 11:29:01.807 DBG default: void SevaName::print()  Seva Number = 102
2023-07-03 11:29:01.807 DBG default: void SevaName::print()  Seva        = 0
2023-07-03 11:29:01.807 DBG default: void SevaName::print()  Seva Date   = "2021-11-25"
2023-07-03 11:29:01.807 DBG default: void SevaName::print()  Seva Type   = 0
2023-07-03 11:29:01.807 DBG default: void SevaName::print()  Seva Cost   = 0
2023-07-03 11:29:01.807 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-03 11:29:01.807 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-03 11:29:01.807 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-03 11:29:01.807 DBG qml: seva name  = Nithya Archane Seva cost = 0
2023-07-03 11:29:01.807 DBG default: QStringList SevaViewProxy::getGothras() 

2023-07-03 11:29:01.807 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.807 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-07-03 11:29:01.807 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Vashistha", "", "Puthamanasa", "Shrivathsa", "Sankhyayanasa", "Jamadagni", "Harithasa", "Kashyapa", "Maudgalya", "Bharadwaja", "Gargeyyesa", "Mounabharghava", "Dhananjaya", "Kaundinya", "Galava", "Athreyasa", "Vishwamitra", "Kaushika", "Gouthama") 

2023-07-03 11:29:01.807 DBG qml: ********* In setGothras function  *********** = 0
2023-07-03 11:29:01.807 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-07-03 11:29:01.807 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.808 DBG qml: ********* In set nakshatra function  *********** = 0
2023-07-03 11:29:01.808 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:29:01.808 DBG qml: Current Text =SevaTypeViewModel(0x19caf9e0)
2023-07-03 11:29:01.808 DBG qml: Model SevaType--------: [object Object]
2023-07-03 11:29:01.808 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:29:01.808 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:29:01.808 DBG qml: Model SevaType: RAMANAVAMI SEVE
2023-07-03 11:29:01.808 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:29:01.808 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:29:01.808 DBG qml: Model SevaType: 0
2023-07-03 11:29:01.808 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:29:01.808 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:29:01.808 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:29:01.808 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:29:01.818 DBG qml: Component.onCompleted: of seva booking view
2023-07-03 11:29:01.818 DBG qml: In Component.onCompleted: of SevaPaymenConfirmationDialog
2023-07-03 11:29:01.818 DBG qml: Dialog object is ccreated in SPCD
2023-07-03 11:29:01.818 DBG default: QStringList SevaTypeNamesDataModel::getBankList() 

2023-07-03 11:29:01.818 DBG default: JsonProcessor::JsonProcessor(QObject*) 

2023-07-03 11:29:01.818 DBG default: void JsonProcessor::readBanksFromJsonToList() 

2023-07-03 11:29:01.818 DBG default: file opened 

2023-07-03 11:29:01.818 DBG default: read all 

2023-07-03 11:29:01.818 DBG default: void JsonProcessor::readBanksFromJsonToList() dddddddoooooooooooocccccccc 

2023-07-03 11:29:01.818 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:29:01.818 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:29:01.818 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:29:01.818 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:29:01.818 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:29:01.818 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:29:01.818 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:29:01.818 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:29:01.818 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:29:01.818 DBG default: virtual JsonProcessor::~JsonProcessor() 

2023-07-03 11:29:01.820 DBG qml:  Trying to get the list category
2023-07-03 11:29:01.820 WRN default: qrc:/ui/SevaDateTime.qml:89: ReferenceError: defaultDates is not defined
2023-07-03 11:29:01.820 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:29:01.820 DBG qml: Screen screenWidth size =1920
2023-07-03 11:29:01.820 DBG qml: Screen screenHeight size =1000
2023-07-03 11:29:01.820 DBG qml:  Name Status =false
2023-07-03 11:29:01.820 DBG qml:  Mobile Status =false
2023-07-03 11:29:01.820 DBG qml: Component.onCompleted: of seva list view
2023-07-03 11:29:01.820 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:29:01.820 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:29:01.820 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:29:01.820 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:29:01.820 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:29:01.820 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:29:01.820 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:29:01.820 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:29:01.820 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:29:01.820 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:29:01.820 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:29:01.820 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:29:01.820 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:29:01.820 DBG qml: Component.onCompleted of combo box sevaListView current index =0 1
2023-07-03 11:29:01.820 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:29:01.820 DBG qml: Screen screenWidth size =1920
2023-07-03 11:29:01.820 DBG qml: Screen screenHeight size =1000
2023-07-03 11:29:01.821 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.821 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.821 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.821 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.821 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.824 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.828 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.828 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.828 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.828 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.828 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.829 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.829 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.829 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:01.829 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:29:03.977 DBG qml: show all button clicked
2023-07-03 11:29:03.977 DBG qml: Show all Data
2023-07-03 11:29:03.977 DBG default: bool SevaViewProxy::showAllData() 

2023-07-03 11:29:03.977 DBG default: void AllViewReports::clearModel()  clear data called 

2023-07-03 11:29:03.977 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^1111111^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.977 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^222222^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.978 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^3333333^^^^^^^^^^^^^^^^^^   -1 

2023-07-03 11:29:03.978 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.978 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.978 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:03.979 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.979 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:03.979 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  90 

2023-07-03 11:29:03.979 DBG default: void SevaBookingElement::print()  SNO      = "1" 

2023-07-03 11:29:03.979 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:03.979 DBG default: void SevaBookingElement::print()  Person   = "1" 

2023-07-03 11:29:03.979 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:03.979 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:03.979 DBG default:  Name = "Nagabhushan"
2023-07-03 11:29:03.979 DBG default:  Nakshatra  "Anuradha"
2023-07-03 11:29:03.979 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:29:03.979 DBG default:  Mobile  "9663650110" 

2023-07-03 11:29:03.979 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:03.979 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 90 1164 

2023-07-03 11:29:03.980 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  90 90 

2023-07-03 11:29:03.980 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 91 1165 

2023-07-03 11:29:03.980 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 91 984 

2023-07-03 11:29:03.980 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  90 

2023-07-03 11:29:03.980 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 91 1166 

2023-07-03 11:29:03.980 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 91 

2023-07-03 11:29:03.980 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  90 

2023-07-03 11:29:03.980 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.980 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.980 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:03.980 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.980 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:03.981 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  91 

2023-07-03 11:29:03.981 DBG default: void SevaBookingElement::print()  SNO      = "2" 

2023-07-03 11:29:03.981 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:03.981 DBG default: void SevaBookingElement::print()  Person   = "2" 

2023-07-03 11:29:03.981 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:03.981 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:03.981 DBG default:  Name = "Sudhanva"
2023-07-03 11:29:03.981 DBG default:  Nakshatra  ""
2023-07-03 11:29:03.981 DBG default:  Gothra  "" 

2023-07-03 11:29:03.981 DBG default:  Mobile  "9980510563" 

2023-07-03 11:29:03.981 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:03.981 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 91 1167 

2023-07-03 11:29:03.981 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  91 91 

2023-07-03 11:29:03.981 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 92 1168 

2023-07-03 11:29:03.981 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 92 985 

2023-07-03 11:29:03.981 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  91 

2023-07-03 11:29:03.981 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 92 1169 

2023-07-03 11:29:03.982 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 92 

2023-07-03 11:29:03.982 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  91 

2023-07-03 11:29:03.982 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.982 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.982 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:03.982 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.982 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:03.982 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  92 

2023-07-03 11:29:03.982 DBG default: void SevaBookingElement::print()  SNO      = "3" 

2023-07-03 11:29:03.982 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:03.982 DBG default: void SevaBookingElement::print()  Person   = "3" 

2023-07-03 11:29:03.982 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:03.983 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:03.983 DBG default:  Name = "Sachin Kulkarni"
2023-07-03 11:29:03.983 DBG default:  Nakshatra  ""
2023-07-03 11:29:03.983 DBG default:  Gothra  "" 

2023-07-03 11:29:03.983 DBG default:  Mobile  "9916962524" 

2023-07-03 11:29:03.983 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:03.983 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 92 1170 

2023-07-03 11:29:03.983 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  92 92 

2023-07-03 11:29:03.983 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 93 1171 

2023-07-03 11:29:03.983 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 93 986 

2023-07-03 11:29:03.983 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  92 

2023-07-03 11:29:03.983 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 93 1172 

2023-07-03 11:29:03.983 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 93 

2023-07-03 11:29:03.983 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  92 

2023-07-03 11:29:03.983 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.983 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.984 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:03.984 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.984 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:03.984 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  93 

2023-07-03 11:29:03.984 DBG default: void SevaBookingElement::print()  SNO      = "4" 

2023-07-03 11:29:03.984 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:29:03.984 DBG default: void SevaBookingElement::print()  Person   = "4" 

2023-07-03 11:29:03.984 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:03.984 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:03.984 DBG default:  Name = "Sham Bhat Joshi"
2023-07-03 11:29:03.984 DBG default:  Nakshatra  "Bharani"
2023-07-03 11:29:03.984 DBG default:  Gothra  "Puthamanasa" 

2023-07-03 11:29:03.984 DBG default:  Mobile  "8073869420" 

2023-07-03 11:29:03.984 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:03.984 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 93 1173 

2023-07-03 11:29:03.984 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  93 93 

2023-07-03 11:29:03.985 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 94 1174 

2023-07-03 11:29:03.985 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 94 987 

2023-07-03 11:29:03.985 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  93 

2023-07-03 11:29:03.985 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 94 1175 

2023-07-03 11:29:03.985 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 94 

2023-07-03 11:29:03.985 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  93 

2023-07-03 11:29:03.985 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.985 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.985 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:03.985 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.985 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:03.985 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  94 

2023-07-03 11:29:03.986 DBG default: void SevaBookingElement::print()  SNO      = "4" 

2023-07-03 11:29:03.986 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:29:03.986 DBG default: void SevaBookingElement::print()  Person   = "5" 

2023-07-03 11:29:03.986 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:03.986 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:03.986 DBG default:  Name = "Sham Bhat Joshi"
2023-07-03 11:29:03.986 DBG default:  Nakshatra  "Bharani"
2023-07-03 11:29:03.986 DBG default:  Gothra  "Puthamanasa" 

2023-07-03 11:29:03.986 DBG default:  Mobile  "8073869420" 

2023-07-03 11:29:03.986 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:03.986 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 94 1176 

2023-07-03 11:29:03.986 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  94 94 

2023-07-03 11:29:03.986 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 95 1177 

2023-07-03 11:29:03.986 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 95 988 

2023-07-03 11:29:03.986 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  94 

2023-07-03 11:29:03.986 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 95 1178 

2023-07-03 11:29:03.986 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 95 

2023-07-03 11:29:03.986 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  94 

2023-07-03 11:29:03.987 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.987 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.987 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:03.987 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.987 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:03.987 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  95 

2023-07-03 11:29:03.987 DBG default: void SevaBookingElement::print()  SNO      = "5" 

2023-07-03 11:29:03.987 DBG default: void SevaBookingElement::print()  SName    = "Panchamrutha/Abhisheka" 

2023-07-03 11:29:03.987 DBG default: void SevaBookingElement::print()  Person   = "6" 

2023-07-03 11:29:03.987 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:03.987 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:03.987 DBG default:  Name = "Vijayendra Kulkarni"
2023-07-03 11:29:03.988 DBG default:  Nakshatra  "Vishakha"
2023-07-03 11:29:03.988 DBG default:  Gothra  "Shrivathsa" 

2023-07-03 11:29:03.988 DBG default:  Mobile  "9880470969" 

2023-07-03 11:29:03.988 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:03.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 95 1179 

2023-07-03 11:29:03.988 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  95 95 

2023-07-03 11:29:03.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 96 1180 

2023-07-03 11:29:03.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 96 989 

2023-07-03 11:29:03.988 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  95 

2023-07-03 11:29:03.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 96 1181 

2023-07-03 11:29:03.988 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 96 

2023-07-03 11:29:03.988 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  95 

2023-07-03 11:29:03.988 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.988 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.988 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:03.988 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.989 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:03.989 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  96 

2023-07-03 11:29:03.989 DBG default: void SevaBookingElement::print()  SNO      = "6" 

2023-07-03 11:29:03.989 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:29:03.989 DBG default: void SevaBookingElement::print()  Person   = "7" 

2023-07-03 11:29:03.989 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:03.989 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:03.989 DBG default:  Name = "Vinay Kumar"
2023-07-03 11:29:03.989 DBG default:  Nakshatra  "Uttarabhadrapada"
2023-07-03 11:29:03.989 DBG default:  Gothra  "Sankhyayanasa" 

2023-07-03 11:29:03.989 DBG default:  Mobile  "9886058482" 

2023-07-03 11:29:03.989 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:03.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 96 1182 

2023-07-03 11:29:03.989 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  96 96 

2023-07-03 11:29:03.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 97 1183 

2023-07-03 11:29:03.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 97 990 

2023-07-03 11:29:03.990 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  96 

2023-07-03 11:29:03.990 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 97 1184 

2023-07-03 11:29:03.990 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 97 

2023-07-03 11:29:03.990 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  96 

2023-07-03 11:29:03.990 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.990 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.990 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:03.990 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.990 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:03.990 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  97 

2023-07-03 11:29:03.990 DBG default: void SevaBookingElement::print()  SNO      = "6" 

2023-07-03 11:29:03.990 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:03.990 DBG default: void SevaBookingElement::print()  Person   = "8" 

2023-07-03 11:29:03.990 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:03.990 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:29:03.990 DBG default:  Name = "Vinay Kumar"
2023-07-03 11:29:03.990 DBG default:  Nakshatra  "Uttarabhadrapada"
2023-07-03 11:29:03.990 DBG default:  Gothra  "Sankhyayanasa" 

2023-07-03 11:29:03.990 DBG default:  Mobile  "9886058482" 

2023-07-03 11:29:03.990 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:03.990 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 97 1185 

2023-07-03 11:29:03.990 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  97 97 

2023-07-03 11:29:03.992 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 98 1186 

2023-07-03 11:29:03.992 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 98 991 

2023-07-03 11:29:03.992 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  97 

2023-07-03 11:29:03.992 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 98 1187 

2023-07-03 11:29:03.992 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 98 

2023-07-03 11:29:03.992 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  97 

2023-07-03 11:29:03.992 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.992 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.992 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:03.992 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.992 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:03.992 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  98 

2023-07-03 11:29:03.992 DBG default: void SevaBookingElement::print()  SNO      = "7" 

2023-07-03 11:29:03.993 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:03.993 DBG default: void SevaBookingElement::print()  Person   = "9" 

2023-07-03 11:29:03.993 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:03.993 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:29:03.993 DBG default:  Name = "Sripadachar"
2023-07-03 11:29:03.993 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:29:03.993 DBG default:  Gothra  "" 

2023-07-03 11:29:03.993 DBG default:  Mobile  "9480585854" 

2023-07-03 11:29:03.993 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:03.993 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 98 1188 

2023-07-03 11:29:03.993 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  98 98 

2023-07-03 11:29:03.993 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 99 1189 

2023-07-03 11:29:03.993 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 99 992 

2023-07-03 11:29:03.993 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  98 

2023-07-03 11:29:03.993 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 99 1190 

2023-07-03 11:29:03.993 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 99 

2023-07-03 11:29:03.994 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  98 

2023-07-03 11:29:03.994 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.994 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.994 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:03.994 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.994 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:03.994 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  99 

2023-07-03 11:29:03.994 DBG default: void SevaBookingElement::print()  SNO      = "8" 

2023-07-03 11:29:03.994 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:03.994 DBG default: void SevaBookingElement::print()  Person   = "10" 

2023-07-03 11:29:03.994 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:03.994 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:03.995 DBG default:  Name = "Raghunadan"
2023-07-03 11:29:03.995 DBG default:  Nakshatra  "Bharani"
2023-07-03 11:29:03.995 DBG default:  Gothra  "Jamadagni" 

2023-07-03 11:29:03.995 DBG default:  Mobile  "9741599842" 

2023-07-03 11:29:03.995 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:03.995 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 99 1191 

2023-07-03 11:29:03.995 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  99 99 

2023-07-03 11:29:03.995 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 100 1192 

2023-07-03 11:29:03.995 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 100 993 

2023-07-03 11:29:03.995 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  99 

2023-07-03 11:29:03.995 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 100 1193 

2023-07-03 11:29:03.995 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 100 

2023-07-03 11:29:03.995 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  99 

2023-07-03 11:29:03.995 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.995 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.996 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:03.996 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.996 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:03.996 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  100 

2023-07-03 11:29:03.996 DBG default: void SevaBookingElement::print()  SNO      = "9" 

2023-07-03 11:29:03.996 DBG default: void SevaBookingElement::print()  SName    = "Sathyanarayana Pooje" 

2023-07-03 11:29:03.996 DBG default: void SevaBookingElement::print()  Person   = "11" 

2023-07-03 11:29:03.996 DBG default: void SevaBookingElement::print()  SevaType = "10" 

2023-07-03 11:29:03.996 DBG default: void SevaBookingElement::print()  Qty      = "12" 

2023-07-03 11:29:03.996 DBG default:  Name = "Ravindra Malagi"
2023-07-03 11:29:03.996 DBG default:  Nakshatra  "Ashlesha"
2023-07-03 11:29:03.996 DBG default:  Gothra  "Harithasa" 

2023-07-03 11:29:03.996 DBG default:  Mobile  "9483957542" 

2023-07-03 11:29:03.996 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:03.997 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 100 1194 

2023-07-03 11:29:03.997 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  100 100 

2023-07-03 11:29:03.997 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 101 1195 

2023-07-03 11:29:03.997 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 101 994 

2023-07-03 11:29:03.997 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  100 

2023-07-03 11:29:03.997 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 101 1196 

2023-07-03 11:29:03.997 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 101 

2023-07-03 11:29:03.997 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  100 

2023-07-03 11:29:03.997 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.997 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.997 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:03.997 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.997 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:03.998 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  101 

2023-07-03 11:29:03.998 DBG default: void SevaBookingElement::print()  SNO      = "10" 

2023-07-03 11:29:03.998 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:03.998 DBG default: void SevaBookingElement::print()  Person   = "12" 

2023-07-03 11:29:03.998 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:03.998 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:03.998 DBG default:  Name = "Murali"
2023-07-03 11:29:03.998 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:29:03.998 DBG default:  Gothra  "" 

2023-07-03 11:29:03.998 DBG default:  Mobile  "9686669462" 

2023-07-03 11:29:03.998 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:03.998 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 101 1197 

2023-07-03 11:29:03.998 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  101 101 

2023-07-03 11:29:03.998 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 102 1198 

2023-07-03 11:29:03.998 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 102 995 

2023-07-03 11:29:03.998 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  101 

2023-07-03 11:29:03.999 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 102 1199 

2023-07-03 11:29:03.999 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 102 

2023-07-03 11:29:03.999 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  101 

2023-07-03 11:29:03.999 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:03.999 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.999 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:03.999 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:03.999 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:03.999 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  102 

2023-07-03 11:29:03.999 DBG default: void SevaBookingElement::print()  SNO      = "11" 

2023-07-03 11:29:04.000 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:29:04.000 DBG default: void SevaBookingElement::print()  Person   = "13" 

2023-07-03 11:29:04.000 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.000 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.000 DBG default:  Name = "A Raghavendra Murthy"
2023-07-03 11:29:04.000 DBG default:  Nakshatra  "Swati"
2023-07-03 11:29:04.000 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.000 DBG default:  Mobile  "8123886837" 

2023-07-03 11:29:04.000 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.000 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 102 1200 

2023-07-03 11:29:04.000 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  102 102 

2023-07-03 11:29:04.000 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 103 1201 

2023-07-03 11:29:04.000 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 103 996 

2023-07-03 11:29:04.000 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  102 

2023-07-03 11:29:04.000 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 103 1202 

2023-07-03 11:29:04.000 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 103 

2023-07-03 11:29:04.000 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  102 

2023-07-03 11:29:04.000 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.001 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.001 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.001 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.001 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.001 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  103 

2023-07-03 11:29:04.001 DBG default: void SevaBookingElement::print()  SNO      = "11" 

2023-07-03 11:29:04.001 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:29:04.001 DBG default: void SevaBookingElement::print()  Person   = "14" 

2023-07-03 11:29:04.001 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.001 DBG default: void SevaBookingElement::print()  Qty      = "10" 

2023-07-03 11:29:04.001 DBG default:  Name = "A Raghavendra Murthy"
2023-07-03 11:29:04.002 DBG default:  Nakshatra  "Swati"
2023-07-03 11:29:04.002 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.002 DBG default:  Mobile  "8123886837" 

2023-07-03 11:29:04.002 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.002 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 103 1203 

2023-07-03 11:29:04.002 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  103 103 

2023-07-03 11:29:04.002 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 104 1204 

2023-07-03 11:29:04.002 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 104 997 

2023-07-03 11:29:04.002 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  103 

2023-07-03 11:29:04.002 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 104 1205 

2023-07-03 11:29:04.002 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 104 

2023-07-03 11:29:04.002 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  103 

2023-07-03 11:29:04.002 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.002 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.002 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.003 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.003 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.003 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  104 

2023-07-03 11:29:04.003 DBG default: void SevaBookingElement::print()  SNO      = "12" 

2023-07-03 11:29:04.003 DBG default: void SevaBookingElement::print()  SName    = "SankalpaN" 

2023-07-03 11:29:04.003 DBG default: void SevaBookingElement::print()  Person   = "15" 

2023-07-03 11:29:04.003 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.003 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.003 DBG default:  Name = "R S Kulkarni"
2023-07-03 11:29:04.003 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:29:04.003 DBG default:  Gothra  "" 

2023-07-03 11:29:04.003 DBG default:  Mobile  "9916835446" 

2023-07-03 11:29:04.003 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.003 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 104 1206 

2023-07-03 11:29:04.003 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  104 104 

2023-07-03 11:29:04.004 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 105 1207 

2023-07-03 11:29:04.004 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 105 998 

2023-07-03 11:29:04.004 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  104 

2023-07-03 11:29:04.004 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 105 1208 

2023-07-03 11:29:04.004 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 105 

2023-07-03 11:29:04.004 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  104 

2023-07-03 11:29:04.004 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.004 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.004 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.004 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.004 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.005 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  105 

2023-07-03 11:29:04.005 DBG default: void SevaBookingElement::print()  SNO      = "12" 

2023-07-03 11:29:04.005 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.005 DBG default: void SevaBookingElement::print()  Person   = "16" 

2023-07-03 11:29:04.005 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.005 DBG default: void SevaBookingElement::print()  Qty      = "5" 

2023-07-03 11:29:04.005 DBG default:  Name = "R S Kulkarni"
2023-07-03 11:29:04.005 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:29:04.005 DBG default:  Gothra  "" 

2023-07-03 11:29:04.005 DBG default:  Mobile  "9916835446" 

2023-07-03 11:29:04.005 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.005 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 105 1209 

2023-07-03 11:29:04.005 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  105 105 

2023-07-03 11:29:04.005 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 106 1210 

2023-07-03 11:29:04.005 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 106 999 

2023-07-03 11:29:04.005 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  105 

2023-07-03 11:29:04.005 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 106 1211 

2023-07-03 11:29:04.005 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 106 

2023-07-03 11:29:04.006 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  105 

2023-07-03 11:29:04.006 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.006 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.006 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.006 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.006 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.006 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  106 

2023-07-03 11:29:04.006 DBG default: void SevaBookingElement::print()  SNO      = "13" 

2023-07-03 11:29:04.006 DBG default: void SevaBookingElement::print()  SName    = "Panchamrutha/Abhisheka" 

2023-07-03 11:29:04.006 DBG default: void SevaBookingElement::print()  Person   = "17" 

2023-07-03 11:29:04.006 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.006 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.006 DBG default:  Name = "Mohan Kumar"
2023-07-03 11:29:04.006 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:29:04.006 DBG default:  Gothra  "Maudgalya" 

2023-07-03 11:29:04.006 DBG default:  Mobile  "9481804498" 

2023-07-03 11:29:04.006 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.006 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 106 1212 

2023-07-03 11:29:04.007 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  106 106 

2023-07-03 11:29:04.007 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 107 1213 

2023-07-03 11:29:04.007 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 107 1000 

2023-07-03 11:29:04.007 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  106 

2023-07-03 11:29:04.007 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 107 1214 

2023-07-03 11:29:04.007 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 107 

2023-07-03 11:29:04.007 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  106 

2023-07-03 11:29:04.007 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.007 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.007 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.007 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.007 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.007 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  107 

2023-07-03 11:29:04.007 DBG default: void SevaBookingElement::print()  SNO      = "13" 

2023-07-03 11:29:04.007 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.007 DBG default: void SevaBookingElement::print()  Person   = "18" 

2023-07-03 11:29:04.007 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.007 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:29:04.007 DBG default:  Name = "Mohan Kumar"
2023-07-03 11:29:04.007 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:29:04.007 DBG default:  Gothra  "Maudgalya" 

2023-07-03 11:29:04.007 DBG default:  Mobile  "9481804498" 

2023-07-03 11:29:04.008 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.008 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 107 1215 

2023-07-03 11:29:04.008 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  107 107 

2023-07-03 11:29:04.008 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 108 1216 

2023-07-03 11:29:04.008 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 108 1001 

2023-07-03 11:29:04.008 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  107 

2023-07-03 11:29:04.008 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 108 1217 

2023-07-03 11:29:04.008 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 108 

2023-07-03 11:29:04.008 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  107 

2023-07-03 11:29:04.008 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.008 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.008 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.008 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.008 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.008 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  108 

2023-07-03 11:29:04.008 DBG default: void SevaBookingElement::print()  SNO      = "14" 

2023-07-03 11:29:04.008 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.008 DBG default: void SevaBookingElement::print()  Person   = "19" 

2023-07-03 11:29:04.008 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.009 DBG default: void SevaBookingElement::print()  Qty      = "5" 

2023-07-03 11:29:04.009 DBG default:  Name = "Rakshit"
2023-07-03 11:29:04.009 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:29:04.009 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:29:04.009 DBG default:  Mobile  "9880033002" 

2023-07-03 11:29:04.009 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.009 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 108 1218 

2023-07-03 11:29:04.009 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  108 108 

2023-07-03 11:29:04.009 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 109 1219 

2023-07-03 11:29:04.009 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 109 1002 

2023-07-03 11:29:04.009 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  108 

2023-07-03 11:29:04.009 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 109 1220 

2023-07-03 11:29:04.009 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 109 

2023-07-03 11:29:04.009 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  108 

2023-07-03 11:29:04.009 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.009 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.009 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.009 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.009 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.009 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  109 

2023-07-03 11:29:04.009 DBG default: void SevaBookingElement::print()  SNO      = "15" 

2023-07-03 11:29:04.010 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.010 DBG default: void SevaBookingElement::print()  Person   = "20" 

2023-07-03 11:29:04.010 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.010 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.010 DBG default:  Name = "Ritthi Sripada Rao"
2023-07-03 11:29:04.010 DBG default:  Nakshatra  "Purvaphalguni"
2023-07-03 11:29:04.010 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:29:04.010 DBG default:  Mobile  "9844018826" 

2023-07-03 11:29:04.010 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.010 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 109 1221 

2023-07-03 11:29:04.010 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  109 109 

2023-07-03 11:29:04.010 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 110 1222 

2023-07-03 11:29:04.010 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 110 1003 

2023-07-03 11:29:04.010 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  109 

2023-07-03 11:29:04.010 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 110 1223 

2023-07-03 11:29:04.010 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 110 

2023-07-03 11:29:04.010 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  109 

2023-07-03 11:29:04.010 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.010 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.010 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.010 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.011 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.011 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  110 

2023-07-03 11:29:04.011 DBG default: void SevaBookingElement::print()  SNO      = "16" 

2023-07-03 11:29:04.011 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.011 DBG default: void SevaBookingElement::print()  Person   = "21" 

2023-07-03 11:29:04.011 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.011 DBG default: void SevaBookingElement::print()  Qty      = "6" 

2023-07-03 11:29:04.011 DBG default:  Name = "Pavamana M"
2023-07-03 11:29:04.011 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:29:04.011 DBG default:  Gothra  "Gargeyyesa" 

2023-07-03 11:29:04.011 DBG default:  Mobile  "9986013228" 

2023-07-03 11:29:04.011 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.011 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 110 1224 

2023-07-03 11:29:04.011 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  110 110 

2023-07-03 11:29:04.011 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 111 1225 

2023-07-03 11:29:04.011 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 111 1004 

2023-07-03 11:29:04.011 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  110 

2023-07-03 11:29:04.011 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 111 1226 

2023-07-03 11:29:04.011 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 111 

2023-07-03 11:29:04.011 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  110 

2023-07-03 11:29:04.011 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.011 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.011 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.011 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.011 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.011 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  111 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  SNO      = "17" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  Person   = "22" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.012 DBG default:  Name = "Naveen"
2023-07-03 11:29:04.012 DBG default:  Nakshatra  "Revati"
2023-07-03 11:29:04.012 DBG default:  Gothra  "Gargeyyesa" 

2023-07-03 11:29:04.012 DBG default:  Mobile  "9880932546" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 111 1227 

2023-07-03 11:29:04.012 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  111 111 

2023-07-03 11:29:04.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 112 1228 

2023-07-03 11:29:04.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 112 1005 

2023-07-03 11:29:04.012 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  111 

2023-07-03 11:29:04.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 112 1229 

2023-07-03 11:29:04.012 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 112 

2023-07-03 11:29:04.012 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  111 

2023-07-03 11:29:04.012 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.012 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.012 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.012 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.012 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.012 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  112 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  SNO      = "18" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  Person   = "23" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.012 DBG default:  Name = "Adavi Acharya"
2023-07-03 11:29:04.012 DBG default:  Nakshatra  "Hasta"
2023-07-03 11:29:04.012 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:29:04.012 DBG default:  Mobile  "8310285283" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 112 1230 

2023-07-03 11:29:04.012 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  112 112 

2023-07-03 11:29:04.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 113 1231 

2023-07-03 11:29:04.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 113 1006 

2023-07-03 11:29:04.012 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  112 

2023-07-03 11:29:04.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 113 1232 

2023-07-03 11:29:04.012 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 113 

2023-07-03 11:29:04.012 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  112 

2023-07-03 11:29:04.012 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.012 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.012 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.012 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.012 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.012 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  113 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  SNO      = "18" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  Person   = "24" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingElement::print()  Qty      = "8" 

2023-07-03 11:29:04.012 DBG default:  Name = "Adavi Acharya"
2023-07-03 11:29:04.012 DBG default:  Nakshatra  "Hasta"
2023-07-03 11:29:04.012 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:29:04.012 DBG default:  Mobile  "8310285283" 

2023-07-03 11:29:04.012 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 113 1233 

2023-07-03 11:29:04.013 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  113 113 

2023-07-03 11:29:04.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 114 1234 

2023-07-03 11:29:04.013 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 114 1007 

2023-07-03 11:29:04.013 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  113 

2023-07-03 11:29:04.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 114 1235 

2023-07-03 11:29:04.013 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 114 

2023-07-03 11:29:04.013 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  113 

2023-07-03 11:29:04.013 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.013 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.013 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.013 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.013 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.013 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  114 

2023-07-03 11:29:04.013 DBG default: void SevaBookingElement::print()  SNO      = "19" 

2023-07-03 11:29:04.013 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.013 DBG default: void SevaBookingElement::print()  Person   = "25" 

2023-07-03 11:29:04.013 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.013 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.013 DBG default:  Name = "Sumanth"
2023-07-03 11:29:04.013 DBG default:  Nakshatra  "Jyeshtha"
2023-07-03 11:29:04.013 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:29:04.013 DBG default:  Mobile  "9964144411" 

2023-07-03 11:29:04.013 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 114 1236 

2023-07-03 11:29:04.013 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  114 114 

2023-07-03 11:29:04.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 115 1237 

2023-07-03 11:29:04.013 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 115 1008 

2023-07-03 11:29:04.013 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  114 

2023-07-03 11:29:04.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 115 1238 

2023-07-03 11:29:04.014 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 115 

2023-07-03 11:29:04.014 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  114 

2023-07-03 11:29:04.014 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.014 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.014 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.014 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.014 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.014 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  115 

2023-07-03 11:29:04.014 DBG default: void SevaBookingElement::print()  SNO      = "20" 

2023-07-03 11:29:04.014 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.014 DBG default: void SevaBookingElement::print()  Person   = "26" 

2023-07-03 11:29:04.014 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.014 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.014 DBG default:  Name = "Krishnamurthy"
2023-07-03 11:29:04.014 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:29:04.014 DBG default:  Gothra  "" 

2023-07-03 11:29:04.014 DBG default:  Mobile  "9980632348" 

2023-07-03 11:29:04.014 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 115 1239 

2023-07-03 11:29:04.014 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  115 115 

2023-07-03 11:29:04.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 116 1240 

2023-07-03 11:29:04.014 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 116 1009 

2023-07-03 11:29:04.014 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  115 

2023-07-03 11:29:04.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 116 1241 

2023-07-03 11:29:04.014 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 116 

2023-07-03 11:29:04.014 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  115 

2023-07-03 11:29:04.014 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.014 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.015 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.015 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.015 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.015 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  116 

2023-07-03 11:29:04.015 DBG default: void SevaBookingElement::print()  SNO      = "21" 

2023-07-03 11:29:04.015 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.015 DBG default: void SevaBookingElement::print()  Person   = "27" 

2023-07-03 11:29:04.015 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.015 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.015 DBG default:  Name = "N Shridar"
2023-07-03 11:29:04.015 DBG default:  Nakshatra  "Hasta"
2023-07-03 11:29:04.015 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:29:04.015 DBG default:  Mobile  "9845370210" 

2023-07-03 11:29:04.015 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 116 1242 

2023-07-03 11:29:04.015 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  116 116 

2023-07-03 11:29:04.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 117 1243 

2023-07-03 11:29:04.015 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 117 1010 

2023-07-03 11:29:04.015 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  116 

2023-07-03 11:29:04.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 117 1244 

2023-07-03 11:29:04.015 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 117 

2023-07-03 11:29:04.015 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  116 

2023-07-03 11:29:04.015 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.015 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.015 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.015 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.015 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.015 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  117 

2023-07-03 11:29:04.015 DBG default: void SevaBookingElement::print()  SNO      = "22" 

2023-07-03 11:29:04.015 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.015 DBG default: void SevaBookingElement::print()  Person   = "28" 

2023-07-03 11:29:04.015 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.015 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.015 DBG default:  Name = "Raghavendra"
2023-07-03 11:29:04.015 DBG default:  Nakshatra  ""
2023-07-03 11:29:04.016 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.016 DBG default:  Mobile  "9945272433" 

2023-07-03 11:29:04.016 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.016 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 117 1245 

2023-07-03 11:29:04.016 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  117 117 

2023-07-03 11:29:04.016 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 118 1246 

2023-07-03 11:29:04.016 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 118 1011 

2023-07-03 11:29:04.016 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  117 

2023-07-03 11:29:04.016 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 118 1247 

2023-07-03 11:29:04.016 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 118 

2023-07-03 11:29:04.016 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  117 

2023-07-03 11:29:04.016 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.016 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.016 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.016 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.016 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.016 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  118 

2023-07-03 11:29:04.016 DBG default: void SevaBookingElement::print()  SNO      = "23" 

2023-07-03 11:29:04.016 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.016 DBG default: void SevaBookingElement::print()  Person   = "29" 

2023-07-03 11:29:04.016 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.016 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:29:04.016 DBG default:  Name = "Rashmi"
2023-07-03 11:29:04.016 DBG default:  Nakshatra  "Purvashadha"
2023-07-03 11:29:04.016 DBG default:  Gothra  "Mounabharghava" 

2023-07-03 11:29:04.016 DBG default:  Mobile  "7204316233" 

2023-07-03 11:29:04.016 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.016 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 118 1248 

2023-07-03 11:29:04.016 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  118 118 

2023-07-03 11:29:04.016 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 119 1249 

2023-07-03 11:29:04.016 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 119 1012 

2023-07-03 11:29:04.016 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  118 

2023-07-03 11:29:04.016 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 119 1250 

2023-07-03 11:29:04.016 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 119 

2023-07-03 11:29:04.016 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  118 

2023-07-03 11:29:04.016 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.016 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.017 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.017 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.017 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.017 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  119 

2023-07-03 11:29:04.017 DBG default: void SevaBookingElement::print()  SNO      = "24" 

2023-07-03 11:29:04.017 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.017 DBG default: void SevaBookingElement::print()  Person   = "30" 

2023-07-03 11:29:04.017 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.017 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.017 DBG default:  Name = "Sowmya"
2023-07-03 11:29:04.017 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:29:04.017 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:29:04.017 DBG default:  Mobile  "9739044304" 

2023-07-03 11:29:04.017 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.017 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 119 1251 

2023-07-03 11:29:04.017 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  119 119 

2023-07-03 11:29:04.017 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 120 1252 

2023-07-03 11:29:04.017 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 120 1013 

2023-07-03 11:29:04.017 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  119 

2023-07-03 11:29:04.017 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 120 1253 

2023-07-03 11:29:04.017 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 120 

2023-07-03 11:29:04.017 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  119 

2023-07-03 11:29:04.017 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.017 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.017 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.017 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.017 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.017 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  120 

2023-07-03 11:29:04.017 DBG default: void SevaBookingElement::print()  SNO      = "25" 

2023-07-03 11:29:04.017 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:29:04.017 DBG default: void SevaBookingElement::print()  Person   = "31" 

2023-07-03 11:29:04.017 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.017 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.018 DBG default:  Name = "Umesh"
2023-07-03 11:29:04.018 DBG default:  Nakshatra  "Shravana"
2023-07-03 11:29:04.018 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.018 DBG default:  Mobile  "9845512180" 

2023-07-03 11:29:04.018 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 120 1254 

2023-07-03 11:29:04.018 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  120 120 

2023-07-03 11:29:04.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 121 1255 

2023-07-03 11:29:04.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 121 1014 

2023-07-03 11:29:04.018 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  120 

2023-07-03 11:29:04.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 121 1256 

2023-07-03 11:29:04.018 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 121 

2023-07-03 11:29:04.018 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  120 

2023-07-03 11:29:04.018 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.018 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.018 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.018 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.018 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.018 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  121 

2023-07-03 11:29:04.018 DBG default: void SevaBookingElement::print()  SNO      = "25" 

2023-07-03 11:29:04.018 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:29:04.018 DBG default: void SevaBookingElement::print()  Person   = "32" 

2023-07-03 11:29:04.018 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.018 DBG default: void SevaBookingElement::print()  Qty      = "7" 

2023-07-03 11:29:04.018 DBG default:  Name = "Umesh"
2023-07-03 11:29:04.018 DBG default:  Nakshatra  "Shravana"
2023-07-03 11:29:04.018 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.018 DBG default:  Mobile  "9845512180" 

2023-07-03 11:29:04.018 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 121 1257 

2023-07-03 11:29:04.018 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  121 121 

2023-07-03 11:29:04.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 122 1258 

2023-07-03 11:29:04.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 122 1015 

2023-07-03 11:29:04.018 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  121 

2023-07-03 11:29:04.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 122 1259 

2023-07-03 11:29:04.018 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 122 

2023-07-03 11:29:04.018 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  121 

2023-07-03 11:29:04.018 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.018 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.019 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.019 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.019 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.019 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  122 

2023-07-03 11:29:04.019 DBG default: void SevaBookingElement::print()  SNO      = "26" 

2023-07-03 11:29:04.019 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.019 DBG default: void SevaBookingElement::print()  Person   = "33" 

2023-07-03 11:29:04.019 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.019 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.019 DBG default:  Name = "Harini"
2023-07-03 11:29:04.019 DBG default:  Nakshatra  "Punarvasu"
2023-07-03 11:29:04.019 DBG default:  Gothra  "Dhananjaya" 

2023-07-03 11:29:04.019 DBG default:  Mobile  "9342555155" 

2023-07-03 11:29:04.019 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 122 1260 

2023-07-03 11:29:04.019 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  122 122 

2023-07-03 11:29:04.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 123 1261 

2023-07-03 11:29:04.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 123 1016 

2023-07-03 11:29:04.019 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  122 

2023-07-03 11:29:04.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 123 1262 

2023-07-03 11:29:04.019 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 123 

2023-07-03 11:29:04.019 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  122 

2023-07-03 11:29:04.019 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.019 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.019 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.019 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.019 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.019 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  123 

2023-07-03 11:29:04.019 DBG default: void SevaBookingElement::print()  SNO      = "27" 

2023-07-03 11:29:04.019 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.019 DBG default: void SevaBookingElement::print()  Person   = "34" 

2023-07-03 11:29:04.019 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.019 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.019 DBG default:  Name = "Badari Vishal"
2023-07-03 11:29:04.020 DBG default:  Nakshatra  "Revati"
2023-07-03 11:29:04.020 DBG default:  Gothra  "Jamadagni" 

2023-07-03 11:29:04.020 DBG default:  Mobile  "9535798004" 

2023-07-03 11:29:04.020 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 123 1263 

2023-07-03 11:29:04.020 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  123 123 

2023-07-03 11:29:04.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 124 1264 

2023-07-03 11:29:04.020 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 124 1017 

2023-07-03 11:29:04.020 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  123 

2023-07-03 11:29:04.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 124 1265 

2023-07-03 11:29:04.020 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 124 

2023-07-03 11:29:04.020 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  123 

2023-07-03 11:29:04.020 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.020 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.020 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.020 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.020 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.020 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  124 

2023-07-03 11:29:04.020 DBG default: void SevaBookingElement::print()  SNO      = "28" 

2023-07-03 11:29:04.020 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka Regular" 

2023-07-03 11:29:04.020 DBG default: void SevaBookingElement::print()  Person   = "35" 

2023-07-03 11:29:04.020 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.020 DBG default: void SevaBookingElement::print()  Qty      = "10" 

2023-07-03 11:29:04.020 DBG default:  Name = "Akshay Desai"
2023-07-03 11:29:04.020 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:29:04.020 DBG default:  Gothra  "Kaundinya" 

2023-07-03 11:29:04.020 DBG default:  Mobile  "9742083477" 

2023-07-03 11:29:04.020 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 124 1266 

2023-07-03 11:29:04.020 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  124 124 

2023-07-03 11:29:04.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 125 1267 

2023-07-03 11:29:04.020 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 125 1018 

2023-07-03 11:29:04.020 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  124 

2023-07-03 11:29:04.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 125 1268 

2023-07-03 11:29:04.020 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 125 

2023-07-03 11:29:04.020 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  124 

2023-07-03 11:29:04.020 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.020 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.020 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.020 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.020 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.021 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  125 

2023-07-03 11:29:04.021 DBG default: void SevaBookingElement::print()  SNO      = "29" 

2023-07-03 11:29:04.021 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka Regular" 

2023-07-03 11:29:04.021 DBG default: void SevaBookingElement::print()  Person   = "36" 

2023-07-03 11:29:04.021 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.021 DBG default: void SevaBookingElement::print()  Qty      = "10" 

2023-07-03 11:29:04.021 DBG default:  Name = "Abhay Desai"
2023-07-03 11:29:04.021 DBG default:  Nakshatra  "Anuradha"
2023-07-03 11:29:04.021 DBG default:  Gothra  "Kaundinya" 

2023-07-03 11:29:04.021 DBG default:  Mobile  "9148653143" 

2023-07-03 11:29:04.021 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 125 1269 

2023-07-03 11:29:04.021 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  125 125 

2023-07-03 11:29:04.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 126 1270 

2023-07-03 11:29:04.021 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 126 1019 

2023-07-03 11:29:04.021 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  125 

2023-07-03 11:29:04.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 126 1271 

2023-07-03 11:29:04.021 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 126 

2023-07-03 11:29:04.021 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  125 

2023-07-03 11:29:04.021 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.021 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.021 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.021 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.021 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.021 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  126 

2023-07-03 11:29:04.021 DBG default: void SevaBookingElement::print()  SNO      = "30" 

2023-07-03 11:29:04.021 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.021 DBG default: void SevaBookingElement::print()  Person   = "37" 

2023-07-03 11:29:04.021 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.021 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:29:04.021 DBG default:  Name = "Anand Avadhani"
2023-07-03 11:29:04.021 DBG default:  Nakshatra  "Swati"
2023-07-03 11:29:04.021 DBG default:  Gothra  "Mounabharghava" 

2023-07-03 11:29:04.021 DBG default:  Mobile  "9845923575" 

2023-07-03 11:29:04.021 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 126 1272 

2023-07-03 11:29:04.021 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  126 126 

2023-07-03 11:29:04.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 127 1273 

2023-07-03 11:29:04.021 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 127 1020 

2023-07-03 11:29:04.021 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  126 

2023-07-03 11:29:04.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 127 1274 

2023-07-03 11:29:04.021 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 127 

2023-07-03 11:29:04.021 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  126 

2023-07-03 11:29:04.021 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.021 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.022 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.022 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.022 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.022 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  127 

2023-07-03 11:29:04.022 DBG default: void SevaBookingElement::print()  SNO      = "31" 

2023-07-03 11:29:04.022 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.022 DBG default: void SevaBookingElement::print()  Person   = "38" 

2023-07-03 11:29:04.022 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.022 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:29:04.022 DBG default:  Name = "Gururaj Bidikar"
2023-07-03 11:29:04.022 DBG default:  Nakshatra  "Pushya"
2023-07-03 11:29:04.022 DBG default:  Gothra  "Galava" 

2023-07-03 11:29:04.022 DBG default:  Mobile  "9538974640" 

2023-07-03 11:29:04.022 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.022 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 127 1275 

2023-07-03 11:29:04.022 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  127 127 

2023-07-03 11:29:04.022 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 128 1276 

2023-07-03 11:29:04.022 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 128 1021 

2023-07-03 11:29:04.022 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  127 

2023-07-03 11:29:04.022 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 128 1277 

2023-07-03 11:29:04.022 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 128 

2023-07-03 11:29:04.022 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  127 

2023-07-03 11:29:04.022 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.022 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.022 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.022 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.022 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.022 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  128 

2023-07-03 11:29:04.022 DBG default: void SevaBookingElement::print()  SNO      = "32" 

2023-07-03 11:29:04.022 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka Monthly" 

2023-07-03 11:29:04.022 DBG default: void SevaBookingElement::print()  Person   = "39" 

2023-07-03 11:29:04.022 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.022 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.022 DBG default:  Name = "Sanjay Rao A N"
2023-07-03 11:29:04.022 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:29:04.022 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:29:04.022 DBG default:  Mobile  "7353989225" 

2023-07-03 11:29:04.022 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.022 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 128 1278 

2023-07-03 11:29:04.022 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  128 128 

2023-07-03 11:29:04.022 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 129 1279 

2023-07-03 11:29:04.022 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 129 1022 

2023-07-03 11:29:04.022 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  128 

2023-07-03 11:29:04.022 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 129 1280 

2023-07-03 11:29:04.022 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 129 

2023-07-03 11:29:04.023 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  128 

2023-07-03 11:29:04.023 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.023 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.023 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.023 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.023 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.023 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  129 

2023-07-03 11:29:04.023 DBG default: void SevaBookingElement::print()  SNO      = "33" 

2023-07-03 11:29:04.023 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.023 DBG default: void SevaBookingElement::print()  Person   = "40" 

2023-07-03 11:29:04.023 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.023 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:29:04.023 DBG default:  Name = "Raghottamachar"
2023-07-03 11:29:04.023 DBG default:  Nakshatra  "Bharani"
2023-07-03 11:29:04.023 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.023 DBG default:  Mobile  "9880216226" 

2023-07-03 11:29:04.023 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 129 1281 

2023-07-03 11:29:04.023 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  129 129 

2023-07-03 11:29:04.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 130 1282 

2023-07-03 11:29:04.023 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 130 1023 

2023-07-03 11:29:04.023 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  129 

2023-07-03 11:29:04.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 130 1283 

2023-07-03 11:29:04.023 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 130 

2023-07-03 11:29:04.023 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  129 

2023-07-03 11:29:04.023 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.023 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.023 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.023 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.023 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.023 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  130 

2023-07-03 11:29:04.023 DBG default: void SevaBookingElement::print()  SNO      = "34" 

2023-07-03 11:29:04.023 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.023 DBG default: void SevaBookingElement::print()  Person   = "41" 

2023-07-03 11:29:04.023 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.023 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:29:04.023 DBG default:  Name = "Arundathi"
2023-07-03 11:29:04.023 DBG default:  Nakshatra  ""
2023-07-03 11:29:04.023 DBG default:  Gothra  "" 

2023-07-03 11:29:04.023 DBG default:  Mobile  "9742920275" 

2023-07-03 11:29:04.023 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 130 1284 

2023-07-03 11:29:04.023 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  130 130 

2023-07-03 11:29:04.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 131 1285 

2023-07-03 11:29:04.024 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 131 1024 

2023-07-03 11:29:04.024 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  130 

2023-07-03 11:29:04.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 131 1286 

2023-07-03 11:29:04.024 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 131 

2023-07-03 11:29:04.024 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  130 

2023-07-03 11:29:04.024 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.024 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.024 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.024 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.024 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.024 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  131 

2023-07-03 11:29:04.024 DBG default: void SevaBookingElement::print()  SNO      = "35" 

2023-07-03 11:29:04.024 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.024 DBG default: void SevaBookingElement::print()  Person   = "42" 

2023-07-03 11:29:04.024 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.024 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.024 DBG default:  Name = "Sudheendra"
2023-07-03 11:29:04.024 DBG default:  Nakshatra  "Pushya"
2023-07-03 11:29:04.024 DBG default:  Gothra  "Athreyasa" 

2023-07-03 11:29:04.024 DBG default:  Mobile  "8310845727" 

2023-07-03 11:29:04.024 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 131 1287 

2023-07-03 11:29:04.024 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  131 131 

2023-07-03 11:29:04.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 132 1288 

2023-07-03 11:29:04.024 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 132 1025 

2023-07-03 11:29:04.024 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  131 

2023-07-03 11:29:04.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 132 1289 

2023-07-03 11:29:04.024 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 132 

2023-07-03 11:29:04.024 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  131 

2023-07-03 11:29:04.024 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.024 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.024 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.024 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.024 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.024 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  132 

2023-07-03 11:29:04.024 DBG default: void SevaBookingElement::print()  SNO      = "36" 

2023-07-03 11:29:04.024 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka Regular" 

2023-07-03 11:29:04.024 DBG default: void SevaBookingElement::print()  Person   = "43" 

2023-07-03 11:29:04.024 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.024 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:29:04.024 DBG default:  Name = "Vadiraj"
2023-07-03 11:29:04.025 DBG default:  Nakshatra  "Chitra"
2023-07-03 11:29:04.025 DBG default:  Gothra  "Jamadagni" 

2023-07-03 11:29:04.025 DBG default:  Mobile  "9886249774" 

2023-07-03 11:29:04.025 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 132 1290 

2023-07-03 11:29:04.025 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  132 132 

2023-07-03 11:29:04.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 133 1291 

2023-07-03 11:29:04.025 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 133 1026 

2023-07-03 11:29:04.025 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  132 

2023-07-03 11:29:04.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 133 1292 

2023-07-03 11:29:04.025 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 133 

2023-07-03 11:29:04.025 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  132 

2023-07-03 11:29:04.025 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.025 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.025 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.025 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.025 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.025 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  133 

2023-07-03 11:29:04.025 DBG default: void SevaBookingElement::print()  SNO      = "37" 

2023-07-03 11:29:04.025 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.025 DBG default: void SevaBookingElement::print()  Person   = "44" 

2023-07-03 11:29:04.025 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.025 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:29:04.025 DBG default:  Name = "Srinath A Adhani"
2023-07-03 11:29:04.025 DBG default:  Nakshatra  "Rohini"
2023-07-03 11:29:04.025 DBG default:  Gothra  "Mounabharghava" 

2023-07-03 11:29:04.025 DBG default:  Mobile  "9886809959" 

2023-07-03 11:29:04.025 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 133 1293 

2023-07-03 11:29:04.025 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  133 133 

2023-07-03 11:29:04.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 134 1294 

2023-07-03 11:29:04.025 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 134 1027 

2023-07-03 11:29:04.025 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  133 

2023-07-03 11:29:04.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 134 1295 

2023-07-03 11:29:04.025 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 134 

2023-07-03 11:29:04.025 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  133 

2023-07-03 11:29:04.025 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.025 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.025 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.025 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.025 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.025 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  134 

2023-07-03 11:29:04.025 DBG default: void SevaBookingElement::print()  SNO      = "38" 

2023-07-03 11:29:04.025 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.025 DBG default: void SevaBookingElement::print()  Person   = "45" 

2023-07-03 11:29:04.025 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.025 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.025 DBG default:  Name = "R S Kulkarni"
2023-07-03 11:29:04.025 DBG default:  Nakshatra  ""
2023-07-03 11:29:04.026 DBG default:  Gothra  "" 

2023-07-03 11:29:04.026 DBG default:  Mobile  "9916835446" 

2023-07-03 11:29:04.026 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.026 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 134 1296 

2023-07-03 11:29:04.026 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  134 134 

2023-07-03 11:29:04.026 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 135 1297 

2023-07-03 11:29:04.026 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 135 1028 

2023-07-03 11:29:04.026 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  134 

2023-07-03 11:29:04.026 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 135 1298 

2023-07-03 11:29:04.026 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 135 

2023-07-03 11:29:04.026 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  134 

2023-07-03 11:29:04.026 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.026 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.026 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.026 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.026 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.026 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  135 

2023-07-03 11:29:04.026 DBG default: void SevaBookingElement::print()  SNO      = "39" 

2023-07-03 11:29:04.026 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.026 DBG default: void SevaBookingElement::print()  Person   = "46" 

2023-07-03 11:29:04.026 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.026 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.026 DBG default:  Name = "Jayathirtha Achar"
2023-07-03 11:29:04.026 DBG default:  Nakshatra  "Anuradha"
2023-07-03 11:29:04.026 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:29:04.026 DBG default:  Mobile  "9449294055" 

2023-07-03 11:29:04.026 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.026 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 135 1299 

2023-07-03 11:29:04.026 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  135 135 

2023-07-03 11:29:04.026 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 136 1300 

2023-07-03 11:29:04.026 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 136 1029 

2023-07-03 11:29:04.026 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  135 

2023-07-03 11:29:04.026 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 136 1301 

2023-07-03 11:29:04.026 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 136 

2023-07-03 11:29:04.026 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  135 

2023-07-03 11:29:04.026 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.026 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.026 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.026 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.026 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.026 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  136 

2023-07-03 11:29:04.026 DBG default: void SevaBookingElement::print()  SNO      = "40" 

2023-07-03 11:29:04.026 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.026 DBG default: void SevaBookingElement::print()  Person   = "47" 

2023-07-03 11:29:04.026 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.026 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.026 DBG default:  Name = "B K Sudheendra"
2023-07-03 11:29:04.026 DBG default:  Nakshatra  "Revati"
2023-07-03 11:29:04.026 DBG default:  Gothra  "Athreyasa" 

2023-07-03 11:29:04.026 DBG default:  Mobile  "9902167768" 

2023-07-03 11:29:04.026 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.027 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 136 1302 

2023-07-03 11:29:04.027 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  136 136 

2023-07-03 11:29:04.027 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 137 1303 

2023-07-03 11:29:04.027 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 137 1030 

2023-07-03 11:29:04.027 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  136 

2023-07-03 11:29:04.027 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 137 1304 

2023-07-03 11:29:04.027 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 137 

2023-07-03 11:29:04.027 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  136 

2023-07-03 11:29:04.027 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.027 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.027 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.027 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.027 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.027 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  137 

2023-07-03 11:29:04.027 DBG default: void SevaBookingElement::print()  SNO      = "41" 

2023-07-03 11:29:04.027 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.027 DBG default: void SevaBookingElement::print()  Person   = "48" 

2023-07-03 11:29:04.027 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.027 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.027 DBG default:  Name = "Sanket kulkarni"
2023-07-03 11:29:04.027 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:29:04.027 DBG default:  Gothra  "Vishwamitra" 

2023-07-03 11:29:04.027 DBG default:  Mobile  "9916860118" 

2023-07-03 11:29:04.027 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.027 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 137 1305 

2023-07-03 11:29:04.027 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  137 137 

2023-07-03 11:29:04.027 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 138 1306 

2023-07-03 11:29:04.027 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 138 1031 

2023-07-03 11:29:04.027 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  137 

2023-07-03 11:29:04.027 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 138 1307 

2023-07-03 11:29:04.027 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 138 

2023-07-03 11:29:04.027 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  137 

2023-07-03 11:29:04.027 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.027 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.027 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.027 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.027 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.027 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  138 

2023-07-03 11:29:04.027 DBG default: void SevaBookingElement::print()  SNO      = "42" 

2023-07-03 11:29:04.027 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:29:04.027 DBG default: void SevaBookingElement::print()  Person   = "49" 

2023-07-03 11:29:04.027 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.027 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.027 DBG default:  Name = "Mohan"
2023-07-03 11:29:04.027 DBG default:  Nakshatra  "Anuradha"
2023-07-03 11:29:04.027 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.027 DBG default:  Mobile  "9980039531" 

2023-07-03 11:29:04.027 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.027 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 138 1308 

2023-07-03 11:29:04.027 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  138 138 

2023-07-03 11:29:04.027 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 139 1309 

2023-07-03 11:29:04.028 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 139 1032 

2023-07-03 11:29:04.028 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  138 

2023-07-03 11:29:04.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 139 1310 

2023-07-03 11:29:04.028 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 139 

2023-07-03 11:29:04.028 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  138 

2023-07-03 11:29:04.028 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.028 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.028 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.028 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.028 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.028 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  139 

2023-07-03 11:29:04.028 DBG default: void SevaBookingElement::print()  SNO      = "42" 

2023-07-03 11:29:04.028 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.028 DBG default: void SevaBookingElement::print()  Person   = "50" 

2023-07-03 11:29:04.028 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.028 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.028 DBG default:  Name = "Mohan"
2023-07-03 11:29:04.028 DBG default:  Nakshatra  "Anuradha"
2023-07-03 11:29:04.028 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.028 DBG default:  Mobile  "9980039531" 

2023-07-03 11:29:04.028 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 139 1311 

2023-07-03 11:29:04.028 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  139 139 

2023-07-03 11:29:04.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 140 1312 

2023-07-03 11:29:04.028 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 140 1033 

2023-07-03 11:29:04.028 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  139 

2023-07-03 11:29:04.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 140 1313 

2023-07-03 11:29:04.028 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 140 

2023-07-03 11:29:04.028 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  139 

2023-07-03 11:29:04.028 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.028 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.028 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.028 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.028 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.028 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  140 

2023-07-03 11:29:04.028 DBG default: void SevaBookingElement::print()  SNO      = "43" 

2023-07-03 11:29:04.028 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.028 DBG default: void SevaBookingElement::print()  Person   = "51" 

2023-07-03 11:29:04.028 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.028 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.028 DBG default:  Name = "Madwamurthy"
2023-07-03 11:29:04.028 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:29:04.028 DBG default:  Gothra  "" 

2023-07-03 11:29:04.028 DBG default:  Mobile  "9448882578" 

2023-07-03 11:29:04.028 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 140 1314 

2023-07-03 11:29:04.028 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  140 140 

2023-07-03 11:29:04.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 141 1315 

2023-07-03 11:29:04.028 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 141 1034 

2023-07-03 11:29:04.029 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  140 

2023-07-03 11:29:04.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 141 1316 

2023-07-03 11:29:04.029 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 141 

2023-07-03 11:29:04.029 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  140 

2023-07-03 11:29:04.029 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.029 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.029 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.029 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.029 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.029 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  141 

2023-07-03 11:29:04.029 DBG default: void SevaBookingElement::print()  SNO      = "44" 

2023-07-03 11:29:04.029 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.029 DBG default: void SevaBookingElement::print()  Person   = "52" 

2023-07-03 11:29:04.029 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.029 DBG default: void SevaBookingElement::print()  Qty      = "5" 

2023-07-03 11:29:04.029 DBG default:  Name = "Madhusudan Gudi"
2023-07-03 11:29:04.029 DBG default:  Nakshatra  "Moola"
2023-07-03 11:29:04.029 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:29:04.029 DBG default:  Mobile  "9886521762" 

2023-07-03 11:29:04.029 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 141 1317 

2023-07-03 11:29:04.029 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  141 141 

2023-07-03 11:29:04.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 142 1318 

2023-07-03 11:29:04.029 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 142 1035 

2023-07-03 11:29:04.029 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  141 

2023-07-03 11:29:04.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 142 1319 

2023-07-03 11:29:04.029 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 142 

2023-07-03 11:29:04.029 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  141 

2023-07-03 11:29:04.029 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.029 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.029 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.029 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.029 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.029 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  142 

2023-07-03 11:29:04.029 DBG default: void SevaBookingElement::print()  SNO      = "45" 

2023-07-03 11:29:04.029 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.029 DBG default: void SevaBookingElement::print()  Person   = "53" 

2023-07-03 11:29:04.029 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.029 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.029 DBG default:  Name = "Dr Madhva Rao H R"
2023-07-03 11:29:04.029 DBG default:  Nakshatra  "Uttarabhadrapada"
2023-07-03 11:29:04.029 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.029 DBG default:  Mobile  "9980044875" 

2023-07-03 11:29:04.029 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 142 1320 

2023-07-03 11:29:04.029 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  142 142 

2023-07-03 11:29:04.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 143 1321 

2023-07-03 11:29:04.029 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 143 1036 

2023-07-03 11:29:04.029 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  142 

2023-07-03 11:29:04.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 143 1322 

2023-07-03 11:29:04.030 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 143 

2023-07-03 11:29:04.030 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  142 

2023-07-03 11:29:04.030 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.030 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.030 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.030 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.030 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.030 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  143 

2023-07-03 11:29:04.030 DBG default: void SevaBookingElement::print()  SNO      = "46" 

2023-07-03 11:29:04.030 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.030 DBG default: void SevaBookingElement::print()  Person   = "54" 

2023-07-03 11:29:04.030 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.030 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.030 DBG default:  Name = "Pranesh Mannari"
2023-07-03 11:29:04.030 DBG default:  Nakshatra  "Vishakha"
2023-07-03 11:29:04.030 DBG default:  Gothra  "Harithasa" 

2023-07-03 11:29:04.030 DBG default:  Mobile  "9844246596" 

2023-07-03 11:29:04.030 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.030 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 143 1323 

2023-07-03 11:29:04.030 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  143 143 

2023-07-03 11:29:04.030 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 144 1324 

2023-07-03 11:29:04.030 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 144 1037 

2023-07-03 11:29:04.030 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  143 

2023-07-03 11:29:04.030 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 144 1325 

2023-07-03 11:29:04.030 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 144 

2023-07-03 11:29:04.030 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  143 

2023-07-03 11:29:04.030 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.030 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.030 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.030 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.030 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.030 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  144 

2023-07-03 11:29:04.030 DBG default: void SevaBookingElement::print()  SNO      = "47" 

2023-07-03 11:29:04.030 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.030 DBG default: void SevaBookingElement::print()  Person   = "55" 

2023-07-03 11:29:04.030 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.030 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:29:04.030 DBG default:  Name = "Dwarakanath"
2023-07-03 11:29:04.030 DBG default:  Nakshatra  "Dhanishtha"
2023-07-03 11:29:04.030 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:29:04.030 DBG default:  Mobile  "7829769769" 

2023-07-03 11:29:04.030 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.030 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 144 1326 

2023-07-03 11:29:04.030 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  144 144 

2023-07-03 11:29:04.030 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 145 1327 

2023-07-03 11:29:04.030 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 145 1038 

2023-07-03 11:29:04.030 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  144 

2023-07-03 11:29:04.030 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 145 1328 

2023-07-03 11:29:04.030 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 145 

2023-07-03 11:29:04.030 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  144 

2023-07-03 11:29:04.030 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.030 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.030 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.030 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.030 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.031 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  145 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  SNO      = "48" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  Person   = "56" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.031 DBG default:  Name = "Vivek Kulkarni"
2023-07-03 11:29:04.031 DBG default:  Nakshatra  "Chitra"
2023-07-03 11:29:04.031 DBG default:  Gothra  "Athreyasa" 

2023-07-03 11:29:04.031 DBG default:  Mobile  "9008466500" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 145 1329 

2023-07-03 11:29:04.031 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  145 145 

2023-07-03 11:29:04.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 146 1330 

2023-07-03 11:29:04.031 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 146 1039 

2023-07-03 11:29:04.031 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  145 

2023-07-03 11:29:04.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 146 1331 

2023-07-03 11:29:04.031 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 146 

2023-07-03 11:29:04.031 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  145 

2023-07-03 11:29:04.031 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.031 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.031 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.031 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.031 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.031 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  146 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  SNO      = "49" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  Person   = "57" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.031 DBG default:  Name = "Gopala Krishna"
2023-07-03 11:29:04.031 DBG default:  Nakshatra  "Punarvasu"
2023-07-03 11:29:04.031 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:29:04.031 DBG default:  Mobile  "9845232210" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 146 1332 

2023-07-03 11:29:04.031 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  146 146 

2023-07-03 11:29:04.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 147 1333 

2023-07-03 11:29:04.031 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 147 1040 

2023-07-03 11:29:04.031 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  146 

2023-07-03 11:29:04.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 147 1334 

2023-07-03 11:29:04.031 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 147 

2023-07-03 11:29:04.031 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  146 

2023-07-03 11:29:04.031 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.031 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.031 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.031 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.031 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.031 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  147 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  SNO      = "50" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  Person   = "58" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.031 DBG default:  Name = "Lakshmana Rao"
2023-07-03 11:29:04.031 DBG default:  Nakshatra  "Anuradha"
2023-07-03 11:29:04.031 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.031 DBG default:  Mobile  "9886459736" 

2023-07-03 11:29:04.031 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 147 1335 

2023-07-03 11:29:04.032 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  147 147 

2023-07-03 11:29:04.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 148 1336 

2023-07-03 11:29:04.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 148 1041 

2023-07-03 11:29:04.032 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  147 

2023-07-03 11:29:04.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 148 1337 

2023-07-03 11:29:04.032 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 148 

2023-07-03 11:29:04.032 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  147 

2023-07-03 11:29:04.032 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.032 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.032 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.032 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.032 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.032 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  148 

2023-07-03 11:29:04.032 DBG default: void SevaBookingElement::print()  SNO      = "51" 

2023-07-03 11:29:04.032 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:29:04.032 DBG default: void SevaBookingElement::print()  Person   = "59" 

2023-07-03 11:29:04.032 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.032 DBG default: void SevaBookingElement::print()  Qty      = "11" 

2023-07-03 11:29:04.032 DBG default:  Name = "Gopalakrishna Mangalgi"
2023-07-03 11:29:04.032 DBG default:  Nakshatra  "Uttarabhadrapada"
2023-07-03 11:29:04.032 DBG default:  Gothra  "Kaushika" 

2023-07-03 11:29:04.032 DBG default:  Mobile  "9449851799" 

2023-07-03 11:29:04.032 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 148 1338 

2023-07-03 11:29:04.032 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  148 148 

2023-07-03 11:29:04.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 149 1339 

2023-07-03 11:29:04.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 149 1042 

2023-07-03 11:29:04.032 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  148 

2023-07-03 11:29:04.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 149 1340 

2023-07-03 11:29:04.032 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 149 

2023-07-03 11:29:04.032 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  148 

2023-07-03 11:29:04.032 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.032 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.032 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.032 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.032 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.032 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  149 

2023-07-03 11:29:04.032 DBG default: void SevaBookingElement::print()  SNO      = "52" 

2023-07-03 11:29:04.032 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.032 DBG default: void SevaBookingElement::print()  Person   = "60" 

2023-07-03 11:29:04.032 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.032 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:29:04.032 DBG default:  Name = "Muralidhar A N"
2023-07-03 11:29:04.032 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:29:04.032 DBG default:  Gothra  "Kaundinya" 

2023-07-03 11:29:04.032 DBG default:  Mobile  "6362274483" 

2023-07-03 11:29:04.032 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 149 1341 

2023-07-03 11:29:04.032 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  149 149 

2023-07-03 11:29:04.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 150 1342 

2023-07-03 11:29:04.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 150 1043 

2023-07-03 11:29:04.032 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  149 

2023-07-03 11:29:04.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 150 1343 

2023-07-03 11:29:04.032 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 150 

2023-07-03 11:29:04.033 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  149 

2023-07-03 11:29:04.033 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.033 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.033 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.033 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.033 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.033 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  150 

2023-07-03 11:29:04.033 DBG default: void SevaBookingElement::print()  SNO      = "53" 

2023-07-03 11:29:04.033 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.033 DBG default: void SevaBookingElement::print()  Person   = "61" 

2023-07-03 11:29:04.033 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.033 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:29:04.033 DBG default:  Name = "Vasumathi"
2023-07-03 11:29:04.033 DBG default:  Nakshatra  "Vishakha"
2023-07-03 11:29:04.033 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.033 DBG default:  Mobile  "7349359929" 

2023-07-03 11:29:04.033 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 150 1344 

2023-07-03 11:29:04.033 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  150 150 

2023-07-03 11:29:04.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 151 1345 

2023-07-03 11:29:04.033 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 151 1044 

2023-07-03 11:29:04.033 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  150 

2023-07-03 11:29:04.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 151 1346 

2023-07-03 11:29:04.033 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 151 

2023-07-03 11:29:04.033 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  150 

2023-07-03 11:29:04.033 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.033 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.033 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.033 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.033 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.033 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  151 

2023-07-03 11:29:04.033 DBG default: void SevaBookingElement::print()  SNO      = "54" 

2023-07-03 11:29:04.033 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.033 DBG default: void SevaBookingElement::print()  Person   = "62" 

2023-07-03 11:29:04.033 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.033 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.033 DBG default:  Name = "Krishna H Math"
2023-07-03 11:29:04.033 DBG default:  Nakshatra  "Punarvasu"
2023-07-03 11:29:04.033 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.033 DBG default:  Mobile  "9731316254" 

2023-07-03 11:29:04.033 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 151 1347 

2023-07-03 11:29:04.033 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  151 151 

2023-07-03 11:29:04.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 152 1348 

2023-07-03 11:29:04.033 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 152 1045 

2023-07-03 11:29:04.033 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  151 

2023-07-03 11:29:04.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 152 1349 

2023-07-03 11:29:04.033 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 152 

2023-07-03 11:29:04.033 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  151 

2023-07-03 11:29:04.033 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.033 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.033 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.033 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.034 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.034 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  152 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  SNO      = "55" 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  Person   = "63" 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.034 DBG default:  Name = "Subrahmanya"
2023-07-03 11:29:04.034 DBG default:  Nakshatra  ""
2023-07-03 11:29:04.034 DBG default:  Gothra  "" 

2023-07-03 11:29:04.034 DBG default:  Mobile  "8884101784" 

2023-07-03 11:29:04.034 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 152 1350 

2023-07-03 11:29:04.034 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  152 152 

2023-07-03 11:29:04.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 153 1351 

2023-07-03 11:29:04.034 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 153 1046 

2023-07-03 11:29:04.034 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  152 

2023-07-03 11:29:04.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 153 1352 

2023-07-03 11:29:04.034 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 153 

2023-07-03 11:29:04.034 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  152 

2023-07-03 11:29:04.034 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.034 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.034 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.034 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.034 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.034 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  153 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  SNO      = "55" 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  Person   = "64" 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:29:04.034 DBG default:  Name = "Subrahmanya"
2023-07-03 11:29:04.034 DBG default:  Nakshatra  ""
2023-07-03 11:29:04.034 DBG default:  Gothra  "" 

2023-07-03 11:29:04.034 DBG default:  Mobile  "8884101784" 

2023-07-03 11:29:04.034 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 153 1353 

2023-07-03 11:29:04.034 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  153 153 

2023-07-03 11:29:04.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 154 1354 

2023-07-03 11:29:04.034 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 154 1047 

2023-07-03 11:29:04.034 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  153 

2023-07-03 11:29:04.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 154 1355 

2023-07-03 11:29:04.034 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 154 

2023-07-03 11:29:04.034 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  153 

2023-07-03 11:29:04.034 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.034 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.034 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.034 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.034 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.034 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  154 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  SNO      = "56" 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  Person   = "65" 

2023-07-03 11:29:04.034 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.035 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.035 DBG default:  Name = "Jayaram Pandurangi"
2023-07-03 11:29:04.035 DBG default:  Nakshatra  "Purvabhadrapada"
2023-07-03 11:29:04.035 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:29:04.035 DBG default:  Mobile  "9739976101" 

2023-07-03 11:29:04.035 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 154 1356 

2023-07-03 11:29:04.035 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  154 154 

2023-07-03 11:29:04.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 155 1357 

2023-07-03 11:29:04.035 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 155 1048 

2023-07-03 11:29:04.035 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  154 

2023-07-03 11:29:04.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 155 1358 

2023-07-03 11:29:04.035 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 155 

2023-07-03 11:29:04.035 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  154 

2023-07-03 11:29:04.035 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.035 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.035 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.035 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.035 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.035 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  155 

2023-07-03 11:29:04.035 DBG default: void SevaBookingElement::print()  SNO      = "56" 

2023-07-03 11:29:04.035 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:29:04.035 DBG default: void SevaBookingElement::print()  Person   = "66" 

2023-07-03 11:29:04.035 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.035 DBG default: void SevaBookingElement::print()  Qty      = "6" 

2023-07-03 11:29:04.035 DBG default:  Name = "Jayaram Pandurangi"
2023-07-03 11:29:04.035 DBG default:  Nakshatra  "Purvabhadrapada"
2023-07-03 11:29:04.035 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:29:04.035 DBG default:  Mobile  "9739976101" 

2023-07-03 11:29:04.035 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 155 1359 

2023-07-03 11:29:04.035 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  155 155 

2023-07-03 11:29:04.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 156 1360 

2023-07-03 11:29:04.035 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 156 1049 

2023-07-03 11:29:04.035 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  155 

2023-07-03 11:29:04.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 156 1361 

2023-07-03 11:29:04.035 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 156 

2023-07-03 11:29:04.035 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  155 

2023-07-03 11:29:04.035 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.035 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.035 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.035 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.035 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.035 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  156 

2023-07-03 11:29:04.035 DBG default: void SevaBookingElement::print()  SNO      = "57" 

2023-07-03 11:29:04.035 DBG default: void SevaBookingElement::print()  SName    = "Poornapragna Hall Kanike N " 

2023-07-03 11:29:04.035 DBG default: void SevaBookingElement::print()  Person   = "67" 

2023-07-03 11:29:04.035 DBG default: void SevaBookingElement::print()  SevaType = "14" 

2023-07-03 11:29:04.035 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.035 DBG default:  Name = "Srinidhi"
2023-07-03 11:29:04.035 DBG default:  Nakshatra  "Purvashadha"
2023-07-03 11:29:04.035 DBG default:  Gothra  "Kaundinya" 

2023-07-03 11:29:04.035 DBG default:  Mobile  "7760884275" 

2023-07-03 11:29:04.035 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 156 1362 

2023-07-03 11:29:04.035 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  156 156 

2023-07-03 11:29:04.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 157 1363 

2023-07-03 11:29:04.035 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 157 1050 

2023-07-03 11:29:04.035 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  156 

2023-07-03 11:29:04.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 157 1364 

2023-07-03 11:29:04.035 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 157 

2023-07-03 11:29:04.035 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  156 

2023-07-03 11:29:04.035 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.035 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.035 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.035 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.036 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.036 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  157 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  SNO      = "58" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  Person   = "68" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.036 DBG default:  Name = "Vijaya Vittala"
2023-07-03 11:29:04.036 DBG default:  Nakshatra  "Magha"
2023-07-03 11:29:04.036 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.036 DBG default:  Mobile  "9964619005" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 157 1365 

2023-07-03 11:29:04.036 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  157 157 

2023-07-03 11:29:04.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 158 1366 

2023-07-03 11:29:04.036 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 158 1051 

2023-07-03 11:29:04.036 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  157 

2023-07-03 11:29:04.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 158 1367 

2023-07-03 11:29:04.036 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 158 

2023-07-03 11:29:04.036 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  157 

2023-07-03 11:29:04.036 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.036 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.036 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.036 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.036 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.036 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  158 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  SNO      = "59" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  Person   = "69" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.036 DBG default:  Name = "Keshava"
2023-07-03 11:29:04.036 DBG default:  Nakshatra  "Magha"
2023-07-03 11:29:04.036 DBG default:  Gothra  "Vashistha" 

2023-07-03 11:29:04.036 DBG default:  Mobile  "9844613366" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 158 1368 

2023-07-03 11:29:04.036 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  158 158 

2023-07-03 11:29:04.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 159 1369 

2023-07-03 11:29:04.036 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 159 1052 

2023-07-03 11:29:04.036 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  158 

2023-07-03 11:29:04.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 159 1370 

2023-07-03 11:29:04.036 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 159 

2023-07-03 11:29:04.036 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  158 

2023-07-03 11:29:04.036 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.036 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.036 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.036 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.036 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.036 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  159 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  SNO      = "60" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  Person   = "70" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.036 DBG default:  Name = "SathyaNarayana"
2023-07-03 11:29:04.036 DBG default:  Nakshatra  "Ashlesha"
2023-07-03 11:29:04.036 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.036 DBG default:  Mobile  "9741002738" 

2023-07-03 11:29:04.036 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 159 1371 

2023-07-03 11:29:04.036 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  159 159 

2023-07-03 11:29:04.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 160 1372 

2023-07-03 11:29:04.036 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 160 1053 

2023-07-03 11:29:04.037 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  159 

2023-07-03 11:29:04.037 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 160 1373 

2023-07-03 11:29:04.037 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 160 

2023-07-03 11:29:04.037 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  159 

2023-07-03 11:29:04.037 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.037 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.037 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.037 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.037 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.037 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  160 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  SNO      = "61" 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  Person   = "71" 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.037 DBG default:  Name = "Sunil Bannur"
2023-07-03 11:29:04.037 DBG default:  Nakshatra  "Uttarabhadrapada"
2023-07-03 11:29:04.037 DBG default:  Gothra  "Bharadwaja" 

2023-07-03 11:29:04.037 DBG default:  Mobile  "9900139304" 

2023-07-03 11:29:04.037 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.037 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 160 1374 

2023-07-03 11:29:04.037 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  160 160 

2023-07-03 11:29:04.037 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 161 1375 

2023-07-03 11:29:04.037 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 161 1054 

2023-07-03 11:29:04.037 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  160 

2023-07-03 11:29:04.037 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 161 1376 

2023-07-03 11:29:04.037 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 161 

2023-07-03 11:29:04.037 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  160 

2023-07-03 11:29:04.037 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.037 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.037 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.037 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.037 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.037 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  161 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  SNO      = "62" 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  Person   = "72" 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.037 DBG default:  Name = "Sathya Prakash"
2023-07-03 11:29:04.037 DBG default:  Nakshatra  "Purvaphalguni"
2023-07-03 11:29:04.037 DBG default:  Gothra  "Mounabharghava" 

2023-07-03 11:29:04.037 DBG default:  Mobile  "7760441901" 

2023-07-03 11:29:04.037 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.037 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 161 1377 

2023-07-03 11:29:04.037 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  161 161 

2023-07-03 11:29:04.037 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 162 1378 

2023-07-03 11:29:04.037 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 162 1055 

2023-07-03 11:29:04.037 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  161 

2023-07-03 11:29:04.037 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 162 1379 

2023-07-03 11:29:04.037 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 162 

2023-07-03 11:29:04.037 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  161 

2023-07-03 11:29:04.037 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.037 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.037 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.037 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.037 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.037 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  162 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  SNO      = "62" 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  Person   = "73" 

2023-07-03 11:29:04.037 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.038 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:29:04.038 DBG default:  Name = "Sathya Prakash"
2023-07-03 11:29:04.038 DBG default:  Nakshatra  "Purvaphalguni"
2023-07-03 11:29:04.038 DBG default:  Gothra  "Mounabharghava" 

2023-07-03 11:29:04.038 DBG default:  Mobile  "7760441901" 

2023-07-03 11:29:04.038 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.038 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 162 1380 

2023-07-03 11:29:04.038 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  162 162 

2023-07-03 11:29:04.038 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 163 1381 

2023-07-03 11:29:04.038 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 163 1056 

2023-07-03 11:29:04.038 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  162 

2023-07-03 11:29:04.038 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 163 1382 

2023-07-03 11:29:04.038 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 163 

2023-07-03 11:29:04.038 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  162 

2023-07-03 11:29:04.038 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.038 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.038 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.038 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.038 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.038 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  163 

2023-07-03 11:29:04.038 DBG default: void SevaBookingElement::print()  SNO      = "63" 

2023-07-03 11:29:04.038 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.038 DBG default: void SevaBookingElement::print()  Person   = "74" 

2023-07-03 11:29:04.038 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.038 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.038 DBG default:  Name = "Raghavendra Rao"
2023-07-03 11:29:04.038 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:29:04.038 DBG default:  Gothra  "Kaundinya" 

2023-07-03 11:29:04.038 DBG default:  Mobile  "9448395797" 

2023-07-03 11:29:04.038 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.038 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 163 1383 

2023-07-03 11:29:04.038 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  163 163 

2023-07-03 11:29:04.038 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 164 1384 

2023-07-03 11:29:04.038 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 164 1057 

2023-07-03 11:29:04.038 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  163 

2023-07-03 11:29:04.038 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 164 1385 

2023-07-03 11:29:04.038 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 164 

2023-07-03 11:29:04.038 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  163 

2023-07-03 11:29:04.038 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.038 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.038 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.038 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.038 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.038 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  164 

2023-07-03 11:29:04.038 DBG default: void SevaBookingElement::print()  SNO      = "64" 

2023-07-03 11:29:04.038 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.038 DBG default: void SevaBookingElement::print()  Person   = "75" 

2023-07-03 11:29:04.038 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.038 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.038 DBG default:  Name = "Chandrika Burly"
2023-07-03 11:29:04.038 DBG default:  Nakshatra  ""
2023-07-03 11:29:04.038 DBG default:  Gothra  "" 

2023-07-03 11:29:04.038 DBG default:  Mobile  "9845908028" 

2023-07-03 11:29:04.038 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.038 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 164 1386 

2023-07-03 11:29:04.038 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  164 164 

2023-07-03 11:29:04.038 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 165 1387 

2023-07-03 11:29:04.038 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 165 1058 

2023-07-03 11:29:04.038 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  164 

2023-07-03 11:29:04.038 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 165 1388 

2023-07-03 11:29:04.038 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 165 

2023-07-03 11:29:04.038 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  164 

2023-07-03 11:29:04.038 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.038 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.038 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.038 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.039 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.039 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  165 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  SNO      = "65" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  SName    = "Thatte Hasthodaka" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  Person   = "76" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.039 DBG default:  Name = "Krishnamurthy"
2023-07-03 11:29:04.039 DBG default:  Nakshatra  "Ashwini"
2023-07-03 11:29:04.039 DBG default:  Gothra  "Kaushika" 

2023-07-03 11:29:04.039 DBG default:  Mobile  "9632216698" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.039 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 165 1389 

2023-07-03 11:29:04.039 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  165 165 

2023-07-03 11:29:04.039 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 166 1390 

2023-07-03 11:29:04.039 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 166 1059 

2023-07-03 11:29:04.039 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  165 

2023-07-03 11:29:04.039 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 166 1391 

2023-07-03 11:29:04.039 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 166 

2023-07-03 11:29:04.039 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  165 

2023-07-03 11:29:04.039 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.039 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.039 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.039 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.039 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.039 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  166 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  SNO      = "66" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  SName    = "Dwadashi Hasthodaka" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  Person   = "77" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  Qty      = "2" 

2023-07-03 11:29:04.039 DBG default:  Name = "Srikanth R Kulkarni"
2023-07-03 11:29:04.039 DBG default:  Nakshatra  ""
2023-07-03 11:29:04.039 DBG default:  Gothra  "Harithasa" 

2023-07-03 11:29:04.039 DBG default:  Mobile  "9741371042" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.039 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 166 1392 

2023-07-03 11:29:04.039 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  166 166 

2023-07-03 11:29:04.039 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 167 1393 

2023-07-03 11:29:04.039 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 167 1060 

2023-07-03 11:29:04.039 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  166 

2023-07-03 11:29:04.039 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 167 1394 

2023-07-03 11:29:04.039 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 167 

2023-07-03 11:29:04.039 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  166 

2023-07-03 11:29:04.039 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.039 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.039 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.039 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.039 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.039 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  167 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  SNO      = "67" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  SName    = "ChatakaN" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  Person   = "78" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.039 DBG default:  Name = "Jagadish Rao"
2023-07-03 11:29:04.039 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:29:04.039 DBG default:  Gothra  "Gouthama" 

2023-07-03 11:29:04.039 DBG default:  Mobile  "9810295322" 

2023-07-03 11:29:04.039 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.039 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 167 1395 

2023-07-03 11:29:04.039 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  167 167 

2023-07-03 11:29:04.039 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 168 1396 

2023-07-03 11:29:04.039 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 168 1061 

2023-07-03 11:29:04.039 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  167 

2023-07-03 11:29:04.039 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 168 1397 

2023-07-03 11:29:04.040 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 168 

2023-07-03 11:29:04.040 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  167 

2023-07-03 11:29:04.040 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.040 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.040 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.040 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.040 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.040 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  168 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  SNO      = "67" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  Person   = "79" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.040 DBG default:  Name = "Jagadish Rao"
2023-07-03 11:29:04.040 DBG default:  Nakshatra  "Uttarashadha"
2023-07-03 11:29:04.040 DBG default:  Gothra  "Gouthama" 

2023-07-03 11:29:04.040 DBG default:  Mobile  "9810295322" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.040 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 168 1398 

2023-07-03 11:29:04.040 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  168 168 

2023-07-03 11:29:04.040 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 169 1399 

2023-07-03 11:29:04.040 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 169 1062 

2023-07-03 11:29:04.040 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  168 

2023-07-03 11:29:04.040 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 169 1400 

2023-07-03 11:29:04.040 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 169 

2023-07-03 11:29:04.040 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  168 

2023-07-03 11:29:04.040 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.040 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.040 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.040 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.040 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.040 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  169 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  SNO      = "68" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  Person   = "80" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  Qty      = "3" 

2023-07-03 11:29:04.040 DBG default:  Name = "Gopalakrishna Mangalgi"
2023-07-03 11:29:04.040 DBG default:  Nakshatra  "Uttarabhadrapada"
2023-07-03 11:29:04.040 DBG default:  Gothra  "Kaushika" 

2023-07-03 11:29:04.040 DBG default:  Mobile  "9449851799" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.040 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 169 1401 

2023-07-03 11:29:04.040 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  169 169 

2023-07-03 11:29:04.040 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 170 1402 

2023-07-03 11:29:04.040 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 170 1063 

2023-07-03 11:29:04.040 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  169 

2023-07-03 11:29:04.040 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 170 1403 

2023-07-03 11:29:04.040 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 170 

2023-07-03 11:29:04.040 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  169 

2023-07-03 11:29:04.040 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.040 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.040 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.040 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.040 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.040 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  170 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  SNO      = "69" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  Person   = "81" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:29:04.040 DBG default:  Name = "Sham Bhat Joshi"
2023-07-03 11:29:04.040 DBG default:  Nakshatra  "Bharani"
2023-07-03 11:29:04.040 DBG default:  Gothra  "Puthamanasa" 

2023-07-03 11:29:04.040 DBG default:  Mobile  "8073869420" 

2023-07-03 11:29:04.040 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.040 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 170 1404 

2023-07-03 11:29:04.041 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  170 170 

2023-07-03 11:29:04.041 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 171 1405 

2023-07-03 11:29:04.041 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 171 1064 

2023-07-03 11:29:04.041 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  170 

2023-07-03 11:29:04.041 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 171 1406 

2023-07-03 11:29:04.041 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 171 

2023-07-03 11:29:04.041 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  170 

2023-07-03 11:29:04.041 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.041 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.041 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.041 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.041 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.041 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  171 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  SNO      = "70" 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  SName    = "Poornapragna Hall Kanike N " 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  Person   = "82" 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  SevaType = "14" 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.041 DBG default:  Name = "Rajkumar"
2023-07-03 11:29:04.041 DBG default:  Nakshatra  "Purvaphalguni"
2023-07-03 11:29:04.041 DBG default:  Gothra  "Athreyasa" 

2023-07-03 11:29:04.041 DBG default:  Mobile  "9740252962" 

2023-07-03 11:29:04.041 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.041 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 171 1407 

2023-07-03 11:29:04.041 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  171 171 

2023-07-03 11:29:04.041 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 172 1408 

2023-07-03 11:29:04.041 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 172 1065 

2023-07-03 11:29:04.041 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  171 

2023-07-03 11:29:04.041 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 172 1409 

2023-07-03 11:29:04.041 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 172 

2023-07-03 11:29:04.041 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  171 

2023-07-03 11:29:04.041 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.041 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.041 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.041 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.041 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.041 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  172 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  SNO      = "71" 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  SName    = "Hasthodaka" 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  Person   = "83" 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.041 DBG default:  Name = "Suman N"
2023-07-03 11:29:04.041 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:29:04.041 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.041 DBG default:  Mobile  "9481914363" 

2023-07-03 11:29:04.041 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.041 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 172 1410 

2023-07-03 11:29:04.041 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  172 172 

2023-07-03 11:29:04.041 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 173 1411 

2023-07-03 11:29:04.041 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 173 1066 

2023-07-03 11:29:04.041 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  172 

2023-07-03 11:29:04.041 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 173 1412 

2023-07-03 11:29:04.041 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 173 

2023-07-03 11:29:04.041 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  172 

2023-07-03 11:29:04.041 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.041 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.041 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.041 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.041 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.041 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  173 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  SNO      = "75" 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  SName    = "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  Person   = "88" 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  SevaType = "3" 

2023-07-03 11:29:04.041 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.041 DBG default:  Name = "Suman N"
2023-07-03 11:29:04.041 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:29:04.041 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.042 DBG default:  Mobile  "9481914363" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.042 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 173 1413 

2023-07-03 11:29:04.042 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  173 173 

2023-07-03 11:29:04.042 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 174 1414 

2023-07-03 11:29:04.042 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 174 1067 

2023-07-03 11:29:04.042 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  173 

2023-07-03 11:29:04.042 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 174 1415 

2023-07-03 11:29:04.042 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 174 

2023-07-03 11:29:04.042 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  173 

2023-07-03 11:29:04.042 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.042 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.042 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.042 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.042 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.042 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  174 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  SNO      = "76" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  SName    = "M Navami Pavamana Homa" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  Person   = "89" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  SevaType = "3" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.042 DBG default:  Name = "Suman N"
2023-07-03 11:29:04.042 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:29:04.042 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.042 DBG default:  Mobile  "9481914363" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.042 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 174 1416 

2023-07-03 11:29:04.042 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  174 174 

2023-07-03 11:29:04.042 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 175 1417 

2023-07-03 11:29:04.042 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 175 1068 

2023-07-03 11:29:04.042 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  174 

2023-07-03 11:29:04.042 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 175 1418 

2023-07-03 11:29:04.042 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 175 

2023-07-03 11:29:04.042 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  174 

2023-07-03 11:29:04.042 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.042 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.042 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.042 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.042 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.042 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  175 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  SNO      = "77" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  SName    = "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  Person   = "90" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  SevaType = "2" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.042 DBG default:  Name = "Suman N"
2023-07-03 11:29:04.042 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:29:04.042 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.042 DBG default:  Mobile  "9481914363" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.042 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 175 1419 

2023-07-03 11:29:04.042 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  175 175 

2023-07-03 11:29:04.042 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 176 1420 

2023-07-03 11:29:04.042 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 176 1069 

2023-07-03 11:29:04.042 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  175 

2023-07-03 11:29:04.042 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 176 1421 

2023-07-03 11:29:04.042 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 176 

2023-07-03 11:29:04.042 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  175 

2023-07-03 11:29:04.042 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.042 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.042 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.042 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.042 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.042 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  176 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  SNO      = "78" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  SName    = "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  Person   = "91" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  SevaType = "2" 

2023-07-03 11:29:04.042 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.042 DBG default:  Name = "Suman N"
2023-07-03 11:29:04.042 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:29:04.043 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.043 DBG default:  Mobile  "9481914363" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.043 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 176 1422 

2023-07-03 11:29:04.043 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  176 176 

2023-07-03 11:29:04.043 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 177 1423 

2023-07-03 11:29:04.043 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 177 1070 

2023-07-03 11:29:04.043 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  176 

2023-07-03 11:29:04.043 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 177 1424 

2023-07-03 11:29:04.043 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 177 

2023-07-03 11:29:04.043 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  176 

2023-07-03 11:29:04.043 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.043 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.043 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.043 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.043 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.043 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  177 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  SNO      = "79" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  SName    = "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  Person   = "92" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  SevaType = "2" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  Qty      = "1" 

2023-07-03 11:29:04.043 DBG default:  Name = "Suman N"
2023-07-03 11:29:04.043 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:29:04.043 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.043 DBG default:  Mobile  "9481914363" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.043 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 177 1425 

2023-07-03 11:29:04.043 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  177 177 

2023-07-03 11:29:04.043 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 178 1426 

2023-07-03 11:29:04.043 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 178 1071 

2023-07-03 11:29:04.043 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  177 

2023-07-03 11:29:04.043 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 178 1427 

2023-07-03 11:29:04.043 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 178 

2023-07-03 11:29:04.043 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  177 

2023-07-03 11:29:04.043 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.043 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.043 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.043 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.043 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.043 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  178 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  SNO      = "80" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  SName    = "Serva Seva" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  Person   = "93" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  Qty      = "5" 

2023-07-03 11:29:04.043 DBG default:  Name = "Suman N"
2023-07-03 11:29:04.043 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:29:04.043 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.043 DBG default:  Mobile  "9481914363" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.043 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 178 1428 

2023-07-03 11:29:04.043 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  178 178 

2023-07-03 11:29:04.043 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 179 1429 

2023-07-03 11:29:04.043 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 179 1072 

2023-07-03 11:29:04.043 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  178 

2023-07-03 11:29:04.043 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 179 1430 

2023-07-03 11:29:04.043 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 179 

2023-07-03 11:29:04.043 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  178 

2023-07-03 11:29:04.043 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^ Query DB for View^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.043 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.043 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString)    called

2023-07-03 11:29:04.043 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.043 DBG default: DevotePersnalDetails* DBInterface::getPersonDetails(QString) 
Query Execution successful
 

2023-07-03 11:29:04.043 DBG default: bool SevaDetailsTableView::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  179 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  SNO      = "80" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  SName    = "Panchamrutha/Abhisheka" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  Person   = "94" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  SevaType = "1" 

2023-07-03 11:29:04.043 DBG default: void SevaBookingElement::print()  Qty      = "4" 

2023-07-03 11:29:04.043 DBG default:  Name = "Suman N"
2023-07-03 11:29:04.044 DBG default:  Nakshatra  "Shathabhisha"
2023-07-03 11:29:04.044 DBG default:  Gothra  "Kashyapa" 

2023-07-03 11:29:04.044 DBG default:  Mobile  "9481914363" 

2023-07-03 11:29:04.044 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) 

2023-07-03 11:29:04.044 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 179 1431 

2023-07-03 11:29:04.044 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>proxtRow>>>1>i>>>>>>>>  179 179 

2023-07-03 11:29:04.044 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1432 

2023-07-03 11:29:04.044 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1073 

2023-07-03 11:29:04.044 DBG default: virtual bool SevaBookingSearchModel::filterAcceptsRow(int, const QModelIndex&) const >>>>>>sourceIndex.row()>>>>>>>>>  179 

2023-07-03 11:29:04.044 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1433 

2023-07-03 11:29:04.044 DBG default: void SevaBookingTableModel::addBookingDetails(SevaBookingElement*) ############# s 180 

2023-07-03 11:29:04.044 DBG default: bool SevaDetailsOnDateModel::insertSevaRow(SevaBookingElement*)  ***** Inserting the element ***** Current Size=  179 

2023-07-03 11:29:04.044 DBG default: bool DBInterface::dbtable_view() ^^^^^^^^^^^^^^^3333333^^^^^^^^^^^^^^^^^^ 

2023-07-03 11:29:04.044 DBG default: bool SevaViewProxy::showAllData() 

2023-07-03 11:29:04.046 DBG default: DevotePersnalDetails::DevotePersnalDetails(QObject*) 

2023-07-03 11:29:04.055 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1434 

2023-07-03 11:29:04.055 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1074 

2023-07-03 11:29:04.055 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 893 row column role 0 0 257 

2023-07-03 11:29:04.056 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1435 

2023-07-03 11:29:04.056 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1075 

2023-07-03 11:29:04.056 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 894 row column role 0 0 258 

2023-07-03 11:29:04.056 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1436 

2023-07-03 11:29:04.056 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1076 

2023-07-03 11:29:04.056 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 895 row column role 0 0 259 

2023-07-03 11:29:04.057 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1437 

2023-07-03 11:29:04.057 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1077 

2023-07-03 11:29:04.057 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 896 row column role 0 0 260 

2023-07-03 11:29:04.057 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1438 

2023-07-03 11:29:04.057 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1078 

2023-07-03 11:29:04.057 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 897 row column role 0 0 261 

2023-07-03 11:29:04.058 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1439 

2023-07-03 11:29:04.058 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1079 

2023-07-03 11:29:04.058 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 898 row column role 0 0 262 

2023-07-03 11:29:04.058 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1440 

2023-07-03 11:29:04.058 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1080 

2023-07-03 11:29:04.058 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 899 row column role 0 0 263 

2023-07-03 11:29:04.059 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1441 

2023-07-03 11:29:04.059 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1081 

2023-07-03 11:29:04.059 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 900 row column role 0 0 264 

2023-07-03 11:29:04.059 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1442 

2023-07-03 11:29:04.059 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1082 

2023-07-03 11:29:04.059 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 901 row column role 0 0 265 

2023-07-03 11:29:04.060 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1443 

2023-07-03 11:29:04.060 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1083 

2023-07-03 11:29:04.060 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 902 row column role 0 0 266 

2023-07-03 11:29:04.060 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1444 

2023-07-03 11:29:04.060 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1084 

2023-07-03 11:29:04.060 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 903 row column role 0 0 267 

2023-07-03 11:29:04.061 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1445 

2023-07-03 11:29:04.061 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1085 

2023-07-03 11:29:04.061 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 904 row column role 0 0 268 

2023-07-03 11:29:04.061 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1446 

2023-07-03 11:29:04.061 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1086 

2023-07-03 11:29:04.061 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 905 row column role 0 0 269 

2023-07-03 11:29:04.062 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1447 

2023-07-03 11:29:04.062 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1087 

2023-07-03 11:29:04.062 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 906 row column role 0 0 270 

2023-07-03 11:29:04.062 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1448 

2023-07-03 11:29:04.062 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1088 

2023-07-03 11:29:04.062 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 907 row column role 0 0 271 

2023-07-03 11:29:04.063 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1449 

2023-07-03 11:29:04.063 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1089 

2023-07-03 11:29:04.063 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 908 row column role 0 0 272 

2023-07-03 11:29:04.063 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1450 

2023-07-03 11:29:04.063 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1090 

2023-07-03 11:29:04.063 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 909 row column role 0 0 273 

2023-07-03 11:29:04.064 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1451 

2023-07-03 11:29:04.064 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1091 

2023-07-03 11:29:04.064 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 910 row column role 0 0 274 

2023-07-03 11:29:04.064 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1452 

2023-07-03 11:29:04.064 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1092 

2023-07-03 11:29:04.064 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 911 row column role 0 0 275 

2023-07-03 11:29:04.064 DBG qml: Seva All view Page is created
2023-07-03 11:29:04.064 WRN default: qrc:/ui/SevaBookingView.qml:380:9: QML Connections: Detected function "onLoadMenuPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1453 

2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1093 

2023-07-03 11:29:04.067 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 912 row column role 1 0 257 

2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1454 

2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1094 

2023-07-03 11:29:04.067 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 913 row column role 1 0 258 

2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1455 

2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1095 

2023-07-03 11:29:04.067 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 914 row column role 1 0 259 

2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1456 

2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1096 

2023-07-03 11:29:04.067 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 915 row column role 1 0 260 

2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1457 

2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1097 

2023-07-03 11:29:04.067 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 916 row column role 1 0 261 

2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1458 

2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1098 

2023-07-03 11:29:04.067 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 917 row column role 1 0 262 

2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1459 

2023-07-03 11:29:04.067 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1099 

2023-07-03 11:29:04.067 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 918 row column role 1 0 263 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1460 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1100 

2023-07-03 11:29:04.068 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 919 row column role 1 0 264 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1461 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1101 

2023-07-03 11:29:04.068 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 920 row column role 1 0 265 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1462 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1102 

2023-07-03 11:29:04.068 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 921 row column role 1 0 266 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1463 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1103 

2023-07-03 11:29:04.068 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 922 row column role 1 0 267 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1464 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1104 

2023-07-03 11:29:04.068 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 923 row column role 1 0 268 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1465 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1105 

2023-07-03 11:29:04.068 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 924 row column role 1 0 269 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1466 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1106 

2023-07-03 11:29:04.068 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 925 row column role 1 0 270 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1467 

2023-07-03 11:29:04.068 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1107 

2023-07-03 11:29:04.068 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 926 row column role 1 0 271 

2023-07-03 11:29:04.069 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1468 

2023-07-03 11:29:04.069 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1108 

2023-07-03 11:29:04.069 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 927 row column role 1 0 272 

2023-07-03 11:29:04.069 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1469 

2023-07-03 11:29:04.069 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1109 

2023-07-03 11:29:04.069 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 928 row column role 1 0 273 

2023-07-03 11:29:04.069 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1470 

2023-07-03 11:29:04.069 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1110 

2023-07-03 11:29:04.069 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 929 row column role 1 0 274 

2023-07-03 11:29:04.069 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1471 

2023-07-03 11:29:04.069 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1111 

2023-07-03 11:29:04.069 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 930 row column role 1 0 275 

2023-07-03 11:29:04.070 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1472 

2023-07-03 11:29:04.070 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1112 

2023-07-03 11:29:04.070 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 931 row column role 2 0 257 

2023-07-03 11:29:04.070 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1473 

2023-07-03 11:29:04.070 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1113 

2023-07-03 11:29:04.070 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 932 row column role 2 0 258 

2023-07-03 11:29:04.070 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1474 

2023-07-03 11:29:04.070 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1114 

2023-07-03 11:29:04.070 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 933 row column role 2 0 259 

2023-07-03 11:29:04.070 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1475 

2023-07-03 11:29:04.070 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1115 

2023-07-03 11:29:04.070 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 934 row column role 2 0 260 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1476 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1116 

2023-07-03 11:29:04.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 935 row column role 2 0 261 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1477 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1117 

2023-07-03 11:29:04.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 936 row column role 2 0 262 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1478 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1118 

2023-07-03 11:29:04.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 937 row column role 2 0 263 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1479 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1119 

2023-07-03 11:29:04.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 938 row column role 2 0 264 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1480 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1120 

2023-07-03 11:29:04.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 939 row column role 2 0 265 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1481 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1121 

2023-07-03 11:29:04.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 940 row column role 2 0 266 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1482 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1122 

2023-07-03 11:29:04.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 941 row column role 2 0 267 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1483 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1123 

2023-07-03 11:29:04.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 942 row column role 2 0 268 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1484 

2023-07-03 11:29:04.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1124 

2023-07-03 11:29:04.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 943 row column role 2 0 269 

2023-07-03 11:29:04.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1485 

2023-07-03 11:29:04.072 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1125 

2023-07-03 11:29:04.072 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 944 row column role 2 0 270 

2023-07-03 11:29:04.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1486 

2023-07-03 11:29:04.072 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1126 

2023-07-03 11:29:04.072 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 945 row column role 2 0 271 

2023-07-03 11:29:04.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1487 

2023-07-03 11:29:04.072 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1127 

2023-07-03 11:29:04.072 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 946 row column role 2 0 272 

2023-07-03 11:29:04.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1488 

2023-07-03 11:29:04.072 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1128 

2023-07-03 11:29:04.072 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 947 row column role 2 0 273 

2023-07-03 11:29:04.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1489 

2023-07-03 11:29:04.072 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1129 

2023-07-03 11:29:04.072 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 948 row column role 2 0 274 

2023-07-03 11:29:04.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1490 

2023-07-03 11:29:04.072 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1130 

2023-07-03 11:29:04.072 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 949 row column role 2 0 275 

2023-07-03 11:29:04.073 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1491 

2023-07-03 11:29:04.073 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1131 

2023-07-03 11:29:04.073 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 950 row column role 3 0 257 

2023-07-03 11:29:04.073 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1492 

2023-07-03 11:29:04.073 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1132 

2023-07-03 11:29:04.073 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 951 row column role 3 0 258 

2023-07-03 11:29:04.073 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1493 

2023-07-03 11:29:04.073 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1133 

2023-07-03 11:29:04.073 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 952 row column role 3 0 259 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1494 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1134 

2023-07-03 11:29:04.074 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 953 row column role 3 0 260 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1495 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1135 

2023-07-03 11:29:04.074 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 954 row column role 3 0 261 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1496 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1136 

2023-07-03 11:29:04.074 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 955 row column role 3 0 262 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1497 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1137 

2023-07-03 11:29:04.074 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 956 row column role 3 0 263 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1498 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1138 

2023-07-03 11:29:04.074 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 957 row column role 3 0 264 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1499 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1139 

2023-07-03 11:29:04.074 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 958 row column role 3 0 265 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1500 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1140 

2023-07-03 11:29:04.074 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 959 row column role 3 0 266 

2023-07-03 11:29:04.074 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1501 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1141 

2023-07-03 11:29:04.075 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 960 row column role 3 0 267 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1502 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1142 

2023-07-03 11:29:04.075 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 961 row column role 3 0 268 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1503 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1143 

2023-07-03 11:29:04.075 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 962 row column role 3 0 269 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1504 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1144 

2023-07-03 11:29:04.075 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 963 row column role 3 0 270 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1505 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1145 

2023-07-03 11:29:04.075 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 964 row column role 3 0 271 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1506 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1146 

2023-07-03 11:29:04.075 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 965 row column role 3 0 272 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1507 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1147 

2023-07-03 11:29:04.075 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 966 row column role 3 0 273 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1508 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1148 

2023-07-03 11:29:04.075 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 967 row column role 3 0 274 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1509 

2023-07-03 11:29:04.075 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1149 

2023-07-03 11:29:04.075 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 968 row column role 3 0 275 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1510 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1150 

2023-07-03 11:29:04.077 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 969 row column role 4 0 257 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1511 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1151 

2023-07-03 11:29:04.077 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 970 row column role 4 0 258 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1512 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1152 

2023-07-03 11:29:04.077 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 971 row column role 4 0 259 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1513 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1153 

2023-07-03 11:29:04.077 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 972 row column role 4 0 260 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1514 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1154 

2023-07-03 11:29:04.077 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 973 row column role 4 0 261 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1515 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1155 

2023-07-03 11:29:04.077 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 974 row column role 4 0 262 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1516 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1156 

2023-07-03 11:29:04.077 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 975 row column role 4 0 263 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1517 

2023-07-03 11:29:04.077 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1157 

2023-07-03 11:29:04.077 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 976 row column role 4 0 264 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1518 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1158 

2023-07-03 11:29:04.078 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 977 row column role 4 0 265 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1519 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1159 

2023-07-03 11:29:04.078 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 978 row column role 4 0 266 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1520 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1160 

2023-07-03 11:29:04.078 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 979 row column role 4 0 267 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1521 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1161 

2023-07-03 11:29:04.078 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 980 row column role 4 0 268 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1522 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1162 

2023-07-03 11:29:04.078 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 981 row column role 4 0 269 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1523 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1163 

2023-07-03 11:29:04.078 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 982 row column role 4 0 270 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1524 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1164 

2023-07-03 11:29:04.078 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 983 row column role 4 0 271 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1525 

2023-07-03 11:29:04.078 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1165 

2023-07-03 11:29:04.078 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 984 row column role 4 0 272 

2023-07-03 11:29:04.079 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1526 

2023-07-03 11:29:04.079 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1166 

2023-07-03 11:29:04.079 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 985 row column role 4 0 273 

2023-07-03 11:29:04.079 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1527 

2023-07-03 11:29:04.079 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1167 

2023-07-03 11:29:04.079 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 986 row column role 4 0 274 

2023-07-03 11:29:04.079 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1528 

2023-07-03 11:29:04.079 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1168 

2023-07-03 11:29:04.079 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 987 row column role 4 0 275 

2023-07-03 11:29:04.080 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1529 

2023-07-03 11:29:04.080 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1169 

2023-07-03 11:29:04.080 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 988 row column role 5 0 257 

2023-07-03 11:29:04.080 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1530 

2023-07-03 11:29:04.080 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1170 

2023-07-03 11:29:04.080 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 989 row column role 5 0 258 

2023-07-03 11:29:04.080 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1531 

2023-07-03 11:29:04.080 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1171 

2023-07-03 11:29:04.080 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 990 row column role 5 0 259 

2023-07-03 11:29:04.080 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1532 

2023-07-03 11:29:04.080 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1172 

2023-07-03 11:29:04.080 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 991 row column role 5 0 260 

2023-07-03 11:29:04.080 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1533 

2023-07-03 11:29:04.080 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1173 

2023-07-03 11:29:04.080 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 992 row column role 5 0 261 

2023-07-03 11:29:04.080 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1534 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1174 

2023-07-03 11:29:04.081 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 993 row column role 5 0 262 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1535 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1175 

2023-07-03 11:29:04.081 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 994 row column role 5 0 263 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1536 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1176 

2023-07-03 11:29:04.081 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 995 row column role 5 0 264 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1537 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1177 

2023-07-03 11:29:04.081 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 996 row column role 5 0 265 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1538 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1178 

2023-07-03 11:29:04.081 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 997 row column role 5 0 266 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1539 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1179 

2023-07-03 11:29:04.081 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 998 row column role 5 0 267 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1540 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1180 

2023-07-03 11:29:04.081 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 999 row column role 5 0 268 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1541 

2023-07-03 11:29:04.081 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1181 

2023-07-03 11:29:04.081 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1000 row column role 5 0 269 

2023-07-03 11:29:04.082 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1542 

2023-07-03 11:29:04.082 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1182 

2023-07-03 11:29:04.082 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1001 row column role 5 0 270 

2023-07-03 11:29:04.082 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1543 

2023-07-03 11:29:04.082 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1183 

2023-07-03 11:29:04.082 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1002 row column role 5 0 271 

2023-07-03 11:29:04.082 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1544 

2023-07-03 11:29:04.082 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1184 

2023-07-03 11:29:04.082 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1003 row column role 5 0 272 

2023-07-03 11:29:04.082 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1545 

2023-07-03 11:29:04.082 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1185 

2023-07-03 11:29:04.082 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1004 row column role 5 0 273 

2023-07-03 11:29:04.082 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1546 

2023-07-03 11:29:04.082 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1186 

2023-07-03 11:29:04.082 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1005 row column role 5 0 274 

2023-07-03 11:29:04.082 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1547 

2023-07-03 11:29:04.082 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1187 

2023-07-03 11:29:04.082 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1006 row column role 5 0 275 

2023-07-03 11:29:04.083 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1548 

2023-07-03 11:29:04.083 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1188 

2023-07-03 11:29:04.083 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1007 row column role 6 0 257 

2023-07-03 11:29:04.083 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1549 

2023-07-03 11:29:04.083 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1189 

2023-07-03 11:29:04.083 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1008 row column role 6 0 258 

2023-07-03 11:29:04.083 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1550 

2023-07-03 11:29:04.083 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1190 

2023-07-03 11:29:04.083 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1009 row column role 6 0 259 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1551 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1191 

2023-07-03 11:29:04.084 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1010 row column role 6 0 260 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1552 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1192 

2023-07-03 11:29:04.084 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1011 row column role 6 0 261 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1553 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1193 

2023-07-03 11:29:04.084 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1012 row column role 6 0 262 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1554 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1194 

2023-07-03 11:29:04.084 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1013 row column role 6 0 263 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1555 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1195 

2023-07-03 11:29:04.084 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1014 row column role 6 0 264 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1556 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1196 

2023-07-03 11:29:04.084 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1015 row column role 6 0 265 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1557 

2023-07-03 11:29:04.084 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1197 

2023-07-03 11:29:04.084 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1016 row column role 6 0 266 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1558 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1198 

2023-07-03 11:29:04.085 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1017 row column role 6 0 267 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1559 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1199 

2023-07-03 11:29:04.085 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1018 row column role 6 0 268 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1560 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1200 

2023-07-03 11:29:04.085 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1019 row column role 6 0 269 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1561 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1201 

2023-07-03 11:29:04.085 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1020 row column role 6 0 270 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1562 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1202 

2023-07-03 11:29:04.085 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1021 row column role 6 0 271 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1563 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1203 

2023-07-03 11:29:04.085 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1022 row column role 6 0 272 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1564 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1204 

2023-07-03 11:29:04.085 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1023 row column role 6 0 273 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1565 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1205 

2023-07-03 11:29:04.085 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1024 row column role 6 0 274 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1566 

2023-07-03 11:29:04.085 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1206 

2023-07-03 11:29:04.086 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1025 row column role 6 0 275 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1567 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1207 

2023-07-03 11:29:04.087 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1026 row column role 7 0 257 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1568 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1208 

2023-07-03 11:29:04.087 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1027 row column role 7 0 258 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1569 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1209 

2023-07-03 11:29:04.087 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1028 row column role 7 0 259 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1570 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1210 

2023-07-03 11:29:04.087 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1029 row column role 7 0 260 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1571 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1211 

2023-07-03 11:29:04.087 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1030 row column role 7 0 261 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1572 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1212 

2023-07-03 11:29:04.087 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1031 row column role 7 0 262 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1573 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1213 

2023-07-03 11:29:04.087 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1032 row column role 7 0 263 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1574 

2023-07-03 11:29:04.087 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1214 

2023-07-03 11:29:04.087 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1033 row column role 7 0 264 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1575 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1215 

2023-07-03 11:29:04.088 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1034 row column role 7 0 265 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1576 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1216 

2023-07-03 11:29:04.088 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1035 row column role 7 0 266 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1577 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1217 

2023-07-03 11:29:04.088 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1036 row column role 7 0 267 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1578 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1218 

2023-07-03 11:29:04.088 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1037 row column role 7 0 268 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1579 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1219 

2023-07-03 11:29:04.088 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1038 row column role 7 0 269 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1580 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1220 

2023-07-03 11:29:04.088 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1039 row column role 7 0 270 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1581 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1221 

2023-07-03 11:29:04.088 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1040 row column role 7 0 271 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1582 

2023-07-03 11:29:04.088 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1222 

2023-07-03 11:29:04.089 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1041 row column role 7 0 272 

2023-07-03 11:29:04.089 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1583 

2023-07-03 11:29:04.089 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1223 

2023-07-03 11:29:04.089 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1042 row column role 7 0 273 

2023-07-03 11:29:04.089 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1584 

2023-07-03 11:29:04.089 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1224 

2023-07-03 11:29:04.089 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1043 row column role 7 0 274 

2023-07-03 11:29:04.089 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1585 

2023-07-03 11:29:04.089 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1225 

2023-07-03 11:29:04.089 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1044 row column role 7 0 275 

2023-07-03 11:29:04.090 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1586 

2023-07-03 11:29:04.090 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1226 

2023-07-03 11:29:04.090 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1045 row column role 8 0 257 

2023-07-03 11:29:04.090 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1587 

2023-07-03 11:29:04.090 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1227 

2023-07-03 11:29:04.090 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1046 row column role 8 0 258 

2023-07-03 11:29:04.090 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1588 

2023-07-03 11:29:04.090 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1228 

2023-07-03 11:29:04.090 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1047 row column role 8 0 259 

2023-07-03 11:29:04.090 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1589 

2023-07-03 11:29:04.090 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1229 

2023-07-03 11:29:04.090 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1048 row column role 8 0 260 

2023-07-03 11:29:04.090 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1590 

2023-07-03 11:29:04.090 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1230 

2023-07-03 11:29:04.090 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1049 row column role 8 0 261 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1591 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1231 

2023-07-03 11:29:04.091 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1050 row column role 8 0 262 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1592 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1232 

2023-07-03 11:29:04.091 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1051 row column role 8 0 263 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1593 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1233 

2023-07-03 11:29:04.091 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1052 row column role 8 0 264 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1594 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1234 

2023-07-03 11:29:04.091 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1053 row column role 8 0 265 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1595 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1235 

2023-07-03 11:29:04.091 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1054 row column role 8 0 266 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1596 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1236 

2023-07-03 11:29:04.091 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1055 row column role 8 0 267 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1597 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1237 

2023-07-03 11:29:04.091 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1056 row column role 8 0 268 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1598 

2023-07-03 11:29:04.091 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1238 

2023-07-03 11:29:04.091 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1057 row column role 8 0 269 

2023-07-03 11:29:04.092 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1599 

2023-07-03 11:29:04.092 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1239 

2023-07-03 11:29:04.092 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1058 row column role 8 0 270 

2023-07-03 11:29:04.092 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1600 

2023-07-03 11:29:04.092 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1240 

2023-07-03 11:29:04.092 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1059 row column role 8 0 271 

2023-07-03 11:29:04.092 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1601 

2023-07-03 11:29:04.092 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1241 

2023-07-03 11:29:04.092 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1060 row column role 8 0 272 

2023-07-03 11:29:04.092 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1602 

2023-07-03 11:29:04.092 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1242 

2023-07-03 11:29:04.092 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1061 row column role 8 0 273 

2023-07-03 11:29:04.092 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1603 

2023-07-03 11:29:04.092 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1243 

2023-07-03 11:29:04.092 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1062 row column role 8 0 274 

2023-07-03 11:29:04.092 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1604 

2023-07-03 11:29:04.092 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1244 

2023-07-03 11:29:04.092 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1063 row column role 8 0 275 

2023-07-03 11:29:04.093 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1605 

2023-07-03 11:29:04.093 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1245 

2023-07-03 11:29:04.093 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1064 row column role 9 0 257 

2023-07-03 11:29:04.093 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1606 

2023-07-03 11:29:04.093 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1246 

2023-07-03 11:29:04.093 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1065 row column role 9 0 258 

2023-07-03 11:29:04.093 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1607 

2023-07-03 11:29:04.093 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1247 

2023-07-03 11:29:04.093 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1066 row column role 9 0 259 

2023-07-03 11:29:04.093 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1608 

2023-07-03 11:29:04.093 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1248 

2023-07-03 11:29:04.093 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1067 row column role 9 0 260 

2023-07-03 11:29:04.093 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1609 

2023-07-03 11:29:04.093 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1249 

2023-07-03 11:29:04.093 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1068 row column role 9 0 261 

2023-07-03 11:29:04.093 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1610 

2023-07-03 11:29:04.093 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1250 

2023-07-03 11:29:04.093 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1069 row column role 9 0 262 

2023-07-03 11:29:04.093 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1611 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1251 

2023-07-03 11:29:04.094 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1070 row column role 9 0 263 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1612 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1252 

2023-07-03 11:29:04.094 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1071 row column role 9 0 264 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1613 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1253 

2023-07-03 11:29:04.094 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1072 row column role 9 0 265 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1614 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1254 

2023-07-03 11:29:04.094 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1073 row column role 9 0 266 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1615 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1255 

2023-07-03 11:29:04.094 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1074 row column role 9 0 267 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1616 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1256 

2023-07-03 11:29:04.094 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1075 row column role 9 0 268 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1617 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1257 

2023-07-03 11:29:04.094 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1076 row column role 9 0 269 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1618 

2023-07-03 11:29:04.094 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1258 

2023-07-03 11:29:04.094 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1077 row column role 9 0 270 

2023-07-03 11:29:04.095 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1619 

2023-07-03 11:29:04.095 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1259 

2023-07-03 11:29:04.095 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1078 row column role 9 0 271 

2023-07-03 11:29:04.095 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1620 

2023-07-03 11:29:04.095 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1260 

2023-07-03 11:29:04.095 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1079 row column role 9 0 272 

2023-07-03 11:29:04.095 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1621 

2023-07-03 11:29:04.095 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1261 

2023-07-03 11:29:04.095 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1080 row column role 9 0 273 

2023-07-03 11:29:04.095 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1622 

2023-07-03 11:29:04.095 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1262 

2023-07-03 11:29:04.095 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1081 row column role 9 0 274 

2023-07-03 11:29:04.095 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1623 

2023-07-03 11:29:04.095 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1263 

2023-07-03 11:29:04.095 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1082 row column role 9 0 275 

2023-07-03 11:29:04.096 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1624 

2023-07-03 11:29:04.096 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1264 

2023-07-03 11:29:04.096 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1083 row column role 10 0 257 

2023-07-03 11:29:04.096 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1625 

2023-07-03 11:29:04.096 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1265 

2023-07-03 11:29:04.096 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1084 row column role 10 0 258 

2023-07-03 11:29:04.096 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1626 

2023-07-03 11:29:04.096 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1266 

2023-07-03 11:29:04.096 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1085 row column role 10 0 259 

2023-07-03 11:29:04.096 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1627 

2023-07-03 11:29:04.096 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1267 

2023-07-03 11:29:04.096 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1086 row column role 10 0 260 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1628 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1268 

2023-07-03 11:29:04.097 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1087 row column role 10 0 261 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1629 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1269 

2023-07-03 11:29:04.097 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1088 row column role 10 0 262 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1630 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1270 

2023-07-03 11:29:04.097 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1089 row column role 10 0 263 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1631 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1271 

2023-07-03 11:29:04.097 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1090 row column role 10 0 264 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1632 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1272 

2023-07-03 11:29:04.097 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1091 row column role 10 0 265 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1633 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1273 

2023-07-03 11:29:04.097 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1092 row column role 10 0 266 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1634 

2023-07-03 11:29:04.097 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1274 

2023-07-03 11:29:04.097 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1093 row column role 10 0 267 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1635 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1275 

2023-07-03 11:29:04.098 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1094 row column role 10 0 268 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1636 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1276 

2023-07-03 11:29:04.098 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1095 row column role 10 0 269 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1637 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1277 

2023-07-03 11:29:04.098 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1096 row column role 10 0 270 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1638 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1278 

2023-07-03 11:29:04.098 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1097 row column role 10 0 271 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1639 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1279 

2023-07-03 11:29:04.098 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1098 row column role 10 0 272 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1640 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1280 

2023-07-03 11:29:04.098 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1099 row column role 10 0 273 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1641 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1281 

2023-07-03 11:29:04.098 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1100 row column role 10 0 274 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1642 

2023-07-03 11:29:04.098 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1282 

2023-07-03 11:29:04.098 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1101 row column role 10 0 275 

2023-07-03 11:29:04.099 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1643 

2023-07-03 11:29:04.099 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1283 

2023-07-03 11:29:04.099 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1102 row column role 11 0 257 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1644 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1284 

2023-07-03 11:29:04.100 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1103 row column role 11 0 258 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1645 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1285 

2023-07-03 11:29:04.100 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1104 row column role 11 0 259 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1646 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1286 

2023-07-03 11:29:04.100 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1105 row column role 11 0 260 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1647 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1287 

2023-07-03 11:29:04.100 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1106 row column role 11 0 261 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1648 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1288 

2023-07-03 11:29:04.100 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1107 row column role 11 0 262 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1649 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1289 

2023-07-03 11:29:04.100 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1108 row column role 11 0 263 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1650 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1290 

2023-07-03 11:29:04.100 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1109 row column role 11 0 264 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1651 

2023-07-03 11:29:04.100 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1291 

2023-07-03 11:29:04.100 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1110 row column role 11 0 265 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1652 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1292 

2023-07-03 11:29:04.101 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1111 row column role 11 0 266 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1653 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1293 

2023-07-03 11:29:04.101 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1112 row column role 11 0 267 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1654 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1294 

2023-07-03 11:29:04.101 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1113 row column role 11 0 268 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1655 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1295 

2023-07-03 11:29:04.101 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1114 row column role 11 0 269 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1656 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1296 

2023-07-03 11:29:04.101 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1115 row column role 11 0 270 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1657 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1297 

2023-07-03 11:29:04.101 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1116 row column role 11 0 271 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1658 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1298 

2023-07-03 11:29:04.101 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1117 row column role 11 0 272 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1659 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1299 

2023-07-03 11:29:04.101 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1118 row column role 11 0 273 

2023-07-03 11:29:04.101 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1660 

2023-07-03 11:29:04.102 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1300 

2023-07-03 11:29:04.102 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1119 row column role 11 0 274 

2023-07-03 11:29:04.102 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1661 

2023-07-03 11:29:04.102 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1301 

2023-07-03 11:29:04.102 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1120 row column role 11 0 275 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1662 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1302 

2023-07-03 11:29:04.103 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1121 row column role 12 0 257 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1663 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1303 

2023-07-03 11:29:04.103 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1122 row column role 12 0 258 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1664 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1304 

2023-07-03 11:29:04.103 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1123 row column role 12 0 259 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1665 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1305 

2023-07-03 11:29:04.103 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1124 row column role 12 0 260 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1666 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1306 

2023-07-03 11:29:04.103 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1125 row column role 12 0 261 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1667 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1307 

2023-07-03 11:29:04.103 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1126 row column role 12 0 262 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1668 

2023-07-03 11:29:04.103 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1308 

2023-07-03 11:29:04.103 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1127 row column role 12 0 263 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1669 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1309 

2023-07-03 11:29:04.104 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1128 row column role 12 0 264 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1670 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1310 

2023-07-03 11:29:04.104 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1129 row column role 12 0 265 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1671 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1311 

2023-07-03 11:29:04.104 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1130 row column role 12 0 266 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1672 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1312 

2023-07-03 11:29:04.104 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1131 row column role 12 0 267 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1673 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1313 

2023-07-03 11:29:04.104 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1132 row column role 12 0 268 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1674 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1314 

2023-07-03 11:29:04.104 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1133 row column role 12 0 269 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1675 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1315 

2023-07-03 11:29:04.104 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1134 row column role 12 0 270 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1676 

2023-07-03 11:29:04.104 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1316 

2023-07-03 11:29:04.105 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1135 row column role 12 0 271 

2023-07-03 11:29:04.105 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1677 

2023-07-03 11:29:04.105 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1317 

2023-07-03 11:29:04.105 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1136 row column role 12 0 272 

2023-07-03 11:29:04.105 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1678 

2023-07-03 11:29:04.105 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1318 

2023-07-03 11:29:04.105 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1137 row column role 12 0 273 

2023-07-03 11:29:04.105 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1679 

2023-07-03 11:29:04.105 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1319 

2023-07-03 11:29:04.105 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1138 row column role 12 0 274 

2023-07-03 11:29:04.105 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1680 

2023-07-03 11:29:04.105 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1320 

2023-07-03 11:29:04.105 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1139 row column role 12 0 275 

2023-07-03 11:29:04.106 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1681 

2023-07-03 11:29:04.106 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1321 

2023-07-03 11:29:04.106 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1140 row column role 13 0 257 

2023-07-03 11:29:04.106 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1682 

2023-07-03 11:29:04.106 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1322 

2023-07-03 11:29:04.106 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1141 row column role 13 0 258 

2023-07-03 11:29:04.106 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1683 

2023-07-03 11:29:04.106 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1323 

2023-07-03 11:29:04.106 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1142 row column role 13 0 259 

2023-07-03 11:29:04.106 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1684 

2023-07-03 11:29:04.106 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1324 

2023-07-03 11:29:04.106 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1143 row column role 13 0 260 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1685 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1325 

2023-07-03 11:29:04.107 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1144 row column role 13 0 261 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1686 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1326 

2023-07-03 11:29:04.107 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1145 row column role 13 0 262 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1687 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1327 

2023-07-03 11:29:04.107 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1146 row column role 13 0 263 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1688 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1328 

2023-07-03 11:29:04.107 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1147 row column role 13 0 264 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1689 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1329 

2023-07-03 11:29:04.107 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1148 row column role 13 0 265 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1690 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1330 

2023-07-03 11:29:04.107 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1149 row column role 13 0 266 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1691 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1331 

2023-07-03 11:29:04.107 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1150 row column role 13 0 267 

2023-07-03 11:29:04.107 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1692 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1332 

2023-07-03 11:29:04.108 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1151 row column role 13 0 268 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1693 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1333 

2023-07-03 11:29:04.108 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1152 row column role 13 0 269 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1694 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1334 

2023-07-03 11:29:04.108 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1153 row column role 13 0 270 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1695 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1335 

2023-07-03 11:29:04.108 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1154 row column role 13 0 271 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1696 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1336 

2023-07-03 11:29:04.108 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1155 row column role 13 0 272 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1697 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1337 

2023-07-03 11:29:04.108 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1156 row column role 13 0 273 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1698 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1338 

2023-07-03 11:29:04.108 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1157 row column role 13 0 274 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1699 

2023-07-03 11:29:04.108 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1339 

2023-07-03 11:29:04.108 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1158 row column role 13 0 275 

2023-07-03 11:29:04.109 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1700 

2023-07-03 11:29:04.109 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1340 

2023-07-03 11:29:04.109 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1159 row column role 14 0 257 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1701 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1341 

2023-07-03 11:29:04.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1160 row column role 14 0 258 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1702 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1342 

2023-07-03 11:29:04.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1161 row column role 14 0 259 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1703 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1343 

2023-07-03 11:29:04.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1162 row column role 14 0 260 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1704 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1344 

2023-07-03 11:29:04.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1163 row column role 14 0 261 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1705 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1345 

2023-07-03 11:29:04.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1164 row column role 14 0 262 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1706 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1346 

2023-07-03 11:29:04.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1165 row column role 14 0 263 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1707 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1347 

2023-07-03 11:29:04.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1166 row column role 14 0 264 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1708 

2023-07-03 11:29:04.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1348 

2023-07-03 11:29:04.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1167 row column role 14 0 265 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1709 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1349 

2023-07-03 11:29:04.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1168 row column role 14 0 266 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1710 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1350 

2023-07-03 11:29:04.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1169 row column role 14 0 267 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1711 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1351 

2023-07-03 11:29:04.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1170 row column role 14 0 268 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1712 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1352 

2023-07-03 11:29:04.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1171 row column role 14 0 269 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1713 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1353 

2023-07-03 11:29:04.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1172 row column role 14 0 270 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1714 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1354 

2023-07-03 11:29:04.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1173 row column role 14 0 271 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1715 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1355 

2023-07-03 11:29:04.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1174 row column role 14 0 272 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1716 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1356 

2023-07-03 11:29:04.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1175 row column role 14 0 273 

2023-07-03 11:29:04.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1717 

2023-07-03 11:29:04.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1357 

2023-07-03 11:29:04.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1176 row column role 14 0 274 

2023-07-03 11:29:04.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1718 

2023-07-03 11:29:04.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1358 

2023-07-03 11:29:04.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1177 row column role 14 0 275 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1719 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1359 

2023-07-03 11:29:04.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1178 row column role 15 0 257 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1720 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1360 

2023-07-03 11:29:04.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1179 row column role 15 0 258 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1721 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1361 

2023-07-03 11:29:04.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1180 row column role 15 0 259 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1722 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1362 

2023-07-03 11:29:04.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1181 row column role 15 0 260 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1723 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1363 

2023-07-03 11:29:04.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1182 row column role 15 0 261 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1724 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1364 

2023-07-03 11:29:04.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1183 row column role 15 0 262 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1725 

2023-07-03 11:29:04.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1365 

2023-07-03 11:29:04.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1184 row column role 15 0 263 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1726 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1366 

2023-07-03 11:29:04.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1185 row column role 15 0 264 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1727 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1367 

2023-07-03 11:29:04.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1186 row column role 15 0 265 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1728 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1368 

2023-07-03 11:29:04.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1187 row column role 15 0 266 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1729 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1369 

2023-07-03 11:29:04.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1188 row column role 15 0 267 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1730 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1370 

2023-07-03 11:29:04.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1189 row column role 15 0 268 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1731 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1371 

2023-07-03 11:29:04.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1190 row column role 15 0 269 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1732 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1372 

2023-07-03 11:29:04.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1191 row column role 15 0 270 

2023-07-03 11:29:04.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1733 

2023-07-03 11:29:04.115 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1373 

2023-07-03 11:29:04.115 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1192 row column role 15 0 271 

2023-07-03 11:29:04.115 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1734 

2023-07-03 11:29:04.115 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1374 

2023-07-03 11:29:04.115 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1193 row column role 15 0 272 

2023-07-03 11:29:04.115 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1735 

2023-07-03 11:29:04.115 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1375 

2023-07-03 11:29:04.115 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1194 row column role 15 0 273 

2023-07-03 11:29:04.115 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1736 

2023-07-03 11:29:04.115 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1376 

2023-07-03 11:29:04.115 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1195 row column role 15 0 274 

2023-07-03 11:29:04.115 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1737 

2023-07-03 11:29:04.115 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1377 

2023-07-03 11:29:04.115 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1196 row column role 15 0 275 

2023-07-03 11:29:04.116 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1738 

2023-07-03 11:29:04.116 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1378 

2023-07-03 11:29:04.116 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1197 row column role 16 0 257 

2023-07-03 11:29:04.116 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1739 

2023-07-03 11:29:04.116 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1379 

2023-07-03 11:29:04.116 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1198 row column role 16 0 258 

2023-07-03 11:29:04.116 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1740 

2023-07-03 11:29:04.116 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1380 

2023-07-03 11:29:04.116 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1199 row column role 16 0 259 

2023-07-03 11:29:04.116 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1741 

2023-07-03 11:29:04.116 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1381 

2023-07-03 11:29:04.116 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1200 row column role 16 0 260 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1742 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1382 

2023-07-03 11:29:04.117 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1201 row column role 16 0 261 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1743 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1383 

2023-07-03 11:29:04.117 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1202 row column role 16 0 262 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1744 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1384 

2023-07-03 11:29:04.117 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1203 row column role 16 0 263 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1745 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1385 

2023-07-03 11:29:04.117 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1204 row column role 16 0 264 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1746 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1386 

2023-07-03 11:29:04.117 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1205 row column role 16 0 265 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1747 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1387 

2023-07-03 11:29:04.117 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1206 row column role 16 0 266 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1748 

2023-07-03 11:29:04.117 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1388 

2023-07-03 11:29:04.117 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1207 row column role 16 0 267 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1749 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1389 

2023-07-03 11:29:04.118 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1208 row column role 16 0 268 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1750 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1390 

2023-07-03 11:29:04.118 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1209 row column role 16 0 269 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1751 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1391 

2023-07-03 11:29:04.118 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1210 row column role 16 0 270 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1752 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1392 

2023-07-03 11:29:04.118 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1211 row column role 16 0 271 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1753 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1393 

2023-07-03 11:29:04.118 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1212 row column role 16 0 272 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1754 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1394 

2023-07-03 11:29:04.118 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1213 row column role 16 0 273 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1755 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1395 

2023-07-03 11:29:04.118 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1214 row column role 16 0 274 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1756 

2023-07-03 11:29:04.118 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1396 

2023-07-03 11:29:04.118 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1215 row column role 16 0 275 

2023-07-03 11:29:04.119 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1757 

2023-07-03 11:29:04.119 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1397 

2023-07-03 11:29:04.119 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1216 row column role 17 0 257 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1758 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1398 

2023-07-03 11:29:04.120 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1217 row column role 17 0 258 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1759 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1399 

2023-07-03 11:29:04.120 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1218 row column role 17 0 259 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1760 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1400 

2023-07-03 11:29:04.120 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1219 row column role 17 0 260 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1761 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1401 

2023-07-03 11:29:04.120 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1220 row column role 17 0 261 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1762 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1402 

2023-07-03 11:29:04.120 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1221 row column role 17 0 262 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1763 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1403 

2023-07-03 11:29:04.120 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1222 row column role 17 0 263 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1764 

2023-07-03 11:29:04.120 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1404 

2023-07-03 11:29:04.120 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1223 row column role 17 0 264 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1765 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1405 

2023-07-03 11:29:04.121 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1224 row column role 17 0 265 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1766 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1406 

2023-07-03 11:29:04.121 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1225 row column role 17 0 266 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1767 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1407 

2023-07-03 11:29:04.121 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1226 row column role 17 0 267 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1768 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1408 

2023-07-03 11:29:04.121 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1227 row column role 17 0 268 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1769 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1409 

2023-07-03 11:29:04.121 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1228 row column role 17 0 269 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1770 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1410 

2023-07-03 11:29:04.121 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1229 row column role 17 0 270 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1771 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1411 

2023-07-03 11:29:04.121 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1230 row column role 17 0 271 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1772 

2023-07-03 11:29:04.121 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1412 

2023-07-03 11:29:04.121 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1231 row column role 17 0 272 

2023-07-03 11:29:04.122 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1773 

2023-07-03 11:29:04.122 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1413 

2023-07-03 11:29:04.122 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1232 row column role 17 0 273 

2023-07-03 11:29:04.122 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1774 

2023-07-03 11:29:04.122 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1414 

2023-07-03 11:29:04.122 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1233 row column role 17 0 274 

2023-07-03 11:29:04.122 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1775 

2023-07-03 11:29:04.122 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1415 

2023-07-03 11:29:04.122 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1234 row column role 17 0 275 

2023-07-03 11:29:04.123 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1776 

2023-07-03 11:29:04.123 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1416 

2023-07-03 11:29:04.123 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1235 row column role 18 0 257 

2023-07-03 11:29:04.123 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1777 

2023-07-03 11:29:04.123 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1417 

2023-07-03 11:29:04.123 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1236 row column role 18 0 258 

2023-07-03 11:29:04.123 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1778 

2023-07-03 11:29:04.123 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1418 

2023-07-03 11:29:04.123 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1237 row column role 18 0 259 

2023-07-03 11:29:04.123 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1779 

2023-07-03 11:29:04.123 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1419 

2023-07-03 11:29:04.123 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1238 row column role 18 0 260 

2023-07-03 11:29:04.123 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1780 

2023-07-03 11:29:04.123 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1420 

2023-07-03 11:29:04.123 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1239 row column role 18 0 261 

2023-07-03 11:29:04.123 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1781 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1421 

2023-07-03 11:29:04.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1240 row column role 18 0 262 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1782 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1422 

2023-07-03 11:29:04.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1241 row column role 18 0 263 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1783 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1423 

2023-07-03 11:29:04.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1242 row column role 18 0 264 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1784 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1424 

2023-07-03 11:29:04.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1243 row column role 18 0 265 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1785 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1425 

2023-07-03 11:29:04.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1244 row column role 18 0 266 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1786 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1426 

2023-07-03 11:29:04.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1245 row column role 18 0 267 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1787 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1427 

2023-07-03 11:29:04.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1246 row column role 18 0 268 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1788 

2023-07-03 11:29:04.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1428 

2023-07-03 11:29:04.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1247 row column role 18 0 269 

2023-07-03 11:29:04.125 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1789 

2023-07-03 11:29:04.125 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1429 

2023-07-03 11:29:04.125 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1248 row column role 18 0 270 

2023-07-03 11:29:04.125 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1790 

2023-07-03 11:29:04.125 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1430 

2023-07-03 11:29:04.125 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1249 row column role 18 0 271 

2023-07-03 11:29:04.125 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1791 

2023-07-03 11:29:04.125 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1431 

2023-07-03 11:29:04.125 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1250 row column role 18 0 272 

2023-07-03 11:29:04.125 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1792 

2023-07-03 11:29:04.125 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1432 

2023-07-03 11:29:04.125 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1251 row column role 18 0 273 

2023-07-03 11:29:04.125 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1793 

2023-07-03 11:29:04.125 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1433 

2023-07-03 11:29:04.125 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1252 row column role 18 0 274 

2023-07-03 11:29:04.125 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1794 

2023-07-03 11:29:04.125 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1434 

2023-07-03 11:29:04.125 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1253 row column role 18 0 275 

2023-07-03 11:29:04.126 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1795 

2023-07-03 11:29:04.126 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1435 

2023-07-03 11:29:04.126 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1254 row column role 19 0 257 

2023-07-03 11:29:04.126 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1796 

2023-07-03 11:29:04.126 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1436 

2023-07-03 11:29:04.126 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1255 row column role 19 0 258 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1797 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1437 

2023-07-03 11:29:04.127 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1256 row column role 19 0 259 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1798 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1438 

2023-07-03 11:29:04.127 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1257 row column role 19 0 260 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1799 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1439 

2023-07-03 11:29:04.127 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1258 row column role 19 0 261 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1800 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1440 

2023-07-03 11:29:04.127 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1259 row column role 19 0 262 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1801 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1441 

2023-07-03 11:29:04.127 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1260 row column role 19 0 263 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1802 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1442 

2023-07-03 11:29:04.127 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1261 row column role 19 0 264 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1803 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1443 

2023-07-03 11:29:04.127 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1262 row column role 19 0 265 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1804 

2023-07-03 11:29:04.127 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1444 

2023-07-03 11:29:04.127 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1263 row column role 19 0 266 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1805 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1445 

2023-07-03 11:29:04.128 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1264 row column role 19 0 267 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1806 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1446 

2023-07-03 11:29:04.128 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1265 row column role 19 0 268 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1807 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1447 

2023-07-03 11:29:04.128 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1266 row column role 19 0 269 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1808 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1448 

2023-07-03 11:29:04.128 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1267 row column role 19 0 270 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1809 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1449 

2023-07-03 11:29:04.128 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1268 row column role 19 0 271 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1810 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1450 

2023-07-03 11:29:04.128 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1269 row column role 19 0 272 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1811 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1451 

2023-07-03 11:29:04.128 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1270 row column role 19 0 273 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1812 

2023-07-03 11:29:04.128 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1452 

2023-07-03 11:29:04.128 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1271 row column role 19 0 274 

2023-07-03 11:29:04.129 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1813 

2023-07-03 11:29:04.129 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1453 

2023-07-03 11:29:04.129 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1272 row column role 19 0 275 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1814 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1454 

2023-07-03 11:29:04.130 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1273 row column role 20 0 257 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1815 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1455 

2023-07-03 11:29:04.130 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1274 row column role 20 0 258 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1816 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1456 

2023-07-03 11:29:04.130 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1275 row column role 20 0 259 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1817 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1457 

2023-07-03 11:29:04.130 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1276 row column role 20 0 260 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1818 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1458 

2023-07-03 11:29:04.130 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1277 row column role 20 0 261 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1819 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1459 

2023-07-03 11:29:04.130 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1278 row column role 20 0 262 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1820 

2023-07-03 11:29:04.130 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1460 

2023-07-03 11:29:04.130 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1279 row column role 20 0 263 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1821 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1461 

2023-07-03 11:29:04.131 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1280 row column role 20 0 264 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1822 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1462 

2023-07-03 11:29:04.131 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1281 row column role 20 0 265 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1823 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1463 

2023-07-03 11:29:04.131 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1282 row column role 20 0 266 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1824 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1464 

2023-07-03 11:29:04.131 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1283 row column role 20 0 267 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1825 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1465 

2023-07-03 11:29:04.131 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1284 row column role 20 0 268 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1826 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1466 

2023-07-03 11:29:04.131 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1285 row column role 20 0 269 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1827 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1467 

2023-07-03 11:29:04.131 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1286 row column role 20 0 270 

2023-07-03 11:29:04.131 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1828 

2023-07-03 11:29:04.132 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1468 

2023-07-03 11:29:04.132 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1287 row column role 20 0 271 

2023-07-03 11:29:04.132 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1829 

2023-07-03 11:29:04.132 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1469 

2023-07-03 11:29:04.132 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1288 row column role 20 0 272 

2023-07-03 11:29:04.132 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1830 

2023-07-03 11:29:04.132 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1470 

2023-07-03 11:29:04.132 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1289 row column role 20 0 273 

2023-07-03 11:29:04.132 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1831 

2023-07-03 11:29:04.132 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1471 

2023-07-03 11:29:04.132 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1290 row column role 20 0 274 

2023-07-03 11:29:04.132 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1832 

2023-07-03 11:29:04.132 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1472 

2023-07-03 11:29:04.132 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1291 row column role 20 0 275 

2023-07-03 11:29:04.133 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1833 

2023-07-03 11:29:04.133 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1473 

2023-07-03 11:29:04.133 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1292 row column role 21 0 257 

2023-07-03 11:29:04.133 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1834 

2023-07-03 11:29:04.133 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1474 

2023-07-03 11:29:04.133 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1293 row column role 21 0 258 

2023-07-03 11:29:04.133 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1835 

2023-07-03 11:29:04.133 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1475 

2023-07-03 11:29:04.133 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1294 row column role 21 0 259 

2023-07-03 11:29:04.133 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1836 

2023-07-03 11:29:04.133 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1476 

2023-07-03 11:29:04.133 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1295 row column role 21 0 260 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1837 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1477 

2023-07-03 11:29:04.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1296 row column role 21 0 261 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1838 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1478 

2023-07-03 11:29:04.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1297 row column role 21 0 262 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1839 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1479 

2023-07-03 11:29:04.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1298 row column role 21 0 263 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1840 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1480 

2023-07-03 11:29:04.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1299 row column role 21 0 264 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1841 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1481 

2023-07-03 11:29:04.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1300 row column role 21 0 265 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1842 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1482 

2023-07-03 11:29:04.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1301 row column role 21 0 266 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1843 

2023-07-03 11:29:04.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1483 

2023-07-03 11:29:04.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1302 row column role 21 0 267 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1844 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1484 

2023-07-03 11:29:04.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1303 row column role 21 0 268 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1845 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1485 

2023-07-03 11:29:04.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1304 row column role 21 0 269 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1846 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1486 

2023-07-03 11:29:04.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1305 row column role 21 0 270 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1847 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1487 

2023-07-03 11:29:04.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1306 row column role 21 0 271 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1848 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1488 

2023-07-03 11:29:04.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1307 row column role 21 0 272 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1849 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1489 

2023-07-03 11:29:04.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1308 row column role 21 0 273 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1850 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1490 

2023-07-03 11:29:04.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1309 row column role 21 0 274 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1851 

2023-07-03 11:29:04.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1491 

2023-07-03 11:29:04.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1310 row column role 21 0 275 

2023-07-03 11:29:04.136 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1852 

2023-07-03 11:29:04.136 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1492 

2023-07-03 11:29:04.136 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1311 row column role 22 0 257 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1853 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1493 

2023-07-03 11:29:04.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1312 row column role 22 0 258 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1854 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1494 

2023-07-03 11:29:04.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1313 row column role 22 0 259 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1855 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1495 

2023-07-03 11:29:04.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1314 row column role 22 0 260 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1856 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1496 

2023-07-03 11:29:04.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1315 row column role 22 0 261 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1857 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1497 

2023-07-03 11:29:04.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1316 row column role 22 0 262 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1858 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1498 

2023-07-03 11:29:04.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1317 row column role 22 0 263 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1859 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1499 

2023-07-03 11:29:04.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1318 row column role 22 0 264 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1860 

2023-07-03 11:29:04.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1500 

2023-07-03 11:29:04.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1319 row column role 22 0 265 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1861 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1501 

2023-07-03 11:29:04.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1320 row column role 22 0 266 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1862 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1502 

2023-07-03 11:29:04.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1321 row column role 22 0 267 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1863 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1503 

2023-07-03 11:29:04.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1322 row column role 22 0 268 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1864 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1504 

2023-07-03 11:29:04.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1323 row column role 22 0 269 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1865 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1505 

2023-07-03 11:29:04.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1324 row column role 22 0 270 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1866 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1506 

2023-07-03 11:29:04.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1325 row column role 22 0 271 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1867 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1507 

2023-07-03 11:29:04.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1326 row column role 22 0 272 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1868 

2023-07-03 11:29:04.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1508 

2023-07-03 11:29:04.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1327 row column role 22 0 273 

2023-07-03 11:29:04.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1869 

2023-07-03 11:29:04.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1509 

2023-07-03 11:29:04.139 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1328 row column role 22 0 274 

2023-07-03 11:29:04.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1870 

2023-07-03 11:29:04.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1510 

2023-07-03 11:29:04.139 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1329 row column role 22 0 275 

2023-07-03 11:29:04.148 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1871 

2023-07-03 11:29:04.148 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1511 

2023-07-03 11:29:04.148 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1330 row column role 23 0 257 

2023-07-03 11:29:04.148 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1872 

2023-07-03 11:29:04.148 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1512 

2023-07-03 11:29:04.148 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1331 row column role 23 0 258 

2023-07-03 11:29:04.148 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1873 

2023-07-03 11:29:04.148 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1513 

2023-07-03 11:29:04.148 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1332 row column role 23 0 259 

2023-07-03 11:29:04.148 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1874 

2023-07-03 11:29:04.148 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1514 

2023-07-03 11:29:04.148 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1333 row column role 23 0 260 

2023-07-03 11:29:04.149 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1875 

2023-07-03 11:29:04.149 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1515 

2023-07-03 11:29:04.149 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1334 row column role 23 0 261 

2023-07-03 11:29:04.149 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1876 

2023-07-03 11:29:04.149 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1516 

2023-07-03 11:29:04.149 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1335 row column role 23 0 262 

2023-07-03 11:29:04.149 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1877 

2023-07-03 11:29:04.149 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1517 

2023-07-03 11:29:04.149 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1336 row column role 23 0 263 

2023-07-03 11:29:04.149 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1878 

2023-07-03 11:29:04.149 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1518 

2023-07-03 11:29:04.149 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1337 row column role 23 0 264 

2023-07-03 11:29:04.149 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1879 

2023-07-03 11:29:04.149 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1519 

2023-07-03 11:29:04.149 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1338 row column role 23 0 265 

2023-07-03 11:29:04.149 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1880 

2023-07-03 11:29:04.149 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1520 

2023-07-03 11:29:04.149 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1339 row column role 23 0 266 

2023-07-03 11:29:04.149 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1881 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1521 

2023-07-03 11:29:04.150 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1340 row column role 23 0 267 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1882 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1522 

2023-07-03 11:29:04.150 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1341 row column role 23 0 268 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1883 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1523 

2023-07-03 11:29:04.150 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1342 row column role 23 0 269 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1884 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1524 

2023-07-03 11:29:04.150 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1343 row column role 23 0 270 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1885 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1525 

2023-07-03 11:29:04.150 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1344 row column role 23 0 271 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1886 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1526 

2023-07-03 11:29:04.150 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1345 row column role 23 0 272 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1887 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1527 

2023-07-03 11:29:04.150 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1346 row column role 23 0 273 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1888 

2023-07-03 11:29:04.150 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1528 

2023-07-03 11:29:04.150 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1347 row column role 23 0 274 

2023-07-03 11:29:04.151 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1889 

2023-07-03 11:29:04.151 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1529 

2023-07-03 11:29:04.151 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1348 row column role 23 0 275 

2023-07-03 11:29:04.152 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1890 

2023-07-03 11:29:04.152 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1530 

2023-07-03 11:29:04.152 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1349 row column role 24 0 257 

2023-07-03 11:29:04.152 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1891 

2023-07-03 11:29:04.152 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1531 

2023-07-03 11:29:04.152 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1350 row column role 24 0 258 

2023-07-03 11:29:04.152 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1892 

2023-07-03 11:29:04.152 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1532 

2023-07-03 11:29:04.152 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1351 row column role 24 0 259 

2023-07-03 11:29:04.152 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1893 

2023-07-03 11:29:04.152 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1533 

2023-07-03 11:29:04.152 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1352 row column role 24 0 260 

2023-07-03 11:29:04.153 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1894 

2023-07-03 11:29:04.153 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1534 

2023-07-03 11:29:04.153 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1353 row column role 24 0 261 

2023-07-03 11:29:04.153 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1895 

2023-07-03 11:29:04.153 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1535 

2023-07-03 11:29:04.153 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1354 row column role 24 0 262 

2023-07-03 11:29:04.153 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1896 

2023-07-03 11:29:04.153 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1536 

2023-07-03 11:29:04.153 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1355 row column role 24 0 263 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1897 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1537 

2023-07-03 11:29:04.154 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1356 row column role 24 0 264 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1898 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1538 

2023-07-03 11:29:04.154 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1357 row column role 24 0 265 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1899 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1539 

2023-07-03 11:29:04.154 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1358 row column role 24 0 266 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1900 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1540 

2023-07-03 11:29:04.154 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1359 row column role 24 0 267 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1901 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1541 

2023-07-03 11:29:04.154 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1360 row column role 24 0 268 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1902 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1542 

2023-07-03 11:29:04.154 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1361 row column role 24 0 269 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1903 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1543 

2023-07-03 11:29:04.154 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1362 row column role 24 0 270 

2023-07-03 11:29:04.154 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1904 

2023-07-03 11:29:04.155 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1544 

2023-07-03 11:29:04.155 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1363 row column role 24 0 271 

2023-07-03 11:29:04.155 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1905 

2023-07-03 11:29:04.155 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1545 

2023-07-03 11:29:04.155 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1364 row column role 24 0 272 

2023-07-03 11:29:04.155 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1906 

2023-07-03 11:29:04.155 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1546 

2023-07-03 11:29:04.155 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1365 row column role 24 0 273 

2023-07-03 11:29:04.155 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1907 

2023-07-03 11:29:04.155 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1547 

2023-07-03 11:29:04.155 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1366 row column role 24 0 274 

2023-07-03 11:29:04.155 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1908 

2023-07-03 11:29:04.155 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1548 

2023-07-03 11:29:04.155 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1367 row column role 24 0 275 

2023-07-03 11:29:04.159 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1909 

2023-07-03 11:29:04.159 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1549 

2023-07-03 11:29:04.159 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1368 row column role 25 0 257 

2023-07-03 11:29:04.159 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1910 

2023-07-03 11:29:04.159 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1550 

2023-07-03 11:29:04.159 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1369 row column role 25 0 258 

2023-07-03 11:29:04.159 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1911 

2023-07-03 11:29:04.159 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1551 

2023-07-03 11:29:04.159 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1370 row column role 25 0 259 

2023-07-03 11:29:04.159 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1912 

2023-07-03 11:29:04.159 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1552 

2023-07-03 11:29:04.159 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1371 row column role 25 0 260 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1913 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1553 

2023-07-03 11:29:04.160 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1372 row column role 25 0 261 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1914 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1554 

2023-07-03 11:29:04.160 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1373 row column role 25 0 262 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1915 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1555 

2023-07-03 11:29:04.160 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1374 row column role 25 0 263 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1916 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1556 

2023-07-03 11:29:04.160 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1375 row column role 25 0 264 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1917 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1557 

2023-07-03 11:29:04.160 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1376 row column role 25 0 265 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1918 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1558 

2023-07-03 11:29:04.160 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1377 row column role 25 0 266 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1919 

2023-07-03 11:29:04.160 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1559 

2023-07-03 11:29:04.160 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1378 row column role 25 0 267 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1920 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1560 

2023-07-03 11:29:04.161 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1379 row column role 25 0 268 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1921 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1561 

2023-07-03 11:29:04.161 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1380 row column role 25 0 269 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1922 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1562 

2023-07-03 11:29:04.161 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1381 row column role 25 0 270 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1923 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1563 

2023-07-03 11:29:04.161 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1382 row column role 25 0 271 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1924 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1564 

2023-07-03 11:29:04.161 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1383 row column role 25 0 272 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1925 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1565 

2023-07-03 11:29:04.161 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1384 row column role 25 0 273 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1926 

2023-07-03 11:29:04.161 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1566 

2023-07-03 11:29:04.161 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1385 row column role 25 0 274 

2023-07-03 11:29:04.162 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1927 

2023-07-03 11:29:04.162 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1567 

2023-07-03 11:29:04.162 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1386 row column role 25 0 275 

2023-07-03 11:29:04.178 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1928 

2023-07-03 11:29:04.178 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1568 

2023-07-03 11:29:04.178 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1387 row column role 26 0 257 

2023-07-03 11:29:04.178 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1929 

2023-07-03 11:29:04.178 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1569 

2023-07-03 11:29:04.178 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1388 row column role 26 0 258 

2023-07-03 11:29:04.179 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1930 

2023-07-03 11:29:04.179 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1570 

2023-07-03 11:29:04.179 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1389 row column role 26 0 259 

2023-07-03 11:29:04.179 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1931 

2023-07-03 11:29:04.179 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1571 

2023-07-03 11:29:04.179 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1390 row column role 26 0 260 

2023-07-03 11:29:04.180 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1932 

2023-07-03 11:29:04.180 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1572 

2023-07-03 11:29:04.180 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1391 row column role 26 0 261 

2023-07-03 11:29:04.180 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1933 

2023-07-03 11:29:04.181 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1573 

2023-07-03 11:29:04.181 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1392 row column role 26 0 262 

2023-07-03 11:29:04.181 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1934 

2023-07-03 11:29:04.181 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1574 

2023-07-03 11:29:04.181 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1393 row column role 26 0 263 

2023-07-03 11:29:04.181 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1935 

2023-07-03 11:29:04.181 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1575 

2023-07-03 11:29:04.182 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1394 row column role 26 0 264 

2023-07-03 11:29:04.182 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1936 

2023-07-03 11:29:04.182 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1576 

2023-07-03 11:29:04.182 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1395 row column role 26 0 265 

2023-07-03 11:29:04.182 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1937 

2023-07-03 11:29:04.183 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1577 

2023-07-03 11:29:04.183 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1396 row column role 26 0 266 

2023-07-03 11:29:04.183 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1938 

2023-07-03 11:29:04.183 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1578 

2023-07-03 11:29:04.183 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1397 row column role 26 0 267 

2023-07-03 11:29:04.183 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1939 

2023-07-03 11:29:04.184 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1579 

2023-07-03 11:29:04.184 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1398 row column role 26 0 268 

2023-07-03 11:29:04.184 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1940 

2023-07-03 11:29:04.184 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1580 

2023-07-03 11:29:04.184 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1399 row column role 26 0 269 

2023-07-03 11:29:04.184 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1941 

2023-07-03 11:29:04.185 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1581 

2023-07-03 11:29:04.185 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1400 row column role 26 0 270 

2023-07-03 11:29:04.185 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1942 

2023-07-03 11:29:04.185 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1582 

2023-07-03 11:29:04.185 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1401 row column role 26 0 271 

2023-07-03 11:29:04.185 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1943 

2023-07-03 11:29:04.186 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1583 

2023-07-03 11:29:04.186 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1402 row column role 26 0 272 

2023-07-03 11:29:04.186 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1944 

2023-07-03 11:29:04.186 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1584 

2023-07-03 11:29:04.186 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1403 row column role 26 0 273 

2023-07-03 11:29:04.186 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1945 

2023-07-03 11:29:04.186 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1585 

2023-07-03 11:29:04.186 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1404 row column role 26 0 274 

2023-07-03 11:29:04.187 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1946 

2023-07-03 11:29:04.187 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1586 

2023-07-03 11:29:04.187 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1405 row column role 26 0 275 

2023-07-03 11:29:04.198 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1947 

2023-07-03 11:29:04.198 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1587 

2023-07-03 11:29:04.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1406 row column role 27 0 257 

2023-07-03 11:29:04.198 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1948 

2023-07-03 11:29:04.198 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1588 

2023-07-03 11:29:04.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1407 row column role 27 0 258 

2023-07-03 11:29:04.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1949 

2023-07-03 11:29:04.199 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1589 

2023-07-03 11:29:04.199 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1408 row column role 27 0 259 

2023-07-03 11:29:04.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1950 

2023-07-03 11:29:04.200 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1590 

2023-07-03 11:29:04.200 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1409 row column role 27 0 260 

2023-07-03 11:29:04.200 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1951 

2023-07-03 11:29:04.200 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1591 

2023-07-03 11:29:04.200 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1410 row column role 27 0 261 

2023-07-03 11:29:04.201 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1952 

2023-07-03 11:29:04.201 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1592 

2023-07-03 11:29:04.201 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1411 row column role 27 0 262 

2023-07-03 11:29:04.201 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1953 

2023-07-03 11:29:04.201 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1593 

2023-07-03 11:29:04.201 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1412 row column role 27 0 263 

2023-07-03 11:29:04.201 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1954 

2023-07-03 11:29:04.201 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1594 

2023-07-03 11:29:04.201 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1413 row column role 27 0 264 

2023-07-03 11:29:04.202 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1955 

2023-07-03 11:29:04.202 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1595 

2023-07-03 11:29:04.202 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1414 row column role 27 0 265 

2023-07-03 11:29:04.202 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1956 

2023-07-03 11:29:04.202 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1596 

2023-07-03 11:29:04.203 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1415 row column role 27 0 266 

2023-07-03 11:29:04.203 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1957 

2023-07-03 11:29:04.203 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1597 

2023-07-03 11:29:04.203 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1416 row column role 27 0 267 

2023-07-03 11:29:04.203 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1958 

2023-07-03 11:29:04.203 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1598 

2023-07-03 11:29:04.204 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1417 row column role 27 0 268 

2023-07-03 11:29:04.204 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1959 

2023-07-03 11:29:04.204 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1599 

2023-07-03 11:29:04.204 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1418 row column role 27 0 269 

2023-07-03 11:29:04.204 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1960 

2023-07-03 11:29:04.204 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1600 

2023-07-03 11:29:04.205 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1419 row column role 27 0 270 

2023-07-03 11:29:04.205 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1961 

2023-07-03 11:29:04.205 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1601 

2023-07-03 11:29:04.205 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1420 row column role 27 0 271 

2023-07-03 11:29:04.205 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1962 

2023-07-03 11:29:04.205 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1602 

2023-07-03 11:29:04.205 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1421 row column role 27 0 272 

2023-07-03 11:29:04.206 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1963 

2023-07-03 11:29:04.206 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1603 

2023-07-03 11:29:04.206 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1422 row column role 27 0 273 

2023-07-03 11:29:04.206 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1964 

2023-07-03 11:29:04.206 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1604 

2023-07-03 11:29:04.206 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1423 row column role 27 0 274 

2023-07-03 11:29:04.206 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1965 

2023-07-03 11:29:04.207 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1605 

2023-07-03 11:29:04.207 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1424 row column role 27 0 275 

2023-07-03 11:29:04.210 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1966 

2023-07-03 11:29:04.210 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1606 

2023-07-03 11:29:04.210 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1425 row column role 28 0 257 

2023-07-03 11:29:04.210 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1967 

2023-07-03 11:29:04.211 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1607 

2023-07-03 11:29:04.211 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1426 row column role 28 0 258 

2023-07-03 11:29:04.211 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1968 

2023-07-03 11:29:04.211 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1608 

2023-07-03 11:29:04.211 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1427 row column role 28 0 259 

2023-07-03 11:29:04.211 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1969 

2023-07-03 11:29:04.211 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1609 

2023-07-03 11:29:04.211 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1428 row column role 28 0 260 

2023-07-03 11:29:04.213 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1970 

2023-07-03 11:29:04.213 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1610 

2023-07-03 11:29:04.213 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1429 row column role 28 0 261 

2023-07-03 11:29:04.214 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1971 

2023-07-03 11:29:04.214 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1611 

2023-07-03 11:29:04.214 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1430 row column role 28 0 262 

2023-07-03 11:29:04.214 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1972 

2023-07-03 11:29:04.214 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1612 

2023-07-03 11:29:04.214 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1431 row column role 28 0 263 

2023-07-03 11:29:04.215 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1973 

2023-07-03 11:29:04.215 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1613 

2023-07-03 11:29:04.215 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1432 row column role 28 0 264 

2023-07-03 11:29:04.216 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1974 

2023-07-03 11:29:04.216 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1614 

2023-07-03 11:29:04.216 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1433 row column role 28 0 265 

2023-07-03 11:29:04.216 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1975 

2023-07-03 11:29:04.216 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1615 

2023-07-03 11:29:04.216 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1434 row column role 28 0 266 

2023-07-03 11:29:04.217 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1976 

2023-07-03 11:29:04.217 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1616 

2023-07-03 11:29:04.217 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1435 row column role 28 0 267 

2023-07-03 11:29:04.217 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1977 

2023-07-03 11:29:04.217 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1617 

2023-07-03 11:29:04.217 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1436 row column role 28 0 268 

2023-07-03 11:29:04.218 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1978 

2023-07-03 11:29:04.218 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1618 

2023-07-03 11:29:04.218 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1437 row column role 28 0 269 

2023-07-03 11:29:04.218 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1979 

2023-07-03 11:29:04.218 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1619 

2023-07-03 11:29:04.218 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1438 row column role 28 0 270 

2023-07-03 11:29:04.219 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1980 

2023-07-03 11:29:04.219 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1620 

2023-07-03 11:29:04.219 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1439 row column role 28 0 271 

2023-07-03 11:29:04.219 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1981 

2023-07-03 11:29:04.219 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1621 

2023-07-03 11:29:04.219 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1440 row column role 28 0 272 

2023-07-03 11:29:04.219 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1982 

2023-07-03 11:29:04.219 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1622 

2023-07-03 11:29:04.219 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1441 row column role 28 0 273 

2023-07-03 11:29:04.220 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1983 

2023-07-03 11:29:04.220 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1623 

2023-07-03 11:29:04.220 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1442 row column role 28 0 274 

2023-07-03 11:29:04.220 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1984 

2023-07-03 11:29:04.220 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1624 

2023-07-03 11:29:04.220 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1443 row column role 28 0 275 

2023-07-03 11:29:04.225 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1985 

2023-07-03 11:29:04.225 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1625 

2023-07-03 11:29:04.225 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1444 row column role 29 0 257 

2023-07-03 11:29:04.225 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1986 

2023-07-03 11:29:04.225 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1626 

2023-07-03 11:29:04.225 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1445 row column role 29 0 258 

2023-07-03 11:29:04.226 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1987 

2023-07-03 11:29:04.226 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1627 

2023-07-03 11:29:04.226 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1446 row column role 29 0 259 

2023-07-03 11:29:04.226 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1988 

2023-07-03 11:29:04.226 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1628 

2023-07-03 11:29:04.226 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1447 row column role 29 0 260 

2023-07-03 11:29:04.227 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1989 

2023-07-03 11:29:04.227 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1629 

2023-07-03 11:29:04.227 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1448 row column role 29 0 261 

2023-07-03 11:29:04.227 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1990 

2023-07-03 11:29:04.227 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1630 

2023-07-03 11:29:04.227 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1449 row column role 29 0 262 

2023-07-03 11:29:04.228 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1991 

2023-07-03 11:29:04.228 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1631 

2023-07-03 11:29:04.228 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1450 row column role 29 0 263 

2023-07-03 11:29:04.228 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1992 

2023-07-03 11:29:04.228 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1632 

2023-07-03 11:29:04.228 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1451 row column role 29 0 264 

2023-07-03 11:29:04.228 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1993 

2023-07-03 11:29:04.228 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1633 

2023-07-03 11:29:04.229 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1452 row column role 29 0 265 

2023-07-03 11:29:04.229 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1994 

2023-07-03 11:29:04.229 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1634 

2023-07-03 11:29:04.229 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1453 row column role 29 0 266 

2023-07-03 11:29:04.229 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1995 

2023-07-03 11:29:04.229 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1635 

2023-07-03 11:29:04.229 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1454 row column role 29 0 267 

2023-07-03 11:29:04.230 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1996 

2023-07-03 11:29:04.230 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1636 

2023-07-03 11:29:04.230 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1455 row column role 29 0 268 

2023-07-03 11:29:04.230 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1997 

2023-07-03 11:29:04.230 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1637 

2023-07-03 11:29:04.230 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1456 row column role 29 0 269 

2023-07-03 11:29:04.230 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1998 

2023-07-03 11:29:04.231 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1638 

2023-07-03 11:29:04.231 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1457 row column role 29 0 270 

2023-07-03 11:29:04.231 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 1999 

2023-07-03 11:29:04.231 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1639 

2023-07-03 11:29:04.231 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1458 row column role 29 0 271 

2023-07-03 11:29:04.232 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2000 

2023-07-03 11:29:04.232 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1640 

2023-07-03 11:29:04.232 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1459 row column role 29 0 272 

2023-07-03 11:29:04.232 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2001 

2023-07-03 11:29:04.232 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1641 

2023-07-03 11:29:04.232 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1460 row column role 29 0 273 

2023-07-03 11:29:04.232 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2002 

2023-07-03 11:29:04.232 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1642 

2023-07-03 11:29:04.232 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1461 row column role 29 0 274 

2023-07-03 11:29:04.233 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2003 

2023-07-03 11:29:04.233 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1643 

2023-07-03 11:29:04.233 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1462 row column role 29 0 275 

2023-07-03 11:29:04.237 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2004 

2023-07-03 11:29:04.237 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1644 

2023-07-03 11:29:04.237 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1463 row column role 30 0 257 

2023-07-03 11:29:04.237 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2005 

2023-07-03 11:29:04.237 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1645 

2023-07-03 11:29:04.238 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1464 row column role 30 0 258 

2023-07-03 11:29:04.238 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2006 

2023-07-03 11:29:04.238 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1646 

2023-07-03 11:29:04.238 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1465 row column role 30 0 259 

2023-07-03 11:29:04.238 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2007 

2023-07-03 11:29:04.238 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1647 

2023-07-03 11:29:04.238 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1466 row column role 30 0 260 

2023-07-03 11:29:04.239 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2008 

2023-07-03 11:29:04.239 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1648 

2023-07-03 11:29:04.239 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1467 row column role 30 0 261 

2023-07-03 11:29:04.239 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2009 

2023-07-03 11:29:04.239 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1649 

2023-07-03 11:29:04.239 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1468 row column role 30 0 262 

2023-07-03 11:29:04.239 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2010 

2023-07-03 11:29:04.239 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1650 

2023-07-03 11:29:04.239 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1469 row column role 30 0 263 

2023-07-03 11:29:04.240 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2011 

2023-07-03 11:29:04.240 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1651 

2023-07-03 11:29:04.240 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1470 row column role 30 0 264 

2023-07-03 11:29:04.240 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2012 

2023-07-03 11:29:04.240 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1652 

2023-07-03 11:29:04.240 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1471 row column role 30 0 265 

2023-07-03 11:29:04.240 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2013 

2023-07-03 11:29:04.241 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1653 

2023-07-03 11:29:04.241 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1472 row column role 30 0 266 

2023-07-03 11:29:04.241 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2014 

2023-07-03 11:29:04.241 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1654 

2023-07-03 11:29:04.241 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1473 row column role 30 0 267 

2023-07-03 11:29:04.241 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2015 

2023-07-03 11:29:04.241 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1655 

2023-07-03 11:29:04.241 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1474 row column role 30 0 268 

2023-07-03 11:29:04.242 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2016 

2023-07-03 11:29:04.242 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1656 

2023-07-03 11:29:04.242 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1475 row column role 30 0 269 

2023-07-03 11:29:04.242 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2017 

2023-07-03 11:29:04.242 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1657 

2023-07-03 11:29:04.242 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1476 row column role 30 0 270 

2023-07-03 11:29:04.243 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2018 

2023-07-03 11:29:04.243 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1658 

2023-07-03 11:29:04.243 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1477 row column role 30 0 271 

2023-07-03 11:29:04.243 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2019 

2023-07-03 11:29:04.243 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1659 

2023-07-03 11:29:04.243 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1478 row column role 30 0 272 

2023-07-03 11:29:04.243 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2020 

2023-07-03 11:29:04.243 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1660 

2023-07-03 11:29:04.243 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1479 row column role 30 0 273 

2023-07-03 11:29:04.244 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2021 

2023-07-03 11:29:04.244 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1661 

2023-07-03 11:29:04.244 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1480 row column role 30 0 274 

2023-07-03 11:29:04.244 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2022 

2023-07-03 11:29:04.244 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1662 

2023-07-03 11:29:04.244 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1481 row column role 30 0 275 

2023-07-03 11:29:29.428 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2023 

2023-07-03 11:29:29.428 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1663 

2023-07-03 11:29:29.428 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1482 row column role 31 0 257 

2023-07-03 11:29:29.429 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2024 

2023-07-03 11:29:29.429 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1664 

2023-07-03 11:29:29.429 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1483 row column role 31 0 258 

2023-07-03 11:29:29.429 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2025 

2023-07-03 11:29:29.429 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1665 

2023-07-03 11:29:29.429 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1484 row column role 31 0 259 

2023-07-03 11:29:29.430 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2026 

2023-07-03 11:29:29.430 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1666 

2023-07-03 11:29:29.430 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1485 row column role 31 0 260 

2023-07-03 11:29:29.431 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2027 

2023-07-03 11:29:29.431 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1667 

2023-07-03 11:29:29.431 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1486 row column role 31 0 261 

2023-07-03 11:29:29.431 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2028 

2023-07-03 11:29:29.431 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1668 

2023-07-03 11:29:29.431 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1487 row column role 31 0 262 

2023-07-03 11:29:29.432 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2029 

2023-07-03 11:29:29.432 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1669 

2023-07-03 11:29:29.432 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1488 row column role 31 0 263 

2023-07-03 11:29:29.432 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2030 

2023-07-03 11:29:29.433 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1670 

2023-07-03 11:29:29.433 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1489 row column role 31 0 264 

2023-07-03 11:29:29.433 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2031 

2023-07-03 11:29:29.433 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1671 

2023-07-03 11:29:29.433 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1490 row column role 31 0 265 

2023-07-03 11:29:29.434 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2032 

2023-07-03 11:29:29.434 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1672 

2023-07-03 11:29:29.434 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1491 row column role 31 0 266 

2023-07-03 11:29:29.434 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2033 

2023-07-03 11:29:29.434 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1673 

2023-07-03 11:29:29.435 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1492 row column role 31 0 267 

2023-07-03 11:29:29.435 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2034 

2023-07-03 11:29:29.435 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1674 

2023-07-03 11:29:29.435 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1493 row column role 31 0 268 

2023-07-03 11:29:29.436 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2035 

2023-07-03 11:29:29.436 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1675 

2023-07-03 11:29:29.436 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1494 row column role 31 0 269 

2023-07-03 11:29:29.436 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2036 

2023-07-03 11:29:29.436 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1676 

2023-07-03 11:29:29.436 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1495 row column role 31 0 270 

2023-07-03 11:29:29.437 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2037 

2023-07-03 11:29:29.437 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1677 

2023-07-03 11:29:29.437 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1496 row column role 31 0 271 

2023-07-03 11:29:29.437 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2038 

2023-07-03 11:29:29.438 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1678 

2023-07-03 11:29:29.438 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1497 row column role 31 0 272 

2023-07-03 11:29:29.438 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2039 

2023-07-03 11:29:29.438 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1679 

2023-07-03 11:29:29.438 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1498 row column role 31 0 273 

2023-07-03 11:29:29.439 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2040 

2023-07-03 11:29:29.439 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1680 

2023-07-03 11:29:29.439 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1499 row column role 31 0 274 

2023-07-03 11:29:29.439 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2041 

2023-07-03 11:29:29.439 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1681 

2023-07-03 11:29:29.439 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1500 row column role 31 0 275 

2023-07-03 11:29:29.454 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2042 

2023-07-03 11:29:29.454 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1682 

2023-07-03 11:29:29.454 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1501 row column role 32 0 257 

2023-07-03 11:29:29.454 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2043 

2023-07-03 11:29:29.454 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1683 

2023-07-03 11:29:29.454 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1502 row column role 32 0 258 

2023-07-03 11:29:29.455 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2044 

2023-07-03 11:29:29.455 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1684 

2023-07-03 11:29:29.455 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1503 row column role 32 0 259 

2023-07-03 11:29:29.456 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2045 

2023-07-03 11:29:29.456 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1685 

2023-07-03 11:29:29.456 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1504 row column role 32 0 260 

2023-07-03 11:29:29.456 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2046 

2023-07-03 11:29:29.456 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1686 

2023-07-03 11:29:29.456 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1505 row column role 32 0 261 

2023-07-03 11:29:29.457 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2047 

2023-07-03 11:29:29.457 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1687 

2023-07-03 11:29:29.457 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1506 row column role 32 0 262 

2023-07-03 11:29:29.458 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2048 

2023-07-03 11:29:29.458 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1688 

2023-07-03 11:29:29.458 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1507 row column role 32 0 263 

2023-07-03 11:29:29.458 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2049 

2023-07-03 11:29:29.458 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1689 

2023-07-03 11:29:29.458 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1508 row column role 32 0 264 

2023-07-03 11:29:29.459 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2050 

2023-07-03 11:29:29.459 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1690 

2023-07-03 11:29:29.459 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1509 row column role 32 0 265 

2023-07-03 11:29:29.460 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2051 

2023-07-03 11:29:29.460 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1691 

2023-07-03 11:29:29.460 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1510 row column role 32 0 266 

2023-07-03 11:29:29.460 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2052 

2023-07-03 11:29:29.460 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1692 

2023-07-03 11:29:29.460 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1511 row column role 32 0 267 

2023-07-03 11:29:29.461 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2053 

2023-07-03 11:29:29.461 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1693 

2023-07-03 11:29:29.461 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1512 row column role 32 0 268 

2023-07-03 11:29:29.462 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2054 

2023-07-03 11:29:29.462 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1694 

2023-07-03 11:29:29.462 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1513 row column role 32 0 269 

2023-07-03 11:29:29.462 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2055 

2023-07-03 11:29:29.462 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1695 

2023-07-03 11:29:29.462 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1514 row column role 32 0 270 

2023-07-03 11:29:29.463 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2056 

2023-07-03 11:29:29.463 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1696 

2023-07-03 11:29:29.463 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1515 row column role 32 0 271 

2023-07-03 11:29:29.463 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2057 

2023-07-03 11:29:29.463 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1697 

2023-07-03 11:29:29.463 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1516 row column role 32 0 272 

2023-07-03 11:29:29.464 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2058 

2023-07-03 11:29:29.464 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1698 

2023-07-03 11:29:29.464 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1517 row column role 32 0 273 

2023-07-03 11:29:29.464 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2059 

2023-07-03 11:29:29.465 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1699 

2023-07-03 11:29:29.465 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1518 row column role 32 0 274 

2023-07-03 11:29:29.466 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2060 

2023-07-03 11:29:29.466 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1700 

2023-07-03 11:29:29.466 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1519 row column role 32 0 275 

2023-07-03 11:29:29.483 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2061 

2023-07-03 11:29:29.483 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1701 

2023-07-03 11:29:29.483 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1520 row column role 33 0 257 

2023-07-03 11:29:29.484 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2062 

2023-07-03 11:29:29.484 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1702 

2023-07-03 11:29:29.484 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1521 row column role 33 0 258 

2023-07-03 11:29:29.484 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2063 

2023-07-03 11:29:29.484 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1703 

2023-07-03 11:29:29.484 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1522 row column role 33 0 259 

2023-07-03 11:29:29.484 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2064 

2023-07-03 11:29:29.484 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1704 

2023-07-03 11:29:29.484 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1523 row column role 33 0 260 

2023-07-03 11:29:29.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2065 

2023-07-03 11:29:29.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1705 

2023-07-03 11:29:29.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1524 row column role 33 0 261 

2023-07-03 11:29:29.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2066 

2023-07-03 11:29:29.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1706 

2023-07-03 11:29:29.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1525 row column role 33 0 262 

2023-07-03 11:29:29.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2067 

2023-07-03 11:29:29.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1707 

2023-07-03 11:29:29.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1526 row column role 33 0 263 

2023-07-03 11:29:29.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2068 

2023-07-03 11:29:29.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1708 

2023-07-03 11:29:29.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1527 row column role 33 0 264 

2023-07-03 11:29:29.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2069 

2023-07-03 11:29:29.486 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1709 

2023-07-03 11:29:29.486 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1528 row column role 33 0 265 

2023-07-03 11:29:29.486 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2070 

2023-07-03 11:29:29.486 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1710 

2023-07-03 11:29:29.486 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1529 row column role 33 0 266 

2023-07-03 11:29:29.486 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2071 

2023-07-03 11:29:29.486 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1711 

2023-07-03 11:29:29.486 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1530 row column role 33 0 267 

2023-07-03 11:29:29.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2072 

2023-07-03 11:29:29.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1712 

2023-07-03 11:29:29.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1531 row column role 33 0 268 

2023-07-03 11:29:29.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2073 

2023-07-03 11:29:29.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1713 

2023-07-03 11:29:29.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1532 row column role 33 0 269 

2023-07-03 11:29:29.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2074 

2023-07-03 11:29:29.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1714 

2023-07-03 11:29:29.488 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1533 row column role 33 0 270 

2023-07-03 11:29:29.488 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2075 

2023-07-03 11:29:29.488 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1715 

2023-07-03 11:29:29.488 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1534 row column role 33 0 271 

2023-07-03 11:29:29.488 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2076 

2023-07-03 11:29:29.488 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1716 

2023-07-03 11:29:29.488 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1535 row column role 33 0 272 

2023-07-03 11:29:29.488 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2077 

2023-07-03 11:29:29.488 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1717 

2023-07-03 11:29:29.488 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1536 row column role 33 0 273 

2023-07-03 11:29:29.488 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2078 

2023-07-03 11:29:29.488 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1718 

2023-07-03 11:29:29.488 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1537 row column role 33 0 274 

2023-07-03 11:29:29.490 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2079 

2023-07-03 11:29:29.490 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1719 

2023-07-03 11:29:29.490 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1538 row column role 33 0 275 

2023-07-03 11:29:29.520 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2080 

2023-07-03 11:29:29.521 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1720 

2023-07-03 11:29:29.521 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1539 row column role 34 0 257 

2023-07-03 11:29:29.521 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2081 

2023-07-03 11:29:29.521 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1721 

2023-07-03 11:29:29.521 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1540 row column role 34 0 258 

2023-07-03 11:29:29.521 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2082 

2023-07-03 11:29:29.521 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1722 

2023-07-03 11:29:29.522 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1541 row column role 34 0 259 

2023-07-03 11:29:29.522 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2083 

2023-07-03 11:29:29.522 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1723 

2023-07-03 11:29:29.522 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1542 row column role 34 0 260 

2023-07-03 11:29:29.522 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2084 

2023-07-03 11:29:29.522 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1724 

2023-07-03 11:29:29.522 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1543 row column role 34 0 261 

2023-07-03 11:29:29.523 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2085 

2023-07-03 11:29:29.523 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1725 

2023-07-03 11:29:29.523 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1544 row column role 34 0 262 

2023-07-03 11:29:29.523 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2086 

2023-07-03 11:29:29.523 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1726 

2023-07-03 11:29:29.523 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1545 row column role 34 0 263 

2023-07-03 11:29:29.524 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2087 

2023-07-03 11:29:29.524 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1727 

2023-07-03 11:29:29.524 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1546 row column role 34 0 264 

2023-07-03 11:29:29.524 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2088 

2023-07-03 11:29:29.524 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1728 

2023-07-03 11:29:29.524 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1547 row column role 34 0 265 

2023-07-03 11:29:29.525 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2089 

2023-07-03 11:29:29.525 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1729 

2023-07-03 11:29:29.525 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1548 row column role 34 0 266 

2023-07-03 11:29:29.525 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2090 

2023-07-03 11:29:29.525 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1730 

2023-07-03 11:29:29.525 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1549 row column role 34 0 267 

2023-07-03 11:29:29.525 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2091 

2023-07-03 11:29:29.526 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1731 

2023-07-03 11:29:29.526 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1550 row column role 34 0 268 

2023-07-03 11:29:29.526 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2092 

2023-07-03 11:29:29.526 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1732 

2023-07-03 11:29:29.526 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1551 row column role 34 0 269 

2023-07-03 11:29:29.526 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2093 

2023-07-03 11:29:29.526 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1733 

2023-07-03 11:29:29.526 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1552 row column role 34 0 270 

2023-07-03 11:29:29.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2094 

2023-07-03 11:29:29.527 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1734 

2023-07-03 11:29:29.527 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1553 row column role 34 0 271 

2023-07-03 11:29:29.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2095 

2023-07-03 11:29:29.527 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1735 

2023-07-03 11:29:29.527 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1554 row column role 34 0 272 

2023-07-03 11:29:29.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2096 

2023-07-03 11:29:29.527 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1736 

2023-07-03 11:29:29.527 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1555 row column role 34 0 273 

2023-07-03 11:29:29.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2097 

2023-07-03 11:29:29.528 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1737 

2023-07-03 11:29:29.528 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1556 row column role 34 0 274 

2023-07-03 11:29:29.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2098 

2023-07-03 11:29:29.528 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1738 

2023-07-03 11:29:29.528 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1557 row column role 34 0 275 

2023-07-03 11:29:29.578 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2099 

2023-07-03 11:29:29.578 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1739 

2023-07-03 11:29:29.578 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1558 row column role 35 0 257 

2023-07-03 11:29:29.578 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2100 

2023-07-03 11:29:29.578 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1740 

2023-07-03 11:29:29.579 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1559 row column role 35 0 258 

2023-07-03 11:29:29.579 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2101 

2023-07-03 11:29:29.579 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1741 

2023-07-03 11:29:29.579 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1560 row column role 35 0 259 

2023-07-03 11:29:29.580 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2102 

2023-07-03 11:29:29.580 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1742 

2023-07-03 11:29:29.580 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1561 row column role 35 0 260 

2023-07-03 11:29:29.581 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2103 

2023-07-03 11:29:29.581 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1743 

2023-07-03 11:29:29.581 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1562 row column role 35 0 261 

2023-07-03 11:29:29.581 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2104 

2023-07-03 11:29:29.581 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1744 

2023-07-03 11:29:29.581 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1563 row column role 35 0 262 

2023-07-03 11:29:29.582 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2105 

2023-07-03 11:29:29.582 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1745 

2023-07-03 11:29:29.582 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1564 row column role 35 0 263 

2023-07-03 11:29:29.583 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2106 

2023-07-03 11:29:29.583 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1746 

2023-07-03 11:29:29.583 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1565 row column role 35 0 264 

2023-07-03 11:29:29.583 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2107 

2023-07-03 11:29:29.583 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1747 

2023-07-03 11:29:29.583 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1566 row column role 35 0 265 

2023-07-03 11:29:29.584 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2108 

2023-07-03 11:29:29.584 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1748 

2023-07-03 11:29:29.584 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1567 row column role 35 0 266 

2023-07-03 11:29:29.584 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2109 

2023-07-03 11:29:29.585 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1749 

2023-07-03 11:29:29.585 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1568 row column role 35 0 267 

2023-07-03 11:29:29.585 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2110 

2023-07-03 11:29:29.585 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1750 

2023-07-03 11:29:29.585 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1569 row column role 35 0 268 

2023-07-03 11:29:29.585 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2111 

2023-07-03 11:29:29.585 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1751 

2023-07-03 11:29:29.585 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1570 row column role 35 0 269 

2023-07-03 11:29:29.586 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2112 

2023-07-03 11:29:29.586 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1752 

2023-07-03 11:29:29.586 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1571 row column role 35 0 270 

2023-07-03 11:29:29.586 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2113 

2023-07-03 11:29:29.586 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1753 

2023-07-03 11:29:29.586 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1572 row column role 35 0 271 

2023-07-03 11:29:29.587 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2114 

2023-07-03 11:29:29.587 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1754 

2023-07-03 11:29:29.587 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1573 row column role 35 0 272 

2023-07-03 11:29:29.587 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2115 

2023-07-03 11:29:29.588 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1755 

2023-07-03 11:29:29.588 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1574 row column role 35 0 273 

2023-07-03 11:29:29.588 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2116 

2023-07-03 11:29:29.588 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1756 

2023-07-03 11:29:29.588 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1575 row column role 35 0 274 

2023-07-03 11:29:29.588 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2117 

2023-07-03 11:29:29.589 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1757 

2023-07-03 11:29:29.589 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1576 row column role 35 0 275 

2023-07-03 11:29:29.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2118 

2023-07-03 11:29:29.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1758 

2023-07-03 11:29:29.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1577 row column role 36 0 257 

2023-07-03 11:29:29.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2119 

2023-07-03 11:29:29.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1759 

2023-07-03 11:29:29.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1578 row column role 36 0 258 

2023-07-03 11:29:29.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2120 

2023-07-03 11:29:29.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1760 

2023-07-03 11:29:29.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1579 row column role 36 0 259 

2023-07-03 11:29:29.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2121 

2023-07-03 11:29:29.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1761 

2023-07-03 11:29:29.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1580 row column role 36 0 260 

2023-07-03 11:29:29.635 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2122 

2023-07-03 11:29:29.635 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1762 

2023-07-03 11:29:29.635 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1581 row column role 36 0 261 

2023-07-03 11:29:29.635 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2123 

2023-07-03 11:29:29.635 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1763 

2023-07-03 11:29:29.635 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1582 row column role 36 0 262 

2023-07-03 11:29:29.635 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2124 

2023-07-03 11:29:29.636 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1764 

2023-07-03 11:29:29.636 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1583 row column role 36 0 263 

2023-07-03 11:29:29.636 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2125 

2023-07-03 11:29:29.636 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1765 

2023-07-03 11:29:29.636 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1584 row column role 36 0 264 

2023-07-03 11:29:29.636 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2126 

2023-07-03 11:29:29.636 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1766 

2023-07-03 11:29:29.636 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1585 row column role 36 0 265 

2023-07-03 11:29:29.637 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2127 

2023-07-03 11:29:29.637 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1767 

2023-07-03 11:29:29.637 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1586 row column role 36 0 266 

2023-07-03 11:29:29.637 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2128 

2023-07-03 11:29:29.637 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1768 

2023-07-03 11:29:29.637 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1587 row column role 36 0 267 

2023-07-03 11:29:29.637 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2129 

2023-07-03 11:29:29.637 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1769 

2023-07-03 11:29:29.638 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1588 row column role 36 0 268 

2023-07-03 11:29:29.638 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2130 

2023-07-03 11:29:29.638 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1770 

2023-07-03 11:29:29.638 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1589 row column role 36 0 269 

2023-07-03 11:29:29.638 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2131 

2023-07-03 11:29:29.638 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1771 

2023-07-03 11:29:29.638 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1590 row column role 36 0 270 

2023-07-03 11:29:29.638 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2132 

2023-07-03 11:29:29.639 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1772 

2023-07-03 11:29:29.639 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1591 row column role 36 0 271 

2023-07-03 11:29:29.639 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2133 

2023-07-03 11:29:29.639 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1773 

2023-07-03 11:29:29.639 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1592 row column role 36 0 272 

2023-07-03 11:29:29.639 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2134 

2023-07-03 11:29:29.639 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1774 

2023-07-03 11:29:29.639 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1593 row column role 36 0 273 

2023-07-03 11:29:29.639 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2135 

2023-07-03 11:29:29.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1775 

2023-07-03 11:29:29.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1594 row column role 36 0 274 

2023-07-03 11:29:29.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2136 

2023-07-03 11:29:29.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1776 

2023-07-03 11:29:29.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1595 row column role 36 0 275 

2023-07-03 11:29:29.809 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2137 

2023-07-03 11:29:29.809 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1777 

2023-07-03 11:29:29.809 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1596 row column role 37 0 257 

2023-07-03 11:29:29.810 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2138 

2023-07-03 11:29:29.810 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1778 

2023-07-03 11:29:29.810 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1597 row column role 37 0 258 

2023-07-03 11:29:29.810 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2139 

2023-07-03 11:29:29.810 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1779 

2023-07-03 11:29:29.810 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1598 row column role 37 0 259 

2023-07-03 11:29:29.811 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2140 

2023-07-03 11:29:29.811 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1780 

2023-07-03 11:29:29.811 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1599 row column role 37 0 260 

2023-07-03 11:29:29.812 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2141 

2023-07-03 11:29:29.812 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1781 

2023-07-03 11:29:29.812 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1600 row column role 37 0 261 

2023-07-03 11:29:29.812 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2142 

2023-07-03 11:29:29.812 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1782 

2023-07-03 11:29:29.812 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1601 row column role 37 0 262 

2023-07-03 11:29:29.813 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2143 

2023-07-03 11:29:29.813 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1783 

2023-07-03 11:29:29.813 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1602 row column role 37 0 263 

2023-07-03 11:29:29.814 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2144 

2023-07-03 11:29:29.814 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1784 

2023-07-03 11:29:29.814 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1603 row column role 37 0 264 

2023-07-03 11:29:29.814 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2145 

2023-07-03 11:29:29.814 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1785 

2023-07-03 11:29:29.815 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1604 row column role 37 0 265 

2023-07-03 11:29:29.815 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2146 

2023-07-03 11:29:29.815 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1786 

2023-07-03 11:29:29.815 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1605 row column role 37 0 266 

2023-07-03 11:29:29.816 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2147 

2023-07-03 11:29:29.816 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1787 

2023-07-03 11:29:29.816 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1606 row column role 37 0 267 

2023-07-03 11:29:29.816 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2148 

2023-07-03 11:29:29.816 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1788 

2023-07-03 11:29:29.816 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1607 row column role 37 0 268 

2023-07-03 11:29:29.816 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2149 

2023-07-03 11:29:29.816 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1789 

2023-07-03 11:29:29.816 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1608 row column role 37 0 269 

2023-07-03 11:29:29.816 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2150 

2023-07-03 11:29:29.817 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1790 

2023-07-03 11:29:29.817 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1609 row column role 37 0 270 

2023-07-03 11:29:29.817 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2151 

2023-07-03 11:29:29.817 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1791 

2023-07-03 11:29:29.818 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1610 row column role 37 0 271 

2023-07-03 11:29:29.818 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2152 

2023-07-03 11:29:29.818 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1792 

2023-07-03 11:29:29.818 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1611 row column role 37 0 272 

2023-07-03 11:29:29.818 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2153 

2023-07-03 11:29:29.819 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1793 

2023-07-03 11:29:29.819 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1612 row column role 37 0 273 

2023-07-03 11:29:29.819 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2154 

2023-07-03 11:29:29.819 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1794 

2023-07-03 11:29:29.819 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1613 row column role 37 0 274 

2023-07-03 11:29:29.820 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2155 

2023-07-03 11:29:29.820 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1795 

2023-07-03 11:29:29.820 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1614 row column role 37 0 275 

2023-07-03 11:29:29.833 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2156 

2023-07-03 11:29:29.833 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1796 

2023-07-03 11:29:29.833 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1615 row column role 38 0 257 

2023-07-03 11:29:29.834 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2157 

2023-07-03 11:29:29.834 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1797 

2023-07-03 11:29:29.834 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1616 row column role 38 0 258 

2023-07-03 11:29:29.835 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2158 

2023-07-03 11:29:29.835 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1798 

2023-07-03 11:29:29.835 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1617 row column role 38 0 259 

2023-07-03 11:29:29.836 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2159 

2023-07-03 11:29:29.836 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1799 

2023-07-03 11:29:29.836 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1618 row column role 38 0 260 

2023-07-03 11:29:29.836 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2160 

2023-07-03 11:29:29.837 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1800 

2023-07-03 11:29:29.837 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1619 row column role 38 0 261 

2023-07-03 11:29:29.837 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2161 

2023-07-03 11:29:29.837 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1801 

2023-07-03 11:29:29.837 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1620 row column role 38 0 262 

2023-07-03 11:29:29.838 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2162 

2023-07-03 11:29:29.838 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1802 

2023-07-03 11:29:29.838 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1621 row column role 38 0 263 

2023-07-03 11:29:29.839 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2163 

2023-07-03 11:29:29.839 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1803 

2023-07-03 11:29:29.839 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1622 row column role 38 0 264 

2023-07-03 11:29:29.839 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2164 

2023-07-03 11:29:29.839 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1804 

2023-07-03 11:29:29.839 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1623 row column role 38 0 265 

2023-07-03 11:29:29.840 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2165 

2023-07-03 11:29:29.840 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1805 

2023-07-03 11:29:29.840 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1624 row column role 38 0 266 

2023-07-03 11:29:29.841 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2166 

2023-07-03 11:29:29.841 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1806 

2023-07-03 11:29:29.841 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1625 row column role 38 0 267 

2023-07-03 11:29:29.841 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2167 

2023-07-03 11:29:29.841 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1807 

2023-07-03 11:29:29.841 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1626 row column role 38 0 268 

2023-07-03 11:29:29.842 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2168 

2023-07-03 11:29:29.842 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1808 

2023-07-03 11:29:29.842 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1627 row column role 38 0 269 

2023-07-03 11:29:29.843 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2169 

2023-07-03 11:29:29.843 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1809 

2023-07-03 11:29:29.843 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1628 row column role 38 0 270 

2023-07-03 11:29:29.843 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2170 

2023-07-03 11:29:29.843 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1810 

2023-07-03 11:29:29.843 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1629 row column role 38 0 271 

2023-07-03 11:29:29.844 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2171 

2023-07-03 11:29:29.844 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1811 

2023-07-03 11:29:29.844 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1630 row column role 38 0 272 

2023-07-03 11:29:29.844 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2172 

2023-07-03 11:29:29.844 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1812 

2023-07-03 11:29:29.844 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1631 row column role 38 0 273 

2023-07-03 11:29:29.845 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2173 

2023-07-03 11:29:29.845 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1813 

2023-07-03 11:29:29.845 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1632 row column role 38 0 274 

2023-07-03 11:29:29.846 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2174 

2023-07-03 11:29:29.846 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1814 

2023-07-03 11:29:29.846 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1633 row column role 38 0 275 

2023-07-03 11:29:29.860 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2175 

2023-07-03 11:29:29.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1815 

2023-07-03 11:29:29.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1634 row column role 39 0 257 

2023-07-03 11:29:29.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2176 

2023-07-03 11:29:29.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1816 

2023-07-03 11:29:29.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1635 row column role 39 0 258 

2023-07-03 11:29:29.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2177 

2023-07-03 11:29:29.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1817 

2023-07-03 11:29:29.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1636 row column role 39 0 259 

2023-07-03 11:29:29.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2178 

2023-07-03 11:29:29.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1818 

2023-07-03 11:29:29.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1637 row column role 39 0 260 

2023-07-03 11:29:29.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2179 

2023-07-03 11:29:29.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1819 

2023-07-03 11:29:29.862 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1638 row column role 39 0 261 

2023-07-03 11:29:29.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2180 

2023-07-03 11:29:29.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1820 

2023-07-03 11:29:29.862 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1639 row column role 39 0 262 

2023-07-03 11:29:29.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2181 

2023-07-03 11:29:29.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1821 

2023-07-03 11:29:29.862 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1640 row column role 39 0 263 

2023-07-03 11:29:29.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2182 

2023-07-03 11:29:29.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1822 

2023-07-03 11:29:29.863 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1641 row column role 39 0 264 

2023-07-03 11:29:29.863 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2183 

2023-07-03 11:29:29.863 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1823 

2023-07-03 11:29:29.863 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1642 row column role 39 0 265 

2023-07-03 11:29:29.863 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2184 

2023-07-03 11:29:29.863 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1824 

2023-07-03 11:29:29.863 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1643 row column role 39 0 266 

2023-07-03 11:29:29.863 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2185 

2023-07-03 11:29:29.863 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1825 

2023-07-03 11:29:29.863 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1644 row column role 39 0 267 

2023-07-03 11:29:29.863 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2186 

2023-07-03 11:29:29.863 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1826 

2023-07-03 11:29:29.863 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1645 row column role 39 0 268 

2023-07-03 11:29:29.863 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2187 

2023-07-03 11:29:29.864 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1827 

2023-07-03 11:29:29.864 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1646 row column role 39 0 269 

2023-07-03 11:29:29.864 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2188 

2023-07-03 11:29:29.864 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1828 

2023-07-03 11:29:29.864 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1647 row column role 39 0 270 

2023-07-03 11:29:29.864 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2189 

2023-07-03 11:29:29.864 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1829 

2023-07-03 11:29:29.864 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1648 row column role 39 0 271 

2023-07-03 11:29:29.864 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2190 

2023-07-03 11:29:29.864 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1830 

2023-07-03 11:29:29.864 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1649 row column role 39 0 272 

2023-07-03 11:29:29.864 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2191 

2023-07-03 11:29:29.864 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1831 

2023-07-03 11:29:29.864 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1650 row column role 39 0 273 

2023-07-03 11:29:29.865 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2192 

2023-07-03 11:29:29.865 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1832 

2023-07-03 11:29:29.865 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1651 row column role 39 0 274 

2023-07-03 11:29:29.865 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2193 

2023-07-03 11:29:29.865 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1833 

2023-07-03 11:29:29.865 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1652 row column role 39 0 275 

2023-07-03 11:29:29.867 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2194 

2023-07-03 11:29:29.867 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1834 

2023-07-03 11:29:29.867 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1653 row column role 40 0 257 

2023-07-03 11:29:29.867 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2195 

2023-07-03 11:29:29.867 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1835 

2023-07-03 11:29:29.867 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1654 row column role 40 0 258 

2023-07-03 11:29:29.867 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2196 

2023-07-03 11:29:29.867 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1836 

2023-07-03 11:29:29.867 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1655 row column role 40 0 259 

2023-07-03 11:29:29.867 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2197 

2023-07-03 11:29:29.867 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1837 

2023-07-03 11:29:29.867 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1656 row column role 40 0 260 

2023-07-03 11:29:29.867 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2198 

2023-07-03 11:29:29.867 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1838 

2023-07-03 11:29:29.867 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1657 row column role 40 0 261 

2023-07-03 11:29:29.868 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2199 

2023-07-03 11:29:29.868 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1839 

2023-07-03 11:29:29.868 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1658 row column role 40 0 262 

2023-07-03 11:29:29.868 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2200 

2023-07-03 11:29:29.868 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1840 

2023-07-03 11:29:29.868 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1659 row column role 40 0 263 

2023-07-03 11:29:29.868 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2201 

2023-07-03 11:29:29.868 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1841 

2023-07-03 11:29:29.868 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1660 row column role 40 0 264 

2023-07-03 11:29:29.868 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2202 

2023-07-03 11:29:29.868 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1842 

2023-07-03 11:29:29.868 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1661 row column role 40 0 265 

2023-07-03 11:29:29.868 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2203 

2023-07-03 11:29:29.868 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1843 

2023-07-03 11:29:29.868 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1662 row column role 40 0 266 

2023-07-03 11:29:29.868 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2204 

2023-07-03 11:29:29.868 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1844 

2023-07-03 11:29:29.868 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1663 row column role 40 0 267 

2023-07-03 11:29:29.869 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2205 

2023-07-03 11:29:29.869 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1845 

2023-07-03 11:29:29.869 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1664 row column role 40 0 268 

2023-07-03 11:29:29.869 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2206 

2023-07-03 11:29:29.869 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1846 

2023-07-03 11:29:29.869 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1665 row column role 40 0 269 

2023-07-03 11:29:29.869 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2207 

2023-07-03 11:29:29.869 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1847 

2023-07-03 11:29:29.869 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1666 row column role 40 0 270 

2023-07-03 11:29:29.869 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2208 

2023-07-03 11:29:29.869 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1848 

2023-07-03 11:29:29.869 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1667 row column role 40 0 271 

2023-07-03 11:29:29.869 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2209 

2023-07-03 11:29:29.869 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1849 

2023-07-03 11:29:29.869 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1668 row column role 40 0 272 

2023-07-03 11:29:29.869 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2210 

2023-07-03 11:29:29.869 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1850 

2023-07-03 11:29:29.869 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1669 row column role 40 0 273 

2023-07-03 11:29:29.870 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2211 

2023-07-03 11:29:29.870 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1851 

2023-07-03 11:29:29.870 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1670 row column role 40 0 274 

2023-07-03 11:29:29.870 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2212 

2023-07-03 11:29:29.870 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1852 

2023-07-03 11:29:29.870 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1671 row column role 40 0 275 

2023-07-03 11:29:29.921 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2213 

2023-07-03 11:29:29.921 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1853 

2023-07-03 11:29:29.921 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1672 row column role 41 0 257 

2023-07-03 11:29:29.922 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2214 

2023-07-03 11:29:29.922 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1854 

2023-07-03 11:29:29.922 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1673 row column role 41 0 258 

2023-07-03 11:29:29.922 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2215 

2023-07-03 11:29:29.922 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1855 

2023-07-03 11:29:29.922 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1674 row column role 41 0 259 

2023-07-03 11:29:29.923 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2216 

2023-07-03 11:29:29.923 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1856 

2023-07-03 11:29:29.923 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1675 row column role 41 0 260 

2023-07-03 11:29:29.923 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2217 

2023-07-03 11:29:29.923 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1857 

2023-07-03 11:29:29.923 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1676 row column role 41 0 261 

2023-07-03 11:29:29.923 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2218 

2023-07-03 11:29:29.923 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1858 

2023-07-03 11:29:29.923 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1677 row column role 41 0 262 

2023-07-03 11:29:29.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2219 

2023-07-03 11:29:29.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1859 

2023-07-03 11:29:29.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1678 row column role 41 0 263 

2023-07-03 11:29:29.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2220 

2023-07-03 11:29:29.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1860 

2023-07-03 11:29:29.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1679 row column role 41 0 264 

2023-07-03 11:29:29.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2221 

2023-07-03 11:29:29.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1861 

2023-07-03 11:29:29.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1680 row column role 41 0 265 

2023-07-03 11:29:29.925 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2222 

2023-07-03 11:29:29.925 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1862 

2023-07-03 11:29:29.925 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1681 row column role 41 0 266 

2023-07-03 11:29:29.925 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2223 

2023-07-03 11:29:29.925 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1863 

2023-07-03 11:29:29.925 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1682 row column role 41 0 267 

2023-07-03 11:29:29.925 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2224 

2023-07-03 11:29:29.925 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1864 

2023-07-03 11:29:29.925 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1683 row column role 41 0 268 

2023-07-03 11:29:29.926 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2225 

2023-07-03 11:29:29.926 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1865 

2023-07-03 11:29:29.926 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1684 row column role 41 0 269 

2023-07-03 11:29:29.926 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2226 

2023-07-03 11:29:29.926 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1866 

2023-07-03 11:29:29.926 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1685 row column role 41 0 270 

2023-07-03 11:29:29.926 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2227 

2023-07-03 11:29:29.926 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1867 

2023-07-03 11:29:29.926 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1686 row column role 41 0 271 

2023-07-03 11:29:29.926 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2228 

2023-07-03 11:29:29.926 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1868 

2023-07-03 11:29:29.926 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1687 row column role 41 0 272 

2023-07-03 11:29:29.926 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2229 

2023-07-03 11:29:29.926 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1869 

2023-07-03 11:29:29.927 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1688 row column role 41 0 273 

2023-07-03 11:29:29.927 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2230 

2023-07-03 11:29:29.927 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1870 

2023-07-03 11:29:29.927 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1689 row column role 41 0 274 

2023-07-03 11:29:29.927 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2231 

2023-07-03 11:29:29.927 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1871 

2023-07-03 11:29:29.927 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1690 row column role 41 0 275 

2023-07-03 11:29:29.963 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2232 

2023-07-03 11:29:29.963 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1872 

2023-07-03 11:29:29.963 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1691 row column role 42 0 257 

2023-07-03 11:29:29.963 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2233 

2023-07-03 11:29:29.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1873 

2023-07-03 11:29:29.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1692 row column role 42 0 258 

2023-07-03 11:29:29.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2234 

2023-07-03 11:29:29.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1874 

2023-07-03 11:29:29.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1693 row column role 42 0 259 

2023-07-03 11:29:29.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2235 

2023-07-03 11:29:29.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1875 

2023-07-03 11:29:29.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1694 row column role 42 0 260 

2023-07-03 11:29:29.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2236 

2023-07-03 11:29:29.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1876 

2023-07-03 11:29:29.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1695 row column role 42 0 261 

2023-07-03 11:29:29.965 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2237 

2023-07-03 11:29:29.965 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1877 

2023-07-03 11:29:29.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1696 row column role 42 0 262 

2023-07-03 11:29:29.965 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2238 

2023-07-03 11:29:29.965 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1878 

2023-07-03 11:29:29.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1697 row column role 42 0 263 

2023-07-03 11:29:29.965 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2239 

2023-07-03 11:29:29.965 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1879 

2023-07-03 11:29:29.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1698 row column role 42 0 264 

2023-07-03 11:29:29.965 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2240 

2023-07-03 11:29:29.965 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1880 

2023-07-03 11:29:29.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1699 row column role 42 0 265 

2023-07-03 11:29:29.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2241 

2023-07-03 11:29:29.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1881 

2023-07-03 11:29:29.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1700 row column role 42 0 266 

2023-07-03 11:29:29.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2242 

2023-07-03 11:29:29.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1882 

2023-07-03 11:29:29.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1701 row column role 42 0 267 

2023-07-03 11:29:29.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2243 

2023-07-03 11:29:29.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1883 

2023-07-03 11:29:29.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1702 row column role 42 0 268 

2023-07-03 11:29:29.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2244 

2023-07-03 11:29:29.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1884 

2023-07-03 11:29:29.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1703 row column role 42 0 269 

2023-07-03 11:29:29.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2245 

2023-07-03 11:29:29.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1885 

2023-07-03 11:29:29.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1704 row column role 42 0 270 

2023-07-03 11:29:29.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2246 

2023-07-03 11:29:29.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1886 

2023-07-03 11:29:29.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1705 row column role 42 0 271 

2023-07-03 11:29:29.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2247 

2023-07-03 11:29:29.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1887 

2023-07-03 11:29:29.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1706 row column role 42 0 272 

2023-07-03 11:29:29.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2248 

2023-07-03 11:29:29.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1888 

2023-07-03 11:29:29.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1707 row column role 42 0 273 

2023-07-03 11:29:29.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2249 

2023-07-03 11:29:29.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1889 

2023-07-03 11:29:29.968 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1708 row column role 42 0 274 

2023-07-03 11:29:29.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2250 

2023-07-03 11:29:29.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1890 

2023-07-03 11:29:29.968 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1709 row column role 42 0 275 

2023-07-03 11:29:30.049 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2251 

2023-07-03 11:29:30.049 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1891 

2023-07-03 11:29:30.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1710 row column role 43 0 257 

2023-07-03 11:29:30.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2252 

2023-07-03 11:29:30.050 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1892 

2023-07-03 11:29:30.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1711 row column role 43 0 258 

2023-07-03 11:29:30.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2253 

2023-07-03 11:29:30.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1893 

2023-07-03 11:29:30.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1712 row column role 43 0 259 

2023-07-03 11:29:30.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2254 

2023-07-03 11:29:30.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1894 

2023-07-03 11:29:30.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1713 row column role 43 0 260 

2023-07-03 11:29:30.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2255 

2023-07-03 11:29:30.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1895 

2023-07-03 11:29:30.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1714 row column role 43 0 261 

2023-07-03 11:29:30.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2256 

2023-07-03 11:29:30.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1896 

2023-07-03 11:29:30.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1715 row column role 43 0 262 

2023-07-03 11:29:30.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2257 

2023-07-03 11:29:30.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1897 

2023-07-03 11:29:30.053 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1716 row column role 43 0 263 

2023-07-03 11:29:30.053 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2258 

2023-07-03 11:29:30.053 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1898 

2023-07-03 11:29:30.053 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1717 row column role 43 0 264 

2023-07-03 11:29:30.053 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2259 

2023-07-03 11:29:30.053 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1899 

2023-07-03 11:29:30.053 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1718 row column role 43 0 265 

2023-07-03 11:29:30.054 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2260 

2023-07-03 11:29:30.054 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1900 

2023-07-03 11:29:30.054 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1719 row column role 43 0 266 

2023-07-03 11:29:30.054 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2261 

2023-07-03 11:29:30.054 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1901 

2023-07-03 11:29:30.054 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1720 row column role 43 0 267 

2023-07-03 11:29:30.055 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2262 

2023-07-03 11:29:30.055 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1902 

2023-07-03 11:29:30.055 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1721 row column role 43 0 268 

2023-07-03 11:29:30.055 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2263 

2023-07-03 11:29:30.055 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1903 

2023-07-03 11:29:30.055 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1722 row column role 43 0 269 

2023-07-03 11:29:30.056 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2264 

2023-07-03 11:29:30.056 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1904 

2023-07-03 11:29:30.056 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1723 row column role 43 0 270 

2023-07-03 11:29:30.056 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2265 

2023-07-03 11:29:30.056 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1905 

2023-07-03 11:29:30.056 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1724 row column role 43 0 271 

2023-07-03 11:29:30.057 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2266 

2023-07-03 11:29:30.057 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1906 

2023-07-03 11:29:30.057 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1725 row column role 43 0 272 

2023-07-03 11:29:30.057 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2267 

2023-07-03 11:29:30.057 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1907 

2023-07-03 11:29:30.057 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1726 row column role 43 0 273 

2023-07-03 11:29:30.057 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2268 

2023-07-03 11:29:30.057 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1908 

2023-07-03 11:29:30.057 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1727 row column role 43 0 274 

2023-07-03 11:29:30.058 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2269 

2023-07-03 11:29:30.058 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1909 

2023-07-03 11:29:30.058 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1728 row column role 43 0 275 

2023-07-03 11:29:30.153 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2270 

2023-07-03 11:29:30.153 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1910 

2023-07-03 11:29:30.154 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1729 row column role 44 0 257 

2023-07-03 11:29:30.154 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2271 

2023-07-03 11:29:30.154 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1911 

2023-07-03 11:29:30.154 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1730 row column role 44 0 258 

2023-07-03 11:29:30.155 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2272 

2023-07-03 11:29:30.155 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1912 

2023-07-03 11:29:30.155 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1731 row column role 44 0 259 

2023-07-03 11:29:30.155 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2273 

2023-07-03 11:29:30.155 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1913 

2023-07-03 11:29:30.155 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1732 row column role 44 0 260 

2023-07-03 11:29:30.156 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2274 

2023-07-03 11:29:30.156 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1914 

2023-07-03 11:29:30.156 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1733 row column role 44 0 261 

2023-07-03 11:29:30.156 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2275 

2023-07-03 11:29:30.156 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1915 

2023-07-03 11:29:30.156 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1734 row column role 44 0 262 

2023-07-03 11:29:30.156 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2276 

2023-07-03 11:29:30.156 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1916 

2023-07-03 11:29:30.157 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1735 row column role 44 0 263 

2023-07-03 11:29:30.157 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2277 

2023-07-03 11:29:30.157 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1917 

2023-07-03 11:29:30.157 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1736 row column role 44 0 264 

2023-07-03 11:29:30.157 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2278 

2023-07-03 11:29:30.157 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1918 

2023-07-03 11:29:30.157 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1737 row column role 44 0 265 

2023-07-03 11:29:30.158 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2279 

2023-07-03 11:29:30.158 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1919 

2023-07-03 11:29:30.158 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1738 row column role 44 0 266 

2023-07-03 11:29:30.158 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2280 

2023-07-03 11:29:30.158 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1920 

2023-07-03 11:29:30.159 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1739 row column role 44 0 267 

2023-07-03 11:29:30.159 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2281 

2023-07-03 11:29:30.159 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1921 

2023-07-03 11:29:30.159 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1740 row column role 44 0 268 

2023-07-03 11:29:30.159 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2282 

2023-07-03 11:29:30.159 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1922 

2023-07-03 11:29:30.159 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1741 row column role 44 0 269 

2023-07-03 11:29:30.160 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2283 

2023-07-03 11:29:30.160 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1923 

2023-07-03 11:29:30.160 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1742 row column role 44 0 270 

2023-07-03 11:29:30.160 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2284 

2023-07-03 11:29:30.160 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1924 

2023-07-03 11:29:30.160 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1743 row column role 44 0 271 

2023-07-03 11:29:30.161 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2285 

2023-07-03 11:29:30.161 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1925 

2023-07-03 11:29:30.161 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1744 row column role 44 0 272 

2023-07-03 11:29:30.161 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2286 

2023-07-03 11:29:30.161 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1926 

2023-07-03 11:29:30.161 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1745 row column role 44 0 273 

2023-07-03 11:29:30.162 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2287 

2023-07-03 11:29:30.162 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1927 

2023-07-03 11:29:30.162 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1746 row column role 44 0 274 

2023-07-03 11:29:30.162 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2288 

2023-07-03 11:29:30.162 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1928 

2023-07-03 11:29:30.162 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1747 row column role 44 0 275 

2023-07-03 11:29:30.201 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2289 

2023-07-03 11:29:30.201 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1929 

2023-07-03 11:29:30.201 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1748 row column role 45 0 257 

2023-07-03 11:29:30.202 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2290 

2023-07-03 11:29:30.202 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1930 

2023-07-03 11:29:30.202 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1749 row column role 45 0 258 

2023-07-03 11:29:30.202 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2291 

2023-07-03 11:29:30.202 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1931 

2023-07-03 11:29:30.202 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1750 row column role 45 0 259 

2023-07-03 11:29:30.203 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2292 

2023-07-03 11:29:30.203 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1932 

2023-07-03 11:29:30.203 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1751 row column role 45 0 260 

2023-07-03 11:29:30.203 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2293 

2023-07-03 11:29:30.203 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1933 

2023-07-03 11:29:30.203 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1752 row column role 45 0 261 

2023-07-03 11:29:30.204 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2294 

2023-07-03 11:29:30.204 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1934 

2023-07-03 11:29:30.204 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1753 row column role 45 0 262 

2023-07-03 11:29:30.204 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2295 

2023-07-03 11:29:30.204 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1935 

2023-07-03 11:29:30.204 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1754 row column role 45 0 263 

2023-07-03 11:29:30.204 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2296 

2023-07-03 11:29:30.205 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1936 

2023-07-03 11:29:30.205 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1755 row column role 45 0 264 

2023-07-03 11:29:30.205 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2297 

2023-07-03 11:29:30.205 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1937 

2023-07-03 11:29:30.205 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1756 row column role 45 0 265 

2023-07-03 11:29:30.205 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2298 

2023-07-03 11:29:30.206 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1938 

2023-07-03 11:29:30.206 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1757 row column role 45 0 266 

2023-07-03 11:29:30.206 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2299 

2023-07-03 11:29:30.206 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1939 

2023-07-03 11:29:30.206 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1758 row column role 45 0 267 

2023-07-03 11:29:30.206 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2300 

2023-07-03 11:29:30.207 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1940 

2023-07-03 11:29:30.207 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1759 row column role 45 0 268 

2023-07-03 11:29:30.207 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2301 

2023-07-03 11:29:30.207 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1941 

2023-07-03 11:29:30.207 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1760 row column role 45 0 269 

2023-07-03 11:29:30.207 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2302 

2023-07-03 11:29:30.207 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1942 

2023-07-03 11:29:30.207 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1761 row column role 45 0 270 

2023-07-03 11:29:30.208 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2303 

2023-07-03 11:29:30.208 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1943 

2023-07-03 11:29:30.208 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1762 row column role 45 0 271 

2023-07-03 11:29:30.208 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2304 

2023-07-03 11:29:30.208 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1944 

2023-07-03 11:29:30.208 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1763 row column role 45 0 272 

2023-07-03 11:29:30.208 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2305 

2023-07-03 11:29:30.209 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1945 

2023-07-03 11:29:30.209 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1764 row column role 45 0 273 

2023-07-03 11:29:30.209 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2306 

2023-07-03 11:29:30.209 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1946 

2023-07-03 11:29:30.209 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1765 row column role 45 0 274 

2023-07-03 11:29:30.209 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2307 

2023-07-03 11:29:30.209 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1947 

2023-07-03 11:29:30.209 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1766 row column role 45 0 275 

2023-07-03 11:29:30.210 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2308 

2023-07-03 11:29:30.210 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1948 

2023-07-03 11:29:30.210 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1767 row column role 46 0 257 

2023-07-03 11:29:30.211 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2309 

2023-07-03 11:29:30.211 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1949 

2023-07-03 11:29:30.211 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1768 row column role 46 0 258 

2023-07-03 11:29:30.211 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2310 

2023-07-03 11:29:30.211 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1950 

2023-07-03 11:29:30.211 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1769 row column role 46 0 259 

2023-07-03 11:29:30.212 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2311 

2023-07-03 11:29:30.212 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1951 

2023-07-03 11:29:30.212 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1770 row column role 46 0 260 

2023-07-03 11:29:30.212 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2312 

2023-07-03 11:29:30.212 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1952 

2023-07-03 11:29:30.212 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1771 row column role 46 0 261 

2023-07-03 11:29:30.213 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2313 

2023-07-03 11:29:30.213 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1953 

2023-07-03 11:29:30.213 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1772 row column role 46 0 262 

2023-07-03 11:29:30.214 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2314 

2023-07-03 11:29:30.214 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1954 

2023-07-03 11:29:30.214 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1773 row column role 46 0 263 

2023-07-03 11:29:30.214 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2315 

2023-07-03 11:29:30.214 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1955 

2023-07-03 11:29:30.214 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1774 row column role 46 0 264 

2023-07-03 11:29:30.214 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2316 

2023-07-03 11:29:30.214 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1956 

2023-07-03 11:29:30.214 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1775 row column role 46 0 265 

2023-07-03 11:29:30.215 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2317 

2023-07-03 11:29:30.215 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1957 

2023-07-03 11:29:30.216 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1776 row column role 46 0 266 

2023-07-03 11:29:30.216 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2318 

2023-07-03 11:29:30.216 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1958 

2023-07-03 11:29:30.216 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1777 row column role 46 0 267 

2023-07-03 11:29:30.216 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2319 

2023-07-03 11:29:30.216 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1959 

2023-07-03 11:29:30.216 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1778 row column role 46 0 268 

2023-07-03 11:29:30.217 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2320 

2023-07-03 11:29:30.217 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1960 

2023-07-03 11:29:30.217 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1779 row column role 46 0 269 

2023-07-03 11:29:30.217 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2321 

2023-07-03 11:29:30.217 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1961 

2023-07-03 11:29:30.217 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1780 row column role 46 0 270 

2023-07-03 11:29:30.218 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2322 

2023-07-03 11:29:30.218 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1962 

2023-07-03 11:29:30.218 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1781 row column role 46 0 271 

2023-07-03 11:29:30.218 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2323 

2023-07-03 11:29:30.218 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1963 

2023-07-03 11:29:30.218 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1782 row column role 46 0 272 

2023-07-03 11:29:30.218 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2324 

2023-07-03 11:29:30.218 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1964 

2023-07-03 11:29:30.218 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1783 row column role 46 0 273 

2023-07-03 11:29:30.219 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2325 

2023-07-03 11:29:30.219 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1965 

2023-07-03 11:29:30.219 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1784 row column role 46 0 274 

2023-07-03 11:29:30.219 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2326 

2023-07-03 11:29:30.219 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1966 

2023-07-03 11:29:30.219 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1785 row column role 46 0 275 

2023-07-03 11:29:30.225 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2327 

2023-07-03 11:29:30.225 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1967 

2023-07-03 11:29:30.225 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1786 row column role 47 0 257 

2023-07-03 11:29:30.225 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2328 

2023-07-03 11:29:30.225 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1968 

2023-07-03 11:29:30.225 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1787 row column role 47 0 258 

2023-07-03 11:29:30.225 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2329 

2023-07-03 11:29:30.226 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1969 

2023-07-03 11:29:30.226 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1788 row column role 47 0 259 

2023-07-03 11:29:30.226 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2330 

2023-07-03 11:29:30.226 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1970 

2023-07-03 11:29:30.226 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1789 row column role 47 0 260 

2023-07-03 11:29:30.226 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2331 

2023-07-03 11:29:30.226 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1971 

2023-07-03 11:29:30.226 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1790 row column role 47 0 261 

2023-07-03 11:29:30.226 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2332 

2023-07-03 11:29:30.226 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1972 

2023-07-03 11:29:30.226 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1791 row column role 47 0 262 

2023-07-03 11:29:30.227 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2333 

2023-07-03 11:29:30.227 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1973 

2023-07-03 11:29:30.227 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1792 row column role 47 0 263 

2023-07-03 11:29:30.227 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2334 

2023-07-03 11:29:30.227 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1974 

2023-07-03 11:29:30.227 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1793 row column role 47 0 264 

2023-07-03 11:29:30.227 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2335 

2023-07-03 11:29:30.227 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1975 

2023-07-03 11:29:30.227 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1794 row column role 47 0 265 

2023-07-03 11:29:30.227 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2336 

2023-07-03 11:29:30.228 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1976 

2023-07-03 11:29:30.228 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1795 row column role 47 0 266 

2023-07-03 11:29:30.228 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2337 

2023-07-03 11:29:30.228 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1977 

2023-07-03 11:29:30.228 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1796 row column role 47 0 267 

2023-07-03 11:29:30.228 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2338 

2023-07-03 11:29:30.228 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1978 

2023-07-03 11:29:30.228 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1797 row column role 47 0 268 

2023-07-03 11:29:30.228 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2339 

2023-07-03 11:29:30.228 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1979 

2023-07-03 11:29:30.228 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1798 row column role 47 0 269 

2023-07-03 11:29:30.228 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2340 

2023-07-03 11:29:30.229 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1980 

2023-07-03 11:29:30.229 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1799 row column role 47 0 270 

2023-07-03 11:29:30.229 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2341 

2023-07-03 11:29:30.229 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1981 

2023-07-03 11:29:30.229 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1800 row column role 47 0 271 

2023-07-03 11:29:30.229 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2342 

2023-07-03 11:29:30.229 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1982 

2023-07-03 11:29:30.229 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1801 row column role 47 0 272 

2023-07-03 11:29:30.229 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2343 

2023-07-03 11:29:30.229 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1983 

2023-07-03 11:29:30.229 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1802 row column role 47 0 273 

2023-07-03 11:29:30.229 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2344 

2023-07-03 11:29:30.229 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1984 

2023-07-03 11:29:30.229 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1803 row column role 47 0 274 

2023-07-03 11:29:30.230 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2345 

2023-07-03 11:29:30.230 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1985 

2023-07-03 11:29:30.230 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1804 row column role 47 0 275 

2023-07-03 11:29:30.275 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2346 

2023-07-03 11:29:30.275 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1986 

2023-07-03 11:29:30.275 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1805 row column role 48 0 257 

2023-07-03 11:29:30.275 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2347 

2023-07-03 11:29:30.275 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1987 

2023-07-03 11:29:30.276 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1806 row column role 48 0 258 

2023-07-03 11:29:30.276 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2348 

2023-07-03 11:29:30.276 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1988 

2023-07-03 11:29:30.276 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1807 row column role 48 0 259 

2023-07-03 11:29:30.276 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2349 

2023-07-03 11:29:30.276 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1989 

2023-07-03 11:29:30.276 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1808 row column role 48 0 260 

2023-07-03 11:29:30.276 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2350 

2023-07-03 11:29:30.276 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1990 

2023-07-03 11:29:30.276 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1809 row column role 48 0 261 

2023-07-03 11:29:30.277 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2351 

2023-07-03 11:29:30.277 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1991 

2023-07-03 11:29:30.277 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1810 row column role 48 0 262 

2023-07-03 11:29:30.277 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2352 

2023-07-03 11:29:30.277 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1992 

2023-07-03 11:29:30.277 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1811 row column role 48 0 263 

2023-07-03 11:29:30.277 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2353 

2023-07-03 11:29:30.277 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1993 

2023-07-03 11:29:30.277 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1812 row column role 48 0 264 

2023-07-03 11:29:30.277 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2354 

2023-07-03 11:29:30.277 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1994 

2023-07-03 11:29:30.277 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1813 row column role 48 0 265 

2023-07-03 11:29:30.278 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2355 

2023-07-03 11:29:30.278 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1995 

2023-07-03 11:29:30.278 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1814 row column role 48 0 266 

2023-07-03 11:29:30.278 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2356 

2023-07-03 11:29:30.278 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1996 

2023-07-03 11:29:30.278 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1815 row column role 48 0 267 

2023-07-03 11:29:30.278 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2357 

2023-07-03 11:29:30.278 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1997 

2023-07-03 11:29:30.278 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1816 row column role 48 0 268 

2023-07-03 11:29:30.278 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2358 

2023-07-03 11:29:30.278 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1998 

2023-07-03 11:29:30.278 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1817 row column role 48 0 269 

2023-07-03 11:29:30.279 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2359 

2023-07-03 11:29:30.279 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 1999 

2023-07-03 11:29:30.279 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1818 row column role 48 0 270 

2023-07-03 11:29:30.279 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2360 

2023-07-03 11:29:30.279 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2000 

2023-07-03 11:29:30.279 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1819 row column role 48 0 271 

2023-07-03 11:29:30.279 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2361 

2023-07-03 11:29:30.279 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2001 

2023-07-03 11:29:30.279 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1820 row column role 48 0 272 

2023-07-03 11:29:30.279 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2362 

2023-07-03 11:29:30.279 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2002 

2023-07-03 11:29:30.279 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1821 row column role 48 0 273 

2023-07-03 11:29:30.280 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2363 

2023-07-03 11:29:30.280 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2003 

2023-07-03 11:29:30.280 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1822 row column role 48 0 274 

2023-07-03 11:29:30.280 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2364 

2023-07-03 11:29:30.280 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2004 

2023-07-03 11:29:30.280 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1823 row column role 48 0 275 

2023-07-03 11:29:30.323 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2365 

2023-07-03 11:29:30.323 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2005 

2023-07-03 11:29:30.323 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1824 row column role 49 0 257 

2023-07-03 11:29:30.324 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2366 

2023-07-03 11:29:30.324 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2006 

2023-07-03 11:29:30.324 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1825 row column role 49 0 258 

2023-07-03 11:29:30.324 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2367 

2023-07-03 11:29:30.324 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2007 

2023-07-03 11:29:30.324 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1826 row column role 49 0 259 

2023-07-03 11:29:30.324 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2368 

2023-07-03 11:29:30.324 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2008 

2023-07-03 11:29:30.325 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1827 row column role 49 0 260 

2023-07-03 11:29:30.325 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2369 

2023-07-03 11:29:30.325 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2009 

2023-07-03 11:29:30.325 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1828 row column role 49 0 261 

2023-07-03 11:29:30.325 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2370 

2023-07-03 11:29:30.325 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2010 

2023-07-03 11:29:30.325 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1829 row column role 49 0 262 

2023-07-03 11:29:30.326 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2371 

2023-07-03 11:29:30.326 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2011 

2023-07-03 11:29:30.326 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1830 row column role 49 0 263 

2023-07-03 11:29:30.326 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2372 

2023-07-03 11:29:30.326 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2012 

2023-07-03 11:29:30.326 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1831 row column role 49 0 264 

2023-07-03 11:29:30.327 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2373 

2023-07-03 11:29:30.327 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2013 

2023-07-03 11:29:30.327 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1832 row column role 49 0 265 

2023-07-03 11:29:30.327 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2374 

2023-07-03 11:29:30.327 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2014 

2023-07-03 11:29:30.327 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1833 row column role 49 0 266 

2023-07-03 11:29:30.328 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2375 

2023-07-03 11:29:30.328 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2015 

2023-07-03 11:29:30.328 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1834 row column role 49 0 267 

2023-07-03 11:29:30.328 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2376 

2023-07-03 11:29:30.328 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2016 

2023-07-03 11:29:30.328 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1835 row column role 49 0 268 

2023-07-03 11:29:30.329 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2377 

2023-07-03 11:29:30.329 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2017 

2023-07-03 11:29:30.329 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1836 row column role 49 0 269 

2023-07-03 11:29:30.329 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2378 

2023-07-03 11:29:30.329 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2018 

2023-07-03 11:29:30.329 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1837 row column role 49 0 270 

2023-07-03 11:29:30.329 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2379 

2023-07-03 11:29:30.330 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2019 

2023-07-03 11:29:30.330 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1838 row column role 49 0 271 

2023-07-03 11:29:30.330 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2380 

2023-07-03 11:29:30.330 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2020 

2023-07-03 11:29:30.330 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1839 row column role 49 0 272 

2023-07-03 11:29:30.330 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2381 

2023-07-03 11:29:30.330 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2021 

2023-07-03 11:29:30.330 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1840 row column role 49 0 273 

2023-07-03 11:29:30.331 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2382 

2023-07-03 11:29:30.331 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2022 

2023-07-03 11:29:30.331 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1841 row column role 49 0 274 

2023-07-03 11:29:30.331 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2383 

2023-07-03 11:29:30.331 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2023 

2023-07-03 11:29:30.331 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1842 row column role 49 0 275 

2023-07-03 11:29:30.332 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2384 

2023-07-03 11:29:30.332 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2024 

2023-07-03 11:29:30.332 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1843 row column role 50 0 257 

2023-07-03 11:29:30.333 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2385 

2023-07-03 11:29:30.333 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2025 

2023-07-03 11:29:30.333 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1844 row column role 50 0 258 

2023-07-03 11:29:30.333 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2386 

2023-07-03 11:29:30.333 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2026 

2023-07-03 11:29:30.333 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1845 row column role 50 0 259 

2023-07-03 11:29:30.334 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2387 

2023-07-03 11:29:30.334 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2027 

2023-07-03 11:29:30.334 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1846 row column role 50 0 260 

2023-07-03 11:29:30.334 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2388 

2023-07-03 11:29:30.334 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2028 

2023-07-03 11:29:30.334 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1847 row column role 50 0 261 

2023-07-03 11:29:30.334 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2389 

2023-07-03 11:29:30.335 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2029 

2023-07-03 11:29:30.335 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1848 row column role 50 0 262 

2023-07-03 11:29:30.335 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2390 

2023-07-03 11:29:30.335 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2030 

2023-07-03 11:29:30.335 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1849 row column role 50 0 263 

2023-07-03 11:29:30.335 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2391 

2023-07-03 11:29:30.335 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2031 

2023-07-03 11:29:30.335 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1850 row column role 50 0 264 

2023-07-03 11:29:30.335 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2392 

2023-07-03 11:29:30.335 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2032 

2023-07-03 11:29:30.337 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1851 row column role 50 0 265 

2023-07-03 11:29:30.337 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2393 

2023-07-03 11:29:30.337 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2033 

2023-07-03 11:29:30.337 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1852 row column role 50 0 266 

2023-07-03 11:29:30.337 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2394 

2023-07-03 11:29:30.337 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2034 

2023-07-03 11:29:30.337 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1853 row column role 50 0 267 

2023-07-03 11:29:30.337 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2395 

2023-07-03 11:29:30.337 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2035 

2023-07-03 11:29:30.337 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1854 row column role 50 0 268 

2023-07-03 11:29:30.339 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2396 

2023-07-03 11:29:30.339 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2036 

2023-07-03 11:29:30.339 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1855 row column role 50 0 269 

2023-07-03 11:29:30.339 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2397 

2023-07-03 11:29:30.339 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2037 

2023-07-03 11:29:30.339 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1856 row column role 50 0 270 

2023-07-03 11:29:30.339 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2398 

2023-07-03 11:29:30.339 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2038 

2023-07-03 11:29:30.339 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1857 row column role 50 0 271 

2023-07-03 11:29:30.339 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2399 

2023-07-03 11:29:30.339 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2039 

2023-07-03 11:29:30.340 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1858 row column role 50 0 272 

2023-07-03 11:29:30.340 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2400 

2023-07-03 11:29:30.340 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2040 

2023-07-03 11:29:30.340 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1859 row column role 50 0 273 

2023-07-03 11:29:30.340 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2401 

2023-07-03 11:29:30.340 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2041 

2023-07-03 11:29:30.340 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1860 row column role 50 0 274 

2023-07-03 11:29:30.341 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2402 

2023-07-03 11:29:30.341 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2042 

2023-07-03 11:29:30.341 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1861 row column role 50 0 275 

2023-07-03 11:29:30.358 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2403 

2023-07-03 11:29:30.358 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2043 

2023-07-03 11:29:30.358 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1862 row column role 51 0 257 

2023-07-03 11:29:30.358 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2404 

2023-07-03 11:29:30.358 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2044 

2023-07-03 11:29:30.358 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1863 row column role 51 0 258 

2023-07-03 11:29:30.359 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2405 

2023-07-03 11:29:30.359 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2045 

2023-07-03 11:29:30.359 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1864 row column role 51 0 259 

2023-07-03 11:29:30.359 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2406 

2023-07-03 11:29:30.359 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2046 

2023-07-03 11:29:30.359 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1865 row column role 51 0 260 

2023-07-03 11:29:30.359 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2407 

2023-07-03 11:29:30.359 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2047 

2023-07-03 11:29:30.359 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1866 row column role 51 0 261 

2023-07-03 11:29:30.359 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2408 

2023-07-03 11:29:30.359 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2048 

2023-07-03 11:29:30.360 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1867 row column role 51 0 262 

2023-07-03 11:29:30.360 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2409 

2023-07-03 11:29:30.360 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2049 

2023-07-03 11:29:30.360 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1868 row column role 51 0 263 

2023-07-03 11:29:30.360 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2410 

2023-07-03 11:29:30.360 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2050 

2023-07-03 11:29:30.360 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1869 row column role 51 0 264 

2023-07-03 11:29:30.360 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2411 

2023-07-03 11:29:30.360 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2051 

2023-07-03 11:29:30.360 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1870 row column role 51 0 265 

2023-07-03 11:29:30.361 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2412 

2023-07-03 11:29:30.361 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2052 

2023-07-03 11:29:30.361 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1871 row column role 51 0 266 

2023-07-03 11:29:30.361 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2413 

2023-07-03 11:29:30.361 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2053 

2023-07-03 11:29:30.361 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1872 row column role 51 0 267 

2023-07-03 11:29:30.361 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2414 

2023-07-03 11:29:30.361 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2054 

2023-07-03 11:29:30.361 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1873 row column role 51 0 268 

2023-07-03 11:29:30.361 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2415 

2023-07-03 11:29:30.361 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2055 

2023-07-03 11:29:30.362 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1874 row column role 51 0 269 

2023-07-03 11:29:30.362 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2416 

2023-07-03 11:29:30.362 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2056 

2023-07-03 11:29:30.362 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1875 row column role 51 0 270 

2023-07-03 11:29:30.362 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2417 

2023-07-03 11:29:30.362 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2057 

2023-07-03 11:29:30.362 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1876 row column role 51 0 271 

2023-07-03 11:29:30.362 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2418 

2023-07-03 11:29:30.362 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2058 

2023-07-03 11:29:30.362 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1877 row column role 51 0 272 

2023-07-03 11:29:30.362 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2419 

2023-07-03 11:29:30.362 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2059 

2023-07-03 11:29:30.362 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1878 row column role 51 0 273 

2023-07-03 11:29:30.363 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2420 

2023-07-03 11:29:30.363 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2060 

2023-07-03 11:29:30.363 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1879 row column role 51 0 274 

2023-07-03 11:29:30.363 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2421 

2023-07-03 11:29:30.363 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2061 

2023-07-03 11:29:30.363 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1880 row column role 51 0 275 

2023-07-03 11:29:30.400 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2422 

2023-07-03 11:29:30.400 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2062 

2023-07-03 11:29:30.400 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1881 row column role 52 0 257 

2023-07-03 11:29:30.401 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2423 

2023-07-03 11:29:30.401 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2063 

2023-07-03 11:29:30.401 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1882 row column role 52 0 258 

2023-07-03 11:29:30.401 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2424 

2023-07-03 11:29:30.401 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2064 

2023-07-03 11:29:30.401 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1883 row column role 52 0 259 

2023-07-03 11:29:30.401 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2425 

2023-07-03 11:29:30.401 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2065 

2023-07-03 11:29:30.401 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1884 row column role 52 0 260 

2023-07-03 11:29:30.402 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2426 

2023-07-03 11:29:30.402 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2066 

2023-07-03 11:29:30.402 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1885 row column role 52 0 261 

2023-07-03 11:29:30.402 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2427 

2023-07-03 11:29:30.402 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2067 

2023-07-03 11:29:30.402 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1886 row column role 52 0 262 

2023-07-03 11:29:30.403 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2428 

2023-07-03 11:29:30.403 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2068 

2023-07-03 11:29:30.403 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1887 row column role 52 0 263 

2023-07-03 11:29:30.403 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2429 

2023-07-03 11:29:30.403 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2069 

2023-07-03 11:29:30.403 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1888 row column role 52 0 264 

2023-07-03 11:29:30.403 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2430 

2023-07-03 11:29:30.403 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2070 

2023-07-03 11:29:30.403 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1889 row column role 52 0 265 

2023-07-03 11:29:30.404 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2431 

2023-07-03 11:29:30.404 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2071 

2023-07-03 11:29:30.404 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1890 row column role 52 0 266 

2023-07-03 11:29:30.404 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2432 

2023-07-03 11:29:30.404 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2072 

2023-07-03 11:29:30.404 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1891 row column role 52 0 267 

2023-07-03 11:29:30.404 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2433 

2023-07-03 11:29:30.404 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2073 

2023-07-03 11:29:30.404 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1892 row column role 52 0 268 

2023-07-03 11:29:30.405 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2434 

2023-07-03 11:29:30.405 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2074 

2023-07-03 11:29:30.405 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1893 row column role 52 0 269 

2023-07-03 11:29:30.405 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2435 

2023-07-03 11:29:30.405 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2075 

2023-07-03 11:29:30.405 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1894 row column role 52 0 270 

2023-07-03 11:29:30.405 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2436 

2023-07-03 11:29:30.405 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2076 

2023-07-03 11:29:30.405 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1895 row column role 52 0 271 

2023-07-03 11:29:30.406 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2437 

2023-07-03 11:29:30.406 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2077 

2023-07-03 11:29:30.406 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1896 row column role 52 0 272 

2023-07-03 11:29:30.406 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2438 

2023-07-03 11:29:30.406 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2078 

2023-07-03 11:29:30.406 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1897 row column role 52 0 273 

2023-07-03 11:29:30.406 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2439 

2023-07-03 11:29:30.406 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2079 

2023-07-03 11:29:30.406 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1898 row column role 52 0 274 

2023-07-03 11:29:30.407 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2440 

2023-07-03 11:29:30.407 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2080 

2023-07-03 11:29:30.407 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1899 row column role 52 0 275 

2023-07-03 11:29:30.464 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2441 

2023-07-03 11:29:30.464 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2081 

2023-07-03 11:29:30.464 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1900 row column role 53 0 257 

2023-07-03 11:29:30.465 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2442 

2023-07-03 11:29:30.465 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2082 

2023-07-03 11:29:30.465 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1901 row column role 53 0 258 

2023-07-03 11:29:30.465 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2443 

2023-07-03 11:29:30.465 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2083 

2023-07-03 11:29:30.465 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1902 row column role 53 0 259 

2023-07-03 11:29:30.466 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2444 

2023-07-03 11:29:30.466 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2084 

2023-07-03 11:29:30.466 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1903 row column role 53 0 260 

2023-07-03 11:29:30.466 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2445 

2023-07-03 11:29:30.466 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2085 

2023-07-03 11:29:30.466 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1904 row column role 53 0 261 

2023-07-03 11:29:30.466 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2446 

2023-07-03 11:29:30.466 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2086 

2023-07-03 11:29:30.466 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1905 row column role 53 0 262 

2023-07-03 11:29:30.467 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2447 

2023-07-03 11:29:30.467 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2087 

2023-07-03 11:29:30.467 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1906 row column role 53 0 263 

2023-07-03 11:29:30.467 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2448 

2023-07-03 11:29:30.467 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2088 

2023-07-03 11:29:30.467 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1907 row column role 53 0 264 

2023-07-03 11:29:30.467 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2449 

2023-07-03 11:29:30.467 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2089 

2023-07-03 11:29:30.467 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1908 row column role 53 0 265 

2023-07-03 11:29:30.468 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2450 

2023-07-03 11:29:30.468 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2090 

2023-07-03 11:29:30.468 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1909 row column role 53 0 266 

2023-07-03 11:29:30.468 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2451 

2023-07-03 11:29:30.468 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2091 

2023-07-03 11:29:30.468 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1910 row column role 53 0 267 

2023-07-03 11:29:30.468 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2452 

2023-07-03 11:29:30.468 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2092 

2023-07-03 11:29:30.468 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1911 row column role 53 0 268 

2023-07-03 11:29:30.469 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2453 

2023-07-03 11:29:30.469 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2093 

2023-07-03 11:29:30.469 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1912 row column role 53 0 269 

2023-07-03 11:29:30.469 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2454 

2023-07-03 11:29:30.469 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2094 

2023-07-03 11:29:30.469 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1913 row column role 53 0 270 

2023-07-03 11:29:30.469 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2455 

2023-07-03 11:29:30.469 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2095 

2023-07-03 11:29:30.469 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1914 row column role 53 0 271 

2023-07-03 11:29:30.470 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2456 

2023-07-03 11:29:30.470 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2096 

2023-07-03 11:29:30.470 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1915 row column role 53 0 272 

2023-07-03 11:29:30.470 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2457 

2023-07-03 11:29:30.470 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2097 

2023-07-03 11:29:30.470 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1916 row column role 53 0 273 

2023-07-03 11:29:30.470 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2458 

2023-07-03 11:29:30.470 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2098 

2023-07-03 11:29:30.470 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1917 row column role 53 0 274 

2023-07-03 11:29:30.471 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2459 

2023-07-03 11:29:30.471 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2099 

2023-07-03 11:29:30.471 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1918 row column role 53 0 275 

2023-07-03 11:29:30.526 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2460 

2023-07-03 11:29:30.526 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2100 

2023-07-03 11:29:30.526 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1919 row column role 54 0 257 

2023-07-03 11:29:30.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2461 

2023-07-03 11:29:30.527 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2101 

2023-07-03 11:29:30.527 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1920 row column role 54 0 258 

2023-07-03 11:29:30.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2462 

2023-07-03 11:29:30.527 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2102 

2023-07-03 11:29:30.527 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1921 row column role 54 0 259 

2023-07-03 11:29:30.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2463 

2023-07-03 11:29:30.527 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2103 

2023-07-03 11:29:30.527 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1922 row column role 54 0 260 

2023-07-03 11:29:30.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2464 

2023-07-03 11:29:30.528 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2104 

2023-07-03 11:29:30.528 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1923 row column role 54 0 261 

2023-07-03 11:29:30.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2465 

2023-07-03 11:29:30.528 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2105 

2023-07-03 11:29:30.528 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1924 row column role 54 0 262 

2023-07-03 11:29:30.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2466 

2023-07-03 11:29:30.528 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2106 

2023-07-03 11:29:30.528 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1925 row column role 54 0 263 

2023-07-03 11:29:30.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2467 

2023-07-03 11:29:30.529 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2107 

2023-07-03 11:29:30.529 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1926 row column role 54 0 264 

2023-07-03 11:29:30.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2468 

2023-07-03 11:29:30.529 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2108 

2023-07-03 11:29:30.529 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1927 row column role 54 0 265 

2023-07-03 11:29:30.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2469 

2023-07-03 11:29:30.529 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2109 

2023-07-03 11:29:30.529 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1928 row column role 54 0 266 

2023-07-03 11:29:30.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2470 

2023-07-03 11:29:30.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2110 

2023-07-03 11:29:30.530 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1929 row column role 54 0 267 

2023-07-03 11:29:30.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2471 

2023-07-03 11:29:30.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2111 

2023-07-03 11:29:30.530 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1930 row column role 54 0 268 

2023-07-03 11:29:30.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2472 

2023-07-03 11:29:30.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2112 

2023-07-03 11:29:30.530 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1931 row column role 54 0 269 

2023-07-03 11:29:30.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2473 

2023-07-03 11:29:30.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2113 

2023-07-03 11:29:30.531 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1932 row column role 54 0 270 

2023-07-03 11:29:30.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2474 

2023-07-03 11:29:30.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2114 

2023-07-03 11:29:30.531 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1933 row column role 54 0 271 

2023-07-03 11:29:30.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2475 

2023-07-03 11:29:30.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2115 

2023-07-03 11:29:30.531 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1934 row column role 54 0 272 

2023-07-03 11:29:30.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2476 

2023-07-03 11:29:30.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2116 

2023-07-03 11:29:30.531 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1935 row column role 54 0 273 

2023-07-03 11:29:30.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2477 

2023-07-03 11:29:30.532 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2117 

2023-07-03 11:29:30.532 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1936 row column role 54 0 274 

2023-07-03 11:29:30.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2478 

2023-07-03 11:29:30.532 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2118 

2023-07-03 11:29:30.532 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1937 row column role 54 0 275 

2023-07-03 11:29:30.572 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2479 

2023-07-03 11:29:30.572 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2119 

2023-07-03 11:29:30.572 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1938 row column role 55 0 257 

2023-07-03 11:29:30.572 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2480 

2023-07-03 11:29:30.572 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2120 

2023-07-03 11:29:30.572 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1939 row column role 55 0 258 

2023-07-03 11:29:30.572 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2481 

2023-07-03 11:29:30.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2121 

2023-07-03 11:29:30.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1940 row column role 55 0 259 

2023-07-03 11:29:30.573 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2482 

2023-07-03 11:29:30.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2122 

2023-07-03 11:29:30.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1941 row column role 55 0 260 

2023-07-03 11:29:30.573 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2483 

2023-07-03 11:29:30.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2123 

2023-07-03 11:29:30.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1942 row column role 55 0 261 

2023-07-03 11:29:30.573 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2484 

2023-07-03 11:29:30.574 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2124 

2023-07-03 11:29:30.574 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1943 row column role 55 0 262 

2023-07-03 11:29:30.574 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2485 

2023-07-03 11:29:30.574 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2125 

2023-07-03 11:29:30.574 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1944 row column role 55 0 263 

2023-07-03 11:29:30.574 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2486 

2023-07-03 11:29:30.574 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2126 

2023-07-03 11:29:30.574 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1945 row column role 55 0 264 

2023-07-03 11:29:30.574 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2487 

2023-07-03 11:29:30.575 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2127 

2023-07-03 11:29:30.575 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1946 row column role 55 0 265 

2023-07-03 11:29:30.575 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2488 

2023-07-03 11:29:30.575 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2128 

2023-07-03 11:29:30.575 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1947 row column role 55 0 266 

2023-07-03 11:29:30.575 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2489 

2023-07-03 11:29:30.575 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2129 

2023-07-03 11:29:30.575 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1948 row column role 55 0 267 

2023-07-03 11:29:30.575 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2490 

2023-07-03 11:29:30.576 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2130 

2023-07-03 11:29:30.576 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1949 row column role 55 0 268 

2023-07-03 11:29:30.576 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2491 

2023-07-03 11:29:30.576 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2131 

2023-07-03 11:29:30.576 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1950 row column role 55 0 269 

2023-07-03 11:29:30.576 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2492 

2023-07-03 11:29:30.576 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2132 

2023-07-03 11:29:30.576 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1951 row column role 55 0 270 

2023-07-03 11:29:30.576 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2493 

2023-07-03 11:29:30.577 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2133 

2023-07-03 11:29:30.577 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1952 row column role 55 0 271 

2023-07-03 11:29:30.577 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2494 

2023-07-03 11:29:30.577 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2134 

2023-07-03 11:29:30.577 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1953 row column role 55 0 272 

2023-07-03 11:29:30.577 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2495 

2023-07-03 11:29:30.577 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2135 

2023-07-03 11:29:30.577 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1954 row column role 55 0 273 

2023-07-03 11:29:30.577 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2496 

2023-07-03 11:29:30.577 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2136 

2023-07-03 11:29:30.577 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1955 row column role 55 0 274 

2023-07-03 11:29:30.577 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2497 

2023-07-03 11:29:30.577 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2137 

2023-07-03 11:29:30.577 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1956 row column role 55 0 275 

2023-07-03 11:29:30.578 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2498 

2023-07-03 11:29:30.578 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2138 

2023-07-03 11:29:30.578 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1957 row column role 56 0 257 

2023-07-03 11:29:30.579 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2499 

2023-07-03 11:29:30.579 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2139 

2023-07-03 11:29:30.579 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1958 row column role 56 0 258 

2023-07-03 11:29:30.579 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2500 

2023-07-03 11:29:30.579 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2140 

2023-07-03 11:29:30.579 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1959 row column role 56 0 259 

2023-07-03 11:29:30.579 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2501 

2023-07-03 11:29:30.579 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2141 

2023-07-03 11:29:30.579 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1960 row column role 56 0 260 

2023-07-03 11:29:30.580 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2502 

2023-07-03 11:29:30.580 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2142 

2023-07-03 11:29:30.580 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1961 row column role 56 0 261 

2023-07-03 11:29:30.580 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2503 

2023-07-03 11:29:30.580 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2143 

2023-07-03 11:29:30.580 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1962 row column role 56 0 262 

2023-07-03 11:29:30.580 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2504 

2023-07-03 11:29:30.580 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2144 

2023-07-03 11:29:30.580 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1963 row column role 56 0 263 

2023-07-03 11:29:30.581 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2505 

2023-07-03 11:29:30.581 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2145 

2023-07-03 11:29:30.581 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1964 row column role 56 0 264 

2023-07-03 11:29:30.581 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2506 

2023-07-03 11:29:30.581 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2146 

2023-07-03 11:29:30.581 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1965 row column role 56 0 265 

2023-07-03 11:29:30.581 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2507 

2023-07-03 11:29:30.581 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2147 

2023-07-03 11:29:30.581 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1966 row column role 56 0 266 

2023-07-03 11:29:30.582 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2508 

2023-07-03 11:29:30.582 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2148 

2023-07-03 11:29:30.582 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1967 row column role 56 0 267 

2023-07-03 11:29:30.582 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2509 

2023-07-03 11:29:30.582 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2149 

2023-07-03 11:29:30.582 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1968 row column role 56 0 268 

2023-07-03 11:29:30.582 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2510 

2023-07-03 11:29:30.582 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2150 

2023-07-03 11:29:30.582 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1969 row column role 56 0 269 

2023-07-03 11:29:30.583 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2511 

2023-07-03 11:29:30.583 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2151 

2023-07-03 11:29:30.583 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1970 row column role 56 0 270 

2023-07-03 11:29:30.583 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2512 

2023-07-03 11:29:30.583 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2152 

2023-07-03 11:29:30.583 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1971 row column role 56 0 271 

2023-07-03 11:29:30.583 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2513 

2023-07-03 11:29:30.583 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2153 

2023-07-03 11:29:30.583 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1972 row column role 56 0 272 

2023-07-03 11:29:30.583 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2514 

2023-07-03 11:29:30.584 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2154 

2023-07-03 11:29:30.584 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1973 row column role 56 0 273 

2023-07-03 11:29:30.584 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2515 

2023-07-03 11:29:30.584 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2155 

2023-07-03 11:29:30.584 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1974 row column role 56 0 274 

2023-07-03 11:29:30.584 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2516 

2023-07-03 11:29:30.584 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2156 

2023-07-03 11:29:30.584 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1975 row column role 56 0 275 

2023-07-03 11:29:30.609 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2517 

2023-07-03 11:29:30.609 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2157 

2023-07-03 11:29:30.610 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1976 row column role 57 0 257 

2023-07-03 11:29:30.610 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2518 

2023-07-03 11:29:30.610 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2158 

2023-07-03 11:29:30.610 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1977 row column role 57 0 258 

2023-07-03 11:29:30.611 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2519 

2023-07-03 11:29:30.611 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2159 

2023-07-03 11:29:30.611 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1978 row column role 57 0 259 

2023-07-03 11:29:30.611 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2520 

2023-07-03 11:29:30.611 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2160 

2023-07-03 11:29:30.611 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1979 row column role 57 0 260 

2023-07-03 11:29:30.612 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2521 

2023-07-03 11:29:30.612 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2161 

2023-07-03 11:29:30.612 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1980 row column role 57 0 261 

2023-07-03 11:29:30.612 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2522 

2023-07-03 11:29:30.612 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2162 

2023-07-03 11:29:30.612 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1981 row column role 57 0 262 

2023-07-03 11:29:30.613 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2523 

2023-07-03 11:29:30.613 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2163 

2023-07-03 11:29:30.613 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1982 row column role 57 0 263 

2023-07-03 11:29:30.613 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2524 

2023-07-03 11:29:30.613 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2164 

2023-07-03 11:29:30.613 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1983 row column role 57 0 264 

2023-07-03 11:29:30.613 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2525 

2023-07-03 11:29:30.613 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2165 

2023-07-03 11:29:30.613 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1984 row column role 57 0 265 

2023-07-03 11:29:30.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2526 

2023-07-03 11:29:30.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2166 

2023-07-03 11:29:30.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1985 row column role 57 0 266 

2023-07-03 11:29:30.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2527 

2023-07-03 11:29:30.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2167 

2023-07-03 11:29:30.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1986 row column role 57 0 267 

2023-07-03 11:29:30.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2528 

2023-07-03 11:29:30.615 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2168 

2023-07-03 11:29:30.615 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1987 row column role 57 0 268 

2023-07-03 11:29:30.615 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2529 

2023-07-03 11:29:30.615 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2169 

2023-07-03 11:29:30.615 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1988 row column role 57 0 269 

2023-07-03 11:29:30.615 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2530 

2023-07-03 11:29:30.615 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2170 

2023-07-03 11:29:30.615 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1989 row column role 57 0 270 

2023-07-03 11:29:30.615 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2531 

2023-07-03 11:29:30.615 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2171 

2023-07-03 11:29:30.616 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1990 row column role 57 0 271 

2023-07-03 11:29:30.616 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2532 

2023-07-03 11:29:30.616 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2172 

2023-07-03 11:29:30.616 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1991 row column role 57 0 272 

2023-07-03 11:29:30.616 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2533 

2023-07-03 11:29:30.616 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2173 

2023-07-03 11:29:30.616 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1992 row column role 57 0 273 

2023-07-03 11:29:30.616 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2534 

2023-07-03 11:29:30.616 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2174 

2023-07-03 11:29:30.616 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1993 row column role 57 0 274 

2023-07-03 11:29:30.616 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2535 

2023-07-03 11:29:30.617 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2175 

2023-07-03 11:29:30.617 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1994 row column role 57 0 275 

2023-07-03 11:29:30.655 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2536 

2023-07-03 11:29:30.655 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2176 

2023-07-03 11:29:30.655 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1995 row column role 58 0 257 

2023-07-03 11:29:30.655 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2537 

2023-07-03 11:29:30.655 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2177 

2023-07-03 11:29:30.655 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1996 row column role 58 0 258 

2023-07-03 11:29:30.656 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2538 

2023-07-03 11:29:30.656 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2178 

2023-07-03 11:29:30.656 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1997 row column role 58 0 259 

2023-07-03 11:29:30.656 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2539 

2023-07-03 11:29:30.656 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2179 

2023-07-03 11:29:30.656 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1998 row column role 58 0 260 

2023-07-03 11:29:30.656 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2540 

2023-07-03 11:29:30.656 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2180 

2023-07-03 11:29:30.656 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 1999 row column role 58 0 261 

2023-07-03 11:29:30.657 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2541 

2023-07-03 11:29:30.657 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2181 

2023-07-03 11:29:30.657 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2000 row column role 58 0 262 

2023-07-03 11:29:30.657 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2542 

2023-07-03 11:29:30.657 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2182 

2023-07-03 11:29:30.657 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2001 row column role 58 0 263 

2023-07-03 11:29:30.657 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2543 

2023-07-03 11:29:30.657 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2183 

2023-07-03 11:29:30.657 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2002 row column role 58 0 264 

2023-07-03 11:29:30.658 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2544 

2023-07-03 11:29:30.658 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2184 

2023-07-03 11:29:30.658 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2003 row column role 58 0 265 

2023-07-03 11:29:30.658 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2545 

2023-07-03 11:29:30.658 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2185 

2023-07-03 11:29:30.658 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2004 row column role 58 0 266 

2023-07-03 11:29:30.658 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2546 

2023-07-03 11:29:30.658 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2186 

2023-07-03 11:29:30.658 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2005 row column role 58 0 267 

2023-07-03 11:29:30.659 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2547 

2023-07-03 11:29:30.659 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2187 

2023-07-03 11:29:30.659 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2006 row column role 58 0 268 

2023-07-03 11:29:30.659 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2548 

2023-07-03 11:29:30.659 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2188 

2023-07-03 11:29:30.659 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2007 row column role 58 0 269 

2023-07-03 11:29:30.659 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2549 

2023-07-03 11:29:30.659 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2189 

2023-07-03 11:29:30.659 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2008 row column role 58 0 270 

2023-07-03 11:29:30.660 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2550 

2023-07-03 11:29:30.660 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2190 

2023-07-03 11:29:30.660 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2009 row column role 58 0 271 

2023-07-03 11:29:30.660 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2551 

2023-07-03 11:29:30.660 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2191 

2023-07-03 11:29:30.660 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2010 row column role 58 0 272 

2023-07-03 11:29:30.660 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2552 

2023-07-03 11:29:30.660 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2192 

2023-07-03 11:29:30.660 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2011 row column role 58 0 273 

2023-07-03 11:29:30.660 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2553 

2023-07-03 11:29:30.660 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2193 

2023-07-03 11:29:30.661 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2012 row column role 58 0 274 

2023-07-03 11:29:30.661 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2554 

2023-07-03 11:29:30.661 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2194 

2023-07-03 11:29:30.661 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2013 row column role 58 0 275 

2023-07-03 11:29:30.662 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2555 

2023-07-03 11:29:30.662 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2195 

2023-07-03 11:29:30.662 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2014 row column role 59 0 257 

2023-07-03 11:29:30.662 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2556 

2023-07-03 11:29:30.662 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2196 

2023-07-03 11:29:30.662 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2015 row column role 59 0 258 

2023-07-03 11:29:30.662 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2557 

2023-07-03 11:29:30.662 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2197 

2023-07-03 11:29:30.662 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2016 row column role 59 0 259 

2023-07-03 11:29:30.663 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2558 

2023-07-03 11:29:30.663 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2198 

2023-07-03 11:29:30.663 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2017 row column role 59 0 260 

2023-07-03 11:29:30.663 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2559 

2023-07-03 11:29:30.663 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2199 

2023-07-03 11:29:30.663 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2018 row column role 59 0 261 

2023-07-03 11:29:30.663 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2560 

2023-07-03 11:29:30.663 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2200 

2023-07-03 11:29:30.663 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2019 row column role 59 0 262 

2023-07-03 11:29:30.664 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2561 

2023-07-03 11:29:30.664 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2201 

2023-07-03 11:29:30.664 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2020 row column role 59 0 263 

2023-07-03 11:29:30.664 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2562 

2023-07-03 11:29:30.664 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2202 

2023-07-03 11:29:30.664 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2021 row column role 59 0 264 

2023-07-03 11:29:30.664 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2563 

2023-07-03 11:29:30.664 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2203 

2023-07-03 11:29:30.664 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2022 row column role 59 0 265 

2023-07-03 11:29:30.665 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2564 

2023-07-03 11:29:30.665 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2204 

2023-07-03 11:29:30.665 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2023 row column role 59 0 266 

2023-07-03 11:29:30.665 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2565 

2023-07-03 11:29:30.665 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2205 

2023-07-03 11:29:30.665 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2024 row column role 59 0 267 

2023-07-03 11:29:30.665 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2566 

2023-07-03 11:29:30.665 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2206 

2023-07-03 11:29:30.665 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2025 row column role 59 0 268 

2023-07-03 11:29:30.666 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2567 

2023-07-03 11:29:30.666 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2207 

2023-07-03 11:29:30.666 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2026 row column role 59 0 269 

2023-07-03 11:29:30.666 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2568 

2023-07-03 11:29:30.666 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2208 

2023-07-03 11:29:30.666 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2027 row column role 59 0 270 

2023-07-03 11:29:30.666 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2569 

2023-07-03 11:29:30.666 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2209 

2023-07-03 11:29:30.667 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2028 row column role 59 0 271 

2023-07-03 11:29:30.667 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2570 

2023-07-03 11:29:30.667 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2210 

2023-07-03 11:29:30.667 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2029 row column role 59 0 272 

2023-07-03 11:29:30.667 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2571 

2023-07-03 11:29:30.667 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2211 

2023-07-03 11:29:30.667 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2030 row column role 59 0 273 

2023-07-03 11:29:30.667 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2572 

2023-07-03 11:29:30.667 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2212 

2023-07-03 11:29:30.667 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2031 row column role 59 0 274 

2023-07-03 11:29:30.667 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2573 

2023-07-03 11:29:30.667 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2213 

2023-07-03 11:29:30.667 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2032 row column role 59 0 275 

2023-07-03 11:29:30.693 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2574 

2023-07-03 11:29:30.693 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2214 

2023-07-03 11:29:30.694 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2033 row column role 60 0 257 

2023-07-03 11:29:30.694 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2575 

2023-07-03 11:29:30.694 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2215 

2023-07-03 11:29:30.694 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2034 row column role 60 0 258 

2023-07-03 11:29:30.694 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2576 

2023-07-03 11:29:30.695 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2216 

2023-07-03 11:29:30.695 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2035 row column role 60 0 259 

2023-07-03 11:29:30.695 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2577 

2023-07-03 11:29:30.695 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2217 

2023-07-03 11:29:30.695 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2036 row column role 60 0 260 

2023-07-03 11:29:30.695 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2578 

2023-07-03 11:29:30.695 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2218 

2023-07-03 11:29:30.696 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2037 row column role 60 0 261 

2023-07-03 11:29:30.696 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2579 

2023-07-03 11:29:30.696 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2219 

2023-07-03 11:29:30.696 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2038 row column role 60 0 262 

2023-07-03 11:29:30.696 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2580 

2023-07-03 11:29:30.696 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2220 

2023-07-03 11:29:30.696 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2039 row column role 60 0 263 

2023-07-03 11:29:30.697 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2581 

2023-07-03 11:29:30.697 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2221 

2023-07-03 11:29:30.697 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2040 row column role 60 0 264 

2023-07-03 11:29:30.697 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2582 

2023-07-03 11:29:30.697 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2222 

2023-07-03 11:29:30.697 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2041 row column role 60 0 265 

2023-07-03 11:29:30.698 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2583 

2023-07-03 11:29:30.698 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2223 

2023-07-03 11:29:30.698 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2042 row column role 60 0 266 

2023-07-03 11:29:30.698 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2584 

2023-07-03 11:29:30.698 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2224 

2023-07-03 11:29:30.698 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2043 row column role 60 0 267 

2023-07-03 11:29:30.698 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2585 

2023-07-03 11:29:30.698 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2225 

2023-07-03 11:29:30.698 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2044 row column role 60 0 268 

2023-07-03 11:29:30.699 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2586 

2023-07-03 11:29:30.699 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2226 

2023-07-03 11:29:30.699 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2045 row column role 60 0 269 

2023-07-03 11:29:30.699 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2587 

2023-07-03 11:29:30.699 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2227 

2023-07-03 11:29:30.699 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2046 row column role 60 0 270 

2023-07-03 11:29:30.699 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2588 

2023-07-03 11:29:30.699 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2228 

2023-07-03 11:29:30.699 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2047 row column role 60 0 271 

2023-07-03 11:29:30.700 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2589 

2023-07-03 11:29:30.700 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2229 

2023-07-03 11:29:30.700 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2048 row column role 60 0 272 

2023-07-03 11:29:30.700 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2590 

2023-07-03 11:29:30.700 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2230 

2023-07-03 11:29:30.700 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2049 row column role 60 0 273 

2023-07-03 11:29:30.700 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2591 

2023-07-03 11:29:30.700 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2231 

2023-07-03 11:29:30.700 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2050 row column role 60 0 274 

2023-07-03 11:29:30.700 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2592 

2023-07-03 11:29:30.700 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2232 

2023-07-03 11:29:30.700 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2051 row column role 60 0 275 

2023-07-03 11:29:30.715 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2593 

2023-07-03 11:29:30.715 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2233 

2023-07-03 11:29:30.715 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2052 row column role 61 0 257 

2023-07-03 11:29:30.716 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2594 

2023-07-03 11:29:30.716 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2234 

2023-07-03 11:29:30.716 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2053 row column role 61 0 258 

2023-07-03 11:29:30.716 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2595 

2023-07-03 11:29:30.716 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2235 

2023-07-03 11:29:30.716 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2054 row column role 61 0 259 

2023-07-03 11:29:30.716 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2596 

2023-07-03 11:29:30.716 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2236 

2023-07-03 11:29:30.716 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2055 row column role 61 0 260 

2023-07-03 11:29:30.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2597 

2023-07-03 11:29:30.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2237 

2023-07-03 11:29:30.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2056 row column role 61 0 261 

2023-07-03 11:29:30.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2598 

2023-07-03 11:29:30.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2238 

2023-07-03 11:29:30.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2057 row column role 61 0 262 

2023-07-03 11:29:30.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2599 

2023-07-03 11:29:30.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2239 

2023-07-03 11:29:30.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2058 row column role 61 0 263 

2023-07-03 11:29:30.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2600 

2023-07-03 11:29:30.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2240 

2023-07-03 11:29:30.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2059 row column role 61 0 264 

2023-07-03 11:29:30.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2601 

2023-07-03 11:29:30.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2241 

2023-07-03 11:29:30.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2060 row column role 61 0 265 

2023-07-03 11:29:30.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2602 

2023-07-03 11:29:30.719 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2242 

2023-07-03 11:29:30.719 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2061 row column role 61 0 266 

2023-07-03 11:29:30.719 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2603 

2023-07-03 11:29:30.719 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2243 

2023-07-03 11:29:30.719 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2062 row column role 61 0 267 

2023-07-03 11:29:30.719 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2604 

2023-07-03 11:29:30.719 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2244 

2023-07-03 11:29:30.719 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2063 row column role 61 0 268 

2023-07-03 11:29:30.720 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2605 

2023-07-03 11:29:30.720 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2245 

2023-07-03 11:29:30.720 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2064 row column role 61 0 269 

2023-07-03 11:29:30.720 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2606 

2023-07-03 11:29:30.720 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2246 

2023-07-03 11:29:30.720 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2065 row column role 61 0 270 

2023-07-03 11:29:30.720 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2607 

2023-07-03 11:29:30.720 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2247 

2023-07-03 11:29:30.720 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2066 row column role 61 0 271 

2023-07-03 11:29:30.721 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2608 

2023-07-03 11:29:30.721 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2248 

2023-07-03 11:29:30.721 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2067 row column role 61 0 272 

2023-07-03 11:29:30.721 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2609 

2023-07-03 11:29:30.721 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2249 

2023-07-03 11:29:30.721 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2068 row column role 61 0 273 

2023-07-03 11:29:30.721 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2610 

2023-07-03 11:29:30.721 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2250 

2023-07-03 11:29:30.721 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2069 row column role 61 0 274 

2023-07-03 11:29:30.721 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2611 

2023-07-03 11:29:30.721 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2251 

2023-07-03 11:29:30.721 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2070 row column role 61 0 275 

2023-07-03 11:29:30.755 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2612 

2023-07-03 11:29:30.756 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2252 

2023-07-03 11:29:30.756 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2071 row column role 62 0 257 

2023-07-03 11:29:30.756 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2613 

2023-07-03 11:29:30.756 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2253 

2023-07-03 11:29:30.756 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2072 row column role 62 0 258 

2023-07-03 11:29:30.757 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2614 

2023-07-03 11:29:30.757 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2254 

2023-07-03 11:29:30.757 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2073 row column role 62 0 259 

2023-07-03 11:29:30.757 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2615 

2023-07-03 11:29:30.757 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2255 

2023-07-03 11:29:30.757 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2074 row column role 62 0 260 

2023-07-03 11:29:30.757 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2616 

2023-07-03 11:29:30.758 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2256 

2023-07-03 11:29:30.758 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2075 row column role 62 0 261 

2023-07-03 11:29:30.758 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2617 

2023-07-03 11:29:30.758 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2257 

2023-07-03 11:29:30.758 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2076 row column role 62 0 262 

2023-07-03 11:29:30.758 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2618 

2023-07-03 11:29:30.758 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2258 

2023-07-03 11:29:30.758 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2077 row column role 62 0 263 

2023-07-03 11:29:30.759 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2619 

2023-07-03 11:29:30.759 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2259 

2023-07-03 11:29:30.759 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2078 row column role 62 0 264 

2023-07-03 11:29:30.759 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2620 

2023-07-03 11:29:30.759 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2260 

2023-07-03 11:29:30.759 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2079 row column role 62 0 265 

2023-07-03 11:29:30.759 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2621 

2023-07-03 11:29:30.759 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2261 

2023-07-03 11:29:30.759 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2080 row column role 62 0 266 

2023-07-03 11:29:30.760 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2622 

2023-07-03 11:29:30.760 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2262 

2023-07-03 11:29:30.760 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2081 row column role 62 0 267 

2023-07-03 11:29:30.760 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2623 

2023-07-03 11:29:30.760 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2263 

2023-07-03 11:29:30.760 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2082 row column role 62 0 268 

2023-07-03 11:29:30.760 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2624 

2023-07-03 11:29:30.760 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2264 

2023-07-03 11:29:30.760 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2083 row column role 62 0 269 

2023-07-03 11:29:30.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2625 

2023-07-03 11:29:30.761 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2265 

2023-07-03 11:29:30.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2084 row column role 62 0 270 

2023-07-03 11:29:30.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2626 

2023-07-03 11:29:30.761 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2266 

2023-07-03 11:29:30.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2085 row column role 62 0 271 

2023-07-03 11:29:30.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2627 

2023-07-03 11:29:30.761 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2267 

2023-07-03 11:29:30.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2086 row column role 62 0 272 

2023-07-03 11:29:30.762 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2628 

2023-07-03 11:29:30.762 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2268 

2023-07-03 11:29:30.762 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2087 row column role 62 0 273 

2023-07-03 11:29:30.762 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2629 

2023-07-03 11:29:30.762 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2269 

2023-07-03 11:29:30.762 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2088 row column role 62 0 274 

2023-07-03 11:29:30.762 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2630 

2023-07-03 11:29:30.762 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2270 

2023-07-03 11:29:30.762 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2089 row column role 62 0 275 

2023-07-03 11:29:30.817 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2631 

2023-07-03 11:29:30.817 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2271 

2023-07-03 11:29:30.817 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2090 row column role 63 0 257 

2023-07-03 11:29:30.818 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2632 

2023-07-03 11:29:30.818 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2272 

2023-07-03 11:29:30.818 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2091 row column role 63 0 258 

2023-07-03 11:29:30.818 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2633 

2023-07-03 11:29:30.818 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2273 

2023-07-03 11:29:30.818 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2092 row column role 63 0 259 

2023-07-03 11:29:30.818 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2634 

2023-07-03 11:29:30.818 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2274 

2023-07-03 11:29:30.818 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2093 row column role 63 0 260 

2023-07-03 11:29:30.819 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2635 

2023-07-03 11:29:30.819 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2275 

2023-07-03 11:29:30.819 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2094 row column role 63 0 261 

2023-07-03 11:29:30.819 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2636 

2023-07-03 11:29:30.819 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2276 

2023-07-03 11:29:30.819 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2095 row column role 63 0 262 

2023-07-03 11:29:30.819 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2637 

2023-07-03 11:29:30.819 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2277 

2023-07-03 11:29:30.819 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2096 row column role 63 0 263 

2023-07-03 11:29:30.819 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2638 

2023-07-03 11:29:30.819 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2278 

2023-07-03 11:29:30.819 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2097 row column role 63 0 264 

2023-07-03 11:29:30.820 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2639 

2023-07-03 11:29:30.820 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2279 

2023-07-03 11:29:30.820 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2098 row column role 63 0 265 

2023-07-03 11:29:30.820 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2640 

2023-07-03 11:29:30.820 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2280 

2023-07-03 11:29:30.820 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2099 row column role 63 0 266 

2023-07-03 11:29:30.820 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2641 

2023-07-03 11:29:30.820 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2281 

2023-07-03 11:29:30.820 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2100 row column role 63 0 267 

2023-07-03 11:29:30.821 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2642 

2023-07-03 11:29:30.821 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2282 

2023-07-03 11:29:30.821 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2101 row column role 63 0 268 

2023-07-03 11:29:30.821 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2643 

2023-07-03 11:29:30.821 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2283 

2023-07-03 11:29:30.821 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2102 row column role 63 0 269 

2023-07-03 11:29:30.821 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2644 

2023-07-03 11:29:30.821 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2284 

2023-07-03 11:29:30.821 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2103 row column role 63 0 270 

2023-07-03 11:29:30.822 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2645 

2023-07-03 11:29:30.822 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2285 

2023-07-03 11:29:30.822 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2104 row column role 63 0 271 

2023-07-03 11:29:30.822 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2646 

2023-07-03 11:29:30.822 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2286 

2023-07-03 11:29:30.822 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2105 row column role 63 0 272 

2023-07-03 11:29:30.822 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2647 

2023-07-03 11:29:30.822 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2287 

2023-07-03 11:29:30.822 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2106 row column role 63 0 273 

2023-07-03 11:29:30.822 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2648 

2023-07-03 11:29:30.823 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2288 

2023-07-03 11:29:30.823 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2107 row column role 63 0 274 

2023-07-03 11:29:30.823 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2649 

2023-07-03 11:29:30.823 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2289 

2023-07-03 11:29:30.823 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2108 row column role 63 0 275 

2023-07-03 11:29:30.881 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2650 

2023-07-03 11:29:30.881 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2290 

2023-07-03 11:29:30.881 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2109 row column role 64 0 257 

2023-07-03 11:29:30.882 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2651 

2023-07-03 11:29:30.882 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2291 

2023-07-03 11:29:30.882 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2110 row column role 64 0 258 

2023-07-03 11:29:30.882 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2652 

2023-07-03 11:29:30.882 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2292 

2023-07-03 11:29:30.882 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2111 row column role 64 0 259 

2023-07-03 11:29:30.882 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2653 

2023-07-03 11:29:30.882 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2293 

2023-07-03 11:29:30.882 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2112 row column role 64 0 260 

2023-07-03 11:29:30.883 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2654 

2023-07-03 11:29:30.883 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2294 

2023-07-03 11:29:30.883 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2113 row column role 64 0 261 

2023-07-03 11:29:30.883 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2655 

2023-07-03 11:29:30.883 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2295 

2023-07-03 11:29:30.883 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2114 row column role 64 0 262 

2023-07-03 11:29:30.883 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2656 

2023-07-03 11:29:30.883 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2296 

2023-07-03 11:29:30.883 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2115 row column role 64 0 263 

2023-07-03 11:29:30.884 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2657 

2023-07-03 11:29:30.884 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2297 

2023-07-03 11:29:30.884 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2116 row column role 64 0 264 

2023-07-03 11:29:30.884 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2658 

2023-07-03 11:29:30.884 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2298 

2023-07-03 11:29:30.884 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2117 row column role 64 0 265 

2023-07-03 11:29:30.884 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2659 

2023-07-03 11:29:30.884 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2299 

2023-07-03 11:29:30.884 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2118 row column role 64 0 266 

2023-07-03 11:29:30.885 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2660 

2023-07-03 11:29:30.885 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2300 

2023-07-03 11:29:30.885 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2119 row column role 64 0 267 

2023-07-03 11:29:30.885 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2661 

2023-07-03 11:29:30.885 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2301 

2023-07-03 11:29:30.885 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2120 row column role 64 0 268 

2023-07-03 11:29:30.885 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2662 

2023-07-03 11:29:30.885 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2302 

2023-07-03 11:29:30.885 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2121 row column role 64 0 269 

2023-07-03 11:29:30.886 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2663 

2023-07-03 11:29:30.886 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2303 

2023-07-03 11:29:30.886 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2122 row column role 64 0 270 

2023-07-03 11:29:30.886 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2664 

2023-07-03 11:29:30.886 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2304 

2023-07-03 11:29:30.886 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2123 row column role 64 0 271 

2023-07-03 11:29:30.886 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2665 

2023-07-03 11:29:30.886 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2305 

2023-07-03 11:29:30.886 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2124 row column role 64 0 272 

2023-07-03 11:29:30.886 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2666 

2023-07-03 11:29:30.886 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2306 

2023-07-03 11:29:30.886 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2125 row column role 64 0 273 

2023-07-03 11:29:30.887 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2667 

2023-07-03 11:29:30.887 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2307 

2023-07-03 11:29:30.887 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2126 row column role 64 0 274 

2023-07-03 11:29:30.887 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2668 

2023-07-03 11:29:30.887 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2308 

2023-07-03 11:29:30.887 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2127 row column role 64 0 275 

2023-07-03 11:29:30.888 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2669 

2023-07-03 11:29:30.888 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2309 

2023-07-03 11:29:30.888 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2128 row column role 65 0 257 

2023-07-03 11:29:30.888 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2670 

2023-07-03 11:29:30.888 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2310 

2023-07-03 11:29:30.888 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2129 row column role 65 0 258 

2023-07-03 11:29:30.889 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2671 

2023-07-03 11:29:30.889 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2311 

2023-07-03 11:29:30.889 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2130 row column role 65 0 259 

2023-07-03 11:29:30.889 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2672 

2023-07-03 11:29:30.889 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2312 

2023-07-03 11:29:30.889 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2131 row column role 65 0 260 

2023-07-03 11:29:30.889 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2673 

2023-07-03 11:29:30.889 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2313 

2023-07-03 11:29:30.889 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2132 row column role 65 0 261 

2023-07-03 11:29:30.890 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2674 

2023-07-03 11:29:30.890 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2314 

2023-07-03 11:29:30.890 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2133 row column role 65 0 262 

2023-07-03 11:29:30.890 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2675 

2023-07-03 11:29:30.890 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2315 

2023-07-03 11:29:30.890 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2134 row column role 65 0 263 

2023-07-03 11:29:30.890 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2676 

2023-07-03 11:29:30.890 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2316 

2023-07-03 11:29:30.890 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2135 row column role 65 0 264 

2023-07-03 11:29:30.891 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2677 

2023-07-03 11:29:30.891 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2317 

2023-07-03 11:29:30.891 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2136 row column role 65 0 265 

2023-07-03 11:29:30.891 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2678 

2023-07-03 11:29:30.891 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2318 

2023-07-03 11:29:30.891 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2137 row column role 65 0 266 

2023-07-03 11:29:30.891 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2679 

2023-07-03 11:29:30.891 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2319 

2023-07-03 11:29:30.891 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2138 row column role 65 0 267 

2023-07-03 11:29:30.891 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2680 

2023-07-03 11:29:30.891 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2320 

2023-07-03 11:29:30.891 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2139 row column role 65 0 268 

2023-07-03 11:29:30.891 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2681 

2023-07-03 11:29:30.891 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2321 

2023-07-03 11:29:30.891 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2140 row column role 65 0 269 

2023-07-03 11:29:30.892 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2682 

2023-07-03 11:29:30.892 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2322 

2023-07-03 11:29:30.892 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2141 row column role 65 0 270 

2023-07-03 11:29:30.892 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2683 

2023-07-03 11:29:30.892 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2323 

2023-07-03 11:29:30.892 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2142 row column role 65 0 271 

2023-07-03 11:29:30.892 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2684 

2023-07-03 11:29:30.892 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2324 

2023-07-03 11:29:30.892 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2143 row column role 65 0 272 

2023-07-03 11:29:30.893 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2685 

2023-07-03 11:29:30.893 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2325 

2023-07-03 11:29:30.893 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2144 row column role 65 0 273 

2023-07-03 11:29:30.893 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2686 

2023-07-03 11:29:30.893 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2326 

2023-07-03 11:29:30.893 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2145 row column role 65 0 274 

2023-07-03 11:29:30.893 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2687 

2023-07-03 11:29:30.893 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2327 

2023-07-03 11:29:30.893 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2146 row column role 65 0 275 

2023-07-03 11:29:30.923 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2688 

2023-07-03 11:29:30.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2328 

2023-07-03 11:29:30.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2147 row column role 66 0 257 

2023-07-03 11:29:30.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2689 

2023-07-03 11:29:30.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2329 

2023-07-03 11:29:30.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2148 row column role 66 0 258 

2023-07-03 11:29:30.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2690 

2023-07-03 11:29:30.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2330 

2023-07-03 11:29:30.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2149 row column role 66 0 259 

2023-07-03 11:29:30.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2691 

2023-07-03 11:29:30.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2331 

2023-07-03 11:29:30.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2150 row column role 66 0 260 

2023-07-03 11:29:30.925 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2692 

2023-07-03 11:29:30.925 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2332 

2023-07-03 11:29:30.925 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2151 row column role 66 0 261 

2023-07-03 11:29:30.925 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2693 

2023-07-03 11:29:30.925 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2333 

2023-07-03 11:29:30.925 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2152 row column role 66 0 262 

2023-07-03 11:29:30.925 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2694 

2023-07-03 11:29:30.925 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2334 

2023-07-03 11:29:30.925 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2153 row column role 66 0 263 

2023-07-03 11:29:30.925 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2695 

2023-07-03 11:29:30.925 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2335 

2023-07-03 11:29:30.925 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2154 row column role 66 0 264 

2023-07-03 11:29:30.926 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2696 

2023-07-03 11:29:30.926 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2336 

2023-07-03 11:29:30.926 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2155 row column role 66 0 265 

2023-07-03 11:29:30.926 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2697 

2023-07-03 11:29:30.926 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2337 

2023-07-03 11:29:30.926 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2156 row column role 66 0 266 

2023-07-03 11:29:30.926 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2698 

2023-07-03 11:29:30.926 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2338 

2023-07-03 11:29:30.926 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2157 row column role 66 0 267 

2023-07-03 11:29:30.926 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2699 

2023-07-03 11:29:30.926 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2339 

2023-07-03 11:29:30.926 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2158 row column role 66 0 268 

2023-07-03 11:29:30.926 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2700 

2023-07-03 11:29:30.927 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2340 

2023-07-03 11:29:30.927 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2159 row column role 66 0 269 

2023-07-03 11:29:30.927 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2701 

2023-07-03 11:29:30.927 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2341 

2023-07-03 11:29:30.927 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2160 row column role 66 0 270 

2023-07-03 11:29:30.927 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2702 

2023-07-03 11:29:30.927 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2342 

2023-07-03 11:29:30.927 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2161 row column role 66 0 271 

2023-07-03 11:29:30.927 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2703 

2023-07-03 11:29:30.927 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2343 

2023-07-03 11:29:30.927 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2162 row column role 66 0 272 

2023-07-03 11:29:30.927 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2704 

2023-07-03 11:29:30.927 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2344 

2023-07-03 11:29:30.927 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2163 row column role 66 0 273 

2023-07-03 11:29:30.928 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2705 

2023-07-03 11:29:30.928 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2345 

2023-07-03 11:29:30.928 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2164 row column role 66 0 274 

2023-07-03 11:29:30.928 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2706 

2023-07-03 11:29:30.928 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2346 

2023-07-03 11:29:30.928 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2165 row column role 66 0 275 

2023-07-03 11:29:30.963 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2707 

2023-07-03 11:29:30.963 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2347 

2023-07-03 11:29:30.963 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2166 row column role 67 0 257 

2023-07-03 11:29:30.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2708 

2023-07-03 11:29:30.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2348 

2023-07-03 11:29:30.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2167 row column role 67 0 258 

2023-07-03 11:29:30.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2709 

2023-07-03 11:29:30.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2349 

2023-07-03 11:29:30.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2168 row column role 67 0 259 

2023-07-03 11:29:30.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2710 

2023-07-03 11:29:30.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2350 

2023-07-03 11:29:30.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2169 row column role 67 0 260 

2023-07-03 11:29:30.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2711 

2023-07-03 11:29:30.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2351 

2023-07-03 11:29:30.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2170 row column role 67 0 261 

2023-07-03 11:29:30.965 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2712 

2023-07-03 11:29:30.965 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2352 

2023-07-03 11:29:30.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2171 row column role 67 0 262 

2023-07-03 11:29:30.965 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2713 

2023-07-03 11:29:30.965 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2353 

2023-07-03 11:29:30.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2172 row column role 67 0 263 

2023-07-03 11:29:30.965 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2714 

2023-07-03 11:29:30.965 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2354 

2023-07-03 11:29:30.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2173 row column role 67 0 264 

2023-07-03 11:29:30.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2715 

2023-07-03 11:29:30.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2355 

2023-07-03 11:29:30.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2174 row column role 67 0 265 

2023-07-03 11:29:30.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2716 

2023-07-03 11:29:30.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2356 

2023-07-03 11:29:30.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2175 row column role 67 0 266 

2023-07-03 11:29:30.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2717 

2023-07-03 11:29:30.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2357 

2023-07-03 11:29:30.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2176 row column role 67 0 267 

2023-07-03 11:29:30.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2718 

2023-07-03 11:29:30.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2358 

2023-07-03 11:29:30.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2177 row column role 67 0 268 

2023-07-03 11:29:30.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2719 

2023-07-03 11:29:30.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2359 

2023-07-03 11:29:30.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2178 row column role 67 0 269 

2023-07-03 11:29:30.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2720 

2023-07-03 11:29:30.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2360 

2023-07-03 11:29:30.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2179 row column role 67 0 270 

2023-07-03 11:29:30.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2721 

2023-07-03 11:29:30.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2361 

2023-07-03 11:29:30.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2180 row column role 67 0 271 

2023-07-03 11:29:30.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2722 

2023-07-03 11:29:30.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2362 

2023-07-03 11:29:30.968 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2181 row column role 67 0 272 

2023-07-03 11:29:30.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2723 

2023-07-03 11:29:30.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2363 

2023-07-03 11:29:30.968 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2182 row column role 67 0 273 

2023-07-03 11:29:30.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2724 

2023-07-03 11:29:30.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2364 

2023-07-03 11:29:30.968 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2183 row column role 67 0 274 

2023-07-03 11:29:30.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2725 

2023-07-03 11:29:30.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2365 

2023-07-03 11:29:30.968 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2184 row column role 67 0 275 

2023-07-03 11:29:31.006 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2726 

2023-07-03 11:29:31.006 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2366 

2023-07-03 11:29:31.007 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2185 row column role 68 0 257 

2023-07-03 11:29:31.007 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2727 

2023-07-03 11:29:31.007 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2367 

2023-07-03 11:29:31.007 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2186 row column role 68 0 258 

2023-07-03 11:29:31.007 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2728 

2023-07-03 11:29:31.007 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2368 

2023-07-03 11:29:31.008 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2187 row column role 68 0 259 

2023-07-03 11:29:31.008 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2729 

2023-07-03 11:29:31.008 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2369 

2023-07-03 11:29:31.008 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2188 row column role 68 0 260 

2023-07-03 11:29:31.008 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2730 

2023-07-03 11:29:31.008 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2370 

2023-07-03 11:29:31.009 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2189 row column role 68 0 261 

2023-07-03 11:29:31.009 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2731 

2023-07-03 11:29:31.009 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2371 

2023-07-03 11:29:31.009 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2190 row column role 68 0 262 

2023-07-03 11:29:31.010 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2732 

2023-07-03 11:29:31.010 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2372 

2023-07-03 11:29:31.010 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2191 row column role 68 0 263 

2023-07-03 11:29:31.010 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2733 

2023-07-03 11:29:31.010 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2373 

2023-07-03 11:29:31.010 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2192 row column role 68 0 264 

2023-07-03 11:29:31.010 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2734 

2023-07-03 11:29:31.010 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2374 

2023-07-03 11:29:31.010 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2193 row column role 68 0 265 

2023-07-03 11:29:31.011 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2735 

2023-07-03 11:29:31.011 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2375 

2023-07-03 11:29:31.011 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2194 row column role 68 0 266 

2023-07-03 11:29:31.011 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2736 

2023-07-03 11:29:31.011 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2376 

2023-07-03 11:29:31.011 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2195 row column role 68 0 267 

2023-07-03 11:29:31.011 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2737 

2023-07-03 11:29:31.011 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2377 

2023-07-03 11:29:31.012 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2196 row column role 68 0 268 

2023-07-03 11:29:31.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2738 

2023-07-03 11:29:31.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2378 

2023-07-03 11:29:31.012 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2197 row column role 68 0 269 

2023-07-03 11:29:31.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2739 

2023-07-03 11:29:31.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2379 

2023-07-03 11:29:31.012 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2198 row column role 68 0 270 

2023-07-03 11:29:31.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2740 

2023-07-03 11:29:31.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2380 

2023-07-03 11:29:31.013 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2199 row column role 68 0 271 

2023-07-03 11:29:31.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2741 

2023-07-03 11:29:31.013 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2381 

2023-07-03 11:29:31.013 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2200 row column role 68 0 272 

2023-07-03 11:29:31.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2742 

2023-07-03 11:29:31.013 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2382 

2023-07-03 11:29:31.013 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2201 row column role 68 0 273 

2023-07-03 11:29:31.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2743 

2023-07-03 11:29:31.013 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2383 

2023-07-03 11:29:31.013 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2202 row column role 68 0 274 

2023-07-03 11:29:31.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2744 

2023-07-03 11:29:31.013 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2384 

2023-07-03 11:29:31.014 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2203 row column role 68 0 275 

2023-07-03 11:29:31.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2745 

2023-07-03 11:29:31.014 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2385 

2023-07-03 11:29:31.014 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2204 row column role 69 0 257 

2023-07-03 11:29:31.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2746 

2023-07-03 11:29:31.015 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2386 

2023-07-03 11:29:31.015 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2205 row column role 69 0 258 

2023-07-03 11:29:31.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2747 

2023-07-03 11:29:31.015 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2387 

2023-07-03 11:29:31.015 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2206 row column role 69 0 259 

2023-07-03 11:29:31.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2748 

2023-07-03 11:29:31.015 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2388 

2023-07-03 11:29:31.015 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2207 row column role 69 0 260 

2023-07-03 11:29:31.016 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2749 

2023-07-03 11:29:31.016 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2389 

2023-07-03 11:29:31.016 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2208 row column role 69 0 261 

2023-07-03 11:29:31.016 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2750 

2023-07-03 11:29:31.016 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2390 

2023-07-03 11:29:31.016 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2209 row column role 69 0 262 

2023-07-03 11:29:31.016 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2751 

2023-07-03 11:29:31.016 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2391 

2023-07-03 11:29:31.017 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2210 row column role 69 0 263 

2023-07-03 11:29:31.017 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2752 

2023-07-03 11:29:31.017 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2392 

2023-07-03 11:29:31.017 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2211 row column role 69 0 264 

2023-07-03 11:29:31.017 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2753 

2023-07-03 11:29:31.017 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2393 

2023-07-03 11:29:31.017 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2212 row column role 69 0 265 

2023-07-03 11:29:31.017 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2754 

2023-07-03 11:29:31.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2394 

2023-07-03 11:29:31.018 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2213 row column role 69 0 266 

2023-07-03 11:29:31.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2755 

2023-07-03 11:29:31.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2395 

2023-07-03 11:29:31.018 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2214 row column role 69 0 267 

2023-07-03 11:29:31.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2756 

2023-07-03 11:29:31.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2396 

2023-07-03 11:29:31.018 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2215 row column role 69 0 268 

2023-07-03 11:29:31.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2757 

2023-07-03 11:29:31.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2397 

2023-07-03 11:29:31.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2216 row column role 69 0 269 

2023-07-03 11:29:31.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2758 

2023-07-03 11:29:31.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2398 

2023-07-03 11:29:31.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2217 row column role 69 0 270 

2023-07-03 11:29:31.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2759 

2023-07-03 11:29:31.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2399 

2023-07-03 11:29:31.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2218 row column role 69 0 271 

2023-07-03 11:29:31.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2760 

2023-07-03 11:29:31.020 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2400 

2023-07-03 11:29:31.020 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2219 row column role 69 0 272 

2023-07-03 11:29:31.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2761 

2023-07-03 11:29:31.020 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2401 

2023-07-03 11:29:31.020 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2220 row column role 69 0 273 

2023-07-03 11:29:31.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2762 

2023-07-03 11:29:31.020 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2402 

2023-07-03 11:29:31.020 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2221 row column role 69 0 274 

2023-07-03 11:29:31.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2763 

2023-07-03 11:29:31.020 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2403 

2023-07-03 11:29:31.020 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2222 row column role 69 0 275 

2023-07-03 11:29:31.067 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2764 

2023-07-03 11:29:31.067 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2404 

2023-07-03 11:29:31.067 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2223 row column role 70 0 257 

2023-07-03 11:29:31.068 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2765 

2023-07-03 11:29:31.068 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2405 

2023-07-03 11:29:31.068 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2224 row column role 70 0 258 

2023-07-03 11:29:31.068 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2766 

2023-07-03 11:29:31.068 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2406 

2023-07-03 11:29:31.068 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2225 row column role 70 0 259 

2023-07-03 11:29:31.068 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2767 

2023-07-03 11:29:31.068 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2407 

2023-07-03 11:29:31.068 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2226 row column role 70 0 260 

2023-07-03 11:29:31.069 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2768 

2023-07-03 11:29:31.069 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2408 

2023-07-03 11:29:31.069 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2227 row column role 70 0 261 

2023-07-03 11:29:31.069 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2769 

2023-07-03 11:29:31.069 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2409 

2023-07-03 11:29:31.069 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2228 row column role 70 0 262 

2023-07-03 11:29:31.069 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2770 

2023-07-03 11:29:31.069 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2410 

2023-07-03 11:29:31.069 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2229 row column role 70 0 263 

2023-07-03 11:29:31.070 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2771 

2023-07-03 11:29:31.070 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2411 

2023-07-03 11:29:31.070 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2230 row column role 70 0 264 

2023-07-03 11:29:31.070 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2772 

2023-07-03 11:29:31.070 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2412 

2023-07-03 11:29:31.070 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2231 row column role 70 0 265 

2023-07-03 11:29:31.070 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2773 

2023-07-03 11:29:31.070 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2413 

2023-07-03 11:29:31.070 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2232 row column role 70 0 266 

2023-07-03 11:29:31.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2774 

2023-07-03 11:29:31.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2414 

2023-07-03 11:29:31.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2233 row column role 70 0 267 

2023-07-03 11:29:31.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2775 

2023-07-03 11:29:31.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2415 

2023-07-03 11:29:31.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2234 row column role 70 0 268 

2023-07-03 11:29:31.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2776 

2023-07-03 11:29:31.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2416 

2023-07-03 11:29:31.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2235 row column role 70 0 269 

2023-07-03 11:29:31.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2777 

2023-07-03 11:29:31.072 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2417 

2023-07-03 11:29:31.072 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2236 row column role 70 0 270 

2023-07-03 11:29:31.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2778 

2023-07-03 11:29:31.072 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2418 

2023-07-03 11:29:31.072 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2237 row column role 70 0 271 

2023-07-03 11:29:31.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2779 

2023-07-03 11:29:31.072 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2419 

2023-07-03 11:29:31.072 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2238 row column role 70 0 272 

2023-07-03 11:29:31.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2780 

2023-07-03 11:29:31.073 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2420 

2023-07-03 11:29:31.073 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2239 row column role 70 0 273 

2023-07-03 11:29:31.073 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2781 

2023-07-03 11:29:31.073 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2421 

2023-07-03 11:29:31.073 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2240 row column role 70 0 274 

2023-07-03 11:29:31.073 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2782 

2023-07-03 11:29:31.073 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2422 

2023-07-03 11:29:31.073 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2241 row column role 70 0 275 

2023-07-03 11:29:31.133 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2783 

2023-07-03 11:29:31.133 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2423 

2023-07-03 11:29:31.133 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2242 row column role 71 0 257 

2023-07-03 11:29:31.133 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2784 

2023-07-03 11:29:31.133 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2424 

2023-07-03 11:29:31.133 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2243 row column role 71 0 258 

2023-07-03 11:29:31.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2785 

2023-07-03 11:29:31.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2425 

2023-07-03 11:29:31.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2244 row column role 71 0 259 

2023-07-03 11:29:31.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2786 

2023-07-03 11:29:31.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2426 

2023-07-03 11:29:31.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2245 row column role 71 0 260 

2023-07-03 11:29:31.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2787 

2023-07-03 11:29:31.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2427 

2023-07-03 11:29:31.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2246 row column role 71 0 261 

2023-07-03 11:29:31.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2788 

2023-07-03 11:29:31.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2428 

2023-07-03 11:29:31.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2247 row column role 71 0 262 

2023-07-03 11:29:31.136 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2789 

2023-07-03 11:29:31.136 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2429 

2023-07-03 11:29:31.136 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2248 row column role 71 0 263 

2023-07-03 11:29:31.136 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2790 

2023-07-03 11:29:31.136 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2430 

2023-07-03 11:29:31.136 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2249 row column role 71 0 264 

2023-07-03 11:29:31.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2791 

2023-07-03 11:29:31.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2431 

2023-07-03 11:29:31.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2250 row column role 71 0 265 

2023-07-03 11:29:31.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2792 

2023-07-03 11:29:31.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2432 

2023-07-03 11:29:31.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2251 row column role 71 0 266 

2023-07-03 11:29:31.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2793 

2023-07-03 11:29:31.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2433 

2023-07-03 11:29:31.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2252 row column role 71 0 267 

2023-07-03 11:29:31.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2794 

2023-07-03 11:29:31.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2434 

2023-07-03 11:29:31.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2253 row column role 71 0 268 

2023-07-03 11:29:31.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2795 

2023-07-03 11:29:31.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2435 

2023-07-03 11:29:31.139 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2254 row column role 71 0 269 

2023-07-03 11:29:31.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2796 

2023-07-03 11:29:31.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2436 

2023-07-03 11:29:31.139 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2255 row column role 71 0 270 

2023-07-03 11:29:31.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2797 

2023-07-03 11:29:31.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2437 

2023-07-03 11:29:31.140 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2256 row column role 71 0 271 

2023-07-03 11:29:31.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2798 

2023-07-03 11:29:31.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2438 

2023-07-03 11:29:31.140 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2257 row column role 71 0 272 

2023-07-03 11:29:31.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2799 

2023-07-03 11:29:31.141 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2439 

2023-07-03 11:29:31.141 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2258 row column role 71 0 273 

2023-07-03 11:29:31.141 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2800 

2023-07-03 11:29:31.141 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2440 

2023-07-03 11:29:31.141 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2259 row column role 71 0 274 

2023-07-03 11:29:31.141 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2801 

2023-07-03 11:29:31.141 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2441 

2023-07-03 11:29:31.142 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2260 row column role 71 0 275 

2023-07-03 11:29:32.621 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2802 

2023-07-03 11:29:32.622 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2442 

2023-07-03 11:29:32.622 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2261 row column role 72 0 257 

2023-07-03 11:29:32.622 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2803 

2023-07-03 11:29:32.622 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2443 

2023-07-03 11:29:32.622 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2262 row column role 72 0 258 

2023-07-03 11:29:32.623 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2804 

2023-07-03 11:29:32.623 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2444 

2023-07-03 11:29:32.623 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2263 row column role 72 0 259 

2023-07-03 11:29:32.623 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2805 

2023-07-03 11:29:32.623 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2445 

2023-07-03 11:29:32.623 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2264 row column role 72 0 260 

2023-07-03 11:29:32.624 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2806 

2023-07-03 11:29:32.624 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2446 

2023-07-03 11:29:32.624 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2265 row column role 72 0 261 

2023-07-03 11:29:32.625 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2807 

2023-07-03 11:29:32.625 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2447 

2023-07-03 11:29:32.625 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2266 row column role 72 0 262 

2023-07-03 11:29:32.625 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2808 

2023-07-03 11:29:32.625 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2448 

2023-07-03 11:29:32.625 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2267 row column role 72 0 263 

2023-07-03 11:29:32.626 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2809 

2023-07-03 11:29:32.626 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2449 

2023-07-03 11:29:32.626 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2268 row column role 72 0 264 

2023-07-03 11:29:32.626 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2810 

2023-07-03 11:29:32.626 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2450 

2023-07-03 11:29:32.627 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2269 row column role 72 0 265 

2023-07-03 11:29:32.627 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2811 

2023-07-03 11:29:32.627 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2451 

2023-07-03 11:29:32.627 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2270 row column role 72 0 266 

2023-07-03 11:29:32.628 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2812 

2023-07-03 11:29:32.628 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2452 

2023-07-03 11:29:32.628 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2271 row column role 72 0 267 

2023-07-03 11:29:32.628 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2813 

2023-07-03 11:29:32.628 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2453 

2023-07-03 11:29:32.628 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2272 row column role 72 0 268 

2023-07-03 11:29:32.629 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2814 

2023-07-03 11:29:32.629 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2454 

2023-07-03 11:29:32.629 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2273 row column role 72 0 269 

2023-07-03 11:29:32.629 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2815 

2023-07-03 11:29:32.629 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2455 

2023-07-03 11:29:32.629 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2274 row column role 72 0 270 

2023-07-03 11:29:32.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2816 

2023-07-03 11:29:32.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2456 

2023-07-03 11:29:32.630 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2275 row column role 72 0 271 

2023-07-03 11:29:32.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2817 

2023-07-03 11:29:32.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2457 

2023-07-03 11:29:32.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2276 row column role 72 0 272 

2023-07-03 11:29:32.631 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2818 

2023-07-03 11:29:32.631 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2458 

2023-07-03 11:29:32.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2277 row column role 72 0 273 

2023-07-03 11:29:32.631 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2819 

2023-07-03 11:29:32.631 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2459 

2023-07-03 11:29:32.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2278 row column role 72 0 274 

2023-07-03 11:29:32.632 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2820 

2023-07-03 11:29:32.632 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2460 

2023-07-03 11:29:32.632 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2279 row column role 72 0 275 

2023-07-03 11:29:32.642 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2821 

2023-07-03 11:29:32.642 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2461 

2023-07-03 11:29:32.642 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2280 row column role 73 0 257 

2023-07-03 11:29:32.642 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2822 

2023-07-03 11:29:32.642 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2462 

2023-07-03 11:29:32.642 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2281 row column role 73 0 258 

2023-07-03 11:29:32.643 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2823 

2023-07-03 11:29:32.643 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2463 

2023-07-03 11:29:32.643 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2282 row column role 73 0 259 

2023-07-03 11:29:32.643 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2824 

2023-07-03 11:29:32.644 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2464 

2023-07-03 11:29:32.644 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2283 row column role 73 0 260 

2023-07-03 11:29:32.644 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2825 

2023-07-03 11:29:32.644 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2465 

2023-07-03 11:29:32.644 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2284 row column role 73 0 261 

2023-07-03 11:29:32.645 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2826 

2023-07-03 11:29:32.645 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2466 

2023-07-03 11:29:32.645 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2285 row column role 73 0 262 

2023-07-03 11:29:32.646 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2827 

2023-07-03 11:29:32.646 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2467 

2023-07-03 11:29:32.646 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2286 row column role 73 0 263 

2023-07-03 11:29:32.647 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2828 

2023-07-03 11:29:32.647 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2468 

2023-07-03 11:29:32.647 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2287 row column role 73 0 264 

2023-07-03 11:29:32.647 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2829 

2023-07-03 11:29:32.647 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2469 

2023-07-03 11:29:32.648 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2288 row column role 73 0 265 

2023-07-03 11:29:32.648 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2830 

2023-07-03 11:29:32.648 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2470 

2023-07-03 11:29:32.648 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2289 row column role 73 0 266 

2023-07-03 11:29:32.648 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2831 

2023-07-03 11:29:32.648 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2471 

2023-07-03 11:29:32.649 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2290 row column role 73 0 267 

2023-07-03 11:29:32.649 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2832 

2023-07-03 11:29:32.649 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2472 

2023-07-03 11:29:32.649 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2291 row column role 73 0 268 

2023-07-03 11:29:32.649 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2833 

2023-07-03 11:29:32.649 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2473 

2023-07-03 11:29:32.649 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2292 row column role 73 0 269 

2023-07-03 11:29:32.649 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2834 

2023-07-03 11:29:32.649 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2474 

2023-07-03 11:29:32.650 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2293 row column role 73 0 270 

2023-07-03 11:29:32.650 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2835 

2023-07-03 11:29:32.650 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2475 

2023-07-03 11:29:32.650 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2294 row column role 73 0 271 

2023-07-03 11:29:32.650 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2836 

2023-07-03 11:29:32.650 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2476 

2023-07-03 11:29:32.650 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2295 row column role 73 0 272 

2023-07-03 11:29:32.650 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2837 

2023-07-03 11:29:32.650 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2477 

2023-07-03 11:29:32.650 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2296 row column role 73 0 273 

2023-07-03 11:29:32.650 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2838 

2023-07-03 11:29:32.650 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2478 

2023-07-03 11:29:32.650 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2297 row column role 73 0 274 

2023-07-03 11:29:32.651 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2839 

2023-07-03 11:29:32.651 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2479 

2023-07-03 11:29:32.651 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2298 row column role 73 0 275 

2023-07-03 11:29:32.672 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2840 

2023-07-03 11:29:32.672 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2480 

2023-07-03 11:29:32.672 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2299 row column role 74 0 257 

2023-07-03 11:29:32.672 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2841 

2023-07-03 11:29:32.672 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2481 

2023-07-03 11:29:32.672 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2300 row column role 74 0 258 

2023-07-03 11:29:32.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2842 

2023-07-03 11:29:32.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2482 

2023-07-03 11:29:32.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2301 row column role 74 0 259 

2023-07-03 11:29:32.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2843 

2023-07-03 11:29:32.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2483 

2023-07-03 11:29:32.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2302 row column role 74 0 260 

2023-07-03 11:29:32.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2844 

2023-07-03 11:29:32.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2484 

2023-07-03 11:29:32.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2303 row column role 74 0 261 

2023-07-03 11:29:32.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2845 

2023-07-03 11:29:32.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2485 

2023-07-03 11:29:32.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2304 row column role 74 0 262 

2023-07-03 11:29:32.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2846 

2023-07-03 11:29:32.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2486 

2023-07-03 11:29:32.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2305 row column role 74 0 263 

2023-07-03 11:29:32.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2847 

2023-07-03 11:29:32.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2487 

2023-07-03 11:29:32.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2306 row column role 74 0 264 

2023-07-03 11:29:32.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2848 

2023-07-03 11:29:32.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2488 

2023-07-03 11:29:32.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2307 row column role 74 0 265 

2023-07-03 11:29:32.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2849 

2023-07-03 11:29:32.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2489 

2023-07-03 11:29:32.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2308 row column role 74 0 266 

2023-07-03 11:29:32.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2850 

2023-07-03 11:29:32.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2490 

2023-07-03 11:29:32.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2309 row column role 74 0 267 

2023-07-03 11:29:32.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2851 

2023-07-03 11:29:32.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2491 

2023-07-03 11:29:32.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2310 row column role 74 0 268 

2023-07-03 11:29:32.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2852 

2023-07-03 11:29:32.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2492 

2023-07-03 11:29:32.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2311 row column role 74 0 269 

2023-07-03 11:29:32.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2853 

2023-07-03 11:29:32.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2493 

2023-07-03 11:29:32.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2312 row column role 74 0 270 

2023-07-03 11:29:32.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2854 

2023-07-03 11:29:32.676 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2494 

2023-07-03 11:29:32.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2313 row column role 74 0 271 

2023-07-03 11:29:32.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2855 

2023-07-03 11:29:32.676 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2495 

2023-07-03 11:29:32.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2314 row column role 74 0 272 

2023-07-03 11:29:32.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2856 

2023-07-03 11:29:32.676 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2496 

2023-07-03 11:29:32.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2315 row column role 74 0 273 

2023-07-03 11:29:32.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2857 

2023-07-03 11:29:32.676 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2497 

2023-07-03 11:29:32.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2316 row column role 74 0 274 

2023-07-03 11:29:32.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2858 

2023-07-03 11:29:32.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2498 

2023-07-03 11:29:32.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2317 row column role 74 0 275 

2023-07-03 11:29:32.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2859 

2023-07-03 11:29:32.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2499 

2023-07-03 11:29:32.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2318 row column role 75 0 257 

2023-07-03 11:29:32.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2860 

2023-07-03 11:29:32.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2500 

2023-07-03 11:29:32.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2319 row column role 75 0 258 

2023-07-03 11:29:32.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2861 

2023-07-03 11:29:32.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2501 

2023-07-03 11:29:32.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2320 row column role 75 0 259 

2023-07-03 11:29:32.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2862 

2023-07-03 11:29:32.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2502 

2023-07-03 11:29:32.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2321 row column role 75 0 260 

2023-07-03 11:29:32.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2863 

2023-07-03 11:29:32.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2503 

2023-07-03 11:29:32.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2322 row column role 75 0 261 

2023-07-03 11:29:32.679 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2864 

2023-07-03 11:29:32.679 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2504 

2023-07-03 11:29:32.679 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2323 row column role 75 0 262 

2023-07-03 11:29:32.679 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2865 

2023-07-03 11:29:32.679 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2505 

2023-07-03 11:29:32.679 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2324 row column role 75 0 263 

2023-07-03 11:29:32.679 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2866 

2023-07-03 11:29:32.679 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2506 

2023-07-03 11:29:32.679 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2325 row column role 75 0 264 

2023-07-03 11:29:32.679 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2867 

2023-07-03 11:29:32.680 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2507 

2023-07-03 11:29:32.680 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2326 row column role 75 0 265 

2023-07-03 11:29:32.680 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2868 

2023-07-03 11:29:32.680 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2508 

2023-07-03 11:29:32.680 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2327 row column role 75 0 266 

2023-07-03 11:29:32.680 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2869 

2023-07-03 11:29:32.680 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2509 

2023-07-03 11:29:32.680 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2328 row column role 75 0 267 

2023-07-03 11:29:32.680 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2870 

2023-07-03 11:29:32.680 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2510 

2023-07-03 11:29:32.680 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2329 row column role 75 0 268 

2023-07-03 11:29:32.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2871 

2023-07-03 11:29:32.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2511 

2023-07-03 11:29:32.681 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2330 row column role 75 0 269 

2023-07-03 11:29:32.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2872 

2023-07-03 11:29:32.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2512 

2023-07-03 11:29:32.681 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2331 row column role 75 0 270 

2023-07-03 11:29:32.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2873 

2023-07-03 11:29:32.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2513 

2023-07-03 11:29:32.681 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2332 row column role 75 0 271 

2023-07-03 11:29:32.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2874 

2023-07-03 11:29:32.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2514 

2023-07-03 11:29:32.682 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2333 row column role 75 0 272 

2023-07-03 11:29:32.682 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2875 

2023-07-03 11:29:32.682 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2515 

2023-07-03 11:29:32.682 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2334 row column role 75 0 273 

2023-07-03 11:29:32.682 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2876 

2023-07-03 11:29:32.682 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2516 

2023-07-03 11:29:32.682 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2335 row column role 75 0 274 

2023-07-03 11:29:32.682 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2877 

2023-07-03 11:29:32.682 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2517 

2023-07-03 11:29:32.682 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2336 row column role 75 0 275 

2023-07-03 11:29:32.733 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2878 

2023-07-03 11:29:32.733 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2518 

2023-07-03 11:29:32.733 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2337 row column role 76 0 257 

2023-07-03 11:29:32.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2879 

2023-07-03 11:29:32.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2519 

2023-07-03 11:29:32.734 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2338 row column role 76 0 258 

2023-07-03 11:29:32.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2880 

2023-07-03 11:29:32.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2520 

2023-07-03 11:29:32.734 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2339 row column role 76 0 259 

2023-07-03 11:29:32.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2881 

2023-07-03 11:29:32.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2521 

2023-07-03 11:29:32.734 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2340 row column role 76 0 260 

2023-07-03 11:29:32.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2882 

2023-07-03 11:29:32.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2522 

2023-07-03 11:29:32.734 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2341 row column role 76 0 261 

2023-07-03 11:29:32.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2883 

2023-07-03 11:29:32.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2523 

2023-07-03 11:29:32.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2342 row column role 76 0 262 

2023-07-03 11:29:32.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2884 

2023-07-03 11:29:32.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2524 

2023-07-03 11:29:32.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2343 row column role 76 0 263 

2023-07-03 11:29:32.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2885 

2023-07-03 11:29:32.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2525 

2023-07-03 11:29:32.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2344 row column role 76 0 264 

2023-07-03 11:29:32.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2886 

2023-07-03 11:29:32.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2526 

2023-07-03 11:29:32.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2345 row column role 76 0 265 

2023-07-03 11:29:32.736 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2887 

2023-07-03 11:29:32.736 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2527 

2023-07-03 11:29:32.736 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2346 row column role 76 0 266 

2023-07-03 11:29:32.736 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2888 

2023-07-03 11:29:32.736 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2528 

2023-07-03 11:29:32.736 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2347 row column role 76 0 267 

2023-07-03 11:29:32.736 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2889 

2023-07-03 11:29:32.736 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2529 

2023-07-03 11:29:32.736 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2348 row column role 76 0 268 

2023-07-03 11:29:32.736 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2890 

2023-07-03 11:29:32.736 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2530 

2023-07-03 11:29:32.736 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2349 row column role 76 0 269 

2023-07-03 11:29:32.737 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2891 

2023-07-03 11:29:32.737 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2531 

2023-07-03 11:29:32.737 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2350 row column role 76 0 270 

2023-07-03 11:29:32.737 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2892 

2023-07-03 11:29:32.737 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2532 

2023-07-03 11:29:32.737 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2351 row column role 76 0 271 

2023-07-03 11:29:32.737 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2893 

2023-07-03 11:29:32.737 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2533 

2023-07-03 11:29:32.737 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2352 row column role 76 0 272 

2023-07-03 11:29:32.737 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2894 

2023-07-03 11:29:32.737 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2534 

2023-07-03 11:29:32.738 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2353 row column role 76 0 273 

2023-07-03 11:29:32.738 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2895 

2023-07-03 11:29:32.738 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2535 

2023-07-03 11:29:32.738 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2354 row column role 76 0 274 

2023-07-03 11:29:32.738 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2896 

2023-07-03 11:29:32.738 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2536 

2023-07-03 11:29:32.738 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2355 row column role 76 0 275 

2023-07-03 11:29:32.777 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2897 

2023-07-03 11:29:32.777 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2537 

2023-07-03 11:29:32.777 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2356 row column role 77 0 257 

2023-07-03 11:29:32.778 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2898 

2023-07-03 11:29:32.778 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2538 

2023-07-03 11:29:32.778 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2357 row column role 77 0 258 

2023-07-03 11:29:32.778 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2899 

2023-07-03 11:29:32.778 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2539 

2023-07-03 11:29:32.778 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2358 row column role 77 0 259 

2023-07-03 11:29:32.778 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2900 

2023-07-03 11:29:32.778 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2540 

2023-07-03 11:29:32.778 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2359 row column role 77 0 260 

2023-07-03 11:29:32.779 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2901 

2023-07-03 11:29:32.779 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2541 

2023-07-03 11:29:32.779 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2360 row column role 77 0 261 

2023-07-03 11:29:32.779 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2902 

2023-07-03 11:29:32.779 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2542 

2023-07-03 11:29:32.779 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2361 row column role 77 0 262 

2023-07-03 11:29:32.779 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2903 

2023-07-03 11:29:32.779 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2543 

2023-07-03 11:29:32.780 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2362 row column role 77 0 263 

2023-07-03 11:29:32.780 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2904 

2023-07-03 11:29:32.780 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2544 

2023-07-03 11:29:32.780 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2363 row column role 77 0 264 

2023-07-03 11:29:32.780 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2905 

2023-07-03 11:29:32.780 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2545 

2023-07-03 11:29:32.780 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2364 row column role 77 0 265 

2023-07-03 11:29:32.780 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2906 

2023-07-03 11:29:32.780 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2546 

2023-07-03 11:29:32.780 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2365 row column role 77 0 266 

2023-07-03 11:29:32.781 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2907 

2023-07-03 11:29:32.781 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2547 

2023-07-03 11:29:32.781 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2366 row column role 77 0 267 

2023-07-03 11:29:32.781 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2908 

2023-07-03 11:29:32.781 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2548 

2023-07-03 11:29:32.781 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2367 row column role 77 0 268 

2023-07-03 11:29:32.781 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2909 

2023-07-03 11:29:32.781 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2549 

2023-07-03 11:29:32.781 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2368 row column role 77 0 269 

2023-07-03 11:29:32.782 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2910 

2023-07-03 11:29:32.782 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2550 

2023-07-03 11:29:32.782 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2369 row column role 77 0 270 

2023-07-03 11:29:32.782 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2911 

2023-07-03 11:29:32.782 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2551 

2023-07-03 11:29:32.782 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2370 row column role 77 0 271 

2023-07-03 11:29:32.782 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2912 

2023-07-03 11:29:32.782 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2552 

2023-07-03 11:29:32.782 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2371 row column role 77 0 272 

2023-07-03 11:29:32.783 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2913 

2023-07-03 11:29:32.783 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2553 

2023-07-03 11:29:32.783 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2372 row column role 77 0 273 

2023-07-03 11:29:32.783 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2914 

2023-07-03 11:29:32.783 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2554 

2023-07-03 11:29:32.783 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2373 row column role 77 0 274 

2023-07-03 11:29:32.783 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2915 

2023-07-03 11:29:32.783 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2555 

2023-07-03 11:29:32.783 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2374 row column role 77 0 275 

2023-07-03 11:29:32.784 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2916 

2023-07-03 11:29:32.784 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2556 

2023-07-03 11:29:32.784 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2375 row column role 78 0 257 

2023-07-03 11:29:32.784 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2917 

2023-07-03 11:29:32.784 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2557 

2023-07-03 11:29:32.784 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2376 row column role 78 0 258 

2023-07-03 11:29:32.785 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2918 

2023-07-03 11:29:32.785 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2558 

2023-07-03 11:29:32.785 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2377 row column role 78 0 259 

2023-07-03 11:29:32.785 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2919 

2023-07-03 11:29:32.785 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2559 

2023-07-03 11:29:32.785 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2378 row column role 78 0 260 

2023-07-03 11:29:32.785 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2920 

2023-07-03 11:29:32.785 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2560 

2023-07-03 11:29:32.785 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2379 row column role 78 0 261 

2023-07-03 11:29:32.786 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2921 

2023-07-03 11:29:32.786 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2561 

2023-07-03 11:29:32.786 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2380 row column role 78 0 262 

2023-07-03 11:29:32.786 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2922 

2023-07-03 11:29:32.786 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2562 

2023-07-03 11:29:32.786 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2381 row column role 78 0 263 

2023-07-03 11:29:32.786 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2923 

2023-07-03 11:29:32.786 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2563 

2023-07-03 11:29:32.786 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2382 row column role 78 0 264 

2023-07-03 11:29:32.787 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2924 

2023-07-03 11:29:32.787 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2564 

2023-07-03 11:29:32.787 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2383 row column role 78 0 265 

2023-07-03 11:29:32.787 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2925 

2023-07-03 11:29:32.787 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2565 

2023-07-03 11:29:32.787 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2384 row column role 78 0 266 

2023-07-03 11:29:32.787 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2926 

2023-07-03 11:29:32.787 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2566 

2023-07-03 11:29:32.787 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2385 row column role 78 0 267 

2023-07-03 11:29:32.788 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2927 

2023-07-03 11:29:32.788 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2567 

2023-07-03 11:29:32.788 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2386 row column role 78 0 268 

2023-07-03 11:29:32.788 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2928 

2023-07-03 11:29:32.788 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2568 

2023-07-03 11:29:32.788 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2387 row column role 78 0 269 

2023-07-03 11:29:32.788 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2929 

2023-07-03 11:29:32.788 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2569 

2023-07-03 11:29:32.788 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2388 row column role 78 0 270 

2023-07-03 11:29:32.788 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2930 

2023-07-03 11:29:32.788 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2570 

2023-07-03 11:29:32.788 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2389 row column role 78 0 271 

2023-07-03 11:29:32.788 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2931 

2023-07-03 11:29:32.788 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2571 

2023-07-03 11:29:32.788 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2390 row column role 78 0 272 

2023-07-03 11:29:32.788 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2932 

2023-07-03 11:29:32.788 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2572 

2023-07-03 11:29:32.788 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2391 row column role 78 0 273 

2023-07-03 11:29:32.789 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2933 

2023-07-03 11:29:32.789 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2573 

2023-07-03 11:29:32.789 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2392 row column role 78 0 274 

2023-07-03 11:29:32.789 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2934 

2023-07-03 11:29:32.789 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2574 

2023-07-03 11:29:32.789 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2393 row column role 78 0 275 

2023-07-03 11:29:32.817 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2935 

2023-07-03 11:29:32.817 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2575 

2023-07-03 11:29:32.818 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2394 row column role 79 0 257 

2023-07-03 11:29:32.818 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2936 

2023-07-03 11:29:32.818 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2576 

2023-07-03 11:29:32.818 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2395 row column role 79 0 258 

2023-07-03 11:29:32.818 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2937 

2023-07-03 11:29:32.818 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2577 

2023-07-03 11:29:32.818 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2396 row column role 79 0 259 

2023-07-03 11:29:32.819 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2938 

2023-07-03 11:29:32.819 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2578 

2023-07-03 11:29:32.819 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2397 row column role 79 0 260 

2023-07-03 11:29:32.819 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2939 

2023-07-03 11:29:32.819 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2579 

2023-07-03 11:29:32.819 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2398 row column role 79 0 261 

2023-07-03 11:29:32.819 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2940 

2023-07-03 11:29:32.819 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2580 

2023-07-03 11:29:32.819 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2399 row column role 79 0 262 

2023-07-03 11:29:32.819 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2941 

2023-07-03 11:29:32.819 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2581 

2023-07-03 11:29:32.820 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2400 row column role 79 0 263 

2023-07-03 11:29:32.820 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2942 

2023-07-03 11:29:32.820 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2582 

2023-07-03 11:29:32.820 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2401 row column role 79 0 264 

2023-07-03 11:29:32.820 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2943 

2023-07-03 11:29:32.820 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2583 

2023-07-03 11:29:32.820 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2402 row column role 79 0 265 

2023-07-03 11:29:32.820 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2944 

2023-07-03 11:29:32.820 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2584 

2023-07-03 11:29:32.820 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2403 row column role 79 0 266 

2023-07-03 11:29:32.820 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2945 

2023-07-03 11:29:32.820 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2585 

2023-07-03 11:29:32.820 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2404 row column role 79 0 267 

2023-07-03 11:29:32.821 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2946 

2023-07-03 11:29:32.821 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2586 

2023-07-03 11:29:32.821 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2405 row column role 79 0 268 

2023-07-03 11:29:32.821 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2947 

2023-07-03 11:29:32.821 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2587 

2023-07-03 11:29:32.821 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2406 row column role 79 0 269 

2023-07-03 11:29:32.821 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2948 

2023-07-03 11:29:32.821 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2588 

2023-07-03 11:29:32.821 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2407 row column role 79 0 270 

2023-07-03 11:29:32.821 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2949 

2023-07-03 11:29:32.821 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2589 

2023-07-03 11:29:32.821 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2408 row column role 79 0 271 

2023-07-03 11:29:32.821 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2950 

2023-07-03 11:29:32.821 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2590 

2023-07-03 11:29:32.821 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2409 row column role 79 0 272 

2023-07-03 11:29:32.821 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2951 

2023-07-03 11:29:32.821 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2591 

2023-07-03 11:29:32.822 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2410 row column role 79 0 273 

2023-07-03 11:29:32.822 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2952 

2023-07-03 11:29:32.822 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2592 

2023-07-03 11:29:32.822 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2411 row column role 79 0 274 

2023-07-03 11:29:32.822 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2953 

2023-07-03 11:29:32.822 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2593 

2023-07-03 11:29:32.822 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2412 row column role 79 0 275 

2023-07-03 11:29:32.858 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2954 

2023-07-03 11:29:32.858 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2594 

2023-07-03 11:29:32.858 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2413 row column role 80 0 257 

2023-07-03 11:29:32.859 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2955 

2023-07-03 11:29:32.859 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2595 

2023-07-03 11:29:32.859 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2414 row column role 80 0 258 

2023-07-03 11:29:32.859 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2956 

2023-07-03 11:29:32.859 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2596 

2023-07-03 11:29:32.859 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2415 row column role 80 0 259 

2023-07-03 11:29:32.859 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2957 

2023-07-03 11:29:32.859 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2597 

2023-07-03 11:29:32.859 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2416 row column role 80 0 260 

2023-07-03 11:29:32.859 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2958 

2023-07-03 11:29:32.859 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2598 

2023-07-03 11:29:32.859 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2417 row column role 80 0 261 

2023-07-03 11:29:32.860 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2959 

2023-07-03 11:29:32.860 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2599 

2023-07-03 11:29:32.860 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2418 row column role 80 0 262 

2023-07-03 11:29:32.860 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2960 

2023-07-03 11:29:32.860 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2600 

2023-07-03 11:29:32.860 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2419 row column role 80 0 263 

2023-07-03 11:29:32.860 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2961 

2023-07-03 11:29:32.860 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2601 

2023-07-03 11:29:32.860 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2420 row column role 80 0 264 

2023-07-03 11:29:32.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2962 

2023-07-03 11:29:32.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2602 

2023-07-03 11:29:32.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2421 row column role 80 0 265 

2023-07-03 11:29:32.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2963 

2023-07-03 11:29:32.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2603 

2023-07-03 11:29:32.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2422 row column role 80 0 266 

2023-07-03 11:29:32.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2964 

2023-07-03 11:29:32.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2604 

2023-07-03 11:29:32.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2423 row column role 80 0 267 

2023-07-03 11:29:32.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2965 

2023-07-03 11:29:32.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2605 

2023-07-03 11:29:32.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2424 row column role 80 0 268 

2023-07-03 11:29:32.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2966 

2023-07-03 11:29:32.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2606 

2023-07-03 11:29:32.862 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2425 row column role 80 0 269 

2023-07-03 11:29:32.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2967 

2023-07-03 11:29:32.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2607 

2023-07-03 11:29:32.862 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2426 row column role 80 0 270 

2023-07-03 11:29:32.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2968 

2023-07-03 11:29:32.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2608 

2023-07-03 11:29:32.862 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2427 row column role 80 0 271 

2023-07-03 11:29:32.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2969 

2023-07-03 11:29:32.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2609 

2023-07-03 11:29:32.863 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2428 row column role 80 0 272 

2023-07-03 11:29:32.863 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2970 

2023-07-03 11:29:32.863 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2610 

2023-07-03 11:29:32.863 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2429 row column role 80 0 273 

2023-07-03 11:29:32.863 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2971 

2023-07-03 11:29:32.863 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2611 

2023-07-03 11:29:32.863 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2430 row column role 80 0 274 

2023-07-03 11:29:32.863 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2972 

2023-07-03 11:29:32.863 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2612 

2023-07-03 11:29:32.863 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2431 row column role 80 0 275 

2023-07-03 11:29:32.899 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2973 

2023-07-03 11:29:32.899 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2613 

2023-07-03 11:29:32.899 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2432 row column role 81 0 257 

2023-07-03 11:29:32.900 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2974 

2023-07-03 11:29:32.900 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2614 

2023-07-03 11:29:32.900 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2433 row column role 81 0 258 

2023-07-03 11:29:32.900 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2975 

2023-07-03 11:29:32.900 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2615 

2023-07-03 11:29:32.900 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2434 row column role 81 0 259 

2023-07-03 11:29:32.901 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2976 

2023-07-03 11:29:32.901 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2616 

2023-07-03 11:29:32.901 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2435 row column role 81 0 260 

2023-07-03 11:29:32.901 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2977 

2023-07-03 11:29:32.901 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2617 

2023-07-03 11:29:32.901 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2436 row column role 81 0 261 

2023-07-03 11:29:32.901 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2978 

2023-07-03 11:29:32.901 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2618 

2023-07-03 11:29:32.901 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2437 row column role 81 0 262 

2023-07-03 11:29:32.901 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2979 

2023-07-03 11:29:32.901 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2619 

2023-07-03 11:29:32.901 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2438 row column role 81 0 263 

2023-07-03 11:29:32.902 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2980 

2023-07-03 11:29:32.902 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2620 

2023-07-03 11:29:32.902 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2439 row column role 81 0 264 

2023-07-03 11:29:32.902 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2981 

2023-07-03 11:29:32.902 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2621 

2023-07-03 11:29:32.902 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2440 row column role 81 0 265 

2023-07-03 11:29:32.902 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2982 

2023-07-03 11:29:32.902 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2622 

2023-07-03 11:29:32.902 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2441 row column role 81 0 266 

2023-07-03 11:29:32.902 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2983 

2023-07-03 11:29:32.902 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2623 

2023-07-03 11:29:32.902 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2442 row column role 81 0 267 

2023-07-03 11:29:32.903 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2984 

2023-07-03 11:29:32.903 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2624 

2023-07-03 11:29:32.903 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2443 row column role 81 0 268 

2023-07-03 11:29:32.903 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2985 

2023-07-03 11:29:32.903 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2625 

2023-07-03 11:29:32.903 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2444 row column role 81 0 269 

2023-07-03 11:29:32.903 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2986 

2023-07-03 11:29:32.903 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2626 

2023-07-03 11:29:32.903 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2445 row column role 81 0 270 

2023-07-03 11:29:32.904 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2987 

2023-07-03 11:29:32.904 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2627 

2023-07-03 11:29:32.904 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2446 row column role 81 0 271 

2023-07-03 11:29:32.904 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2988 

2023-07-03 11:29:32.904 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2628 

2023-07-03 11:29:32.904 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2447 row column role 81 0 272 

2023-07-03 11:29:32.904 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2989 

2023-07-03 11:29:32.904 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2629 

2023-07-03 11:29:32.904 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2448 row column role 81 0 273 

2023-07-03 11:29:32.904 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2990 

2023-07-03 11:29:32.904 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2630 

2023-07-03 11:29:32.904 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2449 row column role 81 0 274 

2023-07-03 11:29:32.905 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2991 

2023-07-03 11:29:32.905 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2631 

2023-07-03 11:29:32.905 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2450 row column role 81 0 275 

2023-07-03 11:29:33.017 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2992 

2023-07-03 11:29:33.017 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2632 

2023-07-03 11:29:33.017 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2451 row column role 82 0 257 

2023-07-03 11:29:33.017 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2993 

2023-07-03 11:29:33.017 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2633 

2023-07-03 11:29:33.017 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2452 row column role 82 0 258 

2023-07-03 11:29:33.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2994 

2023-07-03 11:29:33.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2634 

2023-07-03 11:29:33.018 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2453 row column role 82 0 259 

2023-07-03 11:29:33.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2995 

2023-07-03 11:29:33.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2635 

2023-07-03 11:29:33.018 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2454 row column role 82 0 260 

2023-07-03 11:29:33.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2996 

2023-07-03 11:29:33.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2636 

2023-07-03 11:29:33.018 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2455 row column role 82 0 261 

2023-07-03 11:29:33.018 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2997 

2023-07-03 11:29:33.018 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2637 

2023-07-03 11:29:33.018 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2456 row column role 82 0 262 

2023-07-03 11:29:33.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2998 

2023-07-03 11:29:33.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2638 

2023-07-03 11:29:33.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2457 row column role 82 0 263 

2023-07-03 11:29:33.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 2999 

2023-07-03 11:29:33.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2639 

2023-07-03 11:29:33.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2458 row column role 82 0 264 

2023-07-03 11:29:33.019 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3000 

2023-07-03 11:29:33.019 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2640 

2023-07-03 11:29:33.019 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2459 row column role 82 0 265 

2023-07-03 11:29:33.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3001 

2023-07-03 11:29:33.020 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2641 

2023-07-03 11:29:33.020 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2460 row column role 82 0 266 

2023-07-03 11:29:33.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3002 

2023-07-03 11:29:33.020 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2642 

2023-07-03 11:29:33.020 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2461 row column role 82 0 267 

2023-07-03 11:29:33.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3003 

2023-07-03 11:29:33.020 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2643 

2023-07-03 11:29:33.020 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2462 row column role 82 0 268 

2023-07-03 11:29:33.020 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3004 

2023-07-03 11:29:33.021 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2644 

2023-07-03 11:29:33.021 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2463 row column role 82 0 269 

2023-07-03 11:29:33.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3005 

2023-07-03 11:29:33.021 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2645 

2023-07-03 11:29:33.021 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2464 row column role 82 0 270 

2023-07-03 11:29:33.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3006 

2023-07-03 11:29:33.021 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2646 

2023-07-03 11:29:33.021 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2465 row column role 82 0 271 

2023-07-03 11:29:33.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3007 

2023-07-03 11:29:33.021 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2647 

2023-07-03 11:29:33.021 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2466 row column role 82 0 272 

2023-07-03 11:29:33.021 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3008 

2023-07-03 11:29:33.021 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2648 

2023-07-03 11:29:33.021 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2467 row column role 82 0 273 

2023-07-03 11:29:33.022 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3009 

2023-07-03 11:29:33.022 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2649 

2023-07-03 11:29:33.022 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2468 row column role 82 0 274 

2023-07-03 11:29:33.022 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3010 

2023-07-03 11:29:33.022 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2650 

2023-07-03 11:29:33.022 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2469 row column role 82 0 275 

2023-07-03 11:29:33.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3011 

2023-07-03 11:29:33.023 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2651 

2023-07-03 11:29:33.023 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2470 row column role 83 0 257 

2023-07-03 11:29:33.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3012 

2023-07-03 11:29:33.023 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2652 

2023-07-03 11:29:33.023 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2471 row column role 83 0 258 

2023-07-03 11:29:33.023 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3013 

2023-07-03 11:29:33.023 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2653 

2023-07-03 11:29:33.023 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2472 row column role 83 0 259 

2023-07-03 11:29:33.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3014 

2023-07-03 11:29:33.024 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2654 

2023-07-03 11:29:33.024 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2473 row column role 83 0 260 

2023-07-03 11:29:33.024 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3015 

2023-07-03 11:29:33.025 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2655 

2023-07-03 11:29:33.025 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2474 row column role 83 0 261 

2023-07-03 11:29:33.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3016 

2023-07-03 11:29:33.025 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2656 

2023-07-03 11:29:33.025 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2475 row column role 83 0 262 

2023-07-03 11:29:33.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3017 

2023-07-03 11:29:33.025 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2657 

2023-07-03 11:29:33.025 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2476 row column role 83 0 263 

2023-07-03 11:29:33.025 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3018 

2023-07-03 11:29:33.025 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2658 

2023-07-03 11:29:33.025 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2477 row column role 83 0 264 

2023-07-03 11:29:33.026 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3019 

2023-07-03 11:29:33.026 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2659 

2023-07-03 11:29:33.026 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2478 row column role 83 0 265 

2023-07-03 11:29:33.026 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3020 

2023-07-03 11:29:33.026 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2660 

2023-07-03 11:29:33.026 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2479 row column role 83 0 266 

2023-07-03 11:29:33.026 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3021 

2023-07-03 11:29:33.026 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2661 

2023-07-03 11:29:33.026 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2480 row column role 83 0 267 

2023-07-03 11:29:33.026 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3022 

2023-07-03 11:29:33.026 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2662 

2023-07-03 11:29:33.027 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2481 row column role 83 0 268 

2023-07-03 11:29:33.027 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3023 

2023-07-03 11:29:33.027 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2663 

2023-07-03 11:29:33.027 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2482 row column role 83 0 269 

2023-07-03 11:29:33.027 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3024 

2023-07-03 11:29:33.027 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2664 

2023-07-03 11:29:33.027 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2483 row column role 83 0 270 

2023-07-03 11:29:33.027 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3025 

2023-07-03 11:29:33.027 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2665 

2023-07-03 11:29:33.027 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2484 row column role 83 0 271 

2023-07-03 11:29:33.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3026 

2023-07-03 11:29:33.028 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2666 

2023-07-03 11:29:33.028 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2485 row column role 83 0 272 

2023-07-03 11:29:33.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3027 

2023-07-03 11:29:33.028 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2667 

2023-07-03 11:29:33.028 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2486 row column role 83 0 273 

2023-07-03 11:29:33.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3028 

2023-07-03 11:29:33.028 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2668 

2023-07-03 11:29:33.028 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2487 row column role 83 0 274 

2023-07-03 11:29:33.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3029 

2023-07-03 11:29:33.028 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2669 

2023-07-03 11:29:33.028 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2488 row column role 83 0 275 

2023-07-03 11:29:33.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3030 

2023-07-03 11:29:33.031 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2670 

2023-07-03 11:29:33.031 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2489 row column role 84 0 257 

2023-07-03 11:29:33.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3031 

2023-07-03 11:29:33.031 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2671 

2023-07-03 11:29:33.031 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2490 row column role 84 0 258 

2023-07-03 11:29:33.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3032 

2023-07-03 11:29:33.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2672 

2023-07-03 11:29:33.032 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2491 row column role 84 0 259 

2023-07-03 11:29:33.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3033 

2023-07-03 11:29:33.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2673 

2023-07-03 11:29:33.032 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2492 row column role 84 0 260 

2023-07-03 11:29:33.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3034 

2023-07-03 11:29:33.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2674 

2023-07-03 11:29:33.032 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2493 row column role 84 0 261 

2023-07-03 11:29:33.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3035 

2023-07-03 11:29:33.033 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2675 

2023-07-03 11:29:33.033 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2494 row column role 84 0 262 

2023-07-03 11:29:33.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3036 

2023-07-03 11:29:33.033 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2676 

2023-07-03 11:29:33.033 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2495 row column role 84 0 263 

2023-07-03 11:29:33.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3037 

2023-07-03 11:29:33.033 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2677 

2023-07-03 11:29:33.033 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2496 row column role 84 0 264 

2023-07-03 11:29:33.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3038 

2023-07-03 11:29:33.033 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2678 

2023-07-03 11:29:33.033 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2497 row column role 84 0 265 

2023-07-03 11:29:33.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3039 

2023-07-03 11:29:33.034 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2679 

2023-07-03 11:29:33.034 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2498 row column role 84 0 266 

2023-07-03 11:29:33.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3040 

2023-07-03 11:29:33.034 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2680 

2023-07-03 11:29:33.034 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2499 row column role 84 0 267 

2023-07-03 11:29:33.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3041 

2023-07-03 11:29:33.034 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2681 

2023-07-03 11:29:33.034 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2500 row column role 84 0 268 

2023-07-03 11:29:33.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3042 

2023-07-03 11:29:33.034 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2682 

2023-07-03 11:29:33.035 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2501 row column role 84 0 269 

2023-07-03 11:29:33.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3043 

2023-07-03 11:29:33.035 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2683 

2023-07-03 11:29:33.035 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2502 row column role 84 0 270 

2023-07-03 11:29:33.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3044 

2023-07-03 11:29:33.035 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2684 

2023-07-03 11:29:33.035 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2503 row column role 84 0 271 

2023-07-03 11:29:33.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3045 

2023-07-03 11:29:33.035 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2685 

2023-07-03 11:29:33.035 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2504 row column role 84 0 272 

2023-07-03 11:29:33.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3046 

2023-07-03 11:29:33.035 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2686 

2023-07-03 11:29:33.035 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2505 row column role 84 0 273 

2023-07-03 11:29:33.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3047 

2023-07-03 11:29:33.036 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2687 

2023-07-03 11:29:33.036 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2506 row column role 84 0 274 

2023-07-03 11:29:33.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3048 

2023-07-03 11:29:33.036 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2688 

2023-07-03 11:29:33.036 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2507 row column role 84 0 275 

2023-07-03 11:29:33.048 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3049 

2023-07-03 11:29:33.048 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2689 

2023-07-03 11:29:33.048 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2508 row column role 85 0 257 

2023-07-03 11:29:33.048 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3050 

2023-07-03 11:29:33.048 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2690 

2023-07-03 11:29:33.048 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2509 row column role 85 0 258 

2023-07-03 11:29:33.049 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3051 

2023-07-03 11:29:33.049 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2691 

2023-07-03 11:29:33.049 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2510 row column role 85 0 259 

2023-07-03 11:29:33.049 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3052 

2023-07-03 11:29:33.049 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2692 

2023-07-03 11:29:33.049 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2511 row column role 85 0 260 

2023-07-03 11:29:33.049 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3053 

2023-07-03 11:29:33.049 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2693 

2023-07-03 11:29:33.049 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2512 row column role 85 0 261 

2023-07-03 11:29:33.049 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3054 

2023-07-03 11:29:33.049 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2694 

2023-07-03 11:29:33.049 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2513 row column role 85 0 262 

2023-07-03 11:29:33.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3055 

2023-07-03 11:29:33.050 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2695 

2023-07-03 11:29:33.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2514 row column role 85 0 263 

2023-07-03 11:29:33.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3056 

2023-07-03 11:29:33.050 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2696 

2023-07-03 11:29:33.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2515 row column role 85 0 264 

2023-07-03 11:29:33.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3057 

2023-07-03 11:29:33.050 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2697 

2023-07-03 11:29:33.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2516 row column role 85 0 265 

2023-07-03 11:29:33.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3058 

2023-07-03 11:29:33.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2698 

2023-07-03 11:29:33.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2517 row column role 85 0 266 

2023-07-03 11:29:33.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3059 

2023-07-03 11:29:33.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2699 

2023-07-03 11:29:33.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2518 row column role 85 0 267 

2023-07-03 11:29:33.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3060 

2023-07-03 11:29:33.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2700 

2023-07-03 11:29:33.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2519 row column role 85 0 268 

2023-07-03 11:29:33.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3061 

2023-07-03 11:29:33.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2701 

2023-07-03 11:29:33.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2520 row column role 85 0 269 

2023-07-03 11:29:33.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3062 

2023-07-03 11:29:33.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2702 

2023-07-03 11:29:33.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2521 row column role 85 0 270 

2023-07-03 11:29:33.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3063 

2023-07-03 11:29:33.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2703 

2023-07-03 11:29:33.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2522 row column role 85 0 271 

2023-07-03 11:29:33.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3064 

2023-07-03 11:29:33.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2704 

2023-07-03 11:29:33.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2523 row column role 85 0 272 

2023-07-03 11:29:33.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3065 

2023-07-03 11:29:33.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2705 

2023-07-03 11:29:33.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2524 row column role 85 0 273 

2023-07-03 11:29:33.053 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3066 

2023-07-03 11:29:33.053 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2706 

2023-07-03 11:29:33.053 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2525 row column role 85 0 274 

2023-07-03 11:29:33.053 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3067 

2023-07-03 11:29:33.053 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2707 

2023-07-03 11:29:33.053 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2526 row column role 85 0 275 

2023-07-03 11:29:33.088 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3068 

2023-07-03 11:29:33.088 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2708 

2023-07-03 11:29:33.088 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2527 row column role 86 0 257 

2023-07-03 11:29:33.089 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3069 

2023-07-03 11:29:33.089 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2709 

2023-07-03 11:29:33.089 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2528 row column role 86 0 258 

2023-07-03 11:29:33.089 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3070 

2023-07-03 11:29:33.089 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2710 

2023-07-03 11:29:33.089 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2529 row column role 86 0 259 

2023-07-03 11:29:33.089 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3071 

2023-07-03 11:29:33.089 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2711 

2023-07-03 11:29:33.089 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2530 row column role 86 0 260 

2023-07-03 11:29:33.089 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3072 

2023-07-03 11:29:33.089 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2712 

2023-07-03 11:29:33.089 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2531 row column role 86 0 261 

2023-07-03 11:29:33.090 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3073 

2023-07-03 11:29:33.090 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2713 

2023-07-03 11:29:33.090 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2532 row column role 86 0 262 

2023-07-03 11:29:33.090 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3074 

2023-07-03 11:29:33.090 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2714 

2023-07-03 11:29:33.090 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2533 row column role 86 0 263 

2023-07-03 11:29:33.090 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3075 

2023-07-03 11:29:33.090 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2715 

2023-07-03 11:29:33.090 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2534 row column role 86 0 264 

2023-07-03 11:29:33.090 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3076 

2023-07-03 11:29:33.091 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2716 

2023-07-03 11:29:33.091 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2535 row column role 86 0 265 

2023-07-03 11:29:33.091 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3077 

2023-07-03 11:29:33.091 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2717 

2023-07-03 11:29:33.091 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2536 row column role 86 0 266 

2023-07-03 11:29:33.091 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3078 

2023-07-03 11:29:33.091 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2718 

2023-07-03 11:29:33.091 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2537 row column role 86 0 267 

2023-07-03 11:29:33.091 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3079 

2023-07-03 11:29:33.091 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2719 

2023-07-03 11:29:33.091 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2538 row column role 86 0 268 

2023-07-03 11:29:33.092 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3080 

2023-07-03 11:29:33.092 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2720 

2023-07-03 11:29:33.092 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2539 row column role 86 0 269 

2023-07-03 11:29:33.092 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3081 

2023-07-03 11:29:33.092 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2721 

2023-07-03 11:29:33.092 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2540 row column role 86 0 270 

2023-07-03 11:29:33.092 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3082 

2023-07-03 11:29:33.092 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2722 

2023-07-03 11:29:33.092 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2541 row column role 86 0 271 

2023-07-03 11:29:33.092 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3083 

2023-07-03 11:29:33.092 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2723 

2023-07-03 11:29:33.092 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2542 row column role 86 0 272 

2023-07-03 11:29:33.093 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3084 

2023-07-03 11:29:33.093 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2724 

2023-07-03 11:29:33.093 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2543 row column role 86 0 273 

2023-07-03 11:29:33.093 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3085 

2023-07-03 11:29:33.093 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2725 

2023-07-03 11:29:33.093 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2544 row column role 86 0 274 

2023-07-03 11:29:33.093 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3086 

2023-07-03 11:29:33.093 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2726 

2023-07-03 11:29:33.093 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2545 row column role 86 0 275 

2023-07-03 11:29:33.130 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3087 

2023-07-03 11:29:33.130 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2727 

2023-07-03 11:29:33.130 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2546 row column role 87 0 257 

2023-07-03 11:29:33.131 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3088 

2023-07-03 11:29:33.131 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2728 

2023-07-03 11:29:33.131 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2547 row column role 87 0 258 

2023-07-03 11:29:33.131 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3089 

2023-07-03 11:29:33.131 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2729 

2023-07-03 11:29:33.131 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2548 row column role 87 0 259 

2023-07-03 11:29:33.132 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3090 

2023-07-03 11:29:33.132 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2730 

2023-07-03 11:29:33.132 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2549 row column role 87 0 260 

2023-07-03 11:29:33.132 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3091 

2023-07-03 11:29:33.132 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2731 

2023-07-03 11:29:33.132 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2550 row column role 87 0 261 

2023-07-03 11:29:33.132 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3092 

2023-07-03 11:29:33.132 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2732 

2023-07-03 11:29:33.132 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2551 row column role 87 0 262 

2023-07-03 11:29:33.133 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3093 

2023-07-03 11:29:33.133 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2733 

2023-07-03 11:29:33.133 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2552 row column role 87 0 263 

2023-07-03 11:29:33.133 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3094 

2023-07-03 11:29:33.133 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2734 

2023-07-03 11:29:33.133 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2553 row column role 87 0 264 

2023-07-03 11:29:33.133 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3095 

2023-07-03 11:29:33.133 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2735 

2023-07-03 11:29:33.133 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2554 row column role 87 0 265 

2023-07-03 11:29:33.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3096 

2023-07-03 11:29:33.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2736 

2023-07-03 11:29:33.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2555 row column role 87 0 266 

2023-07-03 11:29:33.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3097 

2023-07-03 11:29:33.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2737 

2023-07-03 11:29:33.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2556 row column role 87 0 267 

2023-07-03 11:29:33.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3098 

2023-07-03 11:29:33.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2738 

2023-07-03 11:29:33.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2557 row column role 87 0 268 

2023-07-03 11:29:33.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3099 

2023-07-03 11:29:33.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2739 

2023-07-03 11:29:33.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2558 row column role 87 0 269 

2023-07-03 11:29:33.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3100 

2023-07-03 11:29:33.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2740 

2023-07-03 11:29:33.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2559 row column role 87 0 270 

2023-07-03 11:29:33.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3101 

2023-07-03 11:29:33.136 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2741 

2023-07-03 11:29:33.136 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2560 row column role 87 0 271 

2023-07-03 11:29:33.136 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3102 

2023-07-03 11:29:33.136 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2742 

2023-07-03 11:29:33.136 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2561 row column role 87 0 272 

2023-07-03 11:29:33.136 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3103 

2023-07-03 11:29:33.136 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2743 

2023-07-03 11:29:33.136 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2562 row column role 87 0 273 

2023-07-03 11:29:33.136 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3104 

2023-07-03 11:29:33.136 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2744 

2023-07-03 11:29:33.136 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2563 row column role 87 0 274 

2023-07-03 11:29:33.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3105 

2023-07-03 11:29:33.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2745 

2023-07-03 11:29:33.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2564 row column role 87 0 275 

2023-07-03 11:29:33.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3106 

2023-07-03 11:29:33.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2746 

2023-07-03 11:29:33.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2565 row column role 88 0 257 

2023-07-03 11:29:33.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3107 

2023-07-03 11:29:33.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2747 

2023-07-03 11:29:33.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2566 row column role 88 0 258 

2023-07-03 11:29:33.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3108 

2023-07-03 11:29:33.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2748 

2023-07-03 11:29:33.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2567 row column role 88 0 259 

2023-07-03 11:29:33.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3109 

2023-07-03 11:29:33.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2749 

2023-07-03 11:29:33.139 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2568 row column role 88 0 260 

2023-07-03 11:29:33.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3110 

2023-07-03 11:29:33.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2750 

2023-07-03 11:29:33.139 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2569 row column role 88 0 261 

2023-07-03 11:29:33.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3111 

2023-07-03 11:29:33.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2751 

2023-07-03 11:29:33.140 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2570 row column role 88 0 262 

2023-07-03 11:29:33.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3112 

2023-07-03 11:29:33.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2752 

2023-07-03 11:29:33.140 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2571 row column role 88 0 263 

2023-07-03 11:29:33.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3113 

2023-07-03 11:29:33.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2753 

2023-07-03 11:29:33.140 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2572 row column role 88 0 264 

2023-07-03 11:29:33.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3114 

2023-07-03 11:29:33.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2754 

2023-07-03 11:29:33.141 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2573 row column role 88 0 265 

2023-07-03 11:29:33.141 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3115 

2023-07-03 11:29:33.141 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2755 

2023-07-03 11:29:33.141 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2574 row column role 88 0 266 

2023-07-03 11:29:33.141 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3116 

2023-07-03 11:29:33.141 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2756 

2023-07-03 11:29:33.141 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2575 row column role 88 0 267 

2023-07-03 11:29:33.142 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3117 

2023-07-03 11:29:33.142 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2757 

2023-07-03 11:29:33.142 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2576 row column role 88 0 268 

2023-07-03 11:29:33.142 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3118 

2023-07-03 11:29:33.142 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2758 

2023-07-03 11:29:33.142 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2577 row column role 88 0 269 

2023-07-03 11:29:33.142 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3119 

2023-07-03 11:29:33.142 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2759 

2023-07-03 11:29:33.142 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2578 row column role 88 0 270 

2023-07-03 11:29:33.142 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3120 

2023-07-03 11:29:33.143 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2760 

2023-07-03 11:29:33.143 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2579 row column role 88 0 271 

2023-07-03 11:29:33.143 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3121 

2023-07-03 11:29:33.143 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2761 

2023-07-03 11:29:33.143 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2580 row column role 88 0 272 

2023-07-03 11:29:33.143 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3122 

2023-07-03 11:29:33.143 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2762 

2023-07-03 11:29:33.143 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2581 row column role 88 0 273 

2023-07-03 11:29:33.143 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3123 

2023-07-03 11:29:33.143 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2763 

2023-07-03 11:29:33.143 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2582 row column role 88 0 274 

2023-07-03 11:29:33.143 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3124 

2023-07-03 11:29:33.144 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2764 

2023-07-03 11:29:33.144 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2583 row column role 88 0 275 

2023-07-03 11:29:33.196 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3125 

2023-07-03 11:29:33.196 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2765 

2023-07-03 11:29:33.196 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2584 row column role 89 0 257 

2023-07-03 11:29:33.197 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3126 

2023-07-03 11:29:33.197 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2766 

2023-07-03 11:29:33.197 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2585 row column role 89 0 258 

2023-07-03 11:29:33.197 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3127 

2023-07-03 11:29:33.197 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2767 

2023-07-03 11:29:33.197 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2586 row column role 89 0 259 

2023-07-03 11:29:33.197 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3128 

2023-07-03 11:29:33.197 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2768 

2023-07-03 11:29:33.197 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2587 row column role 89 0 260 

2023-07-03 11:29:33.198 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3129 

2023-07-03 11:29:33.198 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2769 

2023-07-03 11:29:33.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2588 row column role 89 0 261 

2023-07-03 11:29:33.198 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3130 

2023-07-03 11:29:33.198 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2770 

2023-07-03 11:29:33.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2589 row column role 89 0 262 

2023-07-03 11:29:33.198 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3131 

2023-07-03 11:29:33.198 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2771 

2023-07-03 11:29:33.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2590 row column role 89 0 263 

2023-07-03 11:29:33.198 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3132 

2023-07-03 11:29:33.198 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2772 

2023-07-03 11:29:33.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2591 row column role 89 0 264 

2023-07-03 11:29:33.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3133 

2023-07-03 11:29:33.199 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2773 

2023-07-03 11:29:33.199 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2592 row column role 89 0 265 

2023-07-03 11:29:33.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3134 

2023-07-03 11:29:33.199 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2774 

2023-07-03 11:29:33.199 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2593 row column role 89 0 266 

2023-07-03 11:29:33.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3135 

2023-07-03 11:29:33.199 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2775 

2023-07-03 11:29:33.199 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2594 row column role 89 0 267 

2023-07-03 11:29:33.200 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3136 

2023-07-03 11:29:33.200 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2776 

2023-07-03 11:29:33.200 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2595 row column role 89 0 268 

2023-07-03 11:29:33.200 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3137 

2023-07-03 11:29:33.200 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2777 

2023-07-03 11:29:33.200 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2596 row column role 89 0 269 

2023-07-03 11:29:33.201 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3138 

2023-07-03 11:29:33.201 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2778 

2023-07-03 11:29:33.201 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2597 row column role 89 0 270 

2023-07-03 11:29:33.201 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3139 

2023-07-03 11:29:33.201 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2779 

2023-07-03 11:29:33.201 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2598 row column role 89 0 271 

2023-07-03 11:29:33.201 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3140 

2023-07-03 11:29:33.201 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2780 

2023-07-03 11:29:33.201 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2599 row column role 89 0 272 

2023-07-03 11:29:33.201 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3141 

2023-07-03 11:29:33.201 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2781 

2023-07-03 11:29:33.201 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2600 row column role 89 0 273 

2023-07-03 11:29:33.202 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3142 

2023-07-03 11:29:33.202 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2782 

2023-07-03 11:29:33.202 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2601 row column role 89 0 274 

2023-07-03 11:29:33.202 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3143 

2023-07-03 11:29:33.202 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2783 

2023-07-03 11:29:33.202 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2602 row column role 89 0 275 

2023-07-03 11:29:33.203 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3144 

2023-07-03 11:29:33.203 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2784 

2023-07-03 11:29:33.203 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2603 row column role 90 0 257 

2023-07-03 11:29:33.203 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3145 

2023-07-03 11:29:33.203 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2785 

2023-07-03 11:29:33.203 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2604 row column role 90 0 258 

2023-07-03 11:29:33.203 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3146 

2023-07-03 11:29:33.203 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2786 

2023-07-03 11:29:33.203 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2605 row column role 90 0 259 

2023-07-03 11:29:33.204 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3147 

2023-07-03 11:29:33.204 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2787 

2023-07-03 11:29:33.204 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2606 row column role 90 0 260 

2023-07-03 11:29:33.204 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3148 

2023-07-03 11:29:33.204 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2788 

2023-07-03 11:29:33.204 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2607 row column role 90 0 261 

2023-07-03 11:29:33.204 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3149 

2023-07-03 11:29:33.205 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2789 

2023-07-03 11:29:33.205 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2608 row column role 90 0 262 

2023-07-03 11:29:33.205 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3150 

2023-07-03 11:29:33.205 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2790 

2023-07-03 11:29:33.205 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2609 row column role 90 0 263 

2023-07-03 11:29:33.205 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3151 

2023-07-03 11:29:33.205 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2791 

2023-07-03 11:29:33.205 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2610 row column role 90 0 264 

2023-07-03 11:29:33.206 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3152 

2023-07-03 11:29:33.206 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2792 

2023-07-03 11:29:33.206 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2611 row column role 90 0 265 

2023-07-03 11:29:33.206 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3153 

2023-07-03 11:29:33.206 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2793 

2023-07-03 11:29:33.206 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2612 row column role 90 0 266 

2023-07-03 11:29:33.206 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3154 

2023-07-03 11:29:33.206 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2794 

2023-07-03 11:29:33.207 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2613 row column role 90 0 267 

2023-07-03 11:29:33.207 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3155 

2023-07-03 11:29:33.207 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2795 

2023-07-03 11:29:33.207 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2614 row column role 90 0 268 

2023-07-03 11:29:33.207 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3156 

2023-07-03 11:29:33.207 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2796 

2023-07-03 11:29:33.207 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2615 row column role 90 0 269 

2023-07-03 11:29:33.207 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3157 

2023-07-03 11:29:33.208 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2797 

2023-07-03 11:29:33.208 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2616 row column role 90 0 270 

2023-07-03 11:29:33.208 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3158 

2023-07-03 11:29:33.208 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2798 

2023-07-03 11:29:33.208 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2617 row column role 90 0 271 

2023-07-03 11:29:33.208 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3159 

2023-07-03 11:29:33.208 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2799 

2023-07-03 11:29:33.208 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2618 row column role 90 0 272 

2023-07-03 11:29:33.208 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3160 

2023-07-03 11:29:33.208 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2800 

2023-07-03 11:29:33.209 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2619 row column role 90 0 273 

2023-07-03 11:29:33.209 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3161 

2023-07-03 11:29:33.209 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2801 

2023-07-03 11:29:33.209 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2620 row column role 90 0 274 

2023-07-03 11:29:33.209 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3162 

2023-07-03 11:29:33.209 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2802 

2023-07-03 11:29:33.209 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2621 row column role 90 0 275 

2023-07-03 11:29:33.256 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3163 

2023-07-03 11:29:33.256 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2803 

2023-07-03 11:29:33.256 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2622 row column role 91 0 257 

2023-07-03 11:29:33.257 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3164 

2023-07-03 11:29:33.257 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2804 

2023-07-03 11:29:33.257 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2623 row column role 91 0 258 

2023-07-03 11:29:33.257 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3165 

2023-07-03 11:29:33.257 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2805 

2023-07-03 11:29:33.257 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2624 row column role 91 0 259 

2023-07-03 11:29:33.257 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3166 

2023-07-03 11:29:33.257 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2806 

2023-07-03 11:29:33.258 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2625 row column role 91 0 260 

2023-07-03 11:29:33.258 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3167 

2023-07-03 11:29:33.258 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2807 

2023-07-03 11:29:33.258 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2626 row column role 91 0 261 

2023-07-03 11:29:33.258 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3168 

2023-07-03 11:29:33.258 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2808 

2023-07-03 11:29:33.258 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2627 row column role 91 0 262 

2023-07-03 11:29:33.258 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3169 

2023-07-03 11:29:33.258 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2809 

2023-07-03 11:29:33.258 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2628 row column role 91 0 263 

2023-07-03 11:29:33.258 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3170 

2023-07-03 11:29:33.259 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2810 

2023-07-03 11:29:33.259 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2629 row column role 91 0 264 

2023-07-03 11:29:33.259 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3171 

2023-07-03 11:29:33.259 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2811 

2023-07-03 11:29:33.259 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2630 row column role 91 0 265 

2023-07-03 11:29:33.259 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3172 

2023-07-03 11:29:33.259 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2812 

2023-07-03 11:29:33.259 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2631 row column role 91 0 266 

2023-07-03 11:29:33.259 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3173 

2023-07-03 11:29:33.260 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2813 

2023-07-03 11:29:33.260 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2632 row column role 91 0 267 

2023-07-03 11:29:33.260 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3174 

2023-07-03 11:29:33.260 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2814 

2023-07-03 11:29:33.260 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2633 row column role 91 0 268 

2023-07-03 11:29:33.260 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3175 

2023-07-03 11:29:33.260 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2815 

2023-07-03 11:29:33.260 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2634 row column role 91 0 269 

2023-07-03 11:29:33.260 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3176 

2023-07-03 11:29:33.261 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2816 

2023-07-03 11:29:33.261 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2635 row column role 91 0 270 

2023-07-03 11:29:33.261 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3177 

2023-07-03 11:29:33.261 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2817 

2023-07-03 11:29:33.261 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2636 row column role 91 0 271 

2023-07-03 11:29:33.261 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3178 

2023-07-03 11:29:33.261 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2818 

2023-07-03 11:29:33.261 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2637 row column role 91 0 272 

2023-07-03 11:29:33.261 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3179 

2023-07-03 11:29:33.261 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2819 

2023-07-03 11:29:33.261 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2638 row column role 91 0 273 

2023-07-03 11:29:33.262 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3180 

2023-07-03 11:29:33.262 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2820 

2023-07-03 11:29:33.262 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2639 row column role 91 0 274 

2023-07-03 11:29:33.262 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3181 

2023-07-03 11:29:33.262 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2821 

2023-07-03 11:29:33.262 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2640 row column role 91 0 275 

2023-07-03 11:29:33.362 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3182 

2023-07-03 11:29:33.362 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2822 

2023-07-03 11:29:33.362 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2641 row column role 92 0 257 

2023-07-03 11:29:33.363 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3183 

2023-07-03 11:29:33.363 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2823 

2023-07-03 11:29:33.363 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2642 row column role 92 0 258 

2023-07-03 11:29:33.363 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3184 

2023-07-03 11:29:33.363 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2824 

2023-07-03 11:29:33.363 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2643 row column role 92 0 259 

2023-07-03 11:29:33.364 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3185 

2023-07-03 11:29:33.364 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2825 

2023-07-03 11:29:33.364 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2644 row column role 92 0 260 

2023-07-03 11:29:33.364 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3186 

2023-07-03 11:29:33.364 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2826 

2023-07-03 11:29:33.364 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2645 row column role 92 0 261 

2023-07-03 11:29:33.364 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3187 

2023-07-03 11:29:33.364 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2827 

2023-07-03 11:29:33.364 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2646 row column role 92 0 262 

2023-07-03 11:29:33.364 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3188 

2023-07-03 11:29:33.364 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2828 

2023-07-03 11:29:33.364 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2647 row column role 92 0 263 

2023-07-03 11:29:33.365 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3189 

2023-07-03 11:29:33.365 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2829 

2023-07-03 11:29:33.365 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2648 row column role 92 0 264 

2023-07-03 11:29:33.365 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3190 

2023-07-03 11:29:33.365 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2830 

2023-07-03 11:29:33.365 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2649 row column role 92 0 265 

2023-07-03 11:29:33.365 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3191 

2023-07-03 11:29:33.365 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2831 

2023-07-03 11:29:33.365 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2650 row column role 92 0 266 

2023-07-03 11:29:33.366 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3192 

2023-07-03 11:29:33.366 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2832 

2023-07-03 11:29:33.366 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2651 row column role 92 0 267 

2023-07-03 11:29:33.366 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3193 

2023-07-03 11:29:33.366 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2833 

2023-07-03 11:29:33.366 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2652 row column role 92 0 268 

2023-07-03 11:29:33.366 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3194 

2023-07-03 11:29:33.366 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2834 

2023-07-03 11:29:33.366 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2653 row column role 92 0 269 

2023-07-03 11:29:33.367 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3195 

2023-07-03 11:29:33.367 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2835 

2023-07-03 11:29:33.367 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2654 row column role 92 0 270 

2023-07-03 11:29:33.367 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3196 

2023-07-03 11:29:33.367 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2836 

2023-07-03 11:29:33.367 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2655 row column role 92 0 271 

2023-07-03 11:29:33.367 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3197 

2023-07-03 11:29:33.367 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2837 

2023-07-03 11:29:33.367 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2656 row column role 92 0 272 

2023-07-03 11:29:33.367 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3198 

2023-07-03 11:29:33.367 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2838 

2023-07-03 11:29:33.367 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2657 row column role 92 0 273 

2023-07-03 11:29:33.368 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3199 

2023-07-03 11:29:33.368 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2839 

2023-07-03 11:29:33.368 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2658 row column role 92 0 274 

2023-07-03 11:29:33.368 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3200 

2023-07-03 11:29:33.368 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2840 

2023-07-03 11:29:33.368 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2659 row column role 92 0 275 

2023-07-03 11:29:33.404 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3201 

2023-07-03 11:29:33.404 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2841 

2023-07-03 11:29:33.404 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2660 row column role 93 0 257 

2023-07-03 11:29:33.405 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3202 

2023-07-03 11:29:33.405 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2842 

2023-07-03 11:29:33.405 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2661 row column role 93 0 258 

2023-07-03 11:29:33.405 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3203 

2023-07-03 11:29:33.405 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2843 

2023-07-03 11:29:33.405 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2662 row column role 93 0 259 

2023-07-03 11:29:33.405 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3204 

2023-07-03 11:29:33.405 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2844 

2023-07-03 11:29:33.405 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2663 row column role 93 0 260 

2023-07-03 11:29:33.406 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3205 

2023-07-03 11:29:33.406 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2845 

2023-07-03 11:29:33.406 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2664 row column role 93 0 261 

2023-07-03 11:29:33.406 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3206 

2023-07-03 11:29:33.406 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2846 

2023-07-03 11:29:33.406 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2665 row column role 93 0 262 

2023-07-03 11:29:33.406 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3207 

2023-07-03 11:29:33.406 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2847 

2023-07-03 11:29:33.406 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2666 row column role 93 0 263 

2023-07-03 11:29:33.407 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3208 

2023-07-03 11:29:33.407 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2848 

2023-07-03 11:29:33.407 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2667 row column role 93 0 264 

2023-07-03 11:29:33.407 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3209 

2023-07-03 11:29:33.407 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2849 

2023-07-03 11:29:33.407 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2668 row column role 93 0 265 

2023-07-03 11:29:33.407 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3210 

2023-07-03 11:29:33.407 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2850 

2023-07-03 11:29:33.407 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2669 row column role 93 0 266 

2023-07-03 11:29:33.408 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3211 

2023-07-03 11:29:33.408 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2851 

2023-07-03 11:29:33.408 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2670 row column role 93 0 267 

2023-07-03 11:29:33.408 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3212 

2023-07-03 11:29:33.408 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2852 

2023-07-03 11:29:33.408 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2671 row column role 93 0 268 

2023-07-03 11:29:33.408 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3213 

2023-07-03 11:29:33.408 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2853 

2023-07-03 11:29:33.408 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2672 row column role 93 0 269 

2023-07-03 11:29:33.409 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3214 

2023-07-03 11:29:33.409 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2854 

2023-07-03 11:29:33.409 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2673 row column role 93 0 270 

2023-07-03 11:29:33.409 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3215 

2023-07-03 11:29:33.409 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2855 

2023-07-03 11:29:33.409 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2674 row column role 93 0 271 

2023-07-03 11:29:33.409 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3216 

2023-07-03 11:29:33.409 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2856 

2023-07-03 11:29:33.409 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2675 row column role 93 0 272 

2023-07-03 11:29:33.409 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3217 

2023-07-03 11:29:33.410 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2857 

2023-07-03 11:29:33.410 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2676 row column role 93 0 273 

2023-07-03 11:29:33.410 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3218 

2023-07-03 11:29:33.410 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2858 

2023-07-03 11:29:33.410 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2677 row column role 93 0 274 

2023-07-03 11:29:33.410 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3219 

2023-07-03 11:29:33.410 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2859 

2023-07-03 11:29:33.410 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2678 row column role 93 0 275 

2023-07-03 11:29:33.411 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3220 

2023-07-03 11:29:33.411 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2860 

2023-07-03 11:29:33.411 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2679 row column role 94 0 257 

2023-07-03 11:29:33.411 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3221 

2023-07-03 11:29:33.411 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2861 

2023-07-03 11:29:33.411 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2680 row column role 94 0 258 

2023-07-03 11:29:33.412 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3222 

2023-07-03 11:29:33.412 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2862 

2023-07-03 11:29:33.412 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2681 row column role 94 0 259 

2023-07-03 11:29:33.412 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3223 

2023-07-03 11:29:33.412 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2863 

2023-07-03 11:29:33.412 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2682 row column role 94 0 260 

2023-07-03 11:29:33.412 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3224 

2023-07-03 11:29:33.412 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2864 

2023-07-03 11:29:33.412 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2683 row column role 94 0 261 

2023-07-03 11:29:33.413 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3225 

2023-07-03 11:29:33.413 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2865 

2023-07-03 11:29:33.413 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2684 row column role 94 0 262 

2023-07-03 11:29:33.413 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3226 

2023-07-03 11:29:33.413 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2866 

2023-07-03 11:29:33.413 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2685 row column role 94 0 263 

2023-07-03 11:29:33.413 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3227 

2023-07-03 11:29:33.413 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2867 

2023-07-03 11:29:33.413 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2686 row column role 94 0 264 

2023-07-03 11:29:33.414 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3228 

2023-07-03 11:29:33.414 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2868 

2023-07-03 11:29:33.414 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2687 row column role 94 0 265 

2023-07-03 11:29:33.414 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3229 

2023-07-03 11:29:33.414 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2869 

2023-07-03 11:29:33.414 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2688 row column role 94 0 266 

2023-07-03 11:29:33.414 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3230 

2023-07-03 11:29:33.414 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2870 

2023-07-03 11:29:33.414 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2689 row column role 94 0 267 

2023-07-03 11:29:33.415 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3231 

2023-07-03 11:29:33.415 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2871 

2023-07-03 11:29:33.415 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2690 row column role 94 0 268 

2023-07-03 11:29:33.415 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3232 

2023-07-03 11:29:33.415 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2872 

2023-07-03 11:29:33.415 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2691 row column role 94 0 269 

2023-07-03 11:29:33.415 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3233 

2023-07-03 11:29:33.415 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2873 

2023-07-03 11:29:33.415 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2692 row column role 94 0 270 

2023-07-03 11:29:33.416 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3234 

2023-07-03 11:29:33.416 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2874 

2023-07-03 11:29:33.416 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2693 row column role 94 0 271 

2023-07-03 11:29:33.416 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3235 

2023-07-03 11:29:33.416 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2875 

2023-07-03 11:29:33.416 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2694 row column role 94 0 272 

2023-07-03 11:29:33.416 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3236 

2023-07-03 11:29:33.416 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2876 

2023-07-03 11:29:33.416 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2695 row column role 94 0 273 

2023-07-03 11:29:33.416 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3237 

2023-07-03 11:29:33.417 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2877 

2023-07-03 11:29:33.417 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2696 row column role 94 0 274 

2023-07-03 11:29:33.417 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3238 

2023-07-03 11:29:33.417 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2878 

2023-07-03 11:29:33.417 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2697 row column role 94 0 275 

2023-07-03 11:29:33.442 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3239 

2023-07-03 11:29:33.442 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2879 

2023-07-03 11:29:33.442 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2698 row column role 95 0 257 

2023-07-03 11:29:33.443 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3240 

2023-07-03 11:29:33.443 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2880 

2023-07-03 11:29:33.443 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2699 row column role 95 0 258 

2023-07-03 11:29:33.443 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3241 

2023-07-03 11:29:33.443 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2881 

2023-07-03 11:29:33.443 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2700 row column role 95 0 259 

2023-07-03 11:29:33.443 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3242 

2023-07-03 11:29:33.443 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2882 

2023-07-03 11:29:33.443 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2701 row column role 95 0 260 

2023-07-03 11:29:33.444 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3243 

2023-07-03 11:29:33.444 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2883 

2023-07-03 11:29:33.444 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2702 row column role 95 0 261 

2023-07-03 11:29:33.444 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3244 

2023-07-03 11:29:33.444 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2884 

2023-07-03 11:29:33.444 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2703 row column role 95 0 262 

2023-07-03 11:29:33.444 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3245 

2023-07-03 11:29:33.445 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2885 

2023-07-03 11:29:33.445 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2704 row column role 95 0 263 

2023-07-03 11:29:33.445 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3246 

2023-07-03 11:29:33.445 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2886 

2023-07-03 11:29:33.445 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2705 row column role 95 0 264 

2023-07-03 11:29:33.445 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3247 

2023-07-03 11:29:33.445 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2887 

2023-07-03 11:29:33.445 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2706 row column role 95 0 265 

2023-07-03 11:29:33.446 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3248 

2023-07-03 11:29:33.446 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2888 

2023-07-03 11:29:33.446 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2707 row column role 95 0 266 

2023-07-03 11:29:33.446 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3249 

2023-07-03 11:29:33.446 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2889 

2023-07-03 11:29:33.446 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2708 row column role 95 0 267 

2023-07-03 11:29:33.446 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3250 

2023-07-03 11:29:33.446 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2890 

2023-07-03 11:29:33.446 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2709 row column role 95 0 268 

2023-07-03 11:29:33.447 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3251 

2023-07-03 11:29:33.447 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2891 

2023-07-03 11:29:33.447 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2710 row column role 95 0 269 

2023-07-03 11:29:33.447 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3252 

2023-07-03 11:29:33.447 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2892 

2023-07-03 11:29:33.447 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2711 row column role 95 0 270 

2023-07-03 11:29:33.447 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3253 

2023-07-03 11:29:33.447 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2893 

2023-07-03 11:29:33.447 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2712 row column role 95 0 271 

2023-07-03 11:29:33.448 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3254 

2023-07-03 11:29:33.448 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2894 

2023-07-03 11:29:33.448 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2713 row column role 95 0 272 

2023-07-03 11:29:33.448 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3255 

2023-07-03 11:29:33.448 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2895 

2023-07-03 11:29:33.448 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2714 row column role 95 0 273 

2023-07-03 11:29:33.448 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3256 

2023-07-03 11:29:33.448 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2896 

2023-07-03 11:29:33.448 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2715 row column role 95 0 274 

2023-07-03 11:29:33.448 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3257 

2023-07-03 11:29:33.448 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2897 

2023-07-03 11:29:33.449 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2716 row column role 95 0 275 

2023-07-03 11:29:33.484 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3258 

2023-07-03 11:29:33.484 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2898 

2023-07-03 11:29:33.484 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2717 row column role 96 0 257 

2023-07-03 11:29:33.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3259 

2023-07-03 11:29:33.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2899 

2023-07-03 11:29:33.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2718 row column role 96 0 258 

2023-07-03 11:29:33.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3260 

2023-07-03 11:29:33.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2900 

2023-07-03 11:29:33.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2719 row column role 96 0 259 

2023-07-03 11:29:33.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3261 

2023-07-03 11:29:33.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2901 

2023-07-03 11:29:33.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2720 row column role 96 0 260 

2023-07-03 11:29:33.486 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3262 

2023-07-03 11:29:33.486 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2902 

2023-07-03 11:29:33.486 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2721 row column role 96 0 261 

2023-07-03 11:29:33.486 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3263 

2023-07-03 11:29:33.486 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2903 

2023-07-03 11:29:33.486 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2722 row column role 96 0 262 

2023-07-03 11:29:33.486 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3264 

2023-07-03 11:29:33.486 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2904 

2023-07-03 11:29:33.486 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2723 row column role 96 0 263 

2023-07-03 11:29:33.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3265 

2023-07-03 11:29:33.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2905 

2023-07-03 11:29:33.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2724 row column role 96 0 264 

2023-07-03 11:29:33.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3266 

2023-07-03 11:29:33.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2906 

2023-07-03 11:29:33.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2725 row column role 96 0 265 

2023-07-03 11:29:33.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3267 

2023-07-03 11:29:33.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2907 

2023-07-03 11:29:33.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2726 row column role 96 0 266 

2023-07-03 11:29:33.488 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3268 

2023-07-03 11:29:33.488 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2908 

2023-07-03 11:29:33.488 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2727 row column role 96 0 267 

2023-07-03 11:29:33.488 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3269 

2023-07-03 11:29:33.488 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2909 

2023-07-03 11:29:33.488 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2728 row column role 96 0 268 

2023-07-03 11:29:33.488 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3270 

2023-07-03 11:29:33.488 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2910 

2023-07-03 11:29:33.488 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2729 row column role 96 0 269 

2023-07-03 11:29:33.489 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3271 

2023-07-03 11:29:33.489 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2911 

2023-07-03 11:29:33.489 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2730 row column role 96 0 270 

2023-07-03 11:29:33.489 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3272 

2023-07-03 11:29:33.489 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2912 

2023-07-03 11:29:33.489 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2731 row column role 96 0 271 

2023-07-03 11:29:33.489 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3273 

2023-07-03 11:29:33.489 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2913 

2023-07-03 11:29:33.489 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2732 row column role 96 0 272 

2023-07-03 11:29:33.489 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3274 

2023-07-03 11:29:33.489 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2914 

2023-07-03 11:29:33.490 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2733 row column role 96 0 273 

2023-07-03 11:29:33.490 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3275 

2023-07-03 11:29:33.490 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2915 

2023-07-03 11:29:33.490 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2734 row column role 96 0 274 

2023-07-03 11:29:33.490 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3276 

2023-07-03 11:29:33.490 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2916 

2023-07-03 11:29:33.490 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2735 row column role 96 0 275 

2023-07-03 11:29:33.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3277 

2023-07-03 11:29:33.529 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2917 

2023-07-03 11:29:33.529 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2736 row column role 97 0 257 

2023-07-03 11:29:33.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3278 

2023-07-03 11:29:33.529 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2918 

2023-07-03 11:29:33.530 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2737 row column role 97 0 258 

2023-07-03 11:29:33.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3279 

2023-07-03 11:29:33.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2919 

2023-07-03 11:29:33.530 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2738 row column role 97 0 259 

2023-07-03 11:29:33.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3280 

2023-07-03 11:29:33.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2920 

2023-07-03 11:29:33.530 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2739 row column role 97 0 260 

2023-07-03 11:29:33.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3281 

2023-07-03 11:29:33.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2921 

2023-07-03 11:29:33.531 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2740 row column role 97 0 261 

2023-07-03 11:29:33.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3282 

2023-07-03 11:29:33.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2922 

2023-07-03 11:29:33.531 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2741 row column role 97 0 262 

2023-07-03 11:29:33.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3283 

2023-07-03 11:29:33.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2923 

2023-07-03 11:29:33.531 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2742 row column role 97 0 263 

2023-07-03 11:29:33.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3284 

2023-07-03 11:29:33.532 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2924 

2023-07-03 11:29:33.532 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2743 row column role 97 0 264 

2023-07-03 11:29:33.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3285 

2023-07-03 11:29:33.532 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2925 

2023-07-03 11:29:33.532 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2744 row column role 97 0 265 

2023-07-03 11:29:33.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3286 

2023-07-03 11:29:33.532 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2926 

2023-07-03 11:29:33.532 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2745 row column role 97 0 266 

2023-07-03 11:29:33.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3287 

2023-07-03 11:29:33.533 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2927 

2023-07-03 11:29:33.533 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2746 row column role 97 0 267 

2023-07-03 11:29:33.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3288 

2023-07-03 11:29:33.533 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2928 

2023-07-03 11:29:33.533 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2747 row column role 97 0 268 

2023-07-03 11:29:33.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3289 

2023-07-03 11:29:33.533 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2929 

2023-07-03 11:29:33.533 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2748 row column role 97 0 269 

2023-07-03 11:29:33.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3290 

2023-07-03 11:29:33.534 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2930 

2023-07-03 11:29:33.534 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2749 row column role 97 0 270 

2023-07-03 11:29:33.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3291 

2023-07-03 11:29:33.534 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2931 

2023-07-03 11:29:33.534 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2750 row column role 97 0 271 

2023-07-03 11:29:33.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3292 

2023-07-03 11:29:33.534 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2932 

2023-07-03 11:29:33.534 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2751 row column role 97 0 272 

2023-07-03 11:29:33.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3293 

2023-07-03 11:29:33.534 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2933 

2023-07-03 11:29:33.534 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2752 row column role 97 0 273 

2023-07-03 11:29:33.535 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3294 

2023-07-03 11:29:33.535 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2934 

2023-07-03 11:29:33.535 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2753 row column role 97 0 274 

2023-07-03 11:29:33.535 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3295 

2023-07-03 11:29:33.535 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2935 

2023-07-03 11:29:33.535 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2754 row column role 97 0 275 

2023-07-03 11:29:33.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3296 

2023-07-03 11:29:33.536 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2936 

2023-07-03 11:29:33.536 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2755 row column role 98 0 257 

2023-07-03 11:29:33.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3297 

2023-07-03 11:29:33.536 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2937 

2023-07-03 11:29:33.536 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2756 row column role 98 0 258 

2023-07-03 11:29:33.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3298 

2023-07-03 11:29:33.536 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2938 

2023-07-03 11:29:33.537 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2757 row column role 98 0 259 

2023-07-03 11:29:33.537 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3299 

2023-07-03 11:29:33.537 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2939 

2023-07-03 11:29:33.537 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2758 row column role 98 0 260 

2023-07-03 11:29:33.537 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3300 

2023-07-03 11:29:33.537 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2940 

2023-07-03 11:29:33.537 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2759 row column role 98 0 261 

2023-07-03 11:29:33.537 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3301 

2023-07-03 11:29:33.538 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2941 

2023-07-03 11:29:33.538 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2760 row column role 98 0 262 

2023-07-03 11:29:33.538 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3302 

2023-07-03 11:29:33.538 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2942 

2023-07-03 11:29:33.538 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2761 row column role 98 0 263 

2023-07-03 11:29:33.538 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3303 

2023-07-03 11:29:33.538 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2943 

2023-07-03 11:29:33.538 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2762 row column role 98 0 264 

2023-07-03 11:29:33.538 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3304 

2023-07-03 11:29:33.538 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2944 

2023-07-03 11:29:33.538 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2763 row column role 98 0 265 

2023-07-03 11:29:33.539 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3305 

2023-07-03 11:29:33.539 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2945 

2023-07-03 11:29:33.539 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2764 row column role 98 0 266 

2023-07-03 11:29:33.539 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3306 

2023-07-03 11:29:33.539 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2946 

2023-07-03 11:29:33.539 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2765 row column role 98 0 267 

2023-07-03 11:29:33.539 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3307 

2023-07-03 11:29:33.539 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2947 

2023-07-03 11:29:33.539 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2766 row column role 98 0 268 

2023-07-03 11:29:33.540 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3308 

2023-07-03 11:29:33.540 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2948 

2023-07-03 11:29:33.540 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2767 row column role 98 0 269 

2023-07-03 11:29:33.540 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3309 

2023-07-03 11:29:33.540 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2949 

2023-07-03 11:29:33.540 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2768 row column role 98 0 270 

2023-07-03 11:29:33.540 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3310 

2023-07-03 11:29:33.540 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2950 

2023-07-03 11:29:33.540 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2769 row column role 98 0 271 

2023-07-03 11:29:33.541 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3311 

2023-07-03 11:29:33.541 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2951 

2023-07-03 11:29:33.541 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2770 row column role 98 0 272 

2023-07-03 11:29:33.541 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3312 

2023-07-03 11:29:33.541 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2952 

2023-07-03 11:29:33.541 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2771 row column role 98 0 273 

2023-07-03 11:29:33.541 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3313 

2023-07-03 11:29:33.541 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2953 

2023-07-03 11:29:33.541 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2772 row column role 98 0 274 

2023-07-03 11:29:33.541 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3314 

2023-07-03 11:29:33.542 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2954 

2023-07-03 11:29:33.542 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2773 row column role 98 0 275 

2023-07-03 11:29:33.567 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3315 

2023-07-03 11:29:33.567 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2955 

2023-07-03 11:29:33.567 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2774 row column role 99 0 257 

2023-07-03 11:29:33.568 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3316 

2023-07-03 11:29:33.568 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2956 

2023-07-03 11:29:33.568 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2775 row column role 99 0 258 

2023-07-03 11:29:33.568 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3317 

2023-07-03 11:29:33.568 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2957 

2023-07-03 11:29:33.568 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2776 row column role 99 0 259 

2023-07-03 11:29:33.568 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3318 

2023-07-03 11:29:33.568 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2958 

2023-07-03 11:29:33.569 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2777 row column role 99 0 260 

2023-07-03 11:29:33.569 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3319 

2023-07-03 11:29:33.569 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2959 

2023-07-03 11:29:33.569 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2778 row column role 99 0 261 

2023-07-03 11:29:33.569 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3320 

2023-07-03 11:29:33.569 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2960 

2023-07-03 11:29:33.569 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2779 row column role 99 0 262 

2023-07-03 11:29:33.569 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3321 

2023-07-03 11:29:33.570 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2961 

2023-07-03 11:29:33.570 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2780 row column role 99 0 263 

2023-07-03 11:29:33.570 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3322 

2023-07-03 11:29:33.570 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2962 

2023-07-03 11:29:33.570 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2781 row column role 99 0 264 

2023-07-03 11:29:33.570 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3323 

2023-07-03 11:29:33.570 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2963 

2023-07-03 11:29:33.570 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2782 row column role 99 0 265 

2023-07-03 11:29:33.570 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3324 

2023-07-03 11:29:33.571 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2964 

2023-07-03 11:29:33.571 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2783 row column role 99 0 266 

2023-07-03 11:29:33.571 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3325 

2023-07-03 11:29:33.571 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2965 

2023-07-03 11:29:33.571 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2784 row column role 99 0 267 

2023-07-03 11:29:33.571 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3326 

2023-07-03 11:29:33.571 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2966 

2023-07-03 11:29:33.571 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2785 row column role 99 0 268 

2023-07-03 11:29:33.571 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3327 

2023-07-03 11:29:33.572 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2967 

2023-07-03 11:29:33.572 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2786 row column role 99 0 269 

2023-07-03 11:29:33.572 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3328 

2023-07-03 11:29:33.572 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2968 

2023-07-03 11:29:33.572 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2787 row column role 99 0 270 

2023-07-03 11:29:33.572 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3329 

2023-07-03 11:29:33.572 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2969 

2023-07-03 11:29:33.572 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2788 row column role 99 0 271 

2023-07-03 11:29:33.572 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3330 

2023-07-03 11:29:33.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2970 

2023-07-03 11:29:33.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2789 row column role 99 0 272 

2023-07-03 11:29:33.573 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3331 

2023-07-03 11:29:33.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2971 

2023-07-03 11:29:33.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2790 row column role 99 0 273 

2023-07-03 11:29:33.573 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3332 

2023-07-03 11:29:33.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2972 

2023-07-03 11:29:33.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2791 row column role 99 0 274 

2023-07-03 11:29:33.573 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3333 

2023-07-03 11:29:33.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2973 

2023-07-03 11:29:33.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2792 row column role 99 0 275 

2023-07-03 11:29:33.629 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3334 

2023-07-03 11:29:33.629 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2974 

2023-07-03 11:29:33.629 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2793 row column role 100 0 257 

2023-07-03 11:29:33.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3335 

2023-07-03 11:29:33.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2975 

2023-07-03 11:29:33.630 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2794 row column role 100 0 258 

2023-07-03 11:29:33.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3336 

2023-07-03 11:29:33.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2976 

2023-07-03 11:29:33.630 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2795 row column role 100 0 259 

2023-07-03 11:29:33.631 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3337 

2023-07-03 11:29:33.631 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2977 

2023-07-03 11:29:33.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2796 row column role 100 0 260 

2023-07-03 11:29:33.631 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3338 

2023-07-03 11:29:33.631 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2978 

2023-07-03 11:29:33.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2797 row column role 100 0 261 

2023-07-03 11:29:33.631 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3339 

2023-07-03 11:29:33.631 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2979 

2023-07-03 11:29:33.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2798 row column role 100 0 262 

2023-07-03 11:29:33.632 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3340 

2023-07-03 11:29:33.632 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2980 

2023-07-03 11:29:33.632 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2799 row column role 100 0 263 

2023-07-03 11:29:33.632 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3341 

2023-07-03 11:29:33.632 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2981 

2023-07-03 11:29:33.632 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2800 row column role 100 0 264 

2023-07-03 11:29:33.632 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3342 

2023-07-03 11:29:33.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2982 

2023-07-03 11:29:33.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2801 row column role 100 0 265 

2023-07-03 11:29:33.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3343 

2023-07-03 11:29:33.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2983 

2023-07-03 11:29:33.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2802 row column role 100 0 266 

2023-07-03 11:29:33.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3344 

2023-07-03 11:29:33.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2984 

2023-07-03 11:29:33.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2803 row column role 100 0 267 

2023-07-03 11:29:33.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3345 

2023-07-03 11:29:33.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2985 

2023-07-03 11:29:33.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2804 row column role 100 0 268 

2023-07-03 11:29:33.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3346 

2023-07-03 11:29:33.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2986 

2023-07-03 11:29:33.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2805 row column role 100 0 269 

2023-07-03 11:29:33.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3347 

2023-07-03 11:29:33.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2987 

2023-07-03 11:29:33.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2806 row column role 100 0 270 

2023-07-03 11:29:33.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3348 

2023-07-03 11:29:33.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2988 

2023-07-03 11:29:33.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2807 row column role 100 0 271 

2023-07-03 11:29:33.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3349 

2023-07-03 11:29:33.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2989 

2023-07-03 11:29:33.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2808 row column role 100 0 272 

2023-07-03 11:29:33.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3350 

2023-07-03 11:29:33.635 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2990 

2023-07-03 11:29:33.635 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2809 row column role 100 0 273 

2023-07-03 11:29:33.635 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3351 

2023-07-03 11:29:33.635 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2991 

2023-07-03 11:29:33.635 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2810 row column role 100 0 274 

2023-07-03 11:29:33.635 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3352 

2023-07-03 11:29:33.635 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2992 

2023-07-03 11:29:33.635 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2811 row column role 100 0 275 

2023-07-03 11:29:33.738 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3353 

2023-07-03 11:29:33.738 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2993 

2023-07-03 11:29:33.738 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2812 row column role 101 0 257 

2023-07-03 11:29:33.739 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3354 

2023-07-03 11:29:33.739 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2994 

2023-07-03 11:29:33.739 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2813 row column role 101 0 258 

2023-07-03 11:29:33.739 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3355 

2023-07-03 11:29:33.740 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2995 

2023-07-03 11:29:33.740 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2814 row column role 101 0 259 

2023-07-03 11:29:33.740 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3356 

2023-07-03 11:29:33.740 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2996 

2023-07-03 11:29:33.740 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2815 row column role 101 0 260 

2023-07-03 11:29:33.741 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3357 

2023-07-03 11:29:33.741 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2997 

2023-07-03 11:29:33.741 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2816 row column role 101 0 261 

2023-07-03 11:29:33.741 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3358 

2023-07-03 11:29:33.741 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2998 

2023-07-03 11:29:33.741 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2817 row column role 101 0 262 

2023-07-03 11:29:33.741 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3359 

2023-07-03 11:29:33.741 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 2999 

2023-07-03 11:29:33.741 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2818 row column role 101 0 263 

2023-07-03 11:29:33.742 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3360 

2023-07-03 11:29:33.742 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3000 

2023-07-03 11:29:33.742 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2819 row column role 101 0 264 

2023-07-03 11:29:33.742 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3361 

2023-07-03 11:29:33.742 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3001 

2023-07-03 11:29:33.742 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2820 row column role 101 0 265 

2023-07-03 11:29:33.743 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3362 

2023-07-03 11:29:33.743 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3002 

2023-07-03 11:29:33.743 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2821 row column role 101 0 266 

2023-07-03 11:29:33.743 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3363 

2023-07-03 11:29:33.744 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3003 

2023-07-03 11:29:33.744 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2822 row column role 101 0 267 

2023-07-03 11:29:33.744 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3364 

2023-07-03 11:29:33.744 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3004 

2023-07-03 11:29:33.744 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2823 row column role 101 0 268 

2023-07-03 11:29:33.744 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3365 

2023-07-03 11:29:33.745 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3005 

2023-07-03 11:29:33.745 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2824 row column role 101 0 269 

2023-07-03 11:29:33.745 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3366 

2023-07-03 11:29:33.745 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3006 

2023-07-03 11:29:33.745 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2825 row column role 101 0 270 

2023-07-03 11:29:33.745 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3367 

2023-07-03 11:29:33.745 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3007 

2023-07-03 11:29:33.745 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2826 row column role 101 0 271 

2023-07-03 11:29:33.745 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3368 

2023-07-03 11:29:33.745 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3008 

2023-07-03 11:29:33.745 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2827 row column role 101 0 272 

2023-07-03 11:29:33.745 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3369 

2023-07-03 11:29:33.745 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3009 

2023-07-03 11:29:33.745 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2828 row column role 101 0 273 

2023-07-03 11:29:33.746 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3370 

2023-07-03 11:29:33.746 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3010 

2023-07-03 11:29:33.746 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2829 row column role 101 0 274 

2023-07-03 11:29:33.746 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3371 

2023-07-03 11:29:33.746 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3011 

2023-07-03 11:29:33.746 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2830 row column role 101 0 275 

2023-07-03 11:29:33.766 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3372 

2023-07-03 11:29:33.766 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3012 

2023-07-03 11:29:33.766 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2831 row column role 102 0 257 

2023-07-03 11:29:33.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3373 

2023-07-03 11:29:33.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3013 

2023-07-03 11:29:33.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2832 row column role 102 0 258 

2023-07-03 11:29:33.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3374 

2023-07-03 11:29:33.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3014 

2023-07-03 11:29:33.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2833 row column role 102 0 259 

2023-07-03 11:29:33.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3375 

2023-07-03 11:29:33.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3015 

2023-07-03 11:29:33.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2834 row column role 102 0 260 

2023-07-03 11:29:33.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3376 

2023-07-03 11:29:33.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3016 

2023-07-03 11:29:33.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2835 row column role 102 0 261 

2023-07-03 11:29:33.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3377 

2023-07-03 11:29:33.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3017 

2023-07-03 11:29:33.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2836 row column role 102 0 262 

2023-07-03 11:29:33.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3378 

2023-07-03 11:29:33.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3018 

2023-07-03 11:29:33.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2837 row column role 102 0 263 

2023-07-03 11:29:33.769 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3379 

2023-07-03 11:29:33.769 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3019 

2023-07-03 11:29:33.769 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2838 row column role 102 0 264 

2023-07-03 11:29:33.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3380 

2023-07-03 11:29:33.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3020 

2023-07-03 11:29:33.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2839 row column role 102 0 265 

2023-07-03 11:29:33.770 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3381 

2023-07-03 11:29:33.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3021 

2023-07-03 11:29:33.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2840 row column role 102 0 266 

2023-07-03 11:29:33.771 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3382 

2023-07-03 11:29:33.771 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3022 

2023-07-03 11:29:33.771 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2841 row column role 102 0 267 

2023-07-03 11:29:33.771 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3383 

2023-07-03 11:29:33.771 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3023 

2023-07-03 11:29:33.771 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2842 row column role 102 0 268 

2023-07-03 11:29:33.771 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3384 

2023-07-03 11:29:33.772 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3024 

2023-07-03 11:29:33.772 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2843 row column role 102 0 269 

2023-07-03 11:29:33.772 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3385 

2023-07-03 11:29:33.772 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3025 

2023-07-03 11:29:33.772 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2844 row column role 102 0 270 

2023-07-03 11:29:33.772 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3386 

2023-07-03 11:29:33.772 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3026 

2023-07-03 11:29:33.772 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2845 row column role 102 0 271 

2023-07-03 11:29:33.773 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3387 

2023-07-03 11:29:33.773 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3027 

2023-07-03 11:29:33.773 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2846 row column role 102 0 272 

2023-07-03 11:29:33.773 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3388 

2023-07-03 11:29:33.773 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3028 

2023-07-03 11:29:33.773 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2847 row column role 102 0 273 

2023-07-03 11:29:33.773 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3389 

2023-07-03 11:29:33.774 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3029 

2023-07-03 11:29:33.774 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2848 row column role 102 0 274 

2023-07-03 11:29:33.774 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3390 

2023-07-03 11:29:33.774 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3030 

2023-07-03 11:29:33.774 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2849 row column role 102 0 275 

2023-07-03 11:29:33.775 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3391 

2023-07-03 11:29:33.775 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3031 

2023-07-03 11:29:33.775 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2850 row column role 103 0 257 

2023-07-03 11:29:33.776 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3392 

2023-07-03 11:29:33.777 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3032 

2023-07-03 11:29:33.777 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2851 row column role 103 0 258 

2023-07-03 11:29:33.777 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3393 

2023-07-03 11:29:33.777 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3033 

2023-07-03 11:29:33.777 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2852 row column role 103 0 259 

2023-07-03 11:29:33.777 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3394 

2023-07-03 11:29:33.777 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3034 

2023-07-03 11:29:33.777 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2853 row column role 103 0 260 

2023-07-03 11:29:33.777 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3395 

2023-07-03 11:29:33.777 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3035 

2023-07-03 11:29:33.777 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2854 row column role 103 0 261 

2023-07-03 11:29:33.778 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3396 

2023-07-03 11:29:33.778 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3036 

2023-07-03 11:29:33.778 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2855 row column role 103 0 262 

2023-07-03 11:29:33.779 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3397 

2023-07-03 11:29:33.779 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3037 

2023-07-03 11:29:33.779 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2856 row column role 103 0 263 

2023-07-03 11:29:33.779 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3398 

2023-07-03 11:29:33.779 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3038 

2023-07-03 11:29:33.779 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2857 row column role 103 0 264 

2023-07-03 11:29:33.779 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3399 

2023-07-03 11:29:33.779 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3039 

2023-07-03 11:29:33.779 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2858 row column role 103 0 265 

2023-07-03 11:29:33.779 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3400 

2023-07-03 11:29:33.779 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3040 

2023-07-03 11:29:33.781 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2859 row column role 103 0 266 

2023-07-03 11:29:33.781 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3401 

2023-07-03 11:29:33.781 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3041 

2023-07-03 11:29:33.781 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2860 row column role 103 0 267 

2023-07-03 11:29:33.781 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3402 

2023-07-03 11:29:33.781 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3042 

2023-07-03 11:29:33.782 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2861 row column role 103 0 268 

2023-07-03 11:29:33.782 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3403 

2023-07-03 11:29:33.782 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3043 

2023-07-03 11:29:33.782 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2862 row column role 103 0 269 

2023-07-03 11:29:33.782 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3404 

2023-07-03 11:29:33.783 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3044 

2023-07-03 11:29:33.783 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2863 row column role 103 0 270 

2023-07-03 11:29:33.783 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3405 

2023-07-03 11:29:33.783 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3045 

2023-07-03 11:29:33.783 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2864 row column role 103 0 271 

2023-07-03 11:29:33.783 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3406 

2023-07-03 11:29:33.783 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3046 

2023-07-03 11:29:33.783 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2865 row column role 103 0 272 

2023-07-03 11:29:33.784 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3407 

2023-07-03 11:29:33.784 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3047 

2023-07-03 11:29:33.784 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2866 row column role 103 0 273 

2023-07-03 11:29:33.784 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3408 

2023-07-03 11:29:33.784 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3048 

2023-07-03 11:29:33.784 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2867 row column role 103 0 274 

2023-07-03 11:29:33.784 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3409 

2023-07-03 11:29:33.784 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3049 

2023-07-03 11:29:33.784 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2868 row column role 103 0 275 

2023-07-03 11:29:33.822 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3410 

2023-07-03 11:29:33.822 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3050 

2023-07-03 11:29:33.822 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2869 row column role 104 0 257 

2023-07-03 11:29:33.822 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3411 

2023-07-03 11:29:33.822 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3051 

2023-07-03 11:29:33.822 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2870 row column role 104 0 258 

2023-07-03 11:29:33.823 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3412 

2023-07-03 11:29:33.823 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3052 

2023-07-03 11:29:33.823 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2871 row column role 104 0 259 

2023-07-03 11:29:33.823 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3413 

2023-07-03 11:29:33.823 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3053 

2023-07-03 11:29:33.823 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2872 row column role 104 0 260 

2023-07-03 11:29:33.823 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3414 

2023-07-03 11:29:33.823 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3054 

2023-07-03 11:29:33.823 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2873 row column role 104 0 261 

2023-07-03 11:29:33.823 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3415 

2023-07-03 11:29:33.823 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3055 

2023-07-03 11:29:33.824 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2874 row column role 104 0 262 

2023-07-03 11:29:33.824 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3416 

2023-07-03 11:29:33.824 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3056 

2023-07-03 11:29:33.824 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2875 row column role 104 0 263 

2023-07-03 11:29:33.824 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3417 

2023-07-03 11:29:33.824 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3057 

2023-07-03 11:29:33.824 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2876 row column role 104 0 264 

2023-07-03 11:29:33.824 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3418 

2023-07-03 11:29:33.824 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3058 

2023-07-03 11:29:33.824 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2877 row column role 104 0 265 

2023-07-03 11:29:33.824 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3419 

2023-07-03 11:29:33.824 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3059 

2023-07-03 11:29:33.825 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2878 row column role 104 0 266 

2023-07-03 11:29:33.825 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3420 

2023-07-03 11:29:33.825 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3060 

2023-07-03 11:29:33.825 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2879 row column role 104 0 267 

2023-07-03 11:29:33.825 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3421 

2023-07-03 11:29:33.825 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3061 

2023-07-03 11:29:33.825 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2880 row column role 104 0 268 

2023-07-03 11:29:33.825 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3422 

2023-07-03 11:29:33.825 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3062 

2023-07-03 11:29:33.825 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2881 row column role 104 0 269 

2023-07-03 11:29:33.825 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3423 

2023-07-03 11:29:33.826 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3063 

2023-07-03 11:29:33.826 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2882 row column role 104 0 270 

2023-07-03 11:29:33.826 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3424 

2023-07-03 11:29:33.826 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3064 

2023-07-03 11:29:33.826 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2883 row column role 104 0 271 

2023-07-03 11:29:33.826 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3425 

2023-07-03 11:29:33.826 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3065 

2023-07-03 11:29:33.826 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2884 row column role 104 0 272 

2023-07-03 11:29:33.826 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3426 

2023-07-03 11:29:33.826 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3066 

2023-07-03 11:29:33.826 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2885 row column role 104 0 273 

2023-07-03 11:29:33.826 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3427 

2023-07-03 11:29:33.826 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3067 

2023-07-03 11:29:33.826 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2886 row column role 104 0 274 

2023-07-03 11:29:33.827 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3428 

2023-07-03 11:29:33.827 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3068 

2023-07-03 11:29:33.827 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2887 row column role 104 0 275 

2023-07-03 11:29:33.858 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3429 

2023-07-03 11:29:33.858 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3069 

2023-07-03 11:29:33.858 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2888 row column role 105 0 257 

2023-07-03 11:29:33.859 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3430 

2023-07-03 11:29:33.859 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3070 

2023-07-03 11:29:33.859 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2889 row column role 105 0 258 

2023-07-03 11:29:33.859 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3431 

2023-07-03 11:29:33.859 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3071 

2023-07-03 11:29:33.859 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2890 row column role 105 0 259 

2023-07-03 11:29:33.859 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3432 

2023-07-03 11:29:33.859 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3072 

2023-07-03 11:29:33.859 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2891 row column role 105 0 260 

2023-07-03 11:29:33.860 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3433 

2023-07-03 11:29:33.860 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3073 

2023-07-03 11:29:33.860 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2892 row column role 105 0 261 

2023-07-03 11:29:33.860 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3434 

2023-07-03 11:29:33.860 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3074 

2023-07-03 11:29:33.860 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2893 row column role 105 0 262 

2023-07-03 11:29:33.860 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3435 

2023-07-03 11:29:33.860 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3075 

2023-07-03 11:29:33.860 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2894 row column role 105 0 263 

2023-07-03 11:29:33.860 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3436 

2023-07-03 11:29:33.860 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3076 

2023-07-03 11:29:33.860 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2895 row column role 105 0 264 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3437 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3077 

2023-07-03 11:29:33.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2896 row column role 105 0 265 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3438 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3078 

2023-07-03 11:29:33.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2897 row column role 105 0 266 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3439 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3079 

2023-07-03 11:29:33.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2898 row column role 105 0 267 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3440 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3080 

2023-07-03 11:29:33.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2899 row column role 105 0 268 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3441 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3081 

2023-07-03 11:29:33.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2900 row column role 105 0 269 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3442 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3082 

2023-07-03 11:29:33.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2901 row column role 105 0 270 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3443 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3083 

2023-07-03 11:29:33.861 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2902 row column role 105 0 271 

2023-07-03 11:29:33.861 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3444 

2023-07-03 11:29:33.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3084 

2023-07-03 11:29:33.862 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2903 row column role 105 0 272 

2023-07-03 11:29:33.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3445 

2023-07-03 11:29:33.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3085 

2023-07-03 11:29:33.862 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2904 row column role 105 0 273 

2023-07-03 11:29:33.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3446 

2023-07-03 11:29:33.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3086 

2023-07-03 11:29:33.862 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2905 row column role 105 0 274 

2023-07-03 11:29:33.862 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3447 

2023-07-03 11:29:33.862 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3087 

2023-07-03 11:29:33.862 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2906 row column role 105 0 275 

2023-07-03 11:29:33.900 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3448 

2023-07-03 11:29:33.900 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3088 

2023-07-03 11:29:33.900 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2907 row column role 106 0 257 

2023-07-03 11:29:33.901 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3449 

2023-07-03 11:29:33.901 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3089 

2023-07-03 11:29:33.901 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2908 row column role 106 0 258 

2023-07-03 11:29:33.901 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3450 

2023-07-03 11:29:33.901 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3090 

2023-07-03 11:29:33.901 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2909 row column role 106 0 259 

2023-07-03 11:29:33.901 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3451 

2023-07-03 11:29:33.901 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3091 

2023-07-03 11:29:33.901 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2910 row column role 106 0 260 

2023-07-03 11:29:33.901 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3452 

2023-07-03 11:29:33.901 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3092 

2023-07-03 11:29:33.901 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2911 row column role 106 0 261 

2023-07-03 11:29:33.902 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3453 

2023-07-03 11:29:33.902 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3093 

2023-07-03 11:29:33.902 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2912 row column role 106 0 262 

2023-07-03 11:29:33.902 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3454 

2023-07-03 11:29:33.902 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3094 

2023-07-03 11:29:33.902 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2913 row column role 106 0 263 

2023-07-03 11:29:33.902 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3455 

2023-07-03 11:29:33.902 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3095 

2023-07-03 11:29:33.902 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2914 row column role 106 0 264 

2023-07-03 11:29:33.902 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3456 

2023-07-03 11:29:33.902 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3096 

2023-07-03 11:29:33.903 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2915 row column role 106 0 265 

2023-07-03 11:29:33.903 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3457 

2023-07-03 11:29:33.903 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3097 

2023-07-03 11:29:33.903 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2916 row column role 106 0 266 

2023-07-03 11:29:33.903 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3458 

2023-07-03 11:29:33.903 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3098 

2023-07-03 11:29:33.903 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2917 row column role 106 0 267 

2023-07-03 11:29:33.903 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3459 

2023-07-03 11:29:33.903 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3099 

2023-07-03 11:29:33.904 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2918 row column role 106 0 268 

2023-07-03 11:29:33.904 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3460 

2023-07-03 11:29:33.904 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3100 

2023-07-03 11:29:33.904 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2919 row column role 106 0 269 

2023-07-03 11:29:33.904 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3461 

2023-07-03 11:29:33.904 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3101 

2023-07-03 11:29:33.904 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2920 row column role 106 0 270 

2023-07-03 11:29:33.904 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3462 

2023-07-03 11:29:33.904 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3102 

2023-07-03 11:29:33.904 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2921 row column role 106 0 271 

2023-07-03 11:29:33.905 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3463 

2023-07-03 11:29:33.905 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3103 

2023-07-03 11:29:33.905 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2922 row column role 106 0 272 

2023-07-03 11:29:33.905 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3464 

2023-07-03 11:29:33.905 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3104 

2023-07-03 11:29:33.905 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2923 row column role 106 0 273 

2023-07-03 11:29:33.905 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3465 

2023-07-03 11:29:33.905 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3105 

2023-07-03 11:29:33.905 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2924 row column role 106 0 274 

2023-07-03 11:29:33.905 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3466 

2023-07-03 11:29:33.905 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3106 

2023-07-03 11:29:33.905 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2925 row column role 106 0 275 

2023-07-03 11:29:33.942 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3467 

2023-07-03 11:29:33.943 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3107 

2023-07-03 11:29:33.943 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2926 row column role 107 0 257 

2023-07-03 11:29:33.943 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3468 

2023-07-03 11:29:33.943 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3108 

2023-07-03 11:29:33.943 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2927 row column role 107 0 258 

2023-07-03 11:29:33.943 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3469 

2023-07-03 11:29:33.943 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3109 

2023-07-03 11:29:33.943 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2928 row column role 107 0 259 

2023-07-03 11:29:33.944 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3470 

2023-07-03 11:29:33.944 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3110 

2023-07-03 11:29:33.944 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2929 row column role 107 0 260 

2023-07-03 11:29:33.944 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3471 

2023-07-03 11:29:33.944 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3111 

2023-07-03 11:29:33.944 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2930 row column role 107 0 261 

2023-07-03 11:29:33.944 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3472 

2023-07-03 11:29:33.944 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3112 

2023-07-03 11:29:33.944 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2931 row column role 107 0 262 

2023-07-03 11:29:33.945 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3473 

2023-07-03 11:29:33.945 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3113 

2023-07-03 11:29:33.945 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2932 row column role 107 0 263 

2023-07-03 11:29:33.945 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3474 

2023-07-03 11:29:33.945 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3114 

2023-07-03 11:29:33.945 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2933 row column role 107 0 264 

2023-07-03 11:29:33.945 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3475 

2023-07-03 11:29:33.945 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3115 

2023-07-03 11:29:33.945 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2934 row column role 107 0 265 

2023-07-03 11:29:33.946 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3476 

2023-07-03 11:29:33.946 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3116 

2023-07-03 11:29:33.946 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2935 row column role 107 0 266 

2023-07-03 11:29:33.946 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3477 

2023-07-03 11:29:33.946 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3117 

2023-07-03 11:29:33.946 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2936 row column role 107 0 267 

2023-07-03 11:29:33.947 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3478 

2023-07-03 11:29:33.947 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3118 

2023-07-03 11:29:33.947 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2937 row column role 107 0 268 

2023-07-03 11:29:33.947 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3479 

2023-07-03 11:29:33.947 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3119 

2023-07-03 11:29:33.947 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2938 row column role 107 0 269 

2023-07-03 11:29:33.947 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3480 

2023-07-03 11:29:33.947 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3120 

2023-07-03 11:29:33.947 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2939 row column role 107 0 270 

2023-07-03 11:29:33.948 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3481 

2023-07-03 11:29:33.948 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3121 

2023-07-03 11:29:33.948 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2940 row column role 107 0 271 

2023-07-03 11:29:33.948 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3482 

2023-07-03 11:29:33.948 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3122 

2023-07-03 11:29:33.948 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2941 row column role 107 0 272 

2023-07-03 11:29:33.948 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3483 

2023-07-03 11:29:33.948 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3123 

2023-07-03 11:29:33.948 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2942 row column role 107 0 273 

2023-07-03 11:29:33.948 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3484 

2023-07-03 11:29:33.949 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3124 

2023-07-03 11:29:33.949 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2943 row column role 107 0 274 

2023-07-03 11:29:33.949 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3485 

2023-07-03 11:29:33.949 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3125 

2023-07-03 11:29:33.949 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2944 row column role 107 0 275 

2023-07-03 11:29:33.983 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3486 

2023-07-03 11:29:33.983 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3126 

2023-07-03 11:29:33.983 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2945 row column role 108 0 257 

2023-07-03 11:29:33.984 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3487 

2023-07-03 11:29:33.984 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3127 

2023-07-03 11:29:33.984 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2946 row column role 108 0 258 

2023-07-03 11:29:33.984 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3488 

2023-07-03 11:29:33.984 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3128 

2023-07-03 11:29:33.984 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2947 row column role 108 0 259 

2023-07-03 11:29:33.984 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3489 

2023-07-03 11:29:33.984 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3129 

2023-07-03 11:29:33.985 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2948 row column role 108 0 260 

2023-07-03 11:29:33.985 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3490 

2023-07-03 11:29:33.985 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3130 

2023-07-03 11:29:33.985 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2949 row column role 108 0 261 

2023-07-03 11:29:33.985 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3491 

2023-07-03 11:29:33.985 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3131 

2023-07-03 11:29:33.985 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2950 row column role 108 0 262 

2023-07-03 11:29:33.985 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3492 

2023-07-03 11:29:33.986 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3132 

2023-07-03 11:29:33.986 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2951 row column role 108 0 263 

2023-07-03 11:29:33.986 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3493 

2023-07-03 11:29:33.986 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3133 

2023-07-03 11:29:33.986 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2952 row column role 108 0 264 

2023-07-03 11:29:33.986 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3494 

2023-07-03 11:29:33.986 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3134 

2023-07-03 11:29:33.986 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2953 row column role 108 0 265 

2023-07-03 11:29:33.987 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3495 

2023-07-03 11:29:33.987 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3135 

2023-07-03 11:29:33.987 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2954 row column role 108 0 266 

2023-07-03 11:29:33.987 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3496 

2023-07-03 11:29:33.987 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3136 

2023-07-03 11:29:33.987 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2955 row column role 108 0 267 

2023-07-03 11:29:33.987 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3497 

2023-07-03 11:29:33.987 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3137 

2023-07-03 11:29:33.987 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2956 row column role 108 0 268 

2023-07-03 11:29:33.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3498 

2023-07-03 11:29:33.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3138 

2023-07-03 11:29:33.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2957 row column role 108 0 269 

2023-07-03 11:29:33.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3499 

2023-07-03 11:29:33.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3139 

2023-07-03 11:29:33.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2958 row column role 108 0 270 

2023-07-03 11:29:33.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3500 

2023-07-03 11:29:33.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3140 

2023-07-03 11:29:33.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2959 row column role 108 0 271 

2023-07-03 11:29:33.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3501 

2023-07-03 11:29:33.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3141 

2023-07-03 11:29:33.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2960 row column role 108 0 272 

2023-07-03 11:29:33.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3502 

2023-07-03 11:29:33.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3142 

2023-07-03 11:29:33.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2961 row column role 108 0 273 

2023-07-03 11:29:33.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3503 

2023-07-03 11:29:33.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3143 

2023-07-03 11:29:33.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2962 row column role 108 0 274 

2023-07-03 11:29:33.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3504 

2023-07-03 11:29:33.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3144 

2023-07-03 11:29:33.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2963 row column role 108 0 275 

2023-07-03 11:29:34.108 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3505 

2023-07-03 11:29:34.108 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3145 

2023-07-03 11:29:34.108 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2964 row column role 109 0 257 

2023-07-03 11:29:34.109 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3506 

2023-07-03 11:29:34.109 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3146 

2023-07-03 11:29:34.109 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2965 row column role 109 0 258 

2023-07-03 11:29:34.109 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3507 

2023-07-03 11:29:34.109 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3147 

2023-07-03 11:29:34.109 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2966 row column role 109 0 259 

2023-07-03 11:29:34.109 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3508 

2023-07-03 11:29:34.109 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3148 

2023-07-03 11:29:34.109 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2967 row column role 109 0 260 

2023-07-03 11:29:34.109 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3509 

2023-07-03 11:29:34.109 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3149 

2023-07-03 11:29:34.109 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2968 row column role 109 0 261 

2023-07-03 11:29:34.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3510 

2023-07-03 11:29:34.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3150 

2023-07-03 11:29:34.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2969 row column role 109 0 262 

2023-07-03 11:29:34.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3511 

2023-07-03 11:29:34.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3151 

2023-07-03 11:29:34.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2970 row column role 109 0 263 

2023-07-03 11:29:34.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3512 

2023-07-03 11:29:34.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3152 

2023-07-03 11:29:34.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2971 row column role 109 0 264 

2023-07-03 11:29:34.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3513 

2023-07-03 11:29:34.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3153 

2023-07-03 11:29:34.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2972 row column role 109 0 265 

2023-07-03 11:29:34.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3514 

2023-07-03 11:29:34.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3154 

2023-07-03 11:29:34.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2973 row column role 109 0 266 

2023-07-03 11:29:34.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3515 

2023-07-03 11:29:34.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3155 

2023-07-03 11:29:34.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2974 row column role 109 0 267 

2023-07-03 11:29:34.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3516 

2023-07-03 11:29:34.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3156 

2023-07-03 11:29:34.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2975 row column role 109 0 268 

2023-07-03 11:29:34.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3517 

2023-07-03 11:29:34.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3157 

2023-07-03 11:29:34.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2976 row column role 109 0 269 

2023-07-03 11:29:34.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3518 

2023-07-03 11:29:34.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3158 

2023-07-03 11:29:34.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2977 row column role 109 0 270 

2023-07-03 11:29:34.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3519 

2023-07-03 11:29:34.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3159 

2023-07-03 11:29:34.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2978 row column role 109 0 271 

2023-07-03 11:29:34.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3520 

2023-07-03 11:29:34.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3160 

2023-07-03 11:29:34.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2979 row column role 109 0 272 

2023-07-03 11:29:34.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3521 

2023-07-03 11:29:34.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3161 

2023-07-03 11:29:34.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2980 row column role 109 0 273 

2023-07-03 11:29:34.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3522 

2023-07-03 11:29:34.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3162 

2023-07-03 11:29:34.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2981 row column role 109 0 274 

2023-07-03 11:29:34.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3523 

2023-07-03 11:29:34.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3163 

2023-07-03 11:29:34.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2982 row column role 109 0 275 

2023-07-03 11:29:35.490 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3524 

2023-07-03 11:29:35.490 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3164 

2023-07-03 11:29:35.490 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2983 row column role 110 0 257 

2023-07-03 11:29:35.490 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3525 

2023-07-03 11:29:35.491 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3165 

2023-07-03 11:29:35.491 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2984 row column role 110 0 258 

2023-07-03 11:29:35.491 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3526 

2023-07-03 11:29:35.491 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3166 

2023-07-03 11:29:35.491 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2985 row column role 110 0 259 

2023-07-03 11:29:35.491 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3527 

2023-07-03 11:29:35.491 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3167 

2023-07-03 11:29:35.491 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2986 row column role 110 0 260 

2023-07-03 11:29:35.491 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3528 

2023-07-03 11:29:35.491 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3168 

2023-07-03 11:29:35.491 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2987 row column role 110 0 261 

2023-07-03 11:29:35.491 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3529 

2023-07-03 11:29:35.491 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3169 

2023-07-03 11:29:35.491 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2988 row column role 110 0 262 

2023-07-03 11:29:35.492 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3530 

2023-07-03 11:29:35.492 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3170 

2023-07-03 11:29:35.492 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2989 row column role 110 0 263 

2023-07-03 11:29:35.492 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3531 

2023-07-03 11:29:35.492 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3171 

2023-07-03 11:29:35.492 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2990 row column role 110 0 264 

2023-07-03 11:29:35.492 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3532 

2023-07-03 11:29:35.492 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3172 

2023-07-03 11:29:35.492 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2991 row column role 110 0 265 

2023-07-03 11:29:35.492 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3533 

2023-07-03 11:29:35.492 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3173 

2023-07-03 11:29:35.492 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2992 row column role 110 0 266 

2023-07-03 11:29:35.492 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3534 

2023-07-03 11:29:35.492 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3174 

2023-07-03 11:29:35.492 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2993 row column role 110 0 267 

2023-07-03 11:29:35.493 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3535 

2023-07-03 11:29:35.493 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3175 

2023-07-03 11:29:35.493 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2994 row column role 110 0 268 

2023-07-03 11:29:35.493 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3536 

2023-07-03 11:29:35.493 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3176 

2023-07-03 11:29:35.493 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2995 row column role 110 0 269 

2023-07-03 11:29:35.493 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3537 

2023-07-03 11:29:35.493 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3177 

2023-07-03 11:29:35.493 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2996 row column role 110 0 270 

2023-07-03 11:29:35.493 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3538 

2023-07-03 11:29:35.493 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3178 

2023-07-03 11:29:35.493 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2997 row column role 110 0 271 

2023-07-03 11:29:35.493 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3539 

2023-07-03 11:29:35.493 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3179 

2023-07-03 11:29:35.493 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2998 row column role 110 0 272 

2023-07-03 11:29:35.493 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3540 

2023-07-03 11:29:35.493 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3180 

2023-07-03 11:29:35.493 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 2999 row column role 110 0 273 

2023-07-03 11:29:35.494 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3541 

2023-07-03 11:29:35.494 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3181 

2023-07-03 11:29:35.494 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3000 row column role 110 0 274 

2023-07-03 11:29:35.494 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3542 

2023-07-03 11:29:35.494 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3182 

2023-07-03 11:29:35.494 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3001 row column role 110 0 275 

2023-07-03 11:29:35.494 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3543 

2023-07-03 11:29:35.494 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3183 

2023-07-03 11:29:35.494 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3002 row column role 111 0 257 

2023-07-03 11:29:35.494 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3544 

2023-07-03 11:29:35.495 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3184 

2023-07-03 11:29:35.495 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3003 row column role 111 0 258 

2023-07-03 11:29:35.495 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3545 

2023-07-03 11:29:35.495 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3185 

2023-07-03 11:29:35.495 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3004 row column role 111 0 259 

2023-07-03 11:29:35.495 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3546 

2023-07-03 11:29:35.495 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3186 

2023-07-03 11:29:35.495 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3005 row column role 111 0 260 

2023-07-03 11:29:35.495 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3547 

2023-07-03 11:29:35.495 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3187 

2023-07-03 11:29:35.495 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3006 row column role 111 0 261 

2023-07-03 11:29:35.495 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3548 

2023-07-03 11:29:35.495 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3188 

2023-07-03 11:29:35.495 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3007 row column role 111 0 262 

2023-07-03 11:29:35.495 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3549 

2023-07-03 11:29:35.496 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3189 

2023-07-03 11:29:35.496 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3008 row column role 111 0 263 

2023-07-03 11:29:35.496 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3550 

2023-07-03 11:29:35.496 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3190 

2023-07-03 11:29:35.496 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3009 row column role 111 0 264 

2023-07-03 11:29:35.496 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3551 

2023-07-03 11:29:35.496 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3191 

2023-07-03 11:29:35.496 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3010 row column role 111 0 265 

2023-07-03 11:29:35.496 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3552 

2023-07-03 11:29:35.496 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3192 

2023-07-03 11:29:35.496 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3011 row column role 111 0 266 

2023-07-03 11:29:35.496 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3553 

2023-07-03 11:29:35.496 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3193 

2023-07-03 11:29:35.496 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3012 row column role 111 0 267 

2023-07-03 11:29:35.496 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3554 

2023-07-03 11:29:35.496 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3194 

2023-07-03 11:29:35.497 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3013 row column role 111 0 268 

2023-07-03 11:29:35.497 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3555 

2023-07-03 11:29:35.497 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3195 

2023-07-03 11:29:35.497 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3014 row column role 111 0 269 

2023-07-03 11:29:35.497 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3556 

2023-07-03 11:29:35.497 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3196 

2023-07-03 11:29:35.497 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3015 row column role 111 0 270 

2023-07-03 11:29:35.497 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3557 

2023-07-03 11:29:35.497 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3197 

2023-07-03 11:29:35.497 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3016 row column role 111 0 271 

2023-07-03 11:29:35.497 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3558 

2023-07-03 11:29:35.497 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3198 

2023-07-03 11:29:35.497 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3017 row column role 111 0 272 

2023-07-03 11:29:35.497 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3559 

2023-07-03 11:29:35.497 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3199 

2023-07-03 11:29:35.497 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3018 row column role 111 0 273 

2023-07-03 11:29:35.497 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3560 

2023-07-03 11:29:35.498 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3200 

2023-07-03 11:29:35.498 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3019 row column role 111 0 274 

2023-07-03 11:29:35.498 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3561 

2023-07-03 11:29:35.498 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3201 

2023-07-03 11:29:35.498 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3020 row column role 111 0 275 

2023-07-03 11:29:35.525 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3562 

2023-07-03 11:29:35.526 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3202 

2023-07-03 11:29:35.526 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3021 row column role 112 0 257 

2023-07-03 11:29:35.526 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3563 

2023-07-03 11:29:35.526 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3203 

2023-07-03 11:29:35.526 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3022 row column role 112 0 258 

2023-07-03 11:29:35.526 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3564 

2023-07-03 11:29:35.526 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3204 

2023-07-03 11:29:35.526 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3023 row column role 112 0 259 

2023-07-03 11:29:35.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3565 

2023-07-03 11:29:35.527 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3205 

2023-07-03 11:29:35.527 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3024 row column role 112 0 260 

2023-07-03 11:29:35.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3566 

2023-07-03 11:29:35.527 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3206 

2023-07-03 11:29:35.527 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3025 row column role 112 0 261 

2023-07-03 11:29:35.527 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3567 

2023-07-03 11:29:35.528 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3207 

2023-07-03 11:29:35.528 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3026 row column role 112 0 262 

2023-07-03 11:29:35.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3568 

2023-07-03 11:29:35.528 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3208 

2023-07-03 11:29:35.528 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3027 row column role 112 0 263 

2023-07-03 11:29:35.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3569 

2023-07-03 11:29:35.528 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3209 

2023-07-03 11:29:35.529 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3028 row column role 112 0 264 

2023-07-03 11:29:35.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3570 

2023-07-03 11:29:35.529 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3210 

2023-07-03 11:29:35.529 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3029 row column role 112 0 265 

2023-07-03 11:29:35.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3571 

2023-07-03 11:29:35.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3211 

2023-07-03 11:29:35.530 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3030 row column role 112 0 266 

2023-07-03 11:29:35.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3572 

2023-07-03 11:29:35.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3212 

2023-07-03 11:29:35.530 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3031 row column role 112 0 267 

2023-07-03 11:29:35.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3573 

2023-07-03 11:29:35.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3213 

2023-07-03 11:29:35.531 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3032 row column role 112 0 268 

2023-07-03 11:29:35.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3574 

2023-07-03 11:29:35.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3214 

2023-07-03 11:29:35.531 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3033 row column role 112 0 269 

2023-07-03 11:29:35.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3575 

2023-07-03 11:29:35.532 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3215 

2023-07-03 11:29:35.532 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3034 row column role 112 0 270 

2023-07-03 11:29:35.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3576 

2023-07-03 11:29:35.532 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3216 

2023-07-03 11:29:35.532 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3035 row column role 112 0 271 

2023-07-03 11:29:35.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3577 

2023-07-03 11:29:35.533 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3217 

2023-07-03 11:29:35.533 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3036 row column role 112 0 272 

2023-07-03 11:29:35.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3578 

2023-07-03 11:29:35.533 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3218 

2023-07-03 11:29:35.533 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3037 row column role 112 0 273 

2023-07-03 11:29:35.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3579 

2023-07-03 11:29:35.534 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3219 

2023-07-03 11:29:35.534 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3038 row column role 112 0 274 

2023-07-03 11:29:35.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3580 

2023-07-03 11:29:35.534 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3220 

2023-07-03 11:29:35.534 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3039 row column role 112 0 275 

2023-07-03 11:29:35.570 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3581 

2023-07-03 11:29:35.570 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3221 

2023-07-03 11:29:35.570 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3040 row column role 113 0 257 

2023-07-03 11:29:35.571 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3582 

2023-07-03 11:29:35.571 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3222 

2023-07-03 11:29:35.571 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3041 row column role 113 0 258 

2023-07-03 11:29:35.571 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3583 

2023-07-03 11:29:35.572 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3223 

2023-07-03 11:29:35.572 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3042 row column role 113 0 259 

2023-07-03 11:29:35.572 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3584 

2023-07-03 11:29:35.572 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3224 

2023-07-03 11:29:35.572 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3043 row column role 113 0 260 

2023-07-03 11:29:35.573 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3585 

2023-07-03 11:29:35.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3225 

2023-07-03 11:29:35.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3044 row column role 113 0 261 

2023-07-03 11:29:35.573 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3586 

2023-07-03 11:29:35.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3226 

2023-07-03 11:29:35.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3045 row column role 113 0 262 

2023-07-03 11:29:35.574 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3587 

2023-07-03 11:29:35.574 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3227 

2023-07-03 11:29:35.574 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3046 row column role 113 0 263 

2023-07-03 11:29:35.574 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3588 

2023-07-03 11:29:35.574 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3228 

2023-07-03 11:29:35.574 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3047 row column role 113 0 264 

2023-07-03 11:29:35.575 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3589 

2023-07-03 11:29:35.575 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3229 

2023-07-03 11:29:35.575 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3048 row column role 113 0 265 

2023-07-03 11:29:35.575 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3590 

2023-07-03 11:29:35.575 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3230 

2023-07-03 11:29:35.575 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3049 row column role 113 0 266 

2023-07-03 11:29:35.576 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3591 

2023-07-03 11:29:35.576 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3231 

2023-07-03 11:29:35.576 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3050 row column role 113 0 267 

2023-07-03 11:29:35.576 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3592 

2023-07-03 11:29:35.576 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3232 

2023-07-03 11:29:35.576 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3051 row column role 113 0 268 

2023-07-03 11:29:35.577 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3593 

2023-07-03 11:29:35.577 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3233 

2023-07-03 11:29:35.577 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3052 row column role 113 0 269 

2023-07-03 11:29:35.577 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3594 

2023-07-03 11:29:35.577 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3234 

2023-07-03 11:29:35.577 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3053 row column role 113 0 270 

2023-07-03 11:29:35.578 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3595 

2023-07-03 11:29:35.578 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3235 

2023-07-03 11:29:35.578 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3054 row column role 113 0 271 

2023-07-03 11:29:35.578 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3596 

2023-07-03 11:29:35.578 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3236 

2023-07-03 11:29:35.578 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3055 row column role 113 0 272 

2023-07-03 11:29:35.578 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3597 

2023-07-03 11:29:35.578 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3237 

2023-07-03 11:29:35.579 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3056 row column role 113 0 273 

2023-07-03 11:29:35.579 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3598 

2023-07-03 11:29:35.579 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3238 

2023-07-03 11:29:35.579 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3057 row column role 113 0 274 

2023-07-03 11:29:35.579 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3599 

2023-07-03 11:29:35.579 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3239 

2023-07-03 11:29:35.579 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3058 row column role 113 0 275 

2023-07-03 11:29:35.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3600 

2023-07-03 11:29:35.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3240 

2023-07-03 11:29:35.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3059 row column role 114 0 257 

2023-07-03 11:29:35.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3601 

2023-07-03 11:29:35.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3241 

2023-07-03 11:29:35.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3060 row column role 114 0 258 

2023-07-03 11:29:35.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3602 

2023-07-03 11:29:35.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3242 

2023-07-03 11:29:35.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3061 row column role 114 0 259 

2023-07-03 11:29:35.635 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3603 

2023-07-03 11:29:35.635 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3243 

2023-07-03 11:29:35.635 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3062 row column role 114 0 260 

2023-07-03 11:29:35.636 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3604 

2023-07-03 11:29:35.636 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3244 

2023-07-03 11:29:35.636 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3063 row column role 114 0 261 

2023-07-03 11:29:35.636 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3605 

2023-07-03 11:29:35.636 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3245 

2023-07-03 11:29:35.636 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3064 row column role 114 0 262 

2023-07-03 11:29:35.637 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3606 

2023-07-03 11:29:35.637 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3246 

2023-07-03 11:29:35.637 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3065 row column role 114 0 263 

2023-07-03 11:29:35.638 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3607 

2023-07-03 11:29:35.638 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3247 

2023-07-03 11:29:35.638 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3066 row column role 114 0 264 

2023-07-03 11:29:35.638 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3608 

2023-07-03 11:29:35.638 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3248 

2023-07-03 11:29:35.638 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3067 row column role 114 0 265 

2023-07-03 11:29:35.638 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3609 

2023-07-03 11:29:35.639 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3249 

2023-07-03 11:29:35.639 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3068 row column role 114 0 266 

2023-07-03 11:29:35.639 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3610 

2023-07-03 11:29:35.639 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3250 

2023-07-03 11:29:35.639 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3069 row column role 114 0 267 

2023-07-03 11:29:35.639 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3611 

2023-07-03 11:29:35.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3251 

2023-07-03 11:29:35.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3070 row column role 114 0 268 

2023-07-03 11:29:35.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3612 

2023-07-03 11:29:35.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3252 

2023-07-03 11:29:35.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3071 row column role 114 0 269 

2023-07-03 11:29:35.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3613 

2023-07-03 11:29:35.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3253 

2023-07-03 11:29:35.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3072 row column role 114 0 270 

2023-07-03 11:29:35.641 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3614 

2023-07-03 11:29:35.641 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3254 

2023-07-03 11:29:35.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3073 row column role 114 0 271 

2023-07-03 11:29:35.641 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3615 

2023-07-03 11:29:35.641 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3255 

2023-07-03 11:29:35.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3074 row column role 114 0 272 

2023-07-03 11:29:35.642 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3616 

2023-07-03 11:29:35.642 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3256 

2023-07-03 11:29:35.642 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3075 row column role 114 0 273 

2023-07-03 11:29:35.642 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3617 

2023-07-03 11:29:35.642 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3257 

2023-07-03 11:29:35.642 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3076 row column role 114 0 274 

2023-07-03 11:29:35.642 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3618 

2023-07-03 11:29:35.642 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3258 

2023-07-03 11:29:35.642 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3077 row column role 114 0 275 

2023-07-03 11:29:35.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3619 

2023-07-03 11:29:35.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3259 

2023-07-03 11:29:35.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3078 row column role 115 0 257 

2023-07-03 11:29:35.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3620 

2023-07-03 11:29:35.676 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3260 

2023-07-03 11:29:35.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3079 row column role 115 0 258 

2023-07-03 11:29:35.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3621 

2023-07-03 11:29:35.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3261 

2023-07-03 11:29:35.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3080 row column role 115 0 259 

2023-07-03 11:29:35.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3622 

2023-07-03 11:29:35.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3262 

2023-07-03 11:29:35.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3081 row column role 115 0 260 

2023-07-03 11:29:35.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3623 

2023-07-03 11:29:35.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3263 

2023-07-03 11:29:35.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3082 row column role 115 0 261 

2023-07-03 11:29:35.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3624 

2023-07-03 11:29:35.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3264 

2023-07-03 11:29:35.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3083 row column role 115 0 262 

2023-07-03 11:29:35.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3625 

2023-07-03 11:29:35.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3265 

2023-07-03 11:29:35.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3084 row column role 115 0 263 

2023-07-03 11:29:35.679 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3626 

2023-07-03 11:29:35.679 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3266 

2023-07-03 11:29:35.679 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3085 row column role 115 0 264 

2023-07-03 11:29:35.679 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3627 

2023-07-03 11:29:35.679 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3267 

2023-07-03 11:29:35.679 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3086 row column role 115 0 265 

2023-07-03 11:29:35.680 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3628 

2023-07-03 11:29:35.680 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3268 

2023-07-03 11:29:35.680 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3087 row column role 115 0 266 

2023-07-03 11:29:35.680 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3629 

2023-07-03 11:29:35.680 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3269 

2023-07-03 11:29:35.680 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3088 row column role 115 0 267 

2023-07-03 11:29:35.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3630 

2023-07-03 11:29:35.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3270 

2023-07-03 11:29:35.681 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3089 row column role 115 0 268 

2023-07-03 11:29:35.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3631 

2023-07-03 11:29:35.681 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3271 

2023-07-03 11:29:35.681 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3090 row column role 115 0 269 

2023-07-03 11:29:35.681 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3632 

2023-07-03 11:29:35.682 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3272 

2023-07-03 11:29:35.682 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3091 row column role 115 0 270 

2023-07-03 11:29:35.682 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3633 

2023-07-03 11:29:35.682 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3273 

2023-07-03 11:29:35.682 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3092 row column role 115 0 271 

2023-07-03 11:29:35.682 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3634 

2023-07-03 11:29:35.682 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3274 

2023-07-03 11:29:35.682 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3093 row column role 115 0 272 

2023-07-03 11:29:35.683 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3635 

2023-07-03 11:29:35.683 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3275 

2023-07-03 11:29:35.683 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3094 row column role 115 0 273 

2023-07-03 11:29:35.683 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3636 

2023-07-03 11:29:35.683 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3276 

2023-07-03 11:29:35.683 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3095 row column role 115 0 274 

2023-07-03 11:29:35.683 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3637 

2023-07-03 11:29:35.684 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3277 

2023-07-03 11:29:35.684 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3096 row column role 115 0 275 

2023-07-03 11:29:35.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3638 

2023-07-03 11:29:35.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3278 

2023-07-03 11:29:35.736 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3097 row column role 116 0 257 

2023-07-03 11:29:35.736 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3639 

2023-07-03 11:29:35.736 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3279 

2023-07-03 11:29:35.736 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3098 row column role 116 0 258 

2023-07-03 11:29:35.736 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3640 

2023-07-03 11:29:35.737 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3280 

2023-07-03 11:29:35.737 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3099 row column role 116 0 259 

2023-07-03 11:29:35.737 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3641 

2023-07-03 11:29:35.737 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3281 

2023-07-03 11:29:35.737 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3100 row column role 116 0 260 

2023-07-03 11:29:35.737 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3642 

2023-07-03 11:29:35.737 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3282 

2023-07-03 11:29:35.737 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3101 row column role 116 0 261 

2023-07-03 11:29:35.738 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3643 

2023-07-03 11:29:35.738 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3283 

2023-07-03 11:29:35.738 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3102 row column role 116 0 262 

2023-07-03 11:29:35.738 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3644 

2023-07-03 11:29:35.738 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3284 

2023-07-03 11:29:35.738 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3103 row column role 116 0 263 

2023-07-03 11:29:35.739 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3645 

2023-07-03 11:29:35.739 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3285 

2023-07-03 11:29:35.739 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3104 row column role 116 0 264 

2023-07-03 11:29:35.739 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3646 

2023-07-03 11:29:35.739 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3286 

2023-07-03 11:29:35.739 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3105 row column role 116 0 265 

2023-07-03 11:29:35.740 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3647 

2023-07-03 11:29:35.740 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3287 

2023-07-03 11:29:35.740 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3106 row column role 116 0 266 

2023-07-03 11:29:35.740 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3648 

2023-07-03 11:29:35.740 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3288 

2023-07-03 11:29:35.740 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3107 row column role 116 0 267 

2023-07-03 11:29:35.741 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3649 

2023-07-03 11:29:35.741 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3289 

2023-07-03 11:29:35.741 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3108 row column role 116 0 268 

2023-07-03 11:29:35.741 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3650 

2023-07-03 11:29:35.741 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3290 

2023-07-03 11:29:35.741 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3109 row column role 116 0 269 

2023-07-03 11:29:35.742 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3651 

2023-07-03 11:29:35.742 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3291 

2023-07-03 11:29:35.742 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3110 row column role 116 0 270 

2023-07-03 11:29:35.742 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3652 

2023-07-03 11:29:35.742 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3292 

2023-07-03 11:29:35.742 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3111 row column role 116 0 271 

2023-07-03 11:29:35.742 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3653 

2023-07-03 11:29:35.743 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3293 

2023-07-03 11:29:35.743 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3112 row column role 116 0 272 

2023-07-03 11:29:35.743 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3654 

2023-07-03 11:29:35.743 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3294 

2023-07-03 11:29:35.743 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3113 row column role 116 0 273 

2023-07-03 11:29:35.743 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3655 

2023-07-03 11:29:35.743 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3295 

2023-07-03 11:29:35.743 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3114 row column role 116 0 274 

2023-07-03 11:29:35.743 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3656 

2023-07-03 11:29:35.743 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3296 

2023-07-03 11:29:35.743 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3115 row column role 116 0 275 

2023-07-03 11:29:36.962 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3657 

2023-07-03 11:29:36.962 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3297 

2023-07-03 11:29:36.962 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3116 row column role 117 0 257 

2023-07-03 11:29:36.963 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3658 

2023-07-03 11:29:36.963 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3298 

2023-07-03 11:29:36.963 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3117 row column role 117 0 258 

2023-07-03 11:29:36.963 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3659 

2023-07-03 11:29:36.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3299 

2023-07-03 11:29:36.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3118 row column role 117 0 259 

2023-07-03 11:29:36.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3660 

2023-07-03 11:29:36.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3300 

2023-07-03 11:29:36.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3119 row column role 117 0 260 

2023-07-03 11:29:36.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3661 

2023-07-03 11:29:36.965 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3301 

2023-07-03 11:29:36.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3120 row column role 117 0 261 

2023-07-03 11:29:36.965 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3662 

2023-07-03 11:29:36.965 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3302 

2023-07-03 11:29:36.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3121 row column role 117 0 262 

2023-07-03 11:29:36.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3663 

2023-07-03 11:29:36.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3303 

2023-07-03 11:29:36.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3122 row column role 117 0 263 

2023-07-03 11:29:36.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3664 

2023-07-03 11:29:36.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3304 

2023-07-03 11:29:36.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3123 row column role 117 0 264 

2023-07-03 11:29:36.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3665 

2023-07-03 11:29:36.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3305 

2023-07-03 11:29:36.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3124 row column role 117 0 265 

2023-07-03 11:29:36.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3666 

2023-07-03 11:29:36.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3306 

2023-07-03 11:29:36.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3125 row column role 117 0 266 

2023-07-03 11:29:36.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3667 

2023-07-03 11:29:36.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3307 

2023-07-03 11:29:36.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3126 row column role 117 0 267 

2023-07-03 11:29:36.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3668 

2023-07-03 11:29:36.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3308 

2023-07-03 11:29:36.968 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3127 row column role 117 0 268 

2023-07-03 11:29:36.969 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3669 

2023-07-03 11:29:36.969 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3309 

2023-07-03 11:29:36.969 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3128 row column role 117 0 269 

2023-07-03 11:29:36.969 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3670 

2023-07-03 11:29:36.969 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3310 

2023-07-03 11:29:36.969 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3129 row column role 117 0 270 

2023-07-03 11:29:36.969 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3671 

2023-07-03 11:29:36.969 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3311 

2023-07-03 11:29:36.969 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3130 row column role 117 0 271 

2023-07-03 11:29:36.969 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3672 

2023-07-03 11:29:36.970 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3312 

2023-07-03 11:29:36.970 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3131 row column role 117 0 272 

2023-07-03 11:29:36.970 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3673 

2023-07-03 11:29:36.970 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3313 

2023-07-03 11:29:36.970 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3132 row column role 117 0 273 

2023-07-03 11:29:36.970 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3674 

2023-07-03 11:29:36.970 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3314 

2023-07-03 11:29:36.970 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3133 row column role 117 0 274 

2023-07-03 11:29:36.970 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3675 

2023-07-03 11:29:36.970 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3315 

2023-07-03 11:29:36.970 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3134 row column role 117 0 275 

2023-07-03 11:29:36.995 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3676 

2023-07-03 11:29:36.996 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3316 

2023-07-03 11:29:36.996 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3135 row column role 118 0 257 

2023-07-03 11:29:36.996 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3677 

2023-07-03 11:29:36.996 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3317 

2023-07-03 11:29:36.996 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3136 row column role 118 0 258 

2023-07-03 11:29:36.997 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3678 

2023-07-03 11:29:36.997 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3318 

2023-07-03 11:29:36.997 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3137 row column role 118 0 259 

2023-07-03 11:29:36.997 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3679 

2023-07-03 11:29:36.997 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3319 

2023-07-03 11:29:36.997 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3138 row column role 118 0 260 

2023-07-03 11:29:36.998 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3680 

2023-07-03 11:29:36.998 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3320 

2023-07-03 11:29:36.998 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3139 row column role 118 0 261 

2023-07-03 11:29:36.998 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3681 

2023-07-03 11:29:36.998 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3321 

2023-07-03 11:29:36.998 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3140 row column role 118 0 262 

2023-07-03 11:29:36.999 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3682 

2023-07-03 11:29:36.999 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3322 

2023-07-03 11:29:36.999 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3141 row column role 118 0 263 

2023-07-03 11:29:36.999 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3683 

2023-07-03 11:29:36.999 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3323 

2023-07-03 11:29:37.000 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3142 row column role 118 0 264 

2023-07-03 11:29:37.000 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3684 

2023-07-03 11:29:37.000 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3324 

2023-07-03 11:29:37.000 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3143 row column role 118 0 265 

2023-07-03 11:29:37.000 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3685 

2023-07-03 11:29:37.001 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3325 

2023-07-03 11:29:37.001 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3144 row column role 118 0 266 

2023-07-03 11:29:37.001 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3686 

2023-07-03 11:29:37.001 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3326 

2023-07-03 11:29:37.001 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3145 row column role 118 0 267 

2023-07-03 11:29:37.002 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3687 

2023-07-03 11:29:37.002 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3327 

2023-07-03 11:29:37.002 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3146 row column role 118 0 268 

2023-07-03 11:29:37.002 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3688 

2023-07-03 11:29:37.002 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3328 

2023-07-03 11:29:37.002 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3147 row column role 118 0 269 

2023-07-03 11:29:37.003 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3689 

2023-07-03 11:29:37.003 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3329 

2023-07-03 11:29:37.003 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3148 row column role 118 0 270 

2023-07-03 11:29:37.003 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3690 

2023-07-03 11:29:37.003 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3330 

2023-07-03 11:29:37.003 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3149 row column role 118 0 271 

2023-07-03 11:29:37.004 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3691 

2023-07-03 11:29:37.004 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3331 

2023-07-03 11:29:37.004 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3150 row column role 118 0 272 

2023-07-03 11:29:37.004 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3692 

2023-07-03 11:29:37.004 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3332 

2023-07-03 11:29:37.004 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3151 row column role 118 0 273 

2023-07-03 11:29:37.004 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3693 

2023-07-03 11:29:37.005 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3333 

2023-07-03 11:29:37.005 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3152 row column role 118 0 274 

2023-07-03 11:29:37.005 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3694 

2023-07-03 11:29:37.005 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3334 

2023-07-03 11:29:37.005 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3153 row column role 118 0 275 

2023-07-03 11:29:37.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3695 

2023-07-03 11:29:37.028 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3335 

2023-07-03 11:29:37.028 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3154 row column role 119 0 257 

2023-07-03 11:29:37.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3696 

2023-07-03 11:29:37.028 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3336 

2023-07-03 11:29:37.028 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3155 row column role 119 0 258 

2023-07-03 11:29:37.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3697 

2023-07-03 11:29:37.029 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3337 

2023-07-03 11:29:37.029 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3156 row column role 119 0 259 

2023-07-03 11:29:37.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3698 

2023-07-03 11:29:37.029 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3338 

2023-07-03 11:29:37.029 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3157 row column role 119 0 260 

2023-07-03 11:29:37.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3699 

2023-07-03 11:29:37.029 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3339 

2023-07-03 11:29:37.029 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3158 row column role 119 0 261 

2023-07-03 11:29:37.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3700 

2023-07-03 11:29:37.030 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3340 

2023-07-03 11:29:37.030 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3159 row column role 119 0 262 

2023-07-03 11:29:37.030 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3701 

2023-07-03 11:29:37.030 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3341 

2023-07-03 11:29:37.030 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3160 row column role 119 0 263 

2023-07-03 11:29:37.030 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3702 

2023-07-03 11:29:37.030 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3342 

2023-07-03 11:29:37.030 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3161 row column role 119 0 264 

2023-07-03 11:29:37.030 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3703 

2023-07-03 11:29:37.030 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3343 

2023-07-03 11:29:37.030 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3162 row column role 119 0 265 

2023-07-03 11:29:37.030 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3704 

2023-07-03 11:29:37.031 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3344 

2023-07-03 11:29:37.031 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3163 row column role 119 0 266 

2023-07-03 11:29:37.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3705 

2023-07-03 11:29:37.031 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3345 

2023-07-03 11:29:37.031 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3164 row column role 119 0 267 

2023-07-03 11:29:37.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3706 

2023-07-03 11:29:37.031 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3346 

2023-07-03 11:29:37.031 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3165 row column role 119 0 268 

2023-07-03 11:29:37.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3707 

2023-07-03 11:29:37.031 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3347 

2023-07-03 11:29:37.031 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3166 row column role 119 0 269 

2023-07-03 11:29:37.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3708 

2023-07-03 11:29:37.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3348 

2023-07-03 11:29:37.032 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3167 row column role 119 0 270 

2023-07-03 11:29:37.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3709 

2023-07-03 11:29:37.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3349 

2023-07-03 11:29:37.032 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3168 row column role 119 0 271 

2023-07-03 11:29:37.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3710 

2023-07-03 11:29:37.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3350 

2023-07-03 11:29:37.032 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3169 row column role 119 0 272 

2023-07-03 11:29:37.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3711 

2023-07-03 11:29:37.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3351 

2023-07-03 11:29:37.032 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3170 row column role 119 0 273 

2023-07-03 11:29:37.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3712 

2023-07-03 11:29:37.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3352 

2023-07-03 11:29:37.032 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3171 row column role 119 0 274 

2023-07-03 11:29:37.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3713 

2023-07-03 11:29:37.033 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3353 

2023-07-03 11:29:37.033 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3172 row column role 119 0 275 

2023-07-03 11:29:37.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3714 

2023-07-03 11:29:37.033 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3354 

2023-07-03 11:29:37.033 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3173 row column role 120 0 257 

2023-07-03 11:29:37.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3715 

2023-07-03 11:29:37.034 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3355 

2023-07-03 11:29:37.034 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3174 row column role 120 0 258 

2023-07-03 11:29:37.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3716 

2023-07-03 11:29:37.034 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3356 

2023-07-03 11:29:37.034 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3175 row column role 120 0 259 

2023-07-03 11:29:37.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3717 

2023-07-03 11:29:37.034 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3357 

2023-07-03 11:29:37.034 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3176 row column role 120 0 260 

2023-07-03 11:29:37.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3718 

2023-07-03 11:29:37.034 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3358 

2023-07-03 11:29:37.034 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3177 row column role 120 0 261 

2023-07-03 11:29:37.034 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3719 

2023-07-03 11:29:37.034 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3359 

2023-07-03 11:29:37.034 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3178 row column role 120 0 262 

2023-07-03 11:29:37.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3720 

2023-07-03 11:29:37.035 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3360 

2023-07-03 11:29:37.035 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3179 row column role 120 0 263 

2023-07-03 11:29:37.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3721 

2023-07-03 11:29:37.035 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3361 

2023-07-03 11:29:37.035 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3180 row column role 120 0 264 

2023-07-03 11:29:37.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3722 

2023-07-03 11:29:37.035 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3362 

2023-07-03 11:29:37.035 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3181 row column role 120 0 265 

2023-07-03 11:29:37.035 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3723 

2023-07-03 11:29:37.035 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3363 

2023-07-03 11:29:37.035 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3182 row column role 120 0 266 

2023-07-03 11:29:37.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3724 

2023-07-03 11:29:37.036 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3364 

2023-07-03 11:29:37.036 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3183 row column role 120 0 267 

2023-07-03 11:29:37.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3725 

2023-07-03 11:29:37.036 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3365 

2023-07-03 11:29:37.036 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3184 row column role 120 0 268 

2023-07-03 11:29:37.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3726 

2023-07-03 11:29:37.036 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3366 

2023-07-03 11:29:37.036 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3185 row column role 120 0 269 

2023-07-03 11:29:37.036 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3727 

2023-07-03 11:29:37.036 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3367 

2023-07-03 11:29:37.036 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3186 row column role 120 0 270 

2023-07-03 11:29:37.037 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3728 

2023-07-03 11:29:37.037 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3368 

2023-07-03 11:29:37.037 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3187 row column role 120 0 271 

2023-07-03 11:29:37.037 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3729 

2023-07-03 11:29:37.037 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3369 

2023-07-03 11:29:37.037 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3188 row column role 120 0 272 

2023-07-03 11:29:37.037 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3730 

2023-07-03 11:29:37.037 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3370 

2023-07-03 11:29:37.037 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3189 row column role 120 0 273 

2023-07-03 11:29:37.037 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3731 

2023-07-03 11:29:37.037 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3371 

2023-07-03 11:29:37.037 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3190 row column role 120 0 274 

2023-07-03 11:29:37.037 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3732 

2023-07-03 11:29:37.037 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3372 

2023-07-03 11:29:37.037 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3191 row column role 120 0 275 

2023-07-03 11:29:37.093 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3733 

2023-07-03 11:29:37.094 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3373 

2023-07-03 11:29:37.094 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3192 row column role 121 0 257 

2023-07-03 11:29:37.094 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3734 

2023-07-03 11:29:37.094 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3374 

2023-07-03 11:29:37.094 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3193 row column role 121 0 258 

2023-07-03 11:29:37.095 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3735 

2023-07-03 11:29:37.095 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3375 

2023-07-03 11:29:37.095 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3194 row column role 121 0 259 

2023-07-03 11:29:37.095 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3736 

2023-07-03 11:29:37.095 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3376 

2023-07-03 11:29:37.095 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3195 row column role 121 0 260 

2023-07-03 11:29:37.096 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3737 

2023-07-03 11:29:37.096 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3377 

2023-07-03 11:29:37.096 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3196 row column role 121 0 261 

2023-07-03 11:29:37.096 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3738 

2023-07-03 11:29:37.096 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3378 

2023-07-03 11:29:37.096 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3197 row column role 121 0 262 

2023-07-03 11:29:37.097 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3739 

2023-07-03 11:29:37.097 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3379 

2023-07-03 11:29:37.097 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3198 row column role 121 0 263 

2023-07-03 11:29:37.097 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3740 

2023-07-03 11:29:37.097 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3380 

2023-07-03 11:29:37.097 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3199 row column role 121 0 264 

2023-07-03 11:29:37.098 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3741 

2023-07-03 11:29:37.098 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3381 

2023-07-03 11:29:37.098 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3200 row column role 121 0 265 

2023-07-03 11:29:37.098 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3742 

2023-07-03 11:29:37.098 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3382 

2023-07-03 11:29:37.098 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3201 row column role 121 0 266 

2023-07-03 11:29:37.099 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3743 

2023-07-03 11:29:37.099 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3383 

2023-07-03 11:29:37.099 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3202 row column role 121 0 267 

2023-07-03 11:29:37.099 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3744 

2023-07-03 11:29:37.099 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3384 

2023-07-03 11:29:37.099 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3203 row column role 121 0 268 

2023-07-03 11:29:37.099 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3745 

2023-07-03 11:29:37.100 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3385 

2023-07-03 11:29:37.100 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3204 row column role 121 0 269 

2023-07-03 11:29:37.100 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3746 

2023-07-03 11:29:37.100 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3386 

2023-07-03 11:29:37.100 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3205 row column role 121 0 270 

2023-07-03 11:29:37.100 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3747 

2023-07-03 11:29:37.100 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3387 

2023-07-03 11:29:37.101 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3206 row column role 121 0 271 

2023-07-03 11:29:37.101 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3748 

2023-07-03 11:29:37.101 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3388 

2023-07-03 11:29:37.101 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3207 row column role 121 0 272 

2023-07-03 11:29:37.101 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3749 

2023-07-03 11:29:37.101 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3389 

2023-07-03 11:29:37.101 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3208 row column role 121 0 273 

2023-07-03 11:29:37.102 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3750 

2023-07-03 11:29:37.102 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3390 

2023-07-03 11:29:37.102 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3209 row column role 121 0 274 

2023-07-03 11:29:37.102 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3751 

2023-07-03 11:29:37.102 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3391 

2023-07-03 11:29:37.102 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3210 row column role 121 0 275 

2023-07-03 11:29:37.173 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3752 

2023-07-03 11:29:37.173 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3392 

2023-07-03 11:29:37.174 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3211 row column role 122 0 257 

2023-07-03 11:29:37.174 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3753 

2023-07-03 11:29:37.174 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3393 

2023-07-03 11:29:37.174 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3212 row column role 122 0 258 

2023-07-03 11:29:37.175 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3754 

2023-07-03 11:29:37.175 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3394 

2023-07-03 11:29:37.175 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3213 row column role 122 0 259 

2023-07-03 11:29:37.175 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3755 

2023-07-03 11:29:37.175 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3395 

2023-07-03 11:29:37.175 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3214 row column role 122 0 260 

2023-07-03 11:29:37.175 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3756 

2023-07-03 11:29:37.176 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3396 

2023-07-03 11:29:37.176 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3215 row column role 122 0 261 

2023-07-03 11:29:37.176 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3757 

2023-07-03 11:29:37.176 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3397 

2023-07-03 11:29:37.176 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3216 row column role 122 0 262 

2023-07-03 11:29:37.176 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3758 

2023-07-03 11:29:37.176 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3398 

2023-07-03 11:29:37.177 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3217 row column role 122 0 263 

2023-07-03 11:29:37.177 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3759 

2023-07-03 11:29:37.177 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3399 

2023-07-03 11:29:37.177 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3218 row column role 122 0 264 

2023-07-03 11:29:37.177 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3760 

2023-07-03 11:29:37.177 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3400 

2023-07-03 11:29:37.178 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3219 row column role 122 0 265 

2023-07-03 11:29:37.178 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3761 

2023-07-03 11:29:37.178 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3401 

2023-07-03 11:29:37.178 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3220 row column role 122 0 266 

2023-07-03 11:29:37.179 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3762 

2023-07-03 11:29:37.179 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3402 

2023-07-03 11:29:37.179 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3221 row column role 122 0 267 

2023-07-03 11:29:37.179 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3763 

2023-07-03 11:29:37.179 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3403 

2023-07-03 11:29:37.179 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3222 row column role 122 0 268 

2023-07-03 11:29:37.179 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3764 

2023-07-03 11:29:37.180 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3404 

2023-07-03 11:29:37.180 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3223 row column role 122 0 269 

2023-07-03 11:29:37.180 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3765 

2023-07-03 11:29:37.180 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3405 

2023-07-03 11:29:37.180 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3224 row column role 122 0 270 

2023-07-03 11:29:37.180 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3766 

2023-07-03 11:29:37.180 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3406 

2023-07-03 11:29:37.181 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3225 row column role 122 0 271 

2023-07-03 11:29:37.181 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3767 

2023-07-03 11:29:37.181 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3407 

2023-07-03 11:29:37.181 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3226 row column role 122 0 272 

2023-07-03 11:29:37.181 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3768 

2023-07-03 11:29:37.181 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3408 

2023-07-03 11:29:37.181 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3227 row column role 122 0 273 

2023-07-03 11:29:37.181 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3769 

2023-07-03 11:29:37.181 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3409 

2023-07-03 11:29:37.181 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3228 row column role 122 0 274 

2023-07-03 11:29:37.182 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3770 

2023-07-03 11:29:37.182 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3410 

2023-07-03 11:29:37.182 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3229 row column role 122 0 275 

2023-07-03 11:29:37.341 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3771 

2023-07-03 11:29:37.341 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3411 

2023-07-03 11:29:37.341 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3230 row column role 123 0 257 

2023-07-03 11:29:37.342 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3772 

2023-07-03 11:29:37.342 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3412 

2023-07-03 11:29:37.342 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3231 row column role 123 0 258 

2023-07-03 11:29:37.342 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3773 

2023-07-03 11:29:37.343 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3413 

2023-07-03 11:29:37.343 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3232 row column role 123 0 259 

2023-07-03 11:29:37.343 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3774 

2023-07-03 11:29:37.343 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3414 

2023-07-03 11:29:37.343 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3233 row column role 123 0 260 

2023-07-03 11:29:37.343 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3775 

2023-07-03 11:29:37.344 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3415 

2023-07-03 11:29:37.344 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3234 row column role 123 0 261 

2023-07-03 11:29:37.344 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3776 

2023-07-03 11:29:37.344 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3416 

2023-07-03 11:29:37.344 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3235 row column role 123 0 262 

2023-07-03 11:29:37.344 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3777 

2023-07-03 11:29:37.345 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3417 

2023-07-03 11:29:37.345 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3236 row column role 123 0 263 

2023-07-03 11:29:37.345 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3778 

2023-07-03 11:29:37.345 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3418 

2023-07-03 11:29:37.345 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3237 row column role 123 0 264 

2023-07-03 11:29:37.345 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3779 

2023-07-03 11:29:37.346 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3419 

2023-07-03 11:29:37.346 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3238 row column role 123 0 265 

2023-07-03 11:29:37.346 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3780 

2023-07-03 11:29:37.346 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3420 

2023-07-03 11:29:37.346 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3239 row column role 123 0 266 

2023-07-03 11:29:37.347 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3781 

2023-07-03 11:29:37.347 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3421 

2023-07-03 11:29:37.347 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3240 row column role 123 0 267 

2023-07-03 11:29:37.347 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3782 

2023-07-03 11:29:37.347 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3422 

2023-07-03 11:29:37.347 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3241 row column role 123 0 268 

2023-07-03 11:29:37.348 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3783 

2023-07-03 11:29:37.348 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3423 

2023-07-03 11:29:37.348 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3242 row column role 123 0 269 

2023-07-03 11:29:37.348 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3784 

2023-07-03 11:29:37.348 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3424 

2023-07-03 11:29:37.348 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3243 row column role 123 0 270 

2023-07-03 11:29:37.349 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3785 

2023-07-03 11:29:37.349 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3425 

2023-07-03 11:29:37.349 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3244 row column role 123 0 271 

2023-07-03 11:29:37.349 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3786 

2023-07-03 11:29:37.349 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3426 

2023-07-03 11:29:37.349 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3245 row column role 123 0 272 

2023-07-03 11:29:37.349 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3787 

2023-07-03 11:29:37.349 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3427 

2023-07-03 11:29:37.350 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3246 row column role 123 0 273 

2023-07-03 11:29:37.350 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3788 

2023-07-03 11:29:37.350 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3428 

2023-07-03 11:29:37.350 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3247 row column role 123 0 274 

2023-07-03 11:29:37.350 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3789 

2023-07-03 11:29:37.350 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3429 

2023-07-03 11:29:37.351 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3248 row column role 123 0 275 

2023-07-03 11:29:37.382 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3790 

2023-07-03 11:29:37.382 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3430 

2023-07-03 11:29:37.382 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3249 row column role 124 0 257 

2023-07-03 11:29:37.382 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3791 

2023-07-03 11:29:37.382 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3431 

2023-07-03 11:29:37.382 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3250 row column role 124 0 258 

2023-07-03 11:29:37.382 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3792 

2023-07-03 11:29:37.382 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3432 

2023-07-03 11:29:37.382 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3251 row column role 124 0 259 

2023-07-03 11:29:37.383 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3793 

2023-07-03 11:29:37.383 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3433 

2023-07-03 11:29:37.383 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3252 row column role 124 0 260 

2023-07-03 11:29:37.383 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3794 

2023-07-03 11:29:37.383 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3434 

2023-07-03 11:29:37.383 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3253 row column role 124 0 261 

2023-07-03 11:29:37.383 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3795 

2023-07-03 11:29:37.383 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3435 

2023-07-03 11:29:37.383 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3254 row column role 124 0 262 

2023-07-03 11:29:37.383 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3796 

2023-07-03 11:29:37.383 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3436 

2023-07-03 11:29:37.383 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3255 row column role 124 0 263 

2023-07-03 11:29:37.384 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3797 

2023-07-03 11:29:37.384 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3437 

2023-07-03 11:29:37.384 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3256 row column role 124 0 264 

2023-07-03 11:29:37.384 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3798 

2023-07-03 11:29:37.384 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3438 

2023-07-03 11:29:37.384 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3257 row column role 124 0 265 

2023-07-03 11:29:37.384 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3799 

2023-07-03 11:29:37.384 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3439 

2023-07-03 11:29:37.384 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3258 row column role 124 0 266 

2023-07-03 11:29:37.384 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3800 

2023-07-03 11:29:37.385 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3440 

2023-07-03 11:29:37.385 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3259 row column role 124 0 267 

2023-07-03 11:29:37.385 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3801 

2023-07-03 11:29:37.385 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3441 

2023-07-03 11:29:37.385 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3260 row column role 124 0 268 

2023-07-03 11:29:37.385 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3802 

2023-07-03 11:29:37.385 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3442 

2023-07-03 11:29:37.385 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3261 row column role 124 0 269 

2023-07-03 11:29:37.385 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3803 

2023-07-03 11:29:37.385 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3443 

2023-07-03 11:29:37.385 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3262 row column role 124 0 270 

2023-07-03 11:29:37.385 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3804 

2023-07-03 11:29:37.386 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3444 

2023-07-03 11:29:37.386 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3263 row column role 124 0 271 

2023-07-03 11:29:37.386 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3805 

2023-07-03 11:29:37.386 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3445 

2023-07-03 11:29:37.386 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3264 row column role 124 0 272 

2023-07-03 11:29:37.386 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3806 

2023-07-03 11:29:37.386 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3446 

2023-07-03 11:29:37.386 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3265 row column role 124 0 273 

2023-07-03 11:29:37.386 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3807 

2023-07-03 11:29:37.386 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3447 

2023-07-03 11:29:37.386 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3266 row column role 124 0 274 

2023-07-03 11:29:37.386 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3808 

2023-07-03 11:29:37.386 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3448 

2023-07-03 11:29:37.386 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3267 row column role 124 0 275 

2023-07-03 11:29:37.387 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3809 

2023-07-03 11:29:37.387 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3449 

2023-07-03 11:29:37.387 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3268 row column role 125 0 257 

2023-07-03 11:29:37.387 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3810 

2023-07-03 11:29:37.387 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3450 

2023-07-03 11:29:37.387 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3269 row column role 125 0 258 

2023-07-03 11:29:37.388 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3811 

2023-07-03 11:29:37.388 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3451 

2023-07-03 11:29:37.388 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3270 row column role 125 0 259 

2023-07-03 11:29:37.388 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3812 

2023-07-03 11:29:37.388 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3452 

2023-07-03 11:29:37.388 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3271 row column role 125 0 260 

2023-07-03 11:29:37.388 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3813 

2023-07-03 11:29:37.388 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3453 

2023-07-03 11:29:37.388 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3272 row column role 125 0 261 

2023-07-03 11:29:37.388 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3814 

2023-07-03 11:29:37.389 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3454 

2023-07-03 11:29:37.389 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3273 row column role 125 0 262 

2023-07-03 11:29:37.389 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3815 

2023-07-03 11:29:37.389 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3455 

2023-07-03 11:29:37.389 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3274 row column role 125 0 263 

2023-07-03 11:29:37.389 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3816 

2023-07-03 11:29:37.389 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3456 

2023-07-03 11:29:37.389 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3275 row column role 125 0 264 

2023-07-03 11:29:37.389 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3817 

2023-07-03 11:29:37.389 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3457 

2023-07-03 11:29:37.389 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3276 row column role 125 0 265 

2023-07-03 11:29:37.389 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3818 

2023-07-03 11:29:37.390 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3458 

2023-07-03 11:29:37.390 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3277 row column role 125 0 266 

2023-07-03 11:29:37.390 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3819 

2023-07-03 11:29:37.390 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3459 

2023-07-03 11:29:37.390 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3278 row column role 125 0 267 

2023-07-03 11:29:37.390 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3820 

2023-07-03 11:29:37.390 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3460 

2023-07-03 11:29:37.390 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3279 row column role 125 0 268 

2023-07-03 11:29:37.390 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3821 

2023-07-03 11:29:37.390 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3461 

2023-07-03 11:29:37.390 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3280 row column role 125 0 269 

2023-07-03 11:29:37.391 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3822 

2023-07-03 11:29:37.391 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3462 

2023-07-03 11:29:37.391 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3281 row column role 125 0 270 

2023-07-03 11:29:37.391 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3823 

2023-07-03 11:29:37.391 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3463 

2023-07-03 11:29:37.391 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3282 row column role 125 0 271 

2023-07-03 11:29:37.391 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3824 

2023-07-03 11:29:37.391 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3464 

2023-07-03 11:29:37.391 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3283 row column role 125 0 272 

2023-07-03 11:29:37.391 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3825 

2023-07-03 11:29:37.391 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3465 

2023-07-03 11:29:37.391 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3284 row column role 125 0 273 

2023-07-03 11:29:37.391 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3826 

2023-07-03 11:29:37.391 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3466 

2023-07-03 11:29:37.391 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3285 row column role 125 0 274 

2023-07-03 11:29:37.392 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3827 

2023-07-03 11:29:37.392 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3467 

2023-07-03 11:29:37.392 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3286 row column role 125 0 275 

2023-07-03 11:29:37.443 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3828 

2023-07-03 11:29:37.443 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3468 

2023-07-03 11:29:37.443 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3287 row column role 126 0 257 

2023-07-03 11:29:37.444 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3829 

2023-07-03 11:29:37.444 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3469 

2023-07-03 11:29:37.444 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3288 row column role 126 0 258 

2023-07-03 11:29:37.444 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3830 

2023-07-03 11:29:37.444 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3470 

2023-07-03 11:29:37.444 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3289 row column role 126 0 259 

2023-07-03 11:29:37.444 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3831 

2023-07-03 11:29:37.444 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3471 

2023-07-03 11:29:37.445 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3290 row column role 126 0 260 

2023-07-03 11:29:37.445 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3832 

2023-07-03 11:29:37.445 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3472 

2023-07-03 11:29:37.445 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3291 row column role 126 0 261 

2023-07-03 11:29:37.445 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3833 

2023-07-03 11:29:37.445 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3473 

2023-07-03 11:29:37.445 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3292 row column role 126 0 262 

2023-07-03 11:29:37.446 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3834 

2023-07-03 11:29:37.446 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3474 

2023-07-03 11:29:37.446 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3293 row column role 126 0 263 

2023-07-03 11:29:37.446 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3835 

2023-07-03 11:29:37.446 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3475 

2023-07-03 11:29:37.446 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3294 row column role 126 0 264 

2023-07-03 11:29:37.446 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3836 

2023-07-03 11:29:37.446 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3476 

2023-07-03 11:29:37.446 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3295 row column role 126 0 265 

2023-07-03 11:29:37.447 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3837 

2023-07-03 11:29:37.447 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3477 

2023-07-03 11:29:37.447 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3296 row column role 126 0 266 

2023-07-03 11:29:37.447 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3838 

2023-07-03 11:29:37.447 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3478 

2023-07-03 11:29:37.447 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3297 row column role 126 0 267 

2023-07-03 11:29:37.447 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3839 

2023-07-03 11:29:37.447 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3479 

2023-07-03 11:29:37.447 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3298 row column role 126 0 268 

2023-07-03 11:29:37.448 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3840 

2023-07-03 11:29:37.448 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3480 

2023-07-03 11:29:37.448 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3299 row column role 126 0 269 

2023-07-03 11:29:37.448 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3841 

2023-07-03 11:29:37.448 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3481 

2023-07-03 11:29:37.448 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3300 row column role 126 0 270 

2023-07-03 11:29:37.448 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3842 

2023-07-03 11:29:37.448 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3482 

2023-07-03 11:29:37.448 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3301 row column role 126 0 271 

2023-07-03 11:29:37.449 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3843 

2023-07-03 11:29:37.449 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3483 

2023-07-03 11:29:37.449 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3302 row column role 126 0 272 

2023-07-03 11:29:37.449 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3844 

2023-07-03 11:29:37.449 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3484 

2023-07-03 11:29:37.449 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3303 row column role 126 0 273 

2023-07-03 11:29:37.449 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3845 

2023-07-03 11:29:37.449 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3485 

2023-07-03 11:29:37.449 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3304 row column role 126 0 274 

2023-07-03 11:29:37.449 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3846 

2023-07-03 11:29:37.450 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3486 

2023-07-03 11:29:37.450 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3305 row column role 126 0 275 

2023-07-03 11:29:37.484 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3847 

2023-07-03 11:29:37.484 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3487 

2023-07-03 11:29:37.484 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3306 row column role 127 0 257 

2023-07-03 11:29:37.484 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3848 

2023-07-03 11:29:37.484 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3488 

2023-07-03 11:29:37.484 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3307 row column role 127 0 258 

2023-07-03 11:29:37.484 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3849 

2023-07-03 11:29:37.484 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3489 

2023-07-03 11:29:37.484 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3308 row column role 127 0 259 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3850 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3490 

2023-07-03 11:29:37.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3309 row column role 127 0 260 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3851 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3491 

2023-07-03 11:29:37.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3310 row column role 127 0 261 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3852 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3492 

2023-07-03 11:29:37.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3311 row column role 127 0 262 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3853 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3493 

2023-07-03 11:29:37.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3312 row column role 127 0 263 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3854 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3494 

2023-07-03 11:29:37.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3313 row column role 127 0 264 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3855 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3495 

2023-07-03 11:29:37.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3314 row column role 127 0 265 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3856 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3496 

2023-07-03 11:29:37.485 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3315 row column role 127 0 266 

2023-07-03 11:29:37.485 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3857 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3497 

2023-07-03 11:29:37.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3316 row column role 127 0 267 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3858 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3498 

2023-07-03 11:29:37.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3317 row column role 127 0 268 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3859 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3499 

2023-07-03 11:29:37.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3318 row column role 127 0 269 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3860 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3500 

2023-07-03 11:29:37.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3319 row column role 127 0 270 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3861 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3501 

2023-07-03 11:29:37.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3320 row column role 127 0 271 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3862 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3502 

2023-07-03 11:29:37.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3321 row column role 127 0 272 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3863 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3503 

2023-07-03 11:29:37.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3322 row column role 127 0 273 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3864 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3504 

2023-07-03 11:29:37.487 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3323 row column role 127 0 274 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3865 

2023-07-03 11:29:37.487 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3505 

2023-07-03 11:29:37.488 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3324 row column role 127 0 275 

2023-07-03 11:29:37.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3866 

2023-07-03 11:29:37.529 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3506 

2023-07-03 11:29:37.529 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3325 row column role 128 0 257 

2023-07-03 11:29:37.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3867 

2023-07-03 11:29:37.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3507 

2023-07-03 11:29:37.530 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3326 row column role 128 0 258 

2023-07-03 11:29:37.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3868 

2023-07-03 11:29:37.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3508 

2023-07-03 11:29:37.530 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3327 row column role 128 0 259 

2023-07-03 11:29:37.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3869 

2023-07-03 11:29:37.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3509 

2023-07-03 11:29:37.531 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3328 row column role 128 0 260 

2023-07-03 11:29:37.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3870 

2023-07-03 11:29:37.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3510 

2023-07-03 11:29:37.531 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3329 row column role 128 0 261 

2023-07-03 11:29:37.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3871 

2023-07-03 11:29:37.532 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3511 

2023-07-03 11:29:37.532 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3330 row column role 128 0 262 

2023-07-03 11:29:37.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3872 

2023-07-03 11:29:37.532 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3512 

2023-07-03 11:29:37.532 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3331 row column role 128 0 263 

2023-07-03 11:29:37.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3873 

2023-07-03 11:29:37.533 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3513 

2023-07-03 11:29:37.533 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3332 row column role 128 0 264 

2023-07-03 11:29:37.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3874 

2023-07-03 11:29:37.533 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3514 

2023-07-03 11:29:37.533 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3333 row column role 128 0 265 

2023-07-03 11:29:37.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3875 

2023-07-03 11:29:37.534 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3515 

2023-07-03 11:29:37.534 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3334 row column role 128 0 266 

2023-07-03 11:29:37.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3876 

2023-07-03 11:29:37.534 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3516 

2023-07-03 11:29:37.534 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3335 row column role 128 0 267 

2023-07-03 11:29:37.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3877 

2023-07-03 11:29:37.535 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3517 

2023-07-03 11:29:37.535 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3336 row column role 128 0 268 

2023-07-03 11:29:37.535 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3878 

2023-07-03 11:29:37.535 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3518 

2023-07-03 11:29:37.535 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3337 row column role 128 0 269 

2023-07-03 11:29:37.535 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3879 

2023-07-03 11:29:37.536 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3519 

2023-07-03 11:29:37.536 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3338 row column role 128 0 270 

2023-07-03 11:29:37.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3880 

2023-07-03 11:29:37.536 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3520 

2023-07-03 11:29:37.536 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3339 row column role 128 0 271 

2023-07-03 11:29:37.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3881 

2023-07-03 11:29:37.536 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3521 

2023-07-03 11:29:37.536 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3340 row column role 128 0 272 

2023-07-03 11:29:37.537 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3882 

2023-07-03 11:29:37.537 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3522 

2023-07-03 11:29:37.537 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3341 row column role 128 0 273 

2023-07-03 11:29:37.537 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3883 

2023-07-03 11:29:37.537 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3523 

2023-07-03 11:29:37.537 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3342 row column role 128 0 274 

2023-07-03 11:29:37.537 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3884 

2023-07-03 11:29:37.538 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3524 

2023-07-03 11:29:37.538 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3343 row column role 128 0 275 

2023-07-03 11:29:37.613 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3885 

2023-07-03 11:29:37.613 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3525 

2023-07-03 11:29:37.613 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3344 row column role 129 0 257 

2023-07-03 11:29:37.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3886 

2023-07-03 11:29:37.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3526 

2023-07-03 11:29:37.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3345 row column role 129 0 258 

2023-07-03 11:29:37.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3887 

2023-07-03 11:29:37.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3527 

2023-07-03 11:29:37.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3346 row column role 129 0 259 

2023-07-03 11:29:37.615 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3888 

2023-07-03 11:29:37.615 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3528 

2023-07-03 11:29:37.615 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3347 row column role 129 0 260 

2023-07-03 11:29:37.616 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3889 

2023-07-03 11:29:37.616 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3529 

2023-07-03 11:29:37.616 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3348 row column role 129 0 261 

2023-07-03 11:29:37.616 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3890 

2023-07-03 11:29:37.616 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3530 

2023-07-03 11:29:37.617 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3349 row column role 129 0 262 

2023-07-03 11:29:37.617 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3891 

2023-07-03 11:29:37.617 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3531 

2023-07-03 11:29:37.617 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3350 row column role 129 0 263 

2023-07-03 11:29:37.618 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3892 

2023-07-03 11:29:37.618 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3532 

2023-07-03 11:29:37.618 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3351 row column role 129 0 264 

2023-07-03 11:29:37.618 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3893 

2023-07-03 11:29:37.618 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3533 

2023-07-03 11:29:37.618 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3352 row column role 129 0 265 

2023-07-03 11:29:37.619 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3894 

2023-07-03 11:29:37.619 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3534 

2023-07-03 11:29:37.619 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3353 row column role 129 0 266 

2023-07-03 11:29:37.619 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3895 

2023-07-03 11:29:37.619 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3535 

2023-07-03 11:29:37.619 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3354 row column role 129 0 267 

2023-07-03 11:29:37.619 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3896 

2023-07-03 11:29:37.619 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3536 

2023-07-03 11:29:37.620 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3355 row column role 129 0 268 

2023-07-03 11:29:37.620 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3897 

2023-07-03 11:29:37.620 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3537 

2023-07-03 11:29:37.620 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3356 row column role 129 0 269 

2023-07-03 11:29:37.621 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3898 

2023-07-03 11:29:37.621 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3538 

2023-07-03 11:29:37.621 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3357 row column role 129 0 270 

2023-07-03 11:29:37.621 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3899 

2023-07-03 11:29:37.621 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3539 

2023-07-03 11:29:37.621 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3358 row column role 129 0 271 

2023-07-03 11:29:37.621 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3900 

2023-07-03 11:29:37.622 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3540 

2023-07-03 11:29:37.622 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3359 row column role 129 0 272 

2023-07-03 11:29:37.622 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3901 

2023-07-03 11:29:37.622 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3541 

2023-07-03 11:29:37.622 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3360 row column role 129 0 273 

2023-07-03 11:29:37.622 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3902 

2023-07-03 11:29:37.622 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3542 

2023-07-03 11:29:37.622 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3361 row column role 129 0 274 

2023-07-03 11:29:37.622 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3903 

2023-07-03 11:29:37.622 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3543 

2023-07-03 11:29:37.622 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3362 row column role 129 0 275 

2023-07-03 11:29:37.713 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3904 

2023-07-03 11:29:37.713 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3544 

2023-07-03 11:29:37.714 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3363 row column role 130 0 257 

2023-07-03 11:29:37.714 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3905 

2023-07-03 11:29:37.714 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3545 

2023-07-03 11:29:37.714 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3364 row column role 130 0 258 

2023-07-03 11:29:37.714 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3906 

2023-07-03 11:29:37.715 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3546 

2023-07-03 11:29:37.715 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3365 row column role 130 0 259 

2023-07-03 11:29:37.715 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3907 

2023-07-03 11:29:37.715 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3547 

2023-07-03 11:29:37.715 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3366 row column role 130 0 260 

2023-07-03 11:29:37.716 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3908 

2023-07-03 11:29:37.716 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3548 

2023-07-03 11:29:37.716 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3367 row column role 130 0 261 

2023-07-03 11:29:37.716 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3909 

2023-07-03 11:29:37.716 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3549 

2023-07-03 11:29:37.716 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3368 row column role 130 0 262 

2023-07-03 11:29:37.716 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3910 

2023-07-03 11:29:37.716 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3550 

2023-07-03 11:29:37.716 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3369 row column role 130 0 263 

2023-07-03 11:29:37.716 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3911 

2023-07-03 11:29:37.716 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3551 

2023-07-03 11:29:37.716 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3370 row column role 130 0 264 

2023-07-03 11:29:37.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3912 

2023-07-03 11:29:37.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3552 

2023-07-03 11:29:37.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3371 row column role 130 0 265 

2023-07-03 11:29:37.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3913 

2023-07-03 11:29:37.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3553 

2023-07-03 11:29:37.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3372 row column role 130 0 266 

2023-07-03 11:29:37.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3914 

2023-07-03 11:29:37.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3554 

2023-07-03 11:29:37.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3373 row column role 130 0 267 

2023-07-03 11:29:37.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3915 

2023-07-03 11:29:37.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3555 

2023-07-03 11:29:37.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3374 row column role 130 0 268 

2023-07-03 11:29:37.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3916 

2023-07-03 11:29:37.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3556 

2023-07-03 11:29:37.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3375 row column role 130 0 269 

2023-07-03 11:29:37.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3917 

2023-07-03 11:29:37.719 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3557 

2023-07-03 11:29:37.719 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3376 row column role 130 0 270 

2023-07-03 11:29:37.719 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3918 

2023-07-03 11:29:37.719 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3558 

2023-07-03 11:29:37.719 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3377 row column role 130 0 271 

2023-07-03 11:29:37.719 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3919 

2023-07-03 11:29:37.719 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3559 

2023-07-03 11:29:37.719 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3378 row column role 130 0 272 

2023-07-03 11:29:37.719 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3920 

2023-07-03 11:29:37.719 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3560 

2023-07-03 11:29:37.719 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3379 row column role 130 0 273 

2023-07-03 11:29:37.720 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3921 

2023-07-03 11:29:37.720 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3561 

2023-07-03 11:29:37.720 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3380 row column role 130 0 274 

2023-07-03 11:29:37.720 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3922 

2023-07-03 11:29:37.720 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3562 

2023-07-03 11:29:37.720 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3381 row column role 130 0 275 

2023-07-03 11:29:37.721 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3923 

2023-07-03 11:29:37.721 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3563 

2023-07-03 11:29:37.721 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3382 row column role 131 0 257 

2023-07-03 11:29:37.721 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3924 

2023-07-03 11:29:37.721 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3564 

2023-07-03 11:29:37.721 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3383 row column role 131 0 258 

2023-07-03 11:29:37.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3925 

2023-07-03 11:29:37.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3565 

2023-07-03 11:29:37.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3384 row column role 131 0 259 

2023-07-03 11:29:37.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3926 

2023-07-03 11:29:37.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3566 

2023-07-03 11:29:37.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3385 row column role 131 0 260 

2023-07-03 11:29:37.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3927 

2023-07-03 11:29:37.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3567 

2023-07-03 11:29:37.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3386 row column role 131 0 261 

2023-07-03 11:29:37.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3928 

2023-07-03 11:29:37.723 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3568 

2023-07-03 11:29:37.723 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3387 row column role 131 0 262 

2023-07-03 11:29:37.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3929 

2023-07-03 11:29:37.723 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3569 

2023-07-03 11:29:37.723 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3388 row column role 131 0 263 

2023-07-03 11:29:37.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3930 

2023-07-03 11:29:37.723 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3570 

2023-07-03 11:29:37.724 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3389 row column role 131 0 264 

2023-07-03 11:29:37.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3931 

2023-07-03 11:29:37.724 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3571 

2023-07-03 11:29:37.724 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3390 row column role 131 0 265 

2023-07-03 11:29:37.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3932 

2023-07-03 11:29:37.724 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3572 

2023-07-03 11:29:37.724 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3391 row column role 131 0 266 

2023-07-03 11:29:37.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3933 

2023-07-03 11:29:37.725 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3573 

2023-07-03 11:29:37.725 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3392 row column role 131 0 267 

2023-07-03 11:29:37.725 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3934 

2023-07-03 11:29:37.725 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3574 

2023-07-03 11:29:37.725 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3393 row column role 131 0 268 

2023-07-03 11:29:37.725 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3935 

2023-07-03 11:29:37.725 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3575 

2023-07-03 11:29:37.725 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3394 row column role 131 0 269 

2023-07-03 11:29:37.725 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3936 

2023-07-03 11:29:37.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3576 

2023-07-03 11:29:37.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3395 row column role 131 0 270 

2023-07-03 11:29:37.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3937 

2023-07-03 11:29:37.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3577 

2023-07-03 11:29:37.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3396 row column role 131 0 271 

2023-07-03 11:29:37.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3938 

2023-07-03 11:29:37.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3578 

2023-07-03 11:29:37.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3397 row column role 131 0 272 

2023-07-03 11:29:37.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3939 

2023-07-03 11:29:37.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3579 

2023-07-03 11:29:37.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3398 row column role 131 0 273 

2023-07-03 11:29:37.727 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3940 

2023-07-03 11:29:37.727 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3580 

2023-07-03 11:29:37.727 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3399 row column role 131 0 274 

2023-07-03 11:29:37.727 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3941 

2023-07-03 11:29:37.727 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3581 

2023-07-03 11:29:37.727 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3400 row column role 131 0 275 

2023-07-03 11:29:37.759 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3942 

2023-07-03 11:29:37.759 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3582 

2023-07-03 11:29:37.759 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3401 row column role 132 0 257 

2023-07-03 11:29:37.760 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3943 

2023-07-03 11:29:37.760 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3583 

2023-07-03 11:29:37.760 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3402 row column role 132 0 258 

2023-07-03 11:29:37.760 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3944 

2023-07-03 11:29:37.760 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3584 

2023-07-03 11:29:37.760 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3403 row column role 132 0 259 

2023-07-03 11:29:37.760 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3945 

2023-07-03 11:29:37.760 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3585 

2023-07-03 11:29:37.760 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3404 row column role 132 0 260 

2023-07-03 11:29:37.760 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3946 

2023-07-03 11:29:37.760 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3586 

2023-07-03 11:29:37.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3405 row column role 132 0 261 

2023-07-03 11:29:37.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3947 

2023-07-03 11:29:37.761 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3587 

2023-07-03 11:29:37.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3406 row column role 132 0 262 

2023-07-03 11:29:37.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3948 

2023-07-03 11:29:37.761 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3588 

2023-07-03 11:29:37.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3407 row column role 132 0 263 

2023-07-03 11:29:37.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3949 

2023-07-03 11:29:37.761 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3589 

2023-07-03 11:29:37.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3408 row column role 132 0 264 

2023-07-03 11:29:37.762 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3950 

2023-07-03 11:29:37.762 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3590 

2023-07-03 11:29:37.762 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3409 row column role 132 0 265 

2023-07-03 11:29:37.762 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3951 

2023-07-03 11:29:37.762 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3591 

2023-07-03 11:29:37.762 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3410 row column role 132 0 266 

2023-07-03 11:29:37.762 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3952 

2023-07-03 11:29:37.762 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3592 

2023-07-03 11:29:37.762 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3411 row column role 132 0 267 

2023-07-03 11:29:37.762 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3953 

2023-07-03 11:29:37.762 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3593 

2023-07-03 11:29:37.762 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3412 row column role 132 0 268 

2023-07-03 11:29:37.763 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3954 

2023-07-03 11:29:37.763 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3594 

2023-07-03 11:29:37.763 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3413 row column role 132 0 269 

2023-07-03 11:29:37.763 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3955 

2023-07-03 11:29:37.763 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3595 

2023-07-03 11:29:37.763 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3414 row column role 132 0 270 

2023-07-03 11:29:37.763 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3956 

2023-07-03 11:29:37.763 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3596 

2023-07-03 11:29:37.763 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3415 row column role 132 0 271 

2023-07-03 11:29:37.763 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3957 

2023-07-03 11:29:37.763 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3597 

2023-07-03 11:29:37.763 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3416 row column role 132 0 272 

2023-07-03 11:29:37.763 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3958 

2023-07-03 11:29:37.763 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3598 

2023-07-03 11:29:37.763 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3417 row column role 132 0 273 

2023-07-03 11:29:37.764 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3959 

2023-07-03 11:29:37.764 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3599 

2023-07-03 11:29:37.764 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3418 row column role 132 0 274 

2023-07-03 11:29:37.764 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3960 

2023-07-03 11:29:37.764 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3600 

2023-07-03 11:29:37.764 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3419 row column role 132 0 275 

2023-07-03 11:29:37.795 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3961 

2023-07-03 11:29:37.795 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3601 

2023-07-03 11:29:37.795 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3420 row column role 133 0 257 

2023-07-03 11:29:37.796 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3962 

2023-07-03 11:29:37.796 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3602 

2023-07-03 11:29:37.796 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3421 row column role 133 0 258 

2023-07-03 11:29:37.796 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3963 

2023-07-03 11:29:37.796 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3603 

2023-07-03 11:29:37.796 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3422 row column role 133 0 259 

2023-07-03 11:29:37.796 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3964 

2023-07-03 11:29:37.796 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3604 

2023-07-03 11:29:37.796 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3423 row column role 133 0 260 

2023-07-03 11:29:37.796 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3965 

2023-07-03 11:29:37.797 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3605 

2023-07-03 11:29:37.797 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3424 row column role 133 0 261 

2023-07-03 11:29:37.797 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3966 

2023-07-03 11:29:37.797 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3606 

2023-07-03 11:29:37.797 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3425 row column role 133 0 262 

2023-07-03 11:29:37.797 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3967 

2023-07-03 11:29:37.797 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3607 

2023-07-03 11:29:37.797 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3426 row column role 133 0 263 

2023-07-03 11:29:37.797 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3968 

2023-07-03 11:29:37.798 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3608 

2023-07-03 11:29:37.798 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3427 row column role 133 0 264 

2023-07-03 11:29:37.798 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3969 

2023-07-03 11:29:37.798 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3609 

2023-07-03 11:29:37.798 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3428 row column role 133 0 265 

2023-07-03 11:29:37.798 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3970 

2023-07-03 11:29:37.798 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3610 

2023-07-03 11:29:37.798 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3429 row column role 133 0 266 

2023-07-03 11:29:37.798 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3971 

2023-07-03 11:29:37.799 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3611 

2023-07-03 11:29:37.799 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3430 row column role 133 0 267 

2023-07-03 11:29:37.799 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3972 

2023-07-03 11:29:37.799 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3612 

2023-07-03 11:29:37.799 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3431 row column role 133 0 268 

2023-07-03 11:29:37.799 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3973 

2023-07-03 11:29:37.799 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3613 

2023-07-03 11:29:37.799 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3432 row column role 133 0 269 

2023-07-03 11:29:37.799 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3974 

2023-07-03 11:29:37.799 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3614 

2023-07-03 11:29:37.799 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3433 row column role 133 0 270 

2023-07-03 11:29:37.799 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3975 

2023-07-03 11:29:37.800 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3615 

2023-07-03 11:29:37.800 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3434 row column role 133 0 271 

2023-07-03 11:29:37.800 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3976 

2023-07-03 11:29:37.800 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3616 

2023-07-03 11:29:37.800 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3435 row column role 133 0 272 

2023-07-03 11:29:37.800 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3977 

2023-07-03 11:29:37.800 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3617 

2023-07-03 11:29:37.800 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3436 row column role 133 0 273 

2023-07-03 11:29:37.800 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3978 

2023-07-03 11:29:37.800 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3618 

2023-07-03 11:29:37.800 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3437 row column role 133 0 274 

2023-07-03 11:29:37.801 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3979 

2023-07-03 11:29:37.801 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3619 

2023-07-03 11:29:37.801 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3438 row column role 133 0 275 

2023-07-03 11:29:37.840 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3980 

2023-07-03 11:29:37.840 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3620 

2023-07-03 11:29:37.840 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3439 row column role 134 0 257 

2023-07-03 11:29:37.841 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3981 

2023-07-03 11:29:37.841 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3621 

2023-07-03 11:29:37.841 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3440 row column role 134 0 258 

2023-07-03 11:29:37.841 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3982 

2023-07-03 11:29:37.842 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3622 

2023-07-03 11:29:37.842 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3441 row column role 134 0 259 

2023-07-03 11:29:37.842 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3983 

2023-07-03 11:29:37.842 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3623 

2023-07-03 11:29:37.842 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3442 row column role 134 0 260 

2023-07-03 11:29:37.842 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3984 

2023-07-03 11:29:37.843 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3624 

2023-07-03 11:29:37.843 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3443 row column role 134 0 261 

2023-07-03 11:29:37.843 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3985 

2023-07-03 11:29:37.843 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3625 

2023-07-03 11:29:37.843 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3444 row column role 134 0 262 

2023-07-03 11:29:37.843 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3986 

2023-07-03 11:29:37.843 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3626 

2023-07-03 11:29:37.843 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3445 row column role 134 0 263 

2023-07-03 11:29:37.844 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3987 

2023-07-03 11:29:37.844 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3627 

2023-07-03 11:29:37.844 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3446 row column role 134 0 264 

2023-07-03 11:29:37.844 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3988 

2023-07-03 11:29:37.844 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3628 

2023-07-03 11:29:37.844 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3447 row column role 134 0 265 

2023-07-03 11:29:37.845 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3989 

2023-07-03 11:29:37.845 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3629 

2023-07-03 11:29:37.845 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3448 row column role 134 0 266 

2023-07-03 11:29:37.845 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3990 

2023-07-03 11:29:37.845 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3630 

2023-07-03 11:29:37.845 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3449 row column role 134 0 267 

2023-07-03 11:29:37.846 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3991 

2023-07-03 11:29:37.846 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3631 

2023-07-03 11:29:37.846 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3450 row column role 134 0 268 

2023-07-03 11:29:37.846 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3992 

2023-07-03 11:29:37.846 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3632 

2023-07-03 11:29:37.847 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3451 row column role 134 0 269 

2023-07-03 11:29:37.847 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3993 

2023-07-03 11:29:37.847 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3633 

2023-07-03 11:29:37.847 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3452 row column role 134 0 270 

2023-07-03 11:29:37.847 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3994 

2023-07-03 11:29:37.847 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3634 

2023-07-03 11:29:37.847 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3453 row column role 134 0 271 

2023-07-03 11:29:37.848 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3995 

2023-07-03 11:29:37.848 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3635 

2023-07-03 11:29:37.848 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3454 row column role 134 0 272 

2023-07-03 11:29:37.848 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3996 

2023-07-03 11:29:37.848 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3636 

2023-07-03 11:29:37.848 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3455 row column role 134 0 273 

2023-07-03 11:29:37.848 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3997 

2023-07-03 11:29:37.849 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3637 

2023-07-03 11:29:37.849 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3456 row column role 134 0 274 

2023-07-03 11:29:37.849 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3998 

2023-07-03 11:29:37.849 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3638 

2023-07-03 11:29:37.849 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3457 row column role 134 0 275 

2023-07-03 11:29:37.909 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 3999 

2023-07-03 11:29:37.909 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3639 

2023-07-03 11:29:37.909 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3458 row column role 135 0 257 

2023-07-03 11:29:37.909 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4000 

2023-07-03 11:29:37.910 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3640 

2023-07-03 11:29:37.910 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3459 row column role 135 0 258 

2023-07-03 11:29:37.910 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4001 

2023-07-03 11:29:37.910 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3641 

2023-07-03 11:29:37.910 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3460 row column role 135 0 259 

2023-07-03 11:29:37.911 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4002 

2023-07-03 11:29:37.911 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3642 

2023-07-03 11:29:37.911 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3461 row column role 135 0 260 

2023-07-03 11:29:37.911 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4003 

2023-07-03 11:29:37.911 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3643 

2023-07-03 11:29:37.911 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3462 row column role 135 0 261 

2023-07-03 11:29:37.912 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4004 

2023-07-03 11:29:37.912 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3644 

2023-07-03 11:29:37.912 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3463 row column role 135 0 262 

2023-07-03 11:29:37.912 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4005 

2023-07-03 11:29:37.912 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3645 

2023-07-03 11:29:37.912 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3464 row column role 135 0 263 

2023-07-03 11:29:37.912 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4006 

2023-07-03 11:29:37.912 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3646 

2023-07-03 11:29:37.912 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3465 row column role 135 0 264 

2023-07-03 11:29:37.912 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4007 

2023-07-03 11:29:37.912 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3647 

2023-07-03 11:29:37.913 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3466 row column role 135 0 265 

2023-07-03 11:29:37.913 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4008 

2023-07-03 11:29:37.913 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3648 

2023-07-03 11:29:37.913 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3467 row column role 135 0 266 

2023-07-03 11:29:37.913 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4009 

2023-07-03 11:29:37.913 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3649 

2023-07-03 11:29:37.914 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3468 row column role 135 0 267 

2023-07-03 11:29:37.914 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4010 

2023-07-03 11:29:37.914 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3650 

2023-07-03 11:29:37.914 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3469 row column role 135 0 268 

2023-07-03 11:29:37.914 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4011 

2023-07-03 11:29:37.914 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3651 

2023-07-03 11:29:37.914 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3470 row column role 135 0 269 

2023-07-03 11:29:37.915 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4012 

2023-07-03 11:29:37.915 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3652 

2023-07-03 11:29:37.915 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3471 row column role 135 0 270 

2023-07-03 11:29:37.915 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4013 

2023-07-03 11:29:37.915 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3653 

2023-07-03 11:29:37.915 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3472 row column role 135 0 271 

2023-07-03 11:29:37.915 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4014 

2023-07-03 11:29:37.915 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3654 

2023-07-03 11:29:37.915 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3473 row column role 135 0 272 

2023-07-03 11:29:37.915 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4015 

2023-07-03 11:29:37.915 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3655 

2023-07-03 11:29:37.915 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3474 row column role 135 0 273 

2023-07-03 11:29:37.916 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4016 

2023-07-03 11:29:37.916 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3656 

2023-07-03 11:29:37.916 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3475 row column role 135 0 274 

2023-07-03 11:29:37.916 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4017 

2023-07-03 11:29:37.916 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3657 

2023-07-03 11:29:37.916 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3476 row column role 135 0 275 

2023-07-03 11:29:37.942 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4018 

2023-07-03 11:29:37.942 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3658 

2023-07-03 11:29:37.942 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3477 row column role 136 0 257 

2023-07-03 11:29:37.943 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4019 

2023-07-03 11:29:37.943 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3659 

2023-07-03 11:29:37.943 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3478 row column role 136 0 258 

2023-07-03 11:29:37.943 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4020 

2023-07-03 11:29:37.943 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3660 

2023-07-03 11:29:37.943 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3479 row column role 136 0 259 

2023-07-03 11:29:37.943 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4021 

2023-07-03 11:29:37.943 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3661 

2023-07-03 11:29:37.943 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3480 row column role 136 0 260 

2023-07-03 11:29:37.944 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4022 

2023-07-03 11:29:37.944 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3662 

2023-07-03 11:29:37.944 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3481 row column role 136 0 261 

2023-07-03 11:29:37.944 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4023 

2023-07-03 11:29:37.944 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3663 

2023-07-03 11:29:37.944 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3482 row column role 136 0 262 

2023-07-03 11:29:37.944 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4024 

2023-07-03 11:29:37.944 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3664 

2023-07-03 11:29:37.944 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3483 row column role 136 0 263 

2023-07-03 11:29:37.945 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4025 

2023-07-03 11:29:37.945 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3665 

2023-07-03 11:29:37.945 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3484 row column role 136 0 264 

2023-07-03 11:29:37.945 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4026 

2023-07-03 11:29:37.945 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3666 

2023-07-03 11:29:37.945 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3485 row column role 136 0 265 

2023-07-03 11:29:37.945 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4027 

2023-07-03 11:29:37.945 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3667 

2023-07-03 11:29:37.945 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3486 row column role 136 0 266 

2023-07-03 11:29:37.945 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4028 

2023-07-03 11:29:37.945 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3668 

2023-07-03 11:29:37.945 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3487 row column role 136 0 267 

2023-07-03 11:29:37.946 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4029 

2023-07-03 11:29:37.946 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3669 

2023-07-03 11:29:37.946 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3488 row column role 136 0 268 

2023-07-03 11:29:37.946 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4030 

2023-07-03 11:29:37.946 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3670 

2023-07-03 11:29:37.946 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3489 row column role 136 0 269 

2023-07-03 11:29:37.946 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4031 

2023-07-03 11:29:37.946 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3671 

2023-07-03 11:29:37.946 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3490 row column role 136 0 270 

2023-07-03 11:29:37.947 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4032 

2023-07-03 11:29:37.947 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3672 

2023-07-03 11:29:37.947 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3491 row column role 136 0 271 

2023-07-03 11:29:37.947 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4033 

2023-07-03 11:29:37.947 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3673 

2023-07-03 11:29:37.947 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3492 row column role 136 0 272 

2023-07-03 11:29:37.947 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4034 

2023-07-03 11:29:37.947 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3674 

2023-07-03 11:29:37.947 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3493 row column role 136 0 273 

2023-07-03 11:29:37.947 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4035 

2023-07-03 11:29:37.947 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3675 

2023-07-03 11:29:37.947 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3494 row column role 136 0 274 

2023-07-03 11:29:37.948 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4036 

2023-07-03 11:29:37.948 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3676 

2023-07-03 11:29:37.948 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3495 row column role 136 0 275 

2023-07-03 11:29:38.108 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4037 

2023-07-03 11:29:38.108 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3677 

2023-07-03 11:29:38.108 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3496 row column role 137 0 257 

2023-07-03 11:29:38.108 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4038 

2023-07-03 11:29:38.108 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3678 

2023-07-03 11:29:38.108 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3497 row column role 137 0 258 

2023-07-03 11:29:38.109 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4039 

2023-07-03 11:29:38.109 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3679 

2023-07-03 11:29:38.109 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3498 row column role 137 0 259 

2023-07-03 11:29:38.109 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4040 

2023-07-03 11:29:38.109 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3680 

2023-07-03 11:29:38.109 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3499 row column role 137 0 260 

2023-07-03 11:29:38.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4041 

2023-07-03 11:29:38.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3681 

2023-07-03 11:29:38.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3500 row column role 137 0 261 

2023-07-03 11:29:38.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4042 

2023-07-03 11:29:38.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3682 

2023-07-03 11:29:38.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3501 row column role 137 0 262 

2023-07-03 11:29:38.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4043 

2023-07-03 11:29:38.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3683 

2023-07-03 11:29:38.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3502 row column role 137 0 263 

2023-07-03 11:29:38.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4044 

2023-07-03 11:29:38.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3684 

2023-07-03 11:29:38.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3503 row column role 137 0 264 

2023-07-03 11:29:38.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4045 

2023-07-03 11:29:38.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3685 

2023-07-03 11:29:38.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3504 row column role 137 0 265 

2023-07-03 11:29:38.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4046 

2023-07-03 11:29:38.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3686 

2023-07-03 11:29:38.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3505 row column role 137 0 266 

2023-07-03 11:29:38.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4047 

2023-07-03 11:29:38.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3687 

2023-07-03 11:29:38.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3506 row column role 137 0 267 

2023-07-03 11:29:38.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4048 

2023-07-03 11:29:38.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3688 

2023-07-03 11:29:38.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3507 row column role 137 0 268 

2023-07-03 11:29:38.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4049 

2023-07-03 11:29:38.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3689 

2023-07-03 11:29:38.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3508 row column role 137 0 269 

2023-07-03 11:29:38.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4050 

2023-07-03 11:29:38.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3690 

2023-07-03 11:29:38.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3509 row column role 137 0 270 

2023-07-03 11:29:38.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4051 

2023-07-03 11:29:38.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3691 

2023-07-03 11:29:38.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3510 row column role 137 0 271 

2023-07-03 11:29:38.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4052 

2023-07-03 11:29:38.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3692 

2023-07-03 11:29:38.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3511 row column role 137 0 272 

2023-07-03 11:29:38.115 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4053 

2023-07-03 11:29:38.115 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3693 

2023-07-03 11:29:38.115 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3512 row column role 137 0 273 

2023-07-03 11:29:38.115 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4054 

2023-07-03 11:29:38.115 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3694 

2023-07-03 11:29:38.115 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3513 row column role 137 0 274 

2023-07-03 11:29:38.115 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4055 

2023-07-03 11:29:38.116 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3695 

2023-07-03 11:29:38.116 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3514 row column role 137 0 275 

2023-07-03 11:29:38.117 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4056 

2023-07-03 11:29:38.117 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3696 

2023-07-03 11:29:38.117 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3515 row column role 138 0 257 

2023-07-03 11:29:38.117 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4057 

2023-07-03 11:29:38.117 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3697 

2023-07-03 11:29:38.117 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3516 row column role 138 0 258 

2023-07-03 11:29:38.118 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4058 

2023-07-03 11:29:38.118 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3698 

2023-07-03 11:29:38.118 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3517 row column role 138 0 259 

2023-07-03 11:29:38.118 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4059 

2023-07-03 11:29:38.118 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3699 

2023-07-03 11:29:38.118 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3518 row column role 138 0 260 

2023-07-03 11:29:38.118 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4060 

2023-07-03 11:29:38.119 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3700 

2023-07-03 11:29:38.119 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3519 row column role 138 0 261 

2023-07-03 11:29:38.119 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4061 

2023-07-03 11:29:38.119 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3701 

2023-07-03 11:29:38.119 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3520 row column role 138 0 262 

2023-07-03 11:29:38.119 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4062 

2023-07-03 11:29:38.120 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3702 

2023-07-03 11:29:38.120 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3521 row column role 138 0 263 

2023-07-03 11:29:38.120 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4063 

2023-07-03 11:29:38.120 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3703 

2023-07-03 11:29:38.120 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3522 row column role 138 0 264 

2023-07-03 11:29:38.120 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4064 

2023-07-03 11:29:38.120 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3704 

2023-07-03 11:29:38.120 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3523 row column role 138 0 265 

2023-07-03 11:29:38.121 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4065 

2023-07-03 11:29:38.121 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3705 

2023-07-03 11:29:38.121 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3524 row column role 138 0 266 

2023-07-03 11:29:38.121 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4066 

2023-07-03 11:29:38.121 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3706 

2023-07-03 11:29:38.121 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3525 row column role 138 0 267 

2023-07-03 11:29:38.122 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4067 

2023-07-03 11:29:38.122 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3707 

2023-07-03 11:29:38.122 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3526 row column role 138 0 268 

2023-07-03 11:29:38.122 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4068 

2023-07-03 11:29:38.122 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3708 

2023-07-03 11:29:38.122 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3527 row column role 138 0 269 

2023-07-03 11:29:38.123 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4069 

2023-07-03 11:29:38.123 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3709 

2023-07-03 11:29:38.123 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3528 row column role 138 0 270 

2023-07-03 11:29:38.123 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4070 

2023-07-03 11:29:38.123 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3710 

2023-07-03 11:29:38.123 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3529 row column role 138 0 271 

2023-07-03 11:29:38.123 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4071 

2023-07-03 11:29:38.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3711 

2023-07-03 11:29:38.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3530 row column role 138 0 272 

2023-07-03 11:29:38.124 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4072 

2023-07-03 11:29:38.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3712 

2023-07-03 11:29:38.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3531 row column role 138 0 273 

2023-07-03 11:29:38.124 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4073 

2023-07-03 11:29:38.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3713 

2023-07-03 11:29:38.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3532 row column role 138 0 274 

2023-07-03 11:29:38.125 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4074 

2023-07-03 11:29:38.125 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3714 

2023-07-03 11:29:38.125 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3533 row column role 138 0 275 

2023-07-03 11:29:38.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4075 

2023-07-03 11:29:38.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3715 

2023-07-03 11:29:38.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3534 row column role 139 0 257 

2023-07-03 11:29:38.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4076 

2023-07-03 11:29:38.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3716 

2023-07-03 11:29:38.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3535 row column role 139 0 258 

2023-07-03 11:29:38.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4077 

2023-07-03 11:29:38.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3717 

2023-07-03 11:29:38.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3536 row column role 139 0 259 

2023-07-03 11:29:38.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4078 

2023-07-03 11:29:38.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3718 

2023-07-03 11:29:38.139 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3537 row column role 139 0 260 

2023-07-03 11:29:38.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4079 

2023-07-03 11:29:38.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3719 

2023-07-03 11:29:38.139 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3538 row column role 139 0 261 

2023-07-03 11:29:38.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4080 

2023-07-03 11:29:38.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3720 

2023-07-03 11:29:38.139 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3539 row column role 139 0 262 

2023-07-03 11:29:38.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4081 

2023-07-03 11:29:38.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3721 

2023-07-03 11:29:38.139 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3540 row column role 139 0 263 

2023-07-03 11:29:38.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4082 

2023-07-03 11:29:38.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3722 

2023-07-03 11:29:38.139 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3541 row column role 139 0 264 

2023-07-03 11:29:38.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4083 

2023-07-03 11:29:38.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3723 

2023-07-03 11:29:38.140 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3542 row column role 139 0 265 

2023-07-03 11:29:38.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4084 

2023-07-03 11:29:38.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3724 

2023-07-03 11:29:38.140 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3543 row column role 139 0 266 

2023-07-03 11:29:38.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4085 

2023-07-03 11:29:38.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3725 

2023-07-03 11:29:38.140 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3544 row column role 139 0 267 

2023-07-03 11:29:38.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4086 

2023-07-03 11:29:38.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3726 

2023-07-03 11:29:38.140 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3545 row column role 139 0 268 

2023-07-03 11:29:38.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4087 

2023-07-03 11:29:38.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3727 

2023-07-03 11:29:38.140 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3546 row column role 139 0 269 

2023-07-03 11:29:38.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4088 

2023-07-03 11:29:38.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3728 

2023-07-03 11:29:38.140 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3547 row column role 139 0 270 

2023-07-03 11:29:38.141 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4089 

2023-07-03 11:29:38.141 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3729 

2023-07-03 11:29:38.141 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3548 row column role 139 0 271 

2023-07-03 11:29:38.141 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4090 

2023-07-03 11:29:38.141 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3730 

2023-07-03 11:29:38.141 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3549 row column role 139 0 272 

2023-07-03 11:29:38.141 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4091 

2023-07-03 11:29:38.141 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3731 

2023-07-03 11:29:38.141 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3550 row column role 139 0 273 

2023-07-03 11:29:38.141 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4092 

2023-07-03 11:29:38.141 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3732 

2023-07-03 11:29:38.141 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3551 row column role 139 0 274 

2023-07-03 11:29:38.141 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4093 

2023-07-03 11:29:38.141 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3733 

2023-07-03 11:29:38.141 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3552 row column role 139 0 275 

2023-07-03 11:29:38.191 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4094 

2023-07-03 11:29:38.191 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3734 

2023-07-03 11:29:38.191 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3553 row column role 140 0 257 

2023-07-03 11:29:38.192 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4095 

2023-07-03 11:29:38.192 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3735 

2023-07-03 11:29:38.192 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3554 row column role 140 0 258 

2023-07-03 11:29:38.192 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4096 

2023-07-03 11:29:38.192 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3736 

2023-07-03 11:29:38.192 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3555 row column role 140 0 259 

2023-07-03 11:29:38.192 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4097 

2023-07-03 11:29:38.192 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3737 

2023-07-03 11:29:38.192 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3556 row column role 140 0 260 

2023-07-03 11:29:38.192 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4098 

2023-07-03 11:29:38.192 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3738 

2023-07-03 11:29:38.192 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3557 row column role 140 0 261 

2023-07-03 11:29:38.193 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4099 

2023-07-03 11:29:38.193 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3739 

2023-07-03 11:29:38.193 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3558 row column role 140 0 262 

2023-07-03 11:29:38.193 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4100 

2023-07-03 11:29:38.193 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3740 

2023-07-03 11:29:38.193 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3559 row column role 140 0 263 

2023-07-03 11:29:38.193 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4101 

2023-07-03 11:29:38.193 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3741 

2023-07-03 11:29:38.193 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3560 row column role 140 0 264 

2023-07-03 11:29:38.193 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4102 

2023-07-03 11:29:38.193 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3742 

2023-07-03 11:29:38.193 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3561 row column role 140 0 265 

2023-07-03 11:29:38.194 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4103 

2023-07-03 11:29:38.194 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3743 

2023-07-03 11:29:38.194 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3562 row column role 140 0 266 

2023-07-03 11:29:38.194 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4104 

2023-07-03 11:29:38.194 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3744 

2023-07-03 11:29:38.194 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3563 row column role 140 0 267 

2023-07-03 11:29:38.194 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4105 

2023-07-03 11:29:38.194 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3745 

2023-07-03 11:29:38.194 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3564 row column role 140 0 268 

2023-07-03 11:29:38.194 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4106 

2023-07-03 11:29:38.194 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3746 

2023-07-03 11:29:38.194 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3565 row column role 140 0 269 

2023-07-03 11:29:38.195 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4107 

2023-07-03 11:29:38.195 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3747 

2023-07-03 11:29:38.195 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3566 row column role 140 0 270 

2023-07-03 11:29:38.195 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4108 

2023-07-03 11:29:38.195 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3748 

2023-07-03 11:29:38.195 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3567 row column role 140 0 271 

2023-07-03 11:29:38.195 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4109 

2023-07-03 11:29:38.195 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3749 

2023-07-03 11:29:38.195 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3568 row column role 140 0 272 

2023-07-03 11:29:38.195 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4110 

2023-07-03 11:29:38.195 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3750 

2023-07-03 11:29:38.195 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3569 row column role 140 0 273 

2023-07-03 11:29:38.196 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4111 

2023-07-03 11:29:38.196 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3751 

2023-07-03 11:29:38.196 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3570 row column role 140 0 274 

2023-07-03 11:29:38.196 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4112 

2023-07-03 11:29:38.196 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3752 

2023-07-03 11:29:38.196 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3571 row column role 140 0 275 

2023-07-03 11:29:38.256 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4113 

2023-07-03 11:29:38.256 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3753 

2023-07-03 11:29:38.256 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3572 row column role 141 0 257 

2023-07-03 11:29:38.257 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4114 

2023-07-03 11:29:38.257 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3754 

2023-07-03 11:29:38.257 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3573 row column role 141 0 258 

2023-07-03 11:29:38.257 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4115 

2023-07-03 11:29:38.257 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3755 

2023-07-03 11:29:38.258 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3574 row column role 141 0 259 

2023-07-03 11:29:38.258 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4116 

2023-07-03 11:29:38.258 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3756 

2023-07-03 11:29:38.258 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3575 row column role 141 0 260 

2023-07-03 11:29:38.258 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4117 

2023-07-03 11:29:38.258 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3757 

2023-07-03 11:29:38.258 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3576 row column role 141 0 261 

2023-07-03 11:29:38.259 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4118 

2023-07-03 11:29:38.259 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3758 

2023-07-03 11:29:38.259 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3577 row column role 141 0 262 

2023-07-03 11:29:38.259 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4119 

2023-07-03 11:29:38.259 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3759 

2023-07-03 11:29:38.259 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3578 row column role 141 0 263 

2023-07-03 11:29:38.260 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4120 

2023-07-03 11:29:38.260 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3760 

2023-07-03 11:29:38.260 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3579 row column role 141 0 264 

2023-07-03 11:29:38.260 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4121 

2023-07-03 11:29:38.260 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3761 

2023-07-03 11:29:38.260 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3580 row column role 141 0 265 

2023-07-03 11:29:38.261 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4122 

2023-07-03 11:29:38.261 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3762 

2023-07-03 11:29:38.261 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3581 row column role 141 0 266 

2023-07-03 11:29:38.261 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4123 

2023-07-03 11:29:38.261 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3763 

2023-07-03 11:29:38.261 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3582 row column role 141 0 267 

2023-07-03 11:29:38.261 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4124 

2023-07-03 11:29:38.262 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3764 

2023-07-03 11:29:38.262 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3583 row column role 141 0 268 

2023-07-03 11:29:38.262 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4125 

2023-07-03 11:29:38.262 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3765 

2023-07-03 11:29:38.262 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3584 row column role 141 0 269 

2023-07-03 11:29:38.262 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4126 

2023-07-03 11:29:38.262 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3766 

2023-07-03 11:29:38.263 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3585 row column role 141 0 270 

2023-07-03 11:29:38.263 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4127 

2023-07-03 11:29:38.263 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3767 

2023-07-03 11:29:38.263 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3586 row column role 141 0 271 

2023-07-03 11:29:38.263 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4128 

2023-07-03 11:29:38.263 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3768 

2023-07-03 11:29:38.263 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3587 row column role 141 0 272 

2023-07-03 11:29:38.264 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4129 

2023-07-03 11:29:38.264 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3769 

2023-07-03 11:29:38.264 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3588 row column role 141 0 273 

2023-07-03 11:29:38.264 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4130 

2023-07-03 11:29:38.264 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3770 

2023-07-03 11:29:38.264 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3589 row column role 141 0 274 

2023-07-03 11:29:38.264 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4131 

2023-07-03 11:29:38.265 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3771 

2023-07-03 11:29:38.265 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3590 row column role 141 0 275 

2023-07-03 11:29:38.323 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4132 

2023-07-03 11:29:38.323 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3772 

2023-07-03 11:29:38.323 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3591 row column role 142 0 257 

2023-07-03 11:29:38.323 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4133 

2023-07-03 11:29:38.323 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3773 

2023-07-03 11:29:38.323 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3592 row column role 142 0 258 

2023-07-03 11:29:38.324 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4134 

2023-07-03 11:29:38.324 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3774 

2023-07-03 11:29:38.324 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3593 row column role 142 0 259 

2023-07-03 11:29:38.324 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4135 

2023-07-03 11:29:38.324 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3775 

2023-07-03 11:29:38.324 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3594 row column role 142 0 260 

2023-07-03 11:29:38.324 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4136 

2023-07-03 11:29:38.324 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3776 

2023-07-03 11:29:38.324 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3595 row column role 142 0 261 

2023-07-03 11:29:38.325 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4137 

2023-07-03 11:29:38.325 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3777 

2023-07-03 11:29:38.325 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3596 row column role 142 0 262 

2023-07-03 11:29:38.325 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4138 

2023-07-03 11:29:38.325 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3778 

2023-07-03 11:29:38.325 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3597 row column role 142 0 263 

2023-07-03 11:29:38.325 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4139 

2023-07-03 11:29:38.325 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3779 

2023-07-03 11:29:38.325 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3598 row column role 142 0 264 

2023-07-03 11:29:38.326 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4140 

2023-07-03 11:29:38.326 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3780 

2023-07-03 11:29:38.326 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3599 row column role 142 0 265 

2023-07-03 11:29:38.326 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4141 

2023-07-03 11:29:38.326 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3781 

2023-07-03 11:29:38.326 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3600 row column role 142 0 266 

2023-07-03 11:29:38.326 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4142 

2023-07-03 11:29:38.326 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3782 

2023-07-03 11:29:38.326 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3601 row column role 142 0 267 

2023-07-03 11:29:38.326 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4143 

2023-07-03 11:29:38.327 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3783 

2023-07-03 11:29:38.327 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3602 row column role 142 0 268 

2023-07-03 11:29:38.327 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4144 

2023-07-03 11:29:38.327 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3784 

2023-07-03 11:29:38.327 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3603 row column role 142 0 269 

2023-07-03 11:29:38.327 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4145 

2023-07-03 11:29:38.327 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3785 

2023-07-03 11:29:38.327 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3604 row column role 142 0 270 

2023-07-03 11:29:38.327 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4146 

2023-07-03 11:29:38.327 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3786 

2023-07-03 11:29:38.327 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3605 row column role 142 0 271 

2023-07-03 11:29:38.328 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4147 

2023-07-03 11:29:38.328 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3787 

2023-07-03 11:29:38.328 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3606 row column role 142 0 272 

2023-07-03 11:29:38.328 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4148 

2023-07-03 11:29:38.328 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3788 

2023-07-03 11:29:38.328 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3607 row column role 142 0 273 

2023-07-03 11:29:38.328 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4149 

2023-07-03 11:29:38.329 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3789 

2023-07-03 11:29:38.329 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3608 row column role 142 0 274 

2023-07-03 11:29:38.329 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4150 

2023-07-03 11:29:38.329 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3790 

2023-07-03 11:29:38.329 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3609 row column role 142 0 275 

2023-07-03 11:29:38.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4151 

2023-07-03 11:29:38.536 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3791 

2023-07-03 11:29:38.537 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3610 row column role 143 0 257 

2023-07-03 11:29:38.537 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4152 

2023-07-03 11:29:38.537 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3792 

2023-07-03 11:29:38.537 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3611 row column role 143 0 258 

2023-07-03 11:29:38.538 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4153 

2023-07-03 11:29:38.538 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3793 

2023-07-03 11:29:38.538 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3612 row column role 143 0 259 

2023-07-03 11:29:38.538 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4154 

2023-07-03 11:29:38.538 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3794 

2023-07-03 11:29:38.538 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3613 row column role 143 0 260 

2023-07-03 11:29:38.539 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4155 

2023-07-03 11:29:38.539 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3795 

2023-07-03 11:29:38.539 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3614 row column role 143 0 261 

2023-07-03 11:29:38.539 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4156 

2023-07-03 11:29:38.539 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3796 

2023-07-03 11:29:38.539 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3615 row column role 143 0 262 

2023-07-03 11:29:38.540 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4157 

2023-07-03 11:29:38.540 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3797 

2023-07-03 11:29:38.540 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3616 row column role 143 0 263 

2023-07-03 11:29:38.540 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4158 

2023-07-03 11:29:38.540 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3798 

2023-07-03 11:29:38.541 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3617 row column role 143 0 264 

2023-07-03 11:29:38.541 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4159 

2023-07-03 11:29:38.541 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3799 

2023-07-03 11:29:38.541 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3618 row column role 143 0 265 

2023-07-03 11:29:38.542 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4160 

2023-07-03 11:29:38.542 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3800 

2023-07-03 11:29:38.542 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3619 row column role 143 0 266 

2023-07-03 11:29:38.542 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4161 

2023-07-03 11:29:38.542 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3801 

2023-07-03 11:29:38.542 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3620 row column role 143 0 267 

2023-07-03 11:29:38.543 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4162 

2023-07-03 11:29:38.543 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3802 

2023-07-03 11:29:38.543 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3621 row column role 143 0 268 

2023-07-03 11:29:38.543 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4163 

2023-07-03 11:29:38.543 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3803 

2023-07-03 11:29:38.543 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3622 row column role 143 0 269 

2023-07-03 11:29:38.544 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4164 

2023-07-03 11:29:38.544 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3804 

2023-07-03 11:29:38.544 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3623 row column role 143 0 270 

2023-07-03 11:29:38.544 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4165 

2023-07-03 11:29:38.544 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3805 

2023-07-03 11:29:38.544 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3624 row column role 143 0 271 

2023-07-03 11:29:38.545 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4166 

2023-07-03 11:29:38.545 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3806 

2023-07-03 11:29:38.545 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3625 row column role 143 0 272 

2023-07-03 11:29:38.545 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4167 

2023-07-03 11:29:38.545 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3807 

2023-07-03 11:29:38.545 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3626 row column role 143 0 273 

2023-07-03 11:29:38.545 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4168 

2023-07-03 11:29:38.546 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3808 

2023-07-03 11:29:38.546 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3627 row column role 143 0 274 

2023-07-03 11:29:38.546 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4169 

2023-07-03 11:29:38.546 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3809 

2023-07-03 11:29:38.546 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3628 row column role 143 0 275 

2023-07-03 11:29:38.574 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4170 

2023-07-03 11:29:38.575 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3810 

2023-07-03 11:29:38.575 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3629 row column role 144 0 257 

2023-07-03 11:29:38.575 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4171 

2023-07-03 11:29:38.575 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3811 

2023-07-03 11:29:38.575 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3630 row column role 144 0 258 

2023-07-03 11:29:38.576 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4172 

2023-07-03 11:29:38.576 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3812 

2023-07-03 11:29:38.576 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3631 row column role 144 0 259 

2023-07-03 11:29:38.576 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4173 

2023-07-03 11:29:38.576 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3813 

2023-07-03 11:29:38.576 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3632 row column role 144 0 260 

2023-07-03 11:29:38.577 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4174 

2023-07-03 11:29:38.577 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3814 

2023-07-03 11:29:38.577 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3633 row column role 144 0 261 

2023-07-03 11:29:38.577 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4175 

2023-07-03 11:29:38.577 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3815 

2023-07-03 11:29:38.577 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3634 row column role 144 0 262 

2023-07-03 11:29:38.578 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4176 

2023-07-03 11:29:38.578 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3816 

2023-07-03 11:29:38.578 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3635 row column role 144 0 263 

2023-07-03 11:29:38.578 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4177 

2023-07-03 11:29:38.578 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3817 

2023-07-03 11:29:38.578 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3636 row column role 144 0 264 

2023-07-03 11:29:38.579 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4178 

2023-07-03 11:29:38.579 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3818 

2023-07-03 11:29:38.579 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3637 row column role 144 0 265 

2023-07-03 11:29:38.579 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4179 

2023-07-03 11:29:38.579 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3819 

2023-07-03 11:29:38.579 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3638 row column role 144 0 266 

2023-07-03 11:29:38.579 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4180 

2023-07-03 11:29:38.579 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3820 

2023-07-03 11:29:38.579 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3639 row column role 144 0 267 

2023-07-03 11:29:38.580 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4181 

2023-07-03 11:29:38.580 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3821 

2023-07-03 11:29:38.580 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3640 row column role 144 0 268 

2023-07-03 11:29:38.580 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4182 

2023-07-03 11:29:38.580 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3822 

2023-07-03 11:29:38.580 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3641 row column role 144 0 269 

2023-07-03 11:29:38.580 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4183 

2023-07-03 11:29:38.580 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3823 

2023-07-03 11:29:38.580 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3642 row column role 144 0 270 

2023-07-03 11:29:38.581 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4184 

2023-07-03 11:29:38.581 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3824 

2023-07-03 11:29:38.581 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3643 row column role 144 0 271 

2023-07-03 11:29:38.581 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4185 

2023-07-03 11:29:38.581 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3825 

2023-07-03 11:29:38.581 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3644 row column role 144 0 272 

2023-07-03 11:29:38.581 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4186 

2023-07-03 11:29:38.581 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3826 

2023-07-03 11:29:38.581 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3645 row column role 144 0 273 

2023-07-03 11:29:38.581 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4187 

2023-07-03 11:29:38.582 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3827 

2023-07-03 11:29:38.582 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3646 row column role 144 0 274 

2023-07-03 11:29:38.582 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4188 

2023-07-03 11:29:38.582 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3828 

2023-07-03 11:29:38.582 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3647 row column role 144 0 275 

2023-07-03 11:29:38.594 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4189 

2023-07-03 11:29:38.594 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3829 

2023-07-03 11:29:38.594 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3648 row column role 145 0 257 

2023-07-03 11:29:38.594 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4190 

2023-07-03 11:29:38.594 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3830 

2023-07-03 11:29:38.594 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3649 row column role 145 0 258 

2023-07-03 11:29:38.594 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4191 

2023-07-03 11:29:38.594 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3831 

2023-07-03 11:29:38.594 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3650 row column role 145 0 259 

2023-07-03 11:29:38.595 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4192 

2023-07-03 11:29:38.595 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3832 

2023-07-03 11:29:38.595 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3651 row column role 145 0 260 

2023-07-03 11:29:38.595 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4193 

2023-07-03 11:29:38.595 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3833 

2023-07-03 11:29:38.595 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3652 row column role 145 0 261 

2023-07-03 11:29:38.595 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4194 

2023-07-03 11:29:38.595 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3834 

2023-07-03 11:29:38.595 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3653 row column role 145 0 262 

2023-07-03 11:29:38.595 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4195 

2023-07-03 11:29:38.595 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3835 

2023-07-03 11:29:38.595 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3654 row column role 145 0 263 

2023-07-03 11:29:38.595 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4196 

2023-07-03 11:29:38.595 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3836 

2023-07-03 11:29:38.595 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3655 row column role 145 0 264 

2023-07-03 11:29:38.595 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4197 

2023-07-03 11:29:38.595 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3837 

2023-07-03 11:29:38.595 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3656 row column role 145 0 265 

2023-07-03 11:29:38.596 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4198 

2023-07-03 11:29:38.596 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3838 

2023-07-03 11:29:38.596 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3657 row column role 145 0 266 

2023-07-03 11:29:38.596 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4199 

2023-07-03 11:29:38.596 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3839 

2023-07-03 11:29:38.596 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3658 row column role 145 0 267 

2023-07-03 11:29:38.596 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4200 

2023-07-03 11:29:38.596 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3840 

2023-07-03 11:29:38.596 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3659 row column role 145 0 268 

2023-07-03 11:29:38.596 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4201 

2023-07-03 11:29:38.596 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3841 

2023-07-03 11:29:38.596 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3660 row column role 145 0 269 

2023-07-03 11:29:38.596 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4202 

2023-07-03 11:29:38.596 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3842 

2023-07-03 11:29:38.596 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3661 row column role 145 0 270 

2023-07-03 11:29:38.596 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4203 

2023-07-03 11:29:38.596 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3843 

2023-07-03 11:29:38.596 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3662 row column role 145 0 271 

2023-07-03 11:29:38.596 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4204 

2023-07-03 11:29:38.597 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3844 

2023-07-03 11:29:38.597 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3663 row column role 145 0 272 

2023-07-03 11:29:38.597 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4205 

2023-07-03 11:29:38.597 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3845 

2023-07-03 11:29:38.597 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3664 row column role 145 0 273 

2023-07-03 11:29:38.597 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4206 

2023-07-03 11:29:38.597 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3846 

2023-07-03 11:29:38.597 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3665 row column role 145 0 274 

2023-07-03 11:29:38.597 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4207 

2023-07-03 11:29:38.597 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3847 

2023-07-03 11:29:38.597 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3666 row column role 145 0 275 

2023-07-03 11:29:38.639 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4208 

2023-07-03 11:29:38.639 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3848 

2023-07-03 11:29:38.639 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3667 row column role 146 0 257 

2023-07-03 11:29:38.639 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4209 

2023-07-03 11:29:38.639 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3849 

2023-07-03 11:29:38.639 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3668 row column role 146 0 258 

2023-07-03 11:29:38.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4210 

2023-07-03 11:29:38.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3850 

2023-07-03 11:29:38.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3669 row column role 146 0 259 

2023-07-03 11:29:38.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4211 

2023-07-03 11:29:38.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3851 

2023-07-03 11:29:38.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3670 row column role 146 0 260 

2023-07-03 11:29:38.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4212 

2023-07-03 11:29:38.640 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3852 

2023-07-03 11:29:38.640 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3671 row column role 146 0 261 

2023-07-03 11:29:38.640 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4213 

2023-07-03 11:29:38.641 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3853 

2023-07-03 11:29:38.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3672 row column role 146 0 262 

2023-07-03 11:29:38.641 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4214 

2023-07-03 11:29:38.641 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3854 

2023-07-03 11:29:38.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3673 row column role 146 0 263 

2023-07-03 11:29:38.641 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4215 

2023-07-03 11:29:38.641 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3855 

2023-07-03 11:29:38.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3674 row column role 146 0 264 

2023-07-03 11:29:38.641 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4216 

2023-07-03 11:29:38.641 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3856 

2023-07-03 11:29:38.641 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3675 row column role 146 0 265 

2023-07-03 11:29:38.642 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4217 

2023-07-03 11:29:38.642 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3857 

2023-07-03 11:29:38.642 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3676 row column role 146 0 266 

2023-07-03 11:29:38.642 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4218 

2023-07-03 11:29:38.642 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3858 

2023-07-03 11:29:38.642 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3677 row column role 146 0 267 

2023-07-03 11:29:38.642 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4219 

2023-07-03 11:29:38.642 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3859 

2023-07-03 11:29:38.642 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3678 row column role 146 0 268 

2023-07-03 11:29:38.642 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4220 

2023-07-03 11:29:38.642 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3860 

2023-07-03 11:29:38.642 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3679 row column role 146 0 269 

2023-07-03 11:29:38.643 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4221 

2023-07-03 11:29:38.643 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3861 

2023-07-03 11:29:38.643 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3680 row column role 146 0 270 

2023-07-03 11:29:38.643 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4222 

2023-07-03 11:29:38.643 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3862 

2023-07-03 11:29:38.643 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3681 row column role 146 0 271 

2023-07-03 11:29:38.643 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4223 

2023-07-03 11:29:38.643 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3863 

2023-07-03 11:29:38.643 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3682 row column role 146 0 272 

2023-07-03 11:29:38.643 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4224 

2023-07-03 11:29:38.643 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3864 

2023-07-03 11:29:38.643 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3683 row column role 146 0 273 

2023-07-03 11:29:38.644 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4225 

2023-07-03 11:29:38.644 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3865 

2023-07-03 11:29:38.644 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3684 row column role 146 0 274 

2023-07-03 11:29:38.644 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4226 

2023-07-03 11:29:38.644 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3866 

2023-07-03 11:29:38.644 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3685 row column role 146 0 275 

2023-07-03 11:29:38.671 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4227 

2023-07-03 11:29:38.671 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3867 

2023-07-03 11:29:38.671 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3686 row column role 147 0 257 

2023-07-03 11:29:38.672 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4228 

2023-07-03 11:29:38.672 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3868 

2023-07-03 11:29:38.672 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3687 row column role 147 0 258 

2023-07-03 11:29:38.672 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4229 

2023-07-03 11:29:38.672 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3869 

2023-07-03 11:29:38.672 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3688 row column role 147 0 259 

2023-07-03 11:29:38.672 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4230 

2023-07-03 11:29:38.672 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3870 

2023-07-03 11:29:38.672 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3689 row column role 147 0 260 

2023-07-03 11:29:38.672 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4231 

2023-07-03 11:29:38.672 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3871 

2023-07-03 11:29:38.672 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3690 row column role 147 0 261 

2023-07-03 11:29:38.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4232 

2023-07-03 11:29:38.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3872 

2023-07-03 11:29:38.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3691 row column role 147 0 262 

2023-07-03 11:29:38.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4233 

2023-07-03 11:29:38.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3873 

2023-07-03 11:29:38.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3692 row column role 147 0 263 

2023-07-03 11:29:38.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4234 

2023-07-03 11:29:38.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3874 

2023-07-03 11:29:38.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3693 row column role 147 0 264 

2023-07-03 11:29:38.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4235 

2023-07-03 11:29:38.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3875 

2023-07-03 11:29:38.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3694 row column role 147 0 265 

2023-07-03 11:29:38.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4236 

2023-07-03 11:29:38.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3876 

2023-07-03 11:29:38.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3695 row column role 147 0 266 

2023-07-03 11:29:38.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4237 

2023-07-03 11:29:38.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3877 

2023-07-03 11:29:38.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3696 row column role 147 0 267 

2023-07-03 11:29:38.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4238 

2023-07-03 11:29:38.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3878 

2023-07-03 11:29:38.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3697 row column role 147 0 268 

2023-07-03 11:29:38.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4239 

2023-07-03 11:29:38.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3879 

2023-07-03 11:29:38.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3698 row column role 147 0 269 

2023-07-03 11:29:38.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4240 

2023-07-03 11:29:38.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3880 

2023-07-03 11:29:38.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3699 row column role 147 0 270 

2023-07-03 11:29:38.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4241 

2023-07-03 11:29:38.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3881 

2023-07-03 11:29:38.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3700 row column role 147 0 271 

2023-07-03 11:29:38.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4242 

2023-07-03 11:29:38.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3882 

2023-07-03 11:29:38.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3701 row column role 147 0 272 

2023-07-03 11:29:38.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4243 

2023-07-03 11:29:38.676 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3883 

2023-07-03 11:29:38.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3702 row column role 147 0 273 

2023-07-03 11:29:38.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4244 

2023-07-03 11:29:38.676 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3884 

2023-07-03 11:29:38.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3703 row column role 147 0 274 

2023-07-03 11:29:38.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4245 

2023-07-03 11:29:38.676 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3885 

2023-07-03 11:29:38.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3704 row column role 147 0 275 

2023-07-03 11:29:38.713 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4246 

2023-07-03 11:29:38.713 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3886 

2023-07-03 11:29:38.713 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3705 row column role 148 0 257 

2023-07-03 11:29:38.714 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4247 

2023-07-03 11:29:38.714 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3887 

2023-07-03 11:29:38.714 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3706 row column role 148 0 258 

2023-07-03 11:29:38.714 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4248 

2023-07-03 11:29:38.714 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3888 

2023-07-03 11:29:38.714 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3707 row column role 148 0 259 

2023-07-03 11:29:38.714 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4249 

2023-07-03 11:29:38.714 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3889 

2023-07-03 11:29:38.714 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3708 row column role 148 0 260 

2023-07-03 11:29:38.715 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4250 

2023-07-03 11:29:38.715 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3890 

2023-07-03 11:29:38.715 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3709 row column role 148 0 261 

2023-07-03 11:29:38.715 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4251 

2023-07-03 11:29:38.715 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3891 

2023-07-03 11:29:38.715 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3710 row column role 148 0 262 

2023-07-03 11:29:38.715 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4252 

2023-07-03 11:29:38.715 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3892 

2023-07-03 11:29:38.715 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3711 row column role 148 0 263 

2023-07-03 11:29:38.715 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4253 

2023-07-03 11:29:38.715 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3893 

2023-07-03 11:29:38.715 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3712 row column role 148 0 264 

2023-07-03 11:29:38.716 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4254 

2023-07-03 11:29:38.716 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3894 

2023-07-03 11:29:38.716 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3713 row column role 148 0 265 

2023-07-03 11:29:38.716 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4255 

2023-07-03 11:29:38.716 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3895 

2023-07-03 11:29:38.716 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3714 row column role 148 0 266 

2023-07-03 11:29:38.716 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4256 

2023-07-03 11:29:38.716 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3896 

2023-07-03 11:29:38.716 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3715 row column role 148 0 267 

2023-07-03 11:29:38.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4257 

2023-07-03 11:29:38.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3897 

2023-07-03 11:29:38.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3716 row column role 148 0 268 

2023-07-03 11:29:38.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4258 

2023-07-03 11:29:38.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3898 

2023-07-03 11:29:38.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3717 row column role 148 0 269 

2023-07-03 11:29:38.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4259 

2023-07-03 11:29:38.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3899 

2023-07-03 11:29:38.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3718 row column role 148 0 270 

2023-07-03 11:29:38.717 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4260 

2023-07-03 11:29:38.717 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3900 

2023-07-03 11:29:38.717 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3719 row column role 148 0 271 

2023-07-03 11:29:38.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4261 

2023-07-03 11:29:38.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3901 

2023-07-03 11:29:38.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3720 row column role 148 0 272 

2023-07-03 11:29:38.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4262 

2023-07-03 11:29:38.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3902 

2023-07-03 11:29:38.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3721 row column role 148 0 273 

2023-07-03 11:29:38.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4263 

2023-07-03 11:29:38.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3903 

2023-07-03 11:29:38.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3722 row column role 148 0 274 

2023-07-03 11:29:38.718 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4264 

2023-07-03 11:29:38.718 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3904 

2023-07-03 11:29:38.718 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3723 row column role 148 0 275 

2023-07-03 11:29:38.754 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4265 

2023-07-03 11:29:38.754 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3905 

2023-07-03 11:29:38.754 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3724 row column role 149 0 257 

2023-07-03 11:29:38.755 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4266 

2023-07-03 11:29:38.755 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3906 

2023-07-03 11:29:38.755 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3725 row column role 149 0 258 

2023-07-03 11:29:38.755 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4267 

2023-07-03 11:29:38.755 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3907 

2023-07-03 11:29:38.755 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3726 row column role 149 0 259 

2023-07-03 11:29:38.755 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4268 

2023-07-03 11:29:38.755 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3908 

2023-07-03 11:29:38.755 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3727 row column role 149 0 260 

2023-07-03 11:29:38.755 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4269 

2023-07-03 11:29:38.755 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3909 

2023-07-03 11:29:38.755 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3728 row column role 149 0 261 

2023-07-03 11:29:38.756 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4270 

2023-07-03 11:29:38.756 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3910 

2023-07-03 11:29:38.756 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3729 row column role 149 0 262 

2023-07-03 11:29:38.756 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4271 

2023-07-03 11:29:38.756 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3911 

2023-07-03 11:29:38.756 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3730 row column role 149 0 263 

2023-07-03 11:29:38.756 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4272 

2023-07-03 11:29:38.756 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3912 

2023-07-03 11:29:38.756 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3731 row column role 149 0 264 

2023-07-03 11:29:38.757 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4273 

2023-07-03 11:29:38.757 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3913 

2023-07-03 11:29:38.757 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3732 row column role 149 0 265 

2023-07-03 11:29:38.757 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4274 

2023-07-03 11:29:38.757 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3914 

2023-07-03 11:29:38.757 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3733 row column role 149 0 266 

2023-07-03 11:29:38.757 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4275 

2023-07-03 11:29:38.757 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3915 

2023-07-03 11:29:38.757 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3734 row column role 149 0 267 

2023-07-03 11:29:38.757 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4276 

2023-07-03 11:29:38.758 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3916 

2023-07-03 11:29:38.758 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3735 row column role 149 0 268 

2023-07-03 11:29:38.758 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4277 

2023-07-03 11:29:38.758 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3917 

2023-07-03 11:29:38.758 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3736 row column role 149 0 269 

2023-07-03 11:29:38.758 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4278 

2023-07-03 11:29:38.758 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3918 

2023-07-03 11:29:38.758 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3737 row column role 149 0 270 

2023-07-03 11:29:38.758 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4279 

2023-07-03 11:29:38.758 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3919 

2023-07-03 11:29:38.758 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3738 row column role 149 0 271 

2023-07-03 11:29:38.758 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4280 

2023-07-03 11:29:38.759 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3920 

2023-07-03 11:29:38.759 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3739 row column role 149 0 272 

2023-07-03 11:29:38.759 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4281 

2023-07-03 11:29:38.759 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3921 

2023-07-03 11:29:38.759 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3740 row column role 149 0 273 

2023-07-03 11:29:38.759 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4282 

2023-07-03 11:29:38.759 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3922 

2023-07-03 11:29:38.759 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3741 row column role 149 0 274 

2023-07-03 11:29:38.759 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4283 

2023-07-03 11:29:38.759 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3923 

2023-07-03 11:29:38.759 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3742 row column role 149 0 275 

2023-07-03 11:29:38.884 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4284 

2023-07-03 11:29:38.885 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3924 

2023-07-03 11:29:38.885 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3743 row column role 150 0 257 

2023-07-03 11:29:38.885 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4285 

2023-07-03 11:29:38.885 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3925 

2023-07-03 11:29:38.885 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3744 row column role 150 0 258 

2023-07-03 11:29:38.886 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4286 

2023-07-03 11:29:38.886 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3926 

2023-07-03 11:29:38.886 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3745 row column role 150 0 259 

2023-07-03 11:29:38.886 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4287 

2023-07-03 11:29:38.886 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3927 

2023-07-03 11:29:38.886 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3746 row column role 150 0 260 

2023-07-03 11:29:38.886 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4288 

2023-07-03 11:29:38.886 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3928 

2023-07-03 11:29:38.887 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3747 row column role 150 0 261 

2023-07-03 11:29:38.887 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4289 

2023-07-03 11:29:38.887 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3929 

2023-07-03 11:29:38.887 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3748 row column role 150 0 262 

2023-07-03 11:29:38.887 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4290 

2023-07-03 11:29:38.888 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3930 

2023-07-03 11:29:38.888 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3749 row column role 150 0 263 

2023-07-03 11:29:38.888 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4291 

2023-07-03 11:29:38.888 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3931 

2023-07-03 11:29:38.888 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3750 row column role 150 0 264 

2023-07-03 11:29:38.888 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4292 

2023-07-03 11:29:38.888 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3932 

2023-07-03 11:29:38.888 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3751 row column role 150 0 265 

2023-07-03 11:29:38.889 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4293 

2023-07-03 11:29:38.889 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3933 

2023-07-03 11:29:38.889 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3752 row column role 150 0 266 

2023-07-03 11:29:38.889 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4294 

2023-07-03 11:29:38.889 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3934 

2023-07-03 11:29:38.889 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3753 row column role 150 0 267 

2023-07-03 11:29:38.890 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4295 

2023-07-03 11:29:38.890 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3935 

2023-07-03 11:29:38.890 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3754 row column role 150 0 268 

2023-07-03 11:29:38.890 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4296 

2023-07-03 11:29:38.890 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3936 

2023-07-03 11:29:38.890 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3755 row column role 150 0 269 

2023-07-03 11:29:38.891 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4297 

2023-07-03 11:29:38.891 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3937 

2023-07-03 11:29:38.891 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3756 row column role 150 0 270 

2023-07-03 11:29:38.891 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4298 

2023-07-03 11:29:38.891 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3938 

2023-07-03 11:29:38.891 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3757 row column role 150 0 271 

2023-07-03 11:29:38.892 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4299 

2023-07-03 11:29:38.892 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3939 

2023-07-03 11:29:38.892 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3758 row column role 150 0 272 

2023-07-03 11:29:38.892 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4300 

2023-07-03 11:29:38.892 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3940 

2023-07-03 11:29:38.892 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3759 row column role 150 0 273 

2023-07-03 11:29:38.892 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4301 

2023-07-03 11:29:38.892 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3941 

2023-07-03 11:29:38.892 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3760 row column role 150 0 274 

2023-07-03 11:29:38.893 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4302 

2023-07-03 11:29:38.893 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3942 

2023-07-03 11:29:38.893 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3761 row column role 150 0 275 

2023-07-03 11:29:38.905 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4303 

2023-07-03 11:29:38.905 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3943 

2023-07-03 11:29:38.905 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3762 row column role 151 0 257 

2023-07-03 11:29:38.905 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4304 

2023-07-03 11:29:38.905 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3944 

2023-07-03 11:29:38.905 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3763 row column role 151 0 258 

2023-07-03 11:29:38.905 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4305 

2023-07-03 11:29:38.905 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3945 

2023-07-03 11:29:38.905 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3764 row column role 151 0 259 

2023-07-03 11:29:38.906 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4306 

2023-07-03 11:29:38.906 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3946 

2023-07-03 11:29:38.906 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3765 row column role 151 0 260 

2023-07-03 11:29:38.906 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4307 

2023-07-03 11:29:38.906 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3947 

2023-07-03 11:29:38.906 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3766 row column role 151 0 261 

2023-07-03 11:29:38.906 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4308 

2023-07-03 11:29:38.906 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3948 

2023-07-03 11:29:38.906 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3767 row column role 151 0 262 

2023-07-03 11:29:38.906 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4309 

2023-07-03 11:29:38.906 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3949 

2023-07-03 11:29:38.906 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3768 row column role 151 0 263 

2023-07-03 11:29:38.907 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4310 

2023-07-03 11:29:38.907 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3950 

2023-07-03 11:29:38.907 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3769 row column role 151 0 264 

2023-07-03 11:29:38.907 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4311 

2023-07-03 11:29:38.907 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3951 

2023-07-03 11:29:38.907 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3770 row column role 151 0 265 

2023-07-03 11:29:38.907 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4312 

2023-07-03 11:29:38.907 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3952 

2023-07-03 11:29:38.907 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3771 row column role 151 0 266 

2023-07-03 11:29:38.907 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4313 

2023-07-03 11:29:38.907 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3953 

2023-07-03 11:29:38.907 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3772 row column role 151 0 267 

2023-07-03 11:29:38.908 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4314 

2023-07-03 11:29:38.908 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3954 

2023-07-03 11:29:38.908 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3773 row column role 151 0 268 

2023-07-03 11:29:38.908 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4315 

2023-07-03 11:29:38.908 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3955 

2023-07-03 11:29:38.908 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3774 row column role 151 0 269 

2023-07-03 11:29:38.908 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4316 

2023-07-03 11:29:38.908 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3956 

2023-07-03 11:29:38.908 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3775 row column role 151 0 270 

2023-07-03 11:29:38.908 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4317 

2023-07-03 11:29:38.908 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3957 

2023-07-03 11:29:38.908 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3776 row column role 151 0 271 

2023-07-03 11:29:38.908 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4318 

2023-07-03 11:29:38.908 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3958 

2023-07-03 11:29:38.908 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3777 row column role 151 0 272 

2023-07-03 11:29:38.908 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4319 

2023-07-03 11:29:38.908 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3959 

2023-07-03 11:29:38.909 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3778 row column role 151 0 273 

2023-07-03 11:29:38.909 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4320 

2023-07-03 11:29:38.909 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3960 

2023-07-03 11:29:38.909 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3779 row column role 151 0 274 

2023-07-03 11:29:38.909 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4321 

2023-07-03 11:29:38.909 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3961 

2023-07-03 11:29:38.909 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3780 row column role 151 0 275 

2023-07-03 11:29:38.921 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4322 

2023-07-03 11:29:38.921 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3962 

2023-07-03 11:29:38.921 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3781 row column role 152 0 257 

2023-07-03 11:29:38.921 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4323 

2023-07-03 11:29:38.921 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3963 

2023-07-03 11:29:38.921 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3782 row column role 152 0 258 

2023-07-03 11:29:38.921 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4324 

2023-07-03 11:29:38.922 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3964 

2023-07-03 11:29:38.922 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3783 row column role 152 0 259 

2023-07-03 11:29:38.922 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4325 

2023-07-03 11:29:38.922 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3965 

2023-07-03 11:29:38.922 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3784 row column role 152 0 260 

2023-07-03 11:29:38.922 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4326 

2023-07-03 11:29:38.922 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3966 

2023-07-03 11:29:38.922 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3785 row column role 152 0 261 

2023-07-03 11:29:38.922 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4327 

2023-07-03 11:29:38.922 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3967 

2023-07-03 11:29:38.922 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3786 row column role 152 0 262 

2023-07-03 11:29:38.922 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4328 

2023-07-03 11:29:38.922 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3968 

2023-07-03 11:29:38.922 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3787 row column role 152 0 263 

2023-07-03 11:29:38.922 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4329 

2023-07-03 11:29:38.922 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3969 

2023-07-03 11:29:38.922 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3788 row column role 152 0 264 

2023-07-03 11:29:38.922 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4330 

2023-07-03 11:29:38.922 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3970 

2023-07-03 11:29:38.922 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3789 row column role 152 0 265 

2023-07-03 11:29:38.923 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4331 

2023-07-03 11:29:38.923 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3971 

2023-07-03 11:29:38.923 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3790 row column role 152 0 266 

2023-07-03 11:29:38.923 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4332 

2023-07-03 11:29:38.923 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3972 

2023-07-03 11:29:38.923 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3791 row column role 152 0 267 

2023-07-03 11:29:38.923 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4333 

2023-07-03 11:29:38.923 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3973 

2023-07-03 11:29:38.923 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3792 row column role 152 0 268 

2023-07-03 11:29:38.923 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4334 

2023-07-03 11:29:38.923 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3974 

2023-07-03 11:29:38.923 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3793 row column role 152 0 269 

2023-07-03 11:29:38.923 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4335 

2023-07-03 11:29:38.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3975 

2023-07-03 11:29:38.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3794 row column role 152 0 270 

2023-07-03 11:29:38.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4336 

2023-07-03 11:29:38.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3976 

2023-07-03 11:29:38.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3795 row column role 152 0 271 

2023-07-03 11:29:38.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4337 

2023-07-03 11:29:38.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3977 

2023-07-03 11:29:38.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3796 row column role 152 0 272 

2023-07-03 11:29:38.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4338 

2023-07-03 11:29:38.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3978 

2023-07-03 11:29:38.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3797 row column role 152 0 273 

2023-07-03 11:29:38.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4339 

2023-07-03 11:29:38.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3979 

2023-07-03 11:29:38.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3798 row column role 152 0 274 

2023-07-03 11:29:38.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4340 

2023-07-03 11:29:38.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3980 

2023-07-03 11:29:38.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3799 row column role 152 0 275 

2023-07-03 11:29:38.962 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4341 

2023-07-03 11:29:38.962 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3981 

2023-07-03 11:29:38.962 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3800 row column role 153 0 257 

2023-07-03 11:29:38.963 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4342 

2023-07-03 11:29:38.963 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3982 

2023-07-03 11:29:38.963 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3801 row column role 153 0 258 

2023-07-03 11:29:38.963 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4343 

2023-07-03 11:29:38.963 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3983 

2023-07-03 11:29:38.963 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3802 row column role 153 0 259 

2023-07-03 11:29:38.963 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4344 

2023-07-03 11:29:38.963 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3984 

2023-07-03 11:29:38.963 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3803 row column role 153 0 260 

2023-07-03 11:29:38.963 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4345 

2023-07-03 11:29:38.963 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3985 

2023-07-03 11:29:38.963 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3804 row column role 153 0 261 

2023-07-03 11:29:38.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4346 

2023-07-03 11:29:38.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3986 

2023-07-03 11:29:38.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3805 row column role 153 0 262 

2023-07-03 11:29:38.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4347 

2023-07-03 11:29:38.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3987 

2023-07-03 11:29:38.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3806 row column role 153 0 263 

2023-07-03 11:29:38.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4348 

2023-07-03 11:29:38.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3988 

2023-07-03 11:29:38.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3807 row column role 153 0 264 

2023-07-03 11:29:38.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4349 

2023-07-03 11:29:38.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3989 

2023-07-03 11:29:38.964 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3808 row column role 153 0 265 

2023-07-03 11:29:38.964 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4350 

2023-07-03 11:29:38.964 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3990 

2023-07-03 11:29:38.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3809 row column role 153 0 266 

2023-07-03 11:29:38.965 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4351 

2023-07-03 11:29:38.965 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3991 

2023-07-03 11:29:38.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3810 row column role 153 0 267 

2023-07-03 11:29:38.965 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4352 

2023-07-03 11:29:38.965 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3992 

2023-07-03 11:29:38.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3811 row column role 153 0 268 

2023-07-03 11:29:38.965 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4353 

2023-07-03 11:29:38.965 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3993 

2023-07-03 11:29:38.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3812 row column role 153 0 269 

2023-07-03 11:29:38.965 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4354 

2023-07-03 11:29:38.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3994 

2023-07-03 11:29:38.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3813 row column role 153 0 270 

2023-07-03 11:29:38.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4355 

2023-07-03 11:29:38.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3995 

2023-07-03 11:29:38.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3814 row column role 153 0 271 

2023-07-03 11:29:38.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4356 

2023-07-03 11:29:38.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3996 

2023-07-03 11:29:38.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3815 row column role 153 0 272 

2023-07-03 11:29:38.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4357 

2023-07-03 11:29:38.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3997 

2023-07-03 11:29:38.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3816 row column role 153 0 273 

2023-07-03 11:29:38.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4358 

2023-07-03 11:29:38.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3998 

2023-07-03 11:29:38.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3817 row column role 153 0 274 

2023-07-03 11:29:38.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4359 

2023-07-03 11:29:38.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 3999 

2023-07-03 11:29:38.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3818 row column role 153 0 275 

2023-07-03 11:29:39.006 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4360 

2023-07-03 11:29:39.006 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4000 

2023-07-03 11:29:39.006 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3819 row column role 154 0 257 

2023-07-03 11:29:39.006 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4361 

2023-07-03 11:29:39.006 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4001 

2023-07-03 11:29:39.007 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3820 row column role 154 0 258 

2023-07-03 11:29:39.007 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4362 

2023-07-03 11:29:39.007 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4002 

2023-07-03 11:29:39.007 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3821 row column role 154 0 259 

2023-07-03 11:29:39.007 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4363 

2023-07-03 11:29:39.007 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4003 

2023-07-03 11:29:39.007 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3822 row column role 154 0 260 

2023-07-03 11:29:39.007 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4364 

2023-07-03 11:29:39.007 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4004 

2023-07-03 11:29:39.007 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3823 row column role 154 0 261 

2023-07-03 11:29:39.008 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4365 

2023-07-03 11:29:39.008 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4005 

2023-07-03 11:29:39.008 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3824 row column role 154 0 262 

2023-07-03 11:29:39.008 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4366 

2023-07-03 11:29:39.008 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4006 

2023-07-03 11:29:39.008 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3825 row column role 154 0 263 

2023-07-03 11:29:39.008 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4367 

2023-07-03 11:29:39.008 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4007 

2023-07-03 11:29:39.008 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3826 row column role 154 0 264 

2023-07-03 11:29:39.008 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4368 

2023-07-03 11:29:39.008 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4008 

2023-07-03 11:29:39.008 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3827 row column role 154 0 265 

2023-07-03 11:29:39.009 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4369 

2023-07-03 11:29:39.009 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4009 

2023-07-03 11:29:39.009 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3828 row column role 154 0 266 

2023-07-03 11:29:39.009 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4370 

2023-07-03 11:29:39.009 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4010 

2023-07-03 11:29:39.009 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3829 row column role 154 0 267 

2023-07-03 11:29:39.009 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4371 

2023-07-03 11:29:39.009 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4011 

2023-07-03 11:29:39.009 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3830 row column role 154 0 268 

2023-07-03 11:29:39.009 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4372 

2023-07-03 11:29:39.009 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4012 

2023-07-03 11:29:39.009 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3831 row column role 154 0 269 

2023-07-03 11:29:39.010 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4373 

2023-07-03 11:29:39.010 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4013 

2023-07-03 11:29:39.010 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3832 row column role 154 0 270 

2023-07-03 11:29:39.010 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4374 

2023-07-03 11:29:39.010 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4014 

2023-07-03 11:29:39.010 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3833 row column role 154 0 271 

2023-07-03 11:29:39.010 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4375 

2023-07-03 11:29:39.010 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4015 

2023-07-03 11:29:39.010 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3834 row column role 154 0 272 

2023-07-03 11:29:39.010 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4376 

2023-07-03 11:29:39.010 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4016 

2023-07-03 11:29:39.010 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3835 row column role 154 0 273 

2023-07-03 11:29:39.011 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4377 

2023-07-03 11:29:39.011 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4017 

2023-07-03 11:29:39.011 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3836 row column role 154 0 274 

2023-07-03 11:29:39.011 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4378 

2023-07-03 11:29:39.011 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4018 

2023-07-03 11:29:39.011 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3837 row column role 154 0 275 

2023-07-03 11:29:39.046 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4379 

2023-07-03 11:29:39.046 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4019 

2023-07-03 11:29:39.047 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3838 row column role 155 0 257 

2023-07-03 11:29:39.047 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4380 

2023-07-03 11:29:39.047 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4020 

2023-07-03 11:29:39.047 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3839 row column role 155 0 258 

2023-07-03 11:29:39.047 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4381 

2023-07-03 11:29:39.047 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4021 

2023-07-03 11:29:39.047 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3840 row column role 155 0 259 

2023-07-03 11:29:39.048 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4382 

2023-07-03 11:29:39.048 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4022 

2023-07-03 11:29:39.048 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3841 row column role 155 0 260 

2023-07-03 11:29:39.048 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4383 

2023-07-03 11:29:39.048 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4023 

2023-07-03 11:29:39.048 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3842 row column role 155 0 261 

2023-07-03 11:29:39.048 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4384 

2023-07-03 11:29:39.048 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4024 

2023-07-03 11:29:39.048 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3843 row column role 155 0 262 

2023-07-03 11:29:39.049 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4385 

2023-07-03 11:29:39.049 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4025 

2023-07-03 11:29:39.049 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3844 row column role 155 0 263 

2023-07-03 11:29:39.049 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4386 

2023-07-03 11:29:39.049 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4026 

2023-07-03 11:29:39.049 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3845 row column role 155 0 264 

2023-07-03 11:29:39.049 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4387 

2023-07-03 11:29:39.049 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4027 

2023-07-03 11:29:39.049 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3846 row column role 155 0 265 

2023-07-03 11:29:39.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4388 

2023-07-03 11:29:39.050 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4028 

2023-07-03 11:29:39.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3847 row column role 155 0 266 

2023-07-03 11:29:39.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4389 

2023-07-03 11:29:39.050 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4029 

2023-07-03 11:29:39.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3848 row column role 155 0 267 

2023-07-03 11:29:39.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4390 

2023-07-03 11:29:39.050 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4030 

2023-07-03 11:29:39.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3849 row column role 155 0 268 

2023-07-03 11:29:39.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4391 

2023-07-03 11:29:39.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4031 

2023-07-03 11:29:39.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3850 row column role 155 0 269 

2023-07-03 11:29:39.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4392 

2023-07-03 11:29:39.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4032 

2023-07-03 11:29:39.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3851 row column role 155 0 270 

2023-07-03 11:29:39.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4393 

2023-07-03 11:29:39.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4033 

2023-07-03 11:29:39.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3852 row column role 155 0 271 

2023-07-03 11:29:39.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4394 

2023-07-03 11:29:39.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4034 

2023-07-03 11:29:39.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3853 row column role 155 0 272 

2023-07-03 11:29:39.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4395 

2023-07-03 11:29:39.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4035 

2023-07-03 11:29:39.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3854 row column role 155 0 273 

2023-07-03 11:29:39.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4396 

2023-07-03 11:29:39.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4036 

2023-07-03 11:29:39.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3855 row column role 155 0 274 

2023-07-03 11:29:39.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4397 

2023-07-03 11:29:39.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4037 

2023-07-03 11:29:39.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3856 row column role 155 0 275 

2023-07-03 11:29:39.108 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4398 

2023-07-03 11:29:39.108 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4038 

2023-07-03 11:29:39.108 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3857 row column role 156 0 257 

2023-07-03 11:29:39.109 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4399 

2023-07-03 11:29:39.109 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4039 

2023-07-03 11:29:39.109 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3858 row column role 156 0 258 

2023-07-03 11:29:39.109 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4400 

2023-07-03 11:29:39.109 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4040 

2023-07-03 11:29:39.109 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3859 row column role 156 0 259 

2023-07-03 11:29:39.109 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4401 

2023-07-03 11:29:39.109 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4041 

2023-07-03 11:29:39.109 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3860 row column role 156 0 260 

2023-07-03 11:29:39.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4402 

2023-07-03 11:29:39.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4042 

2023-07-03 11:29:39.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3861 row column role 156 0 261 

2023-07-03 11:29:39.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4403 

2023-07-03 11:29:39.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4043 

2023-07-03 11:29:39.110 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3862 row column role 156 0 262 

2023-07-03 11:29:39.110 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4404 

2023-07-03 11:29:39.110 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4044 

2023-07-03 11:29:39.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3863 row column role 156 0 263 

2023-07-03 11:29:39.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4405 

2023-07-03 11:29:39.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4045 

2023-07-03 11:29:39.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3864 row column role 156 0 264 

2023-07-03 11:29:39.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4406 

2023-07-03 11:29:39.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4046 

2023-07-03 11:29:39.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3865 row column role 156 0 265 

2023-07-03 11:29:39.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4407 

2023-07-03 11:29:39.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4047 

2023-07-03 11:29:39.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3866 row column role 156 0 266 

2023-07-03 11:29:39.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4408 

2023-07-03 11:29:39.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4048 

2023-07-03 11:29:39.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3867 row column role 156 0 267 

2023-07-03 11:29:39.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4409 

2023-07-03 11:29:39.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4049 

2023-07-03 11:29:39.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3868 row column role 156 0 268 

2023-07-03 11:29:39.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4410 

2023-07-03 11:29:39.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4050 

2023-07-03 11:29:39.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3869 row column role 156 0 269 

2023-07-03 11:29:39.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4411 

2023-07-03 11:29:39.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4051 

2023-07-03 11:29:39.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3870 row column role 156 0 270 

2023-07-03 11:29:39.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4412 

2023-07-03 11:29:39.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4052 

2023-07-03 11:29:39.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3871 row column role 156 0 271 

2023-07-03 11:29:39.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4413 

2023-07-03 11:29:39.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4053 

2023-07-03 11:29:39.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3872 row column role 156 0 272 

2023-07-03 11:29:39.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4414 

2023-07-03 11:29:39.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4054 

2023-07-03 11:29:39.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3873 row column role 156 0 273 

2023-07-03 11:29:39.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4415 

2023-07-03 11:29:39.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4055 

2023-07-03 11:29:39.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3874 row column role 156 0 274 

2023-07-03 11:29:39.115 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4416 

2023-07-03 11:29:39.115 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4056 

2023-07-03 11:29:39.115 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3875 row column role 156 0 275 

2023-07-03 11:29:39.193 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4417 

2023-07-03 11:29:39.193 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4057 

2023-07-03 11:29:39.194 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3876 row column role 157 0 257 

2023-07-03 11:29:39.194 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4418 

2023-07-03 11:29:39.194 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4058 

2023-07-03 11:29:39.194 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3877 row column role 157 0 258 

2023-07-03 11:29:39.194 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4419 

2023-07-03 11:29:39.195 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4059 

2023-07-03 11:29:39.195 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3878 row column role 157 0 259 

2023-07-03 11:29:39.195 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4420 

2023-07-03 11:29:39.195 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4060 

2023-07-03 11:29:39.195 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3879 row column role 157 0 260 

2023-07-03 11:29:39.195 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4421 

2023-07-03 11:29:39.196 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4061 

2023-07-03 11:29:39.196 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3880 row column role 157 0 261 

2023-07-03 11:29:39.196 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4422 

2023-07-03 11:29:39.196 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4062 

2023-07-03 11:29:39.196 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3881 row column role 157 0 262 

2023-07-03 11:29:39.196 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4423 

2023-07-03 11:29:39.196 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4063 

2023-07-03 11:29:39.196 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3882 row column role 157 0 263 

2023-07-03 11:29:39.197 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4424 

2023-07-03 11:29:39.197 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4064 

2023-07-03 11:29:39.197 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3883 row column role 157 0 264 

2023-07-03 11:29:39.197 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4425 

2023-07-03 11:29:39.197 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4065 

2023-07-03 11:29:39.197 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3884 row column role 157 0 265 

2023-07-03 11:29:39.197 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4426 

2023-07-03 11:29:39.197 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4066 

2023-07-03 11:29:39.197 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3885 row column role 157 0 266 

2023-07-03 11:29:39.198 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4427 

2023-07-03 11:29:39.198 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4067 

2023-07-03 11:29:39.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3886 row column role 157 0 267 

2023-07-03 11:29:39.198 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4428 

2023-07-03 11:29:39.198 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4068 

2023-07-03 11:29:39.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3887 row column role 157 0 268 

2023-07-03 11:29:39.198 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4429 

2023-07-03 11:29:39.198 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4069 

2023-07-03 11:29:39.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3888 row column role 157 0 269 

2023-07-03 11:29:39.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4430 

2023-07-03 11:29:39.199 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4070 

2023-07-03 11:29:39.199 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3889 row column role 157 0 270 

2023-07-03 11:29:39.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4431 

2023-07-03 11:29:39.199 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4071 

2023-07-03 11:29:39.199 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3890 row column role 157 0 271 

2023-07-03 11:29:39.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4432 

2023-07-03 11:29:39.199 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4072 

2023-07-03 11:29:39.199 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3891 row column role 157 0 272 

2023-07-03 11:29:39.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4433 

2023-07-03 11:29:39.199 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4073 

2023-07-03 11:29:39.200 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3892 row column role 157 0 273 

2023-07-03 11:29:39.200 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4434 

2023-07-03 11:29:39.200 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4074 

2023-07-03 11:29:39.200 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3893 row column role 157 0 274 

2023-07-03 11:29:39.200 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4435 

2023-07-03 11:29:39.200 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4075 

2023-07-03 11:29:39.200 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3894 row column role 157 0 275 

2023-07-03 11:29:39.236 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4436 

2023-07-03 11:29:39.236 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4076 

2023-07-03 11:29:39.236 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3895 row column role 158 0 257 

2023-07-03 11:29:39.236 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4437 

2023-07-03 11:29:39.236 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4077 

2023-07-03 11:29:39.236 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3896 row column role 158 0 258 

2023-07-03 11:29:39.236 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4438 

2023-07-03 11:29:39.237 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4078 

2023-07-03 11:29:39.237 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3897 row column role 158 0 259 

2023-07-03 11:29:39.237 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4439 

2023-07-03 11:29:39.237 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4079 

2023-07-03 11:29:39.237 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3898 row column role 158 0 260 

2023-07-03 11:29:39.237 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4440 

2023-07-03 11:29:39.237 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4080 

2023-07-03 11:29:39.237 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3899 row column role 158 0 261 

2023-07-03 11:29:39.238 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4441 

2023-07-03 11:29:39.238 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4081 

2023-07-03 11:29:39.238 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3900 row column role 158 0 262 

2023-07-03 11:29:39.238 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4442 

2023-07-03 11:29:39.238 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4082 

2023-07-03 11:29:39.238 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3901 row column role 158 0 263 

2023-07-03 11:29:39.238 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4443 

2023-07-03 11:29:39.238 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4083 

2023-07-03 11:29:39.238 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3902 row column role 158 0 264 

2023-07-03 11:29:39.238 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4444 

2023-07-03 11:29:39.238 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4084 

2023-07-03 11:29:39.238 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3903 row column role 158 0 265 

2023-07-03 11:29:39.239 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4445 

2023-07-03 11:29:39.239 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4085 

2023-07-03 11:29:39.239 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3904 row column role 158 0 266 

2023-07-03 11:29:39.239 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4446 

2023-07-03 11:29:39.239 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4086 

2023-07-03 11:29:39.239 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3905 row column role 158 0 267 

2023-07-03 11:29:39.239 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4447 

2023-07-03 11:29:39.239 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4087 

2023-07-03 11:29:39.239 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3906 row column role 158 0 268 

2023-07-03 11:29:39.239 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4448 

2023-07-03 11:29:39.239 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4088 

2023-07-03 11:29:39.239 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3907 row column role 158 0 269 

2023-07-03 11:29:39.240 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4449 

2023-07-03 11:29:39.240 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4089 

2023-07-03 11:29:39.240 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3908 row column role 158 0 270 

2023-07-03 11:29:39.240 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4450 

2023-07-03 11:29:39.240 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4090 

2023-07-03 11:29:39.240 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3909 row column role 158 0 271 

2023-07-03 11:29:39.240 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4451 

2023-07-03 11:29:39.240 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4091 

2023-07-03 11:29:39.240 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3910 row column role 158 0 272 

2023-07-03 11:29:39.240 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4452 

2023-07-03 11:29:39.240 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4092 

2023-07-03 11:29:39.240 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3911 row column role 158 0 273 

2023-07-03 11:29:39.240 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4453 

2023-07-03 11:29:39.240 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4093 

2023-07-03 11:29:39.240 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3912 row column role 158 0 274 

2023-07-03 11:29:39.240 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4454 

2023-07-03 11:29:39.240 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4094 

2023-07-03 11:29:39.242 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3913 row column role 158 0 275 

2023-07-03 11:29:39.274 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4455 

2023-07-03 11:29:39.274 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4095 

2023-07-03 11:29:39.274 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3914 row column role 159 0 257 

2023-07-03 11:29:39.274 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4456 

2023-07-03 11:29:39.275 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4096 

2023-07-03 11:29:39.275 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3915 row column role 159 0 258 

2023-07-03 11:29:39.275 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4457 

2023-07-03 11:29:39.275 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4097 

2023-07-03 11:29:39.275 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3916 row column role 159 0 259 

2023-07-03 11:29:39.275 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4458 

2023-07-03 11:29:39.275 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4098 

2023-07-03 11:29:39.275 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3917 row column role 159 0 260 

2023-07-03 11:29:39.275 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4459 

2023-07-03 11:29:39.275 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4099 

2023-07-03 11:29:39.275 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3918 row column role 159 0 261 

2023-07-03 11:29:39.276 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4460 

2023-07-03 11:29:39.276 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4100 

2023-07-03 11:29:39.276 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3919 row column role 159 0 262 

2023-07-03 11:29:39.276 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4461 

2023-07-03 11:29:39.276 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4101 

2023-07-03 11:29:39.276 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3920 row column role 159 0 263 

2023-07-03 11:29:39.276 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4462 

2023-07-03 11:29:39.276 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4102 

2023-07-03 11:29:39.276 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3921 row column role 159 0 264 

2023-07-03 11:29:39.276 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4463 

2023-07-03 11:29:39.276 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4103 

2023-07-03 11:29:39.277 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3922 row column role 159 0 265 

2023-07-03 11:29:39.277 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4464 

2023-07-03 11:29:39.277 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4104 

2023-07-03 11:29:39.277 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3923 row column role 159 0 266 

2023-07-03 11:29:39.277 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4465 

2023-07-03 11:29:39.277 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4105 

2023-07-03 11:29:39.277 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3924 row column role 159 0 267 

2023-07-03 11:29:39.277 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4466 

2023-07-03 11:29:39.277 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4106 

2023-07-03 11:29:39.277 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3925 row column role 159 0 268 

2023-07-03 11:29:39.278 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4467 

2023-07-03 11:29:39.278 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4107 

2023-07-03 11:29:39.278 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3926 row column role 159 0 269 

2023-07-03 11:29:39.278 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4468 

2023-07-03 11:29:39.278 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4108 

2023-07-03 11:29:39.278 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3927 row column role 159 0 270 

2023-07-03 11:29:39.278 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4469 

2023-07-03 11:29:39.278 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4109 

2023-07-03 11:29:39.278 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3928 row column role 159 0 271 

2023-07-03 11:29:39.278 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4470 

2023-07-03 11:29:39.278 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4110 

2023-07-03 11:29:39.278 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3929 row column role 159 0 272 

2023-07-03 11:29:39.278 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4471 

2023-07-03 11:29:39.278 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4111 

2023-07-03 11:29:39.278 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3930 row column role 159 0 273 

2023-07-03 11:29:39.279 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4472 

2023-07-03 11:29:39.279 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4112 

2023-07-03 11:29:39.279 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3931 row column role 159 0 274 

2023-07-03 11:29:39.279 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4473 

2023-07-03 11:29:39.279 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4113 

2023-07-03 11:29:39.279 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3932 row column role 159 0 275 

2023-07-03 11:29:39.316 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4474 

2023-07-03 11:29:39.316 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4114 

2023-07-03 11:29:39.316 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3933 row column role 160 0 257 

2023-07-03 11:29:39.316 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4475 

2023-07-03 11:29:39.317 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4115 

2023-07-03 11:29:39.317 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3934 row column role 160 0 258 

2023-07-03 11:29:39.317 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4476 

2023-07-03 11:29:39.317 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4116 

2023-07-03 11:29:39.317 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3935 row column role 160 0 259 

2023-07-03 11:29:39.317 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4477 

2023-07-03 11:29:39.317 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4117 

2023-07-03 11:29:39.317 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3936 row column role 160 0 260 

2023-07-03 11:29:39.317 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4478 

2023-07-03 11:29:39.317 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4118 

2023-07-03 11:29:39.317 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3937 row column role 160 0 261 

2023-07-03 11:29:39.318 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4479 

2023-07-03 11:29:39.318 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4119 

2023-07-03 11:29:39.318 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3938 row column role 160 0 262 

2023-07-03 11:29:39.318 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4480 

2023-07-03 11:29:39.318 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4120 

2023-07-03 11:29:39.318 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3939 row column role 160 0 263 

2023-07-03 11:29:39.318 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4481 

2023-07-03 11:29:39.318 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4121 

2023-07-03 11:29:39.318 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3940 row column role 160 0 264 

2023-07-03 11:29:39.318 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4482 

2023-07-03 11:29:39.319 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4122 

2023-07-03 11:29:39.319 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3941 row column role 160 0 265 

2023-07-03 11:29:39.319 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4483 

2023-07-03 11:29:39.319 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4123 

2023-07-03 11:29:39.319 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3942 row column role 160 0 266 

2023-07-03 11:29:39.319 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4484 

2023-07-03 11:29:39.319 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4124 

2023-07-03 11:29:39.319 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3943 row column role 160 0 267 

2023-07-03 11:29:39.319 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4485 

2023-07-03 11:29:39.319 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4125 

2023-07-03 11:29:39.320 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3944 row column role 160 0 268 

2023-07-03 11:29:39.320 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4486 

2023-07-03 11:29:39.320 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4126 

2023-07-03 11:29:39.320 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3945 row column role 160 0 269 

2023-07-03 11:29:39.320 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4487 

2023-07-03 11:29:39.320 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4127 

2023-07-03 11:29:39.320 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3946 row column role 160 0 270 

2023-07-03 11:29:39.320 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4488 

2023-07-03 11:29:39.320 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4128 

2023-07-03 11:29:39.320 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3947 row column role 160 0 271 

2023-07-03 11:29:39.320 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4489 

2023-07-03 11:29:39.321 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4129 

2023-07-03 11:29:39.321 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3948 row column role 160 0 272 

2023-07-03 11:29:39.321 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4490 

2023-07-03 11:29:39.321 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4130 

2023-07-03 11:29:39.321 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3949 row column role 160 0 273 

2023-07-03 11:29:39.321 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4491 

2023-07-03 11:29:39.321 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4131 

2023-07-03 11:29:39.321 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3950 row column role 160 0 274 

2023-07-03 11:29:39.321 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4492 

2023-07-03 11:29:39.321 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4132 

2023-07-03 11:29:39.321 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3951 row column role 160 0 275 

2023-07-03 11:29:39.387 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4493 

2023-07-03 11:29:39.387 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4133 

2023-07-03 11:29:39.387 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3952 row column role 161 0 257 

2023-07-03 11:29:39.388 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4494 

2023-07-03 11:29:39.388 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4134 

2023-07-03 11:29:39.388 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3953 row column role 161 0 258 

2023-07-03 11:29:39.388 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4495 

2023-07-03 11:29:39.388 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4135 

2023-07-03 11:29:39.388 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3954 row column role 161 0 259 

2023-07-03 11:29:39.388 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4496 

2023-07-03 11:29:39.389 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4136 

2023-07-03 11:29:39.389 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3955 row column role 161 0 260 

2023-07-03 11:29:39.389 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4497 

2023-07-03 11:29:39.389 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4137 

2023-07-03 11:29:39.389 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3956 row column role 161 0 261 

2023-07-03 11:29:39.389 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4498 

2023-07-03 11:29:39.389 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4138 

2023-07-03 11:29:39.390 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3957 row column role 161 0 262 

2023-07-03 11:29:39.390 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4499 

2023-07-03 11:29:39.390 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4139 

2023-07-03 11:29:39.390 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3958 row column role 161 0 263 

2023-07-03 11:29:39.390 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4500 

2023-07-03 11:29:39.390 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4140 

2023-07-03 11:29:39.390 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3959 row column role 161 0 264 

2023-07-03 11:29:39.391 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4501 

2023-07-03 11:29:39.391 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4141 

2023-07-03 11:29:39.391 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3960 row column role 161 0 265 

2023-07-03 11:29:39.391 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4502 

2023-07-03 11:29:39.391 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4142 

2023-07-03 11:29:39.391 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3961 row column role 161 0 266 

2023-07-03 11:29:39.391 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4503 

2023-07-03 11:29:39.391 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4143 

2023-07-03 11:29:39.391 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3962 row column role 161 0 267 

2023-07-03 11:29:39.391 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4504 

2023-07-03 11:29:39.392 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4144 

2023-07-03 11:29:39.392 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3963 row column role 161 0 268 

2023-07-03 11:29:39.392 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4505 

2023-07-03 11:29:39.392 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4145 

2023-07-03 11:29:39.392 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3964 row column role 161 0 269 

2023-07-03 11:29:39.392 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4506 

2023-07-03 11:29:39.392 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4146 

2023-07-03 11:29:39.392 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3965 row column role 161 0 270 

2023-07-03 11:29:39.392 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4507 

2023-07-03 11:29:39.392 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4147 

2023-07-03 11:29:39.392 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3966 row column role 161 0 271 

2023-07-03 11:29:39.393 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4508 

2023-07-03 11:29:39.393 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4148 

2023-07-03 11:29:39.393 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3967 row column role 161 0 272 

2023-07-03 11:29:39.393 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4509 

2023-07-03 11:29:39.393 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4149 

2023-07-03 11:29:39.393 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3968 row column role 161 0 273 

2023-07-03 11:29:39.393 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4510 

2023-07-03 11:29:39.393 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4150 

2023-07-03 11:29:39.393 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3969 row column role 161 0 274 

2023-07-03 11:29:39.393 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4511 

2023-07-03 11:29:39.393 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4151 

2023-07-03 11:29:39.394 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3970 row column role 161 0 275 

2023-07-03 11:29:39.528 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4512 

2023-07-03 11:29:39.529 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4152 

2023-07-03 11:29:39.529 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3971 row column role 162 0 257 

2023-07-03 11:29:39.529 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4513 

2023-07-03 11:29:39.529 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4153 

2023-07-03 11:29:39.529 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3972 row column role 162 0 258 

2023-07-03 11:29:39.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4514 

2023-07-03 11:29:39.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4154 

2023-07-03 11:29:39.530 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3973 row column role 162 0 259 

2023-07-03 11:29:39.530 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4515 

2023-07-03 11:29:39.530 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4155 

2023-07-03 11:29:39.530 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3974 row column role 162 0 260 

2023-07-03 11:29:39.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4516 

2023-07-03 11:29:39.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4156 

2023-07-03 11:29:39.531 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3975 row column role 162 0 261 

2023-07-03 11:29:39.531 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4517 

2023-07-03 11:29:39.531 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4157 

2023-07-03 11:29:39.532 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3976 row column role 162 0 262 

2023-07-03 11:29:39.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4518 

2023-07-03 11:29:39.532 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4158 

2023-07-03 11:29:39.532 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3977 row column role 162 0 263 

2023-07-03 11:29:39.532 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4519 

2023-07-03 11:29:39.533 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4159 

2023-07-03 11:29:39.533 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3978 row column role 162 0 264 

2023-07-03 11:29:39.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4520 

2023-07-03 11:29:39.533 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4160 

2023-07-03 11:29:39.533 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3979 row column role 162 0 265 

2023-07-03 11:29:39.533 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4521 

2023-07-03 11:29:39.534 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4161 

2023-07-03 11:29:39.534 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3980 row column role 162 0 266 

2023-07-03 11:29:39.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4522 

2023-07-03 11:29:39.534 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4162 

2023-07-03 11:29:39.534 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3981 row column role 162 0 267 

2023-07-03 11:29:39.534 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4523 

2023-07-03 11:29:39.535 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4163 

2023-07-03 11:29:39.535 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3982 row column role 162 0 268 

2023-07-03 11:29:39.535 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4524 

2023-07-03 11:29:39.535 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4164 

2023-07-03 11:29:39.535 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3983 row column role 162 0 269 

2023-07-03 11:29:39.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4525 

2023-07-03 11:29:39.536 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4165 

2023-07-03 11:29:39.536 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3984 row column role 162 0 270 

2023-07-03 11:29:39.536 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4526 

2023-07-03 11:29:39.536 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4166 

2023-07-03 11:29:39.536 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3985 row column role 162 0 271 

2023-07-03 11:29:39.537 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4527 

2023-07-03 11:29:39.537 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4167 

2023-07-03 11:29:39.537 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3986 row column role 162 0 272 

2023-07-03 11:29:39.537 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4528 

2023-07-03 11:29:39.537 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4168 

2023-07-03 11:29:39.537 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3987 row column role 162 0 273 

2023-07-03 11:29:39.537 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4529 

2023-07-03 11:29:39.537 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4169 

2023-07-03 11:29:39.537 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3988 row column role 162 0 274 

2023-07-03 11:29:39.538 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4530 

2023-07-03 11:29:39.538 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4170 

2023-07-03 11:29:39.538 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3989 row column role 162 0 275 

2023-07-03 11:29:39.539 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4531 

2023-07-03 11:29:39.539 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4171 

2023-07-03 11:29:39.539 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3990 row column role 163 0 257 

2023-07-03 11:29:39.540 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4532 

2023-07-03 11:29:39.540 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4172 

2023-07-03 11:29:39.540 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3991 row column role 163 0 258 

2023-07-03 11:29:39.540 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4533 

2023-07-03 11:29:39.540 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4173 

2023-07-03 11:29:39.540 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3992 row column role 163 0 259 

2023-07-03 11:29:39.541 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4534 

2023-07-03 11:29:39.541 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4174 

2023-07-03 11:29:39.541 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3993 row column role 163 0 260 

2023-07-03 11:29:39.541 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4535 

2023-07-03 11:29:39.541 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4175 

2023-07-03 11:29:39.542 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3994 row column role 163 0 261 

2023-07-03 11:29:39.542 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4536 

2023-07-03 11:29:39.542 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4176 

2023-07-03 11:29:39.542 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3995 row column role 163 0 262 

2023-07-03 11:29:39.542 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4537 

2023-07-03 11:29:39.543 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4177 

2023-07-03 11:29:39.543 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3996 row column role 163 0 263 

2023-07-03 11:29:39.543 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4538 

2023-07-03 11:29:39.543 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4178 

2023-07-03 11:29:39.543 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3997 row column role 163 0 264 

2023-07-03 11:29:39.544 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4539 

2023-07-03 11:29:39.544 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4179 

2023-07-03 11:29:39.544 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3998 row column role 163 0 265 

2023-07-03 11:29:39.544 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4540 

2023-07-03 11:29:39.544 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4180 

2023-07-03 11:29:39.544 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 3999 row column role 163 0 266 

2023-07-03 11:29:39.545 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4541 

2023-07-03 11:29:39.545 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4181 

2023-07-03 11:29:39.545 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4000 row column role 163 0 267 

2023-07-03 11:29:39.545 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4542 

2023-07-03 11:29:39.546 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4182 

2023-07-03 11:29:39.546 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4001 row column role 163 0 268 

2023-07-03 11:29:39.546 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4543 

2023-07-03 11:29:39.546 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4183 

2023-07-03 11:29:39.546 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4002 row column role 163 0 269 

2023-07-03 11:29:39.546 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4544 

2023-07-03 11:29:39.547 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4184 

2023-07-03 11:29:39.547 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4003 row column role 163 0 270 

2023-07-03 11:29:39.547 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4545 

2023-07-03 11:29:39.547 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4185 

2023-07-03 11:29:39.547 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4004 row column role 163 0 271 

2023-07-03 11:29:39.548 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4546 

2023-07-03 11:29:39.548 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4186 

2023-07-03 11:29:39.548 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4005 row column role 163 0 272 

2023-07-03 11:29:39.548 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4547 

2023-07-03 11:29:39.548 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4187 

2023-07-03 11:29:39.548 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4006 row column role 163 0 273 

2023-07-03 11:29:39.548 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4548 

2023-07-03 11:29:39.548 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4188 

2023-07-03 11:29:39.548 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4007 row column role 163 0 274 

2023-07-03 11:29:39.549 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4549 

2023-07-03 11:29:39.549 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4189 

2023-07-03 11:29:39.549 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4008 row column role 163 0 275 

2023-07-03 11:29:39.571 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4550 

2023-07-03 11:29:39.571 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4190 

2023-07-03 11:29:39.571 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4009 row column role 164 0 257 

2023-07-03 11:29:39.571 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4551 

2023-07-03 11:29:39.571 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4191 

2023-07-03 11:29:39.571 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4010 row column role 164 0 258 

2023-07-03 11:29:39.571 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4552 

2023-07-03 11:29:39.571 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4192 

2023-07-03 11:29:39.571 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4011 row column role 164 0 259 

2023-07-03 11:29:39.572 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4553 

2023-07-03 11:29:39.572 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4193 

2023-07-03 11:29:39.572 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4012 row column role 164 0 260 

2023-07-03 11:29:39.572 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4554 

2023-07-03 11:29:39.572 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4194 

2023-07-03 11:29:39.572 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4013 row column role 164 0 261 

2023-07-03 11:29:39.572 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4555 

2023-07-03 11:29:39.572 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4195 

2023-07-03 11:29:39.572 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4014 row column role 164 0 262 

2023-07-03 11:29:39.572 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4556 

2023-07-03 11:29:39.572 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4196 

2023-07-03 11:29:39.572 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4015 row column role 164 0 263 

2023-07-03 11:29:39.572 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4557 

2023-07-03 11:29:39.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4197 

2023-07-03 11:29:39.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4016 row column role 164 0 264 

2023-07-03 11:29:39.573 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4558 

2023-07-03 11:29:39.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4198 

2023-07-03 11:29:39.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4017 row column role 164 0 265 

2023-07-03 11:29:39.573 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4559 

2023-07-03 11:29:39.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4199 

2023-07-03 11:29:39.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4018 row column role 164 0 266 

2023-07-03 11:29:39.573 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4560 

2023-07-03 11:29:39.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4200 

2023-07-03 11:29:39.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4019 row column role 164 0 267 

2023-07-03 11:29:39.573 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4561 

2023-07-03 11:29:39.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4201 

2023-07-03 11:29:39.573 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4020 row column role 164 0 268 

2023-07-03 11:29:39.573 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4562 

2023-07-03 11:29:39.573 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4202 

2023-07-03 11:29:39.575 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4021 row column role 164 0 269 

2023-07-03 11:29:39.575 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4563 

2023-07-03 11:29:39.575 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4203 

2023-07-03 11:29:39.575 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4022 row column role 164 0 270 

2023-07-03 11:29:39.575 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4564 

2023-07-03 11:29:39.575 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4204 

2023-07-03 11:29:39.575 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4023 row column role 164 0 271 

2023-07-03 11:29:39.575 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4565 

2023-07-03 11:29:39.575 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4205 

2023-07-03 11:29:39.575 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4024 row column role 164 0 272 

2023-07-03 11:29:39.575 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4566 

2023-07-03 11:29:39.576 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4206 

2023-07-03 11:29:39.576 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4025 row column role 164 0 273 

2023-07-03 11:29:39.576 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4567 

2023-07-03 11:29:39.576 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4207 

2023-07-03 11:29:39.576 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4026 row column role 164 0 274 

2023-07-03 11:29:39.576 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4568 

2023-07-03 11:29:39.576 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4208 

2023-07-03 11:29:39.576 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4027 row column role 164 0 275 

2023-07-03 11:29:39.609 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4569 

2023-07-03 11:29:39.609 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4209 

2023-07-03 11:29:39.609 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4028 row column role 165 0 257 

2023-07-03 11:29:39.610 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4570 

2023-07-03 11:29:39.610 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4210 

2023-07-03 11:29:39.610 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4029 row column role 165 0 258 

2023-07-03 11:29:39.610 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4571 

2023-07-03 11:29:39.610 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4211 

2023-07-03 11:29:39.610 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4030 row column role 165 0 259 

2023-07-03 11:29:39.611 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4572 

2023-07-03 11:29:39.611 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4212 

2023-07-03 11:29:39.611 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4031 row column role 165 0 260 

2023-07-03 11:29:39.611 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4573 

2023-07-03 11:29:39.611 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4213 

2023-07-03 11:29:39.611 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4032 row column role 165 0 261 

2023-07-03 11:29:39.611 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4574 

2023-07-03 11:29:39.611 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4214 

2023-07-03 11:29:39.612 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4033 row column role 165 0 262 

2023-07-03 11:29:39.612 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4575 

2023-07-03 11:29:39.612 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4215 

2023-07-03 11:29:39.612 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4034 row column role 165 0 263 

2023-07-03 11:29:39.612 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4576 

2023-07-03 11:29:39.612 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4216 

2023-07-03 11:29:39.612 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4035 row column role 165 0 264 

2023-07-03 11:29:39.612 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4577 

2023-07-03 11:29:39.613 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4217 

2023-07-03 11:29:39.613 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4036 row column role 165 0 265 

2023-07-03 11:29:39.613 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4578 

2023-07-03 11:29:39.613 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4218 

2023-07-03 11:29:39.613 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4037 row column role 165 0 266 

2023-07-03 11:29:39.613 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4579 

2023-07-03 11:29:39.613 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4219 

2023-07-03 11:29:39.613 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4038 row column role 165 0 267 

2023-07-03 11:29:39.613 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4580 

2023-07-03 11:29:39.613 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4220 

2023-07-03 11:29:39.613 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4039 row column role 165 0 268 

2023-07-03 11:29:39.613 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4581 

2023-07-03 11:29:39.613 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4221 

2023-07-03 11:29:39.613 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4040 row column role 165 0 269 

2023-07-03 11:29:39.613 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4582 

2023-07-03 11:29:39.613 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4222 

2023-07-03 11:29:39.613 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4041 row column role 165 0 270 

2023-07-03 11:29:39.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4583 

2023-07-03 11:29:39.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4223 

2023-07-03 11:29:39.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4042 row column role 165 0 271 

2023-07-03 11:29:39.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4584 

2023-07-03 11:29:39.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4224 

2023-07-03 11:29:39.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4043 row column role 165 0 272 

2023-07-03 11:29:39.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4585 

2023-07-03 11:29:39.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4225 

2023-07-03 11:29:39.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4044 row column role 165 0 273 

2023-07-03 11:29:39.614 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4586 

2023-07-03 11:29:39.614 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4226 

2023-07-03 11:29:39.614 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4045 row column role 165 0 274 

2023-07-03 11:29:39.615 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4587 

2023-07-03 11:29:39.615 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4227 

2023-07-03 11:29:39.615 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4046 row column role 165 0 275 

2023-07-03 11:29:39.651 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4588 

2023-07-03 11:29:39.652 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4228 

2023-07-03 11:29:39.652 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4047 row column role 166 0 257 

2023-07-03 11:29:39.652 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4589 

2023-07-03 11:29:39.652 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4229 

2023-07-03 11:29:39.652 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4048 row column role 166 0 258 

2023-07-03 11:29:39.653 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4590 

2023-07-03 11:29:39.653 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4230 

2023-07-03 11:29:39.653 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4049 row column role 166 0 259 

2023-07-03 11:29:39.653 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4591 

2023-07-03 11:29:39.653 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4231 

2023-07-03 11:29:39.653 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4050 row column role 166 0 260 

2023-07-03 11:29:39.654 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4592 

2023-07-03 11:29:39.654 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4232 

2023-07-03 11:29:39.654 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4051 row column role 166 0 261 

2023-07-03 11:29:39.654 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4593 

2023-07-03 11:29:39.654 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4233 

2023-07-03 11:29:39.654 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4052 row column role 166 0 262 

2023-07-03 11:29:39.655 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4594 

2023-07-03 11:29:39.655 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4234 

2023-07-03 11:29:39.655 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4053 row column role 166 0 263 

2023-07-03 11:29:39.655 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4595 

2023-07-03 11:29:39.655 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4235 

2023-07-03 11:29:39.655 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4054 row column role 166 0 264 

2023-07-03 11:29:39.655 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4596 

2023-07-03 11:29:39.655 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4236 

2023-07-03 11:29:39.655 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4055 row column role 166 0 265 

2023-07-03 11:29:39.655 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4597 

2023-07-03 11:29:39.656 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4237 

2023-07-03 11:29:39.656 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4056 row column role 166 0 266 

2023-07-03 11:29:39.656 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4598 

2023-07-03 11:29:39.656 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4238 

2023-07-03 11:29:39.656 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4057 row column role 166 0 267 

2023-07-03 11:29:39.656 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4599 

2023-07-03 11:29:39.656 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4239 

2023-07-03 11:29:39.656 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4058 row column role 166 0 268 

2023-07-03 11:29:39.657 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4600 

2023-07-03 11:29:39.657 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4240 

2023-07-03 11:29:39.657 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4059 row column role 166 0 269 

2023-07-03 11:29:39.657 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4601 

2023-07-03 11:29:39.657 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4241 

2023-07-03 11:29:39.657 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4060 row column role 166 0 270 

2023-07-03 11:29:39.657 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4602 

2023-07-03 11:29:39.657 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4242 

2023-07-03 11:29:39.657 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4061 row column role 166 0 271 

2023-07-03 11:29:39.658 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4603 

2023-07-03 11:29:39.658 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4243 

2023-07-03 11:29:39.658 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4062 row column role 166 0 272 

2023-07-03 11:29:39.658 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4604 

2023-07-03 11:29:39.658 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4244 

2023-07-03 11:29:39.658 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4063 row column role 166 0 273 

2023-07-03 11:29:39.658 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4605 

2023-07-03 11:29:39.658 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4245 

2023-07-03 11:29:39.658 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4064 row column role 166 0 274 

2023-07-03 11:29:39.658 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4606 

2023-07-03 11:29:39.658 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4246 

2023-07-03 11:29:39.658 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4065 row column role 166 0 275 

2023-07-03 11:29:39.692 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4607 

2023-07-03 11:29:39.693 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4247 

2023-07-03 11:29:39.693 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4066 row column role 167 0 257 

2023-07-03 11:29:39.693 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4608 

2023-07-03 11:29:39.693 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4248 

2023-07-03 11:29:39.693 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4067 row column role 167 0 258 

2023-07-03 11:29:39.694 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4609 

2023-07-03 11:29:39.694 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4249 

2023-07-03 11:29:39.694 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4068 row column role 167 0 259 

2023-07-03 11:29:39.694 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4610 

2023-07-03 11:29:39.694 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4250 

2023-07-03 11:29:39.694 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4069 row column role 167 0 260 

2023-07-03 11:29:39.695 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4611 

2023-07-03 11:29:39.695 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4251 

2023-07-03 11:29:39.695 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4070 row column role 167 0 261 

2023-07-03 11:29:39.695 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4612 

2023-07-03 11:29:39.695 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4252 

2023-07-03 11:29:39.695 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4071 row column role 167 0 262 

2023-07-03 11:29:39.696 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4613 

2023-07-03 11:29:39.696 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4253 

2023-07-03 11:29:39.696 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4072 row column role 167 0 263 

2023-07-03 11:29:39.696 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4614 

2023-07-03 11:29:39.696 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4254 

2023-07-03 11:29:39.696 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4073 row column role 167 0 264 

2023-07-03 11:29:39.696 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4615 

2023-07-03 11:29:39.696 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4255 

2023-07-03 11:29:39.696 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4074 row column role 167 0 265 

2023-07-03 11:29:39.697 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4616 

2023-07-03 11:29:39.697 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4256 

2023-07-03 11:29:39.697 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4075 row column role 167 0 266 

2023-07-03 11:29:39.697 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4617 

2023-07-03 11:29:39.697 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4257 

2023-07-03 11:29:39.697 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4076 row column role 167 0 267 

2023-07-03 11:29:39.697 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4618 

2023-07-03 11:29:39.697 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4258 

2023-07-03 11:29:39.697 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4077 row column role 167 0 268 

2023-07-03 11:29:39.698 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4619 

2023-07-03 11:29:39.698 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4259 

2023-07-03 11:29:39.698 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4078 row column role 167 0 269 

2023-07-03 11:29:39.698 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4620 

2023-07-03 11:29:39.698 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4260 

2023-07-03 11:29:39.698 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4079 row column role 167 0 270 

2023-07-03 11:29:39.698 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4621 

2023-07-03 11:29:39.698 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4261 

2023-07-03 11:29:39.698 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4080 row column role 167 0 271 

2023-07-03 11:29:39.699 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4622 

2023-07-03 11:29:39.699 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4262 

2023-07-03 11:29:39.699 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4081 row column role 167 0 272 

2023-07-03 11:29:39.699 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4623 

2023-07-03 11:29:39.699 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4263 

2023-07-03 11:29:39.699 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4082 row column role 167 0 273 

2023-07-03 11:29:39.699 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4624 

2023-07-03 11:29:39.699 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4264 

2023-07-03 11:29:39.699 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4083 row column role 167 0 274 

2023-07-03 11:29:39.699 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4625 

2023-07-03 11:29:39.699 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4265 

2023-07-03 11:29:39.699 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4084 row column role 167 0 275 

2023-07-03 11:29:39.733 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4626 

2023-07-03 11:29:39.733 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4266 

2023-07-03 11:29:39.733 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4085 row column role 168 0 257 

2023-07-03 11:29:39.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4627 

2023-07-03 11:29:39.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4267 

2023-07-03 11:29:39.734 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4086 row column role 168 0 258 

2023-07-03 11:29:39.734 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4628 

2023-07-03 11:29:39.734 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4268 

2023-07-03 11:29:39.734 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4087 row column role 168 0 259 

2023-07-03 11:29:39.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4629 

2023-07-03 11:29:39.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4269 

2023-07-03 11:29:39.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4088 row column role 168 0 260 

2023-07-03 11:29:39.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4630 

2023-07-03 11:29:39.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4270 

2023-07-03 11:29:39.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4089 row column role 168 0 261 

2023-07-03 11:29:39.735 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4631 

2023-07-03 11:29:39.735 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4271 

2023-07-03 11:29:39.735 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4090 row column role 168 0 262 

2023-07-03 11:29:39.736 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4632 

2023-07-03 11:29:39.736 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4272 

2023-07-03 11:29:39.736 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4091 row column role 168 0 263 

2023-07-03 11:29:39.736 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4633 

2023-07-03 11:29:39.736 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4273 

2023-07-03 11:29:39.736 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4092 row column role 168 0 264 

2023-07-03 11:29:39.736 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4634 

2023-07-03 11:29:39.736 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4274 

2023-07-03 11:29:39.736 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4093 row column role 168 0 265 

2023-07-03 11:29:39.737 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4635 

2023-07-03 11:29:39.737 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4275 

2023-07-03 11:29:39.737 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4094 row column role 168 0 266 

2023-07-03 11:29:39.737 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4636 

2023-07-03 11:29:39.737 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4276 

2023-07-03 11:29:39.737 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4095 row column role 168 0 267 

2023-07-03 11:29:39.737 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4637 

2023-07-03 11:29:39.737 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4277 

2023-07-03 11:29:39.737 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4096 row column role 168 0 268 

2023-07-03 11:29:39.737 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4638 

2023-07-03 11:29:39.737 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4278 

2023-07-03 11:29:39.738 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4097 row column role 168 0 269 

2023-07-03 11:29:39.738 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4639 

2023-07-03 11:29:39.738 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4279 

2023-07-03 11:29:39.738 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4098 row column role 168 0 270 

2023-07-03 11:29:39.738 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4640 

2023-07-03 11:29:39.738 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4280 

2023-07-03 11:29:39.738 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4099 row column role 168 0 271 

2023-07-03 11:29:39.738 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4641 

2023-07-03 11:29:39.738 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4281 

2023-07-03 11:29:39.738 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4100 row column role 168 0 272 

2023-07-03 11:29:39.738 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4642 

2023-07-03 11:29:39.738 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4282 

2023-07-03 11:29:39.738 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4101 row column role 168 0 273 

2023-07-03 11:29:39.739 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4643 

2023-07-03 11:29:39.739 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4283 

2023-07-03 11:29:39.739 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4102 row column role 168 0 274 

2023-07-03 11:29:39.739 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4644 

2023-07-03 11:29:39.739 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4284 

2023-07-03 11:29:39.739 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4103 row column role 168 0 275 

2023-07-03 11:29:39.845 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4645 

2023-07-03 11:29:39.845 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4285 

2023-07-03 11:29:39.845 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4104 row column role 169 0 257 

2023-07-03 11:29:39.845 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4646 

2023-07-03 11:29:39.845 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4286 

2023-07-03 11:29:39.846 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4105 row column role 169 0 258 

2023-07-03 11:29:39.846 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4647 

2023-07-03 11:29:39.846 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4287 

2023-07-03 11:29:39.846 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4106 row column role 169 0 259 

2023-07-03 11:29:39.846 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4648 

2023-07-03 11:29:39.847 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4288 

2023-07-03 11:29:39.847 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4107 row column role 169 0 260 

2023-07-03 11:29:39.847 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4649 

2023-07-03 11:29:39.847 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4289 

2023-07-03 11:29:39.847 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4108 row column role 169 0 261 

2023-07-03 11:29:39.848 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4650 

2023-07-03 11:29:39.848 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4290 

2023-07-03 11:29:39.848 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4109 row column role 169 0 262 

2023-07-03 11:29:39.849 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4651 

2023-07-03 11:29:39.849 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4291 

2023-07-03 11:29:39.849 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4110 row column role 169 0 263 

2023-07-03 11:29:39.849 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4652 

2023-07-03 11:29:39.849 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4292 

2023-07-03 11:29:39.849 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4111 row column role 169 0 264 

2023-07-03 11:29:39.850 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4653 

2023-07-03 11:29:39.850 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4293 

2023-07-03 11:29:39.850 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4112 row column role 169 0 265 

2023-07-03 11:29:39.850 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4654 

2023-07-03 11:29:39.850 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4294 

2023-07-03 11:29:39.850 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4113 row column role 169 0 266 

2023-07-03 11:29:39.851 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4655 

2023-07-03 11:29:39.851 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4295 

2023-07-03 11:29:39.851 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4114 row column role 169 0 267 

2023-07-03 11:29:39.851 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4656 

2023-07-03 11:29:39.851 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4296 

2023-07-03 11:29:39.851 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4115 row column role 169 0 268 

2023-07-03 11:29:39.852 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4657 

2023-07-03 11:29:39.852 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4297 

2023-07-03 11:29:39.852 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4116 row column role 169 0 269 

2023-07-03 11:29:39.853 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4658 

2023-07-03 11:29:39.853 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4298 

2023-07-03 11:29:39.853 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4117 row column role 169 0 270 

2023-07-03 11:29:39.853 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4659 

2023-07-03 11:29:39.853 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4299 

2023-07-03 11:29:39.853 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4118 row column role 169 0 271 

2023-07-03 11:29:39.854 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4660 

2023-07-03 11:29:39.854 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4300 

2023-07-03 11:29:39.854 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4119 row column role 169 0 272 

2023-07-03 11:29:39.854 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4661 

2023-07-03 11:29:39.854 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4301 

2023-07-03 11:29:39.854 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4120 row column role 169 0 273 

2023-07-03 11:29:39.855 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4662 

2023-07-03 11:29:39.855 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4302 

2023-07-03 11:29:39.855 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4121 row column role 169 0 274 

2023-07-03 11:29:39.855 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4663 

2023-07-03 11:29:39.855 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4303 

2023-07-03 11:29:39.855 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4122 row column role 169 0 275 

2023-07-03 11:29:39.869 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4664 

2023-07-03 11:29:39.870 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4304 

2023-07-03 11:29:39.870 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4123 row column role 170 0 257 

2023-07-03 11:29:39.870 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4665 

2023-07-03 11:29:39.870 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4305 

2023-07-03 11:29:39.870 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4124 row column role 170 0 258 

2023-07-03 11:29:39.871 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4666 

2023-07-03 11:29:39.871 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4306 

2023-07-03 11:29:39.871 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4125 row column role 170 0 259 

2023-07-03 11:29:39.872 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4667 

2023-07-03 11:29:39.872 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4307 

2023-07-03 11:29:39.872 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4126 row column role 170 0 260 

2023-07-03 11:29:39.872 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4668 

2023-07-03 11:29:39.872 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4308 

2023-07-03 11:29:39.872 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4127 row column role 170 0 261 

2023-07-03 11:29:39.873 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4669 

2023-07-03 11:29:39.873 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4309 

2023-07-03 11:29:39.873 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4128 row column role 170 0 262 

2023-07-03 11:29:39.874 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4670 

2023-07-03 11:29:39.874 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4310 

2023-07-03 11:29:39.874 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4129 row column role 170 0 263 

2023-07-03 11:29:39.874 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4671 

2023-07-03 11:29:39.875 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4311 

2023-07-03 11:29:39.875 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4130 row column role 170 0 264 

2023-07-03 11:29:39.875 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4672 

2023-07-03 11:29:39.875 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4312 

2023-07-03 11:29:39.875 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4131 row column role 170 0 265 

2023-07-03 11:29:39.875 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4673 

2023-07-03 11:29:39.875 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4313 

2023-07-03 11:29:39.875 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4132 row column role 170 0 266 

2023-07-03 11:29:39.876 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4674 

2023-07-03 11:29:39.876 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4314 

2023-07-03 11:29:39.876 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4133 row column role 170 0 267 

2023-07-03 11:29:39.876 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4675 

2023-07-03 11:29:39.876 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4315 

2023-07-03 11:29:39.876 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4134 row column role 170 0 268 

2023-07-03 11:29:39.876 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4676 

2023-07-03 11:29:39.876 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4316 

2023-07-03 11:29:39.876 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4135 row column role 170 0 269 

2023-07-03 11:29:39.877 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4677 

2023-07-03 11:29:39.877 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4317 

2023-07-03 11:29:39.877 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4136 row column role 170 0 270 

2023-07-03 11:29:39.877 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4678 

2023-07-03 11:29:39.877 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4318 

2023-07-03 11:29:39.877 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4137 row column role 170 0 271 

2023-07-03 11:29:39.878 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4679 

2023-07-03 11:29:39.878 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4319 

2023-07-03 11:29:39.878 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4138 row column role 170 0 272 

2023-07-03 11:29:39.878 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4680 

2023-07-03 11:29:39.878 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4320 

2023-07-03 11:29:39.878 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4139 row column role 170 0 273 

2023-07-03 11:29:39.878 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4681 

2023-07-03 11:29:39.878 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4321 

2023-07-03 11:29:39.878 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4140 row column role 170 0 274 

2023-07-03 11:29:39.878 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4682 

2023-07-03 11:29:39.879 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4322 

2023-07-03 11:29:39.879 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4141 row column role 170 0 275 

2023-07-03 11:29:39.922 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4683 

2023-07-03 11:29:39.922 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4323 

2023-07-03 11:29:39.922 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4142 row column role 171 0 257 

2023-07-03 11:29:39.923 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4684 

2023-07-03 11:29:39.923 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4324 

2023-07-03 11:29:39.923 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4143 row column role 171 0 258 

2023-07-03 11:29:39.923 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4685 

2023-07-03 11:29:39.923 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4325 

2023-07-03 11:29:39.923 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4144 row column role 171 0 259 

2023-07-03 11:29:39.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4686 

2023-07-03 11:29:39.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4326 

2023-07-03 11:29:39.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4145 row column role 171 0 260 

2023-07-03 11:29:39.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4687 

2023-07-03 11:29:39.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4327 

2023-07-03 11:29:39.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4146 row column role 171 0 261 

2023-07-03 11:29:39.924 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4688 

2023-07-03 11:29:39.924 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4328 

2023-07-03 11:29:39.924 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4147 row column role 171 0 262 

2023-07-03 11:29:39.925 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4689 

2023-07-03 11:29:39.925 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4329 

2023-07-03 11:29:39.925 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4148 row column role 171 0 263 

2023-07-03 11:29:39.925 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4690 

2023-07-03 11:29:39.925 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4330 

2023-07-03 11:29:39.925 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4149 row column role 171 0 264 

2023-07-03 11:29:39.925 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4691 

2023-07-03 11:29:39.925 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4331 

2023-07-03 11:29:39.925 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4150 row column role 171 0 265 

2023-07-03 11:29:39.926 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4692 

2023-07-03 11:29:39.926 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4332 

2023-07-03 11:29:39.926 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4151 row column role 171 0 266 

2023-07-03 11:29:39.926 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4693 

2023-07-03 11:29:39.926 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4333 

2023-07-03 11:29:39.926 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4152 row column role 171 0 267 

2023-07-03 11:29:39.926 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4694 

2023-07-03 11:29:39.927 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4334 

2023-07-03 11:29:39.927 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4153 row column role 171 0 268 

2023-07-03 11:29:39.927 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4695 

2023-07-03 11:29:39.927 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4335 

2023-07-03 11:29:39.927 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4154 row column role 171 0 269 

2023-07-03 11:29:39.927 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4696 

2023-07-03 11:29:39.927 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4336 

2023-07-03 11:29:39.927 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4155 row column role 171 0 270 

2023-07-03 11:29:39.928 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4697 

2023-07-03 11:29:39.928 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4337 

2023-07-03 11:29:39.928 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4156 row column role 171 0 271 

2023-07-03 11:29:39.928 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4698 

2023-07-03 11:29:39.928 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4338 

2023-07-03 11:29:39.928 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4157 row column role 171 0 272 

2023-07-03 11:29:39.928 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4699 

2023-07-03 11:29:39.928 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4339 

2023-07-03 11:29:39.928 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4158 row column role 171 0 273 

2023-07-03 11:29:39.928 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4700 

2023-07-03 11:29:39.928 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4340 

2023-07-03 11:29:39.928 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4159 row column role 171 0 274 

2023-07-03 11:29:39.929 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4701 

2023-07-03 11:29:39.929 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4341 

2023-07-03 11:29:39.929 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4160 row column role 171 0 275 

2023-07-03 11:29:39.984 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4702 

2023-07-03 11:29:39.985 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4342 

2023-07-03 11:29:39.985 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4161 row column role 172 0 257 

2023-07-03 11:29:39.985 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4703 

2023-07-03 11:29:39.985 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4343 

2023-07-03 11:29:39.985 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4162 row column role 172 0 258 

2023-07-03 11:29:39.985 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4704 

2023-07-03 11:29:39.985 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4344 

2023-07-03 11:29:39.985 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4163 row column role 172 0 259 

2023-07-03 11:29:39.986 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4705 

2023-07-03 11:29:39.986 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4345 

2023-07-03 11:29:39.986 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4164 row column role 172 0 260 

2023-07-03 11:29:39.986 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4706 

2023-07-03 11:29:39.986 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4346 

2023-07-03 11:29:39.986 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4165 row column role 172 0 261 

2023-07-03 11:29:39.986 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4707 

2023-07-03 11:29:39.986 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4347 

2023-07-03 11:29:39.986 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4166 row column role 172 0 262 

2023-07-03 11:29:39.987 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4708 

2023-07-03 11:29:39.987 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4348 

2023-07-03 11:29:39.987 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4167 row column role 172 0 263 

2023-07-03 11:29:39.987 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4709 

2023-07-03 11:29:39.987 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4349 

2023-07-03 11:29:39.987 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4168 row column role 172 0 264 

2023-07-03 11:29:39.987 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4710 

2023-07-03 11:29:39.987 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4350 

2023-07-03 11:29:39.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4169 row column role 172 0 265 

2023-07-03 11:29:39.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4711 

2023-07-03 11:29:39.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4351 

2023-07-03 11:29:39.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4170 row column role 172 0 266 

2023-07-03 11:29:39.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4712 

2023-07-03 11:29:39.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4352 

2023-07-03 11:29:39.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4171 row column role 172 0 267 

2023-07-03 11:29:39.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4713 

2023-07-03 11:29:39.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4353 

2023-07-03 11:29:39.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4172 row column role 172 0 268 

2023-07-03 11:29:39.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4714 

2023-07-03 11:29:39.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4354 

2023-07-03 11:29:39.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4173 row column role 172 0 269 

2023-07-03 11:29:39.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4715 

2023-07-03 11:29:39.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4355 

2023-07-03 11:29:39.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4174 row column role 172 0 270 

2023-07-03 11:29:39.990 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4716 

2023-07-03 11:29:39.990 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4356 

2023-07-03 11:29:39.990 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4175 row column role 172 0 271 

2023-07-03 11:29:39.990 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4717 

2023-07-03 11:29:39.990 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4357 

2023-07-03 11:29:39.990 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4176 row column role 172 0 272 

2023-07-03 11:29:39.990 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4718 

2023-07-03 11:29:39.990 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4358 

2023-07-03 11:29:39.990 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4177 row column role 172 0 273 

2023-07-03 11:29:39.990 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4719 

2023-07-03 11:29:39.990 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4359 

2023-07-03 11:29:39.990 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4178 row column role 172 0 274 

2023-07-03 11:29:39.991 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4720 

2023-07-03 11:29:39.991 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4360 

2023-07-03 11:29:39.991 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4179 row column role 172 0 275 

2023-07-03 11:29:40.047 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4721 

2023-07-03 11:29:40.047 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4361 

2023-07-03 11:29:40.047 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4180 row column role 173 0 257 

2023-07-03 11:29:40.048 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4722 

2023-07-03 11:29:40.048 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4362 

2023-07-03 11:29:40.048 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4181 row column role 173 0 258 

2023-07-03 11:29:40.048 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4723 

2023-07-03 11:29:40.048 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4363 

2023-07-03 11:29:40.048 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4182 row column role 173 0 259 

2023-07-03 11:29:40.048 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4724 

2023-07-03 11:29:40.048 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4364 

2023-07-03 11:29:40.048 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4183 row column role 173 0 260 

2023-07-03 11:29:40.049 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4725 

2023-07-03 11:29:40.049 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4365 

2023-07-03 11:29:40.049 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4184 row column role 173 0 261 

2023-07-03 11:29:40.049 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4726 

2023-07-03 11:29:40.049 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4366 

2023-07-03 11:29:40.049 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4185 row column role 173 0 262 

2023-07-03 11:29:40.049 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4727 

2023-07-03 11:29:40.049 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4367 

2023-07-03 11:29:40.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4186 row column role 173 0 263 

2023-07-03 11:29:40.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4728 

2023-07-03 11:29:40.050 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4368 

2023-07-03 11:29:40.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4187 row column role 173 0 264 

2023-07-03 11:29:40.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4729 

2023-07-03 11:29:40.050 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4369 

2023-07-03 11:29:40.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4188 row column role 173 0 265 

2023-07-03 11:29:40.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4730 

2023-07-03 11:29:40.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4370 

2023-07-03 11:29:40.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4189 row column role 173 0 266 

2023-07-03 11:29:40.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4731 

2023-07-03 11:29:40.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4371 

2023-07-03 11:29:40.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4190 row column role 173 0 267 

2023-07-03 11:29:40.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4732 

2023-07-03 11:29:40.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4372 

2023-07-03 11:29:40.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4191 row column role 173 0 268 

2023-07-03 11:29:40.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4733 

2023-07-03 11:29:40.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4373 

2023-07-03 11:29:40.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4192 row column role 173 0 269 

2023-07-03 11:29:40.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4734 

2023-07-03 11:29:40.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4374 

2023-07-03 11:29:40.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4193 row column role 173 0 270 

2023-07-03 11:29:40.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4735 

2023-07-03 11:29:40.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4375 

2023-07-03 11:29:40.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4194 row column role 173 0 271 

2023-07-03 11:29:40.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4736 

2023-07-03 11:29:40.053 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4376 

2023-07-03 11:29:40.053 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4195 row column role 173 0 272 

2023-07-03 11:29:40.053 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4737 

2023-07-03 11:29:40.053 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4377 

2023-07-03 11:29:40.053 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4196 row column role 173 0 273 

2023-07-03 11:29:40.053 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4738 

2023-07-03 11:29:40.053 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4378 

2023-07-03 11:29:40.053 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4197 row column role 173 0 274 

2023-07-03 11:29:40.054 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4739 

2023-07-03 11:29:40.054 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4379 

2023-07-03 11:29:40.054 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4198 row column role 173 0 275 

2023-07-03 11:29:40.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4740 

2023-07-03 11:29:40.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4380 

2023-07-03 11:29:40.139 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4199 row column role 174 0 257 

2023-07-03 11:29:40.139 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4741 

2023-07-03 11:29:40.139 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4381 

2023-07-03 11:29:40.139 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4200 row column role 174 0 258 

2023-07-03 11:29:40.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4742 

2023-07-03 11:29:40.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4382 

2023-07-03 11:29:40.140 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4201 row column role 174 0 259 

2023-07-03 11:29:40.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4743 

2023-07-03 11:29:40.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4383 

2023-07-03 11:29:40.140 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4202 row column role 174 0 260 

2023-07-03 11:29:40.141 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4744 

2023-07-03 11:29:40.141 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4384 

2023-07-03 11:29:40.141 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4203 row column role 174 0 261 

2023-07-03 11:29:40.141 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4745 

2023-07-03 11:29:40.142 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4385 

2023-07-03 11:29:40.142 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4204 row column role 174 0 262 

2023-07-03 11:29:40.142 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4746 

2023-07-03 11:29:40.142 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4386 

2023-07-03 11:29:40.142 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4205 row column role 174 0 263 

2023-07-03 11:29:40.142 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4747 

2023-07-03 11:29:40.143 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4387 

2023-07-03 11:29:40.143 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4206 row column role 174 0 264 

2023-07-03 11:29:40.143 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4748 

2023-07-03 11:29:40.143 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4388 

2023-07-03 11:29:40.143 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4207 row column role 174 0 265 

2023-07-03 11:29:40.143 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4749 

2023-07-03 11:29:40.143 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4389 

2023-07-03 11:29:40.144 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4208 row column role 174 0 266 

2023-07-03 11:29:40.144 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4750 

2023-07-03 11:29:40.144 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4390 

2023-07-03 11:29:40.144 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4209 row column role 174 0 267 

2023-07-03 11:29:40.144 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4751 

2023-07-03 11:29:40.144 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4391 

2023-07-03 11:29:40.144 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4210 row column role 174 0 268 

2023-07-03 11:29:40.145 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4752 

2023-07-03 11:29:40.145 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4392 

2023-07-03 11:29:40.145 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4211 row column role 174 0 269 

2023-07-03 11:29:40.145 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4753 

2023-07-03 11:29:40.145 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4393 

2023-07-03 11:29:40.145 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4212 row column role 174 0 270 

2023-07-03 11:29:40.146 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4754 

2023-07-03 11:29:40.146 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4394 

2023-07-03 11:29:40.146 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4213 row column role 174 0 271 

2023-07-03 11:29:40.146 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4755 

2023-07-03 11:29:40.146 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4395 

2023-07-03 11:29:40.146 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4214 row column role 174 0 272 

2023-07-03 11:29:40.146 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4756 

2023-07-03 11:29:40.146 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4396 

2023-07-03 11:29:40.146 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4215 row column role 174 0 273 

2023-07-03 11:29:40.146 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4757 

2023-07-03 11:29:40.146 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4397 

2023-07-03 11:29:40.146 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4216 row column role 174 0 274 

2023-07-03 11:29:40.148 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4758 

2023-07-03 11:29:40.148 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4398 

2023-07-03 11:29:40.148 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4217 row column role 174 0 275 

2023-07-03 11:29:40.195 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4759 

2023-07-03 11:29:40.195 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4399 

2023-07-03 11:29:40.195 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4218 row column role 175 0 257 

2023-07-03 11:29:40.196 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4760 

2023-07-03 11:29:40.196 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4400 

2023-07-03 11:29:40.196 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4219 row column role 175 0 258 

2023-07-03 11:29:40.196 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4761 

2023-07-03 11:29:40.197 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4401 

2023-07-03 11:29:40.197 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4220 row column role 175 0 259 

2023-07-03 11:29:40.197 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4762 

2023-07-03 11:29:40.197 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4402 

2023-07-03 11:29:40.197 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4221 row column role 175 0 260 

2023-07-03 11:29:40.197 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4763 

2023-07-03 11:29:40.197 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4403 

2023-07-03 11:29:40.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4222 row column role 175 0 261 

2023-07-03 11:29:40.198 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4764 

2023-07-03 11:29:40.198 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4404 

2023-07-03 11:29:40.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4223 row column role 175 0 262 

2023-07-03 11:29:40.198 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4765 

2023-07-03 11:29:40.198 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4405 

2023-07-03 11:29:40.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4224 row column role 175 0 263 

2023-07-03 11:29:40.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4766 

2023-07-03 11:29:40.199 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4406 

2023-07-03 11:29:40.199 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4225 row column role 175 0 264 

2023-07-03 11:29:40.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4767 

2023-07-03 11:29:40.199 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4407 

2023-07-03 11:29:40.199 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4226 row column role 175 0 265 

2023-07-03 11:29:40.200 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4768 

2023-07-03 11:29:40.200 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4408 

2023-07-03 11:29:40.200 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4227 row column role 175 0 266 

2023-07-03 11:29:40.200 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4769 

2023-07-03 11:29:40.200 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4409 

2023-07-03 11:29:40.200 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4228 row column role 175 0 267 

2023-07-03 11:29:40.201 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4770 

2023-07-03 11:29:40.201 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4410 

2023-07-03 11:29:40.201 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4229 row column role 175 0 268 

2023-07-03 11:29:40.201 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4771 

2023-07-03 11:29:40.201 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4411 

2023-07-03 11:29:40.201 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4230 row column role 175 0 269 

2023-07-03 11:29:40.202 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4772 

2023-07-03 11:29:40.202 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4412 

2023-07-03 11:29:40.202 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4231 row column role 175 0 270 

2023-07-03 11:29:40.202 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4773 

2023-07-03 11:29:40.202 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4413 

2023-07-03 11:29:40.202 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4232 row column role 175 0 271 

2023-07-03 11:29:40.203 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4774 

2023-07-03 11:29:40.203 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4414 

2023-07-03 11:29:40.203 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4233 row column role 175 0 272 

2023-07-03 11:29:40.203 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4775 

2023-07-03 11:29:40.203 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4415 

2023-07-03 11:29:40.203 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4234 row column role 175 0 273 

2023-07-03 11:29:40.203 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4776 

2023-07-03 11:29:40.203 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4416 

2023-07-03 11:29:40.203 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4235 row column role 175 0 274 

2023-07-03 11:29:40.204 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4777 

2023-07-03 11:29:40.204 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4417 

2023-07-03 11:29:40.204 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4236 row column role 175 0 275 

2023-07-03 11:29:40.216 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4778 

2023-07-03 11:29:40.216 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4418 

2023-07-03 11:29:40.217 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4237 row column role 176 0 257 

2023-07-03 11:29:40.217 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4779 

2023-07-03 11:29:40.217 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4419 

2023-07-03 11:29:40.217 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4238 row column role 176 0 258 

2023-07-03 11:29:40.217 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4780 

2023-07-03 11:29:40.217 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4420 

2023-07-03 11:29:40.217 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4239 row column role 176 0 259 

2023-07-03 11:29:40.217 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4781 

2023-07-03 11:29:40.217 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4421 

2023-07-03 11:29:40.217 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4240 row column role 176 0 260 

2023-07-03 11:29:40.218 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4782 

2023-07-03 11:29:40.218 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4422 

2023-07-03 11:29:40.218 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4241 row column role 176 0 261 

2023-07-03 11:29:40.218 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4783 

2023-07-03 11:29:40.218 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4423 

2023-07-03 11:29:40.218 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4242 row column role 176 0 262 

2023-07-03 11:29:40.218 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4784 

2023-07-03 11:29:40.218 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4424 

2023-07-03 11:29:40.218 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4243 row column role 176 0 263 

2023-07-03 11:29:40.218 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4785 

2023-07-03 11:29:40.218 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4425 

2023-07-03 11:29:40.219 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4244 row column role 176 0 264 

2023-07-03 11:29:40.219 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4786 

2023-07-03 11:29:40.219 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4426 

2023-07-03 11:29:40.219 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4245 row column role 176 0 265 

2023-07-03 11:29:40.219 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4787 

2023-07-03 11:29:40.219 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4427 

2023-07-03 11:29:40.219 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4246 row column role 176 0 266 

2023-07-03 11:29:40.219 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4788 

2023-07-03 11:29:40.219 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4428 

2023-07-03 11:29:40.219 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4247 row column role 176 0 267 

2023-07-03 11:29:40.219 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4789 

2023-07-03 11:29:40.219 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4429 

2023-07-03 11:29:40.219 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4248 row column role 176 0 268 

2023-07-03 11:29:40.220 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4790 

2023-07-03 11:29:40.220 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4430 

2023-07-03 11:29:40.220 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4249 row column role 176 0 269 

2023-07-03 11:29:40.220 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4791 

2023-07-03 11:29:40.220 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4431 

2023-07-03 11:29:40.220 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4250 row column role 176 0 270 

2023-07-03 11:29:40.220 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4792 

2023-07-03 11:29:40.220 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4432 

2023-07-03 11:29:40.220 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4251 row column role 176 0 271 

2023-07-03 11:29:40.220 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4793 

2023-07-03 11:29:40.220 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4433 

2023-07-03 11:29:40.221 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4252 row column role 176 0 272 

2023-07-03 11:29:40.221 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4794 

2023-07-03 11:29:40.221 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4434 

2023-07-03 11:29:40.221 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4253 row column role 176 0 273 

2023-07-03 11:29:40.221 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4795 

2023-07-03 11:29:40.221 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4435 

2023-07-03 11:29:40.221 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4254 row column role 176 0 274 

2023-07-03 11:29:40.221 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4796 

2023-07-03 11:29:40.221 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4436 

2023-07-03 11:29:40.221 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4255 row column role 176 0 275 

2023-07-03 11:29:40.254 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4797 

2023-07-03 11:29:40.254 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4437 

2023-07-03 11:29:40.254 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4256 row column role 177 0 257 

2023-07-03 11:29:40.255 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4798 

2023-07-03 11:29:40.255 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4438 

2023-07-03 11:29:40.255 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4257 row column role 177 0 258 

2023-07-03 11:29:40.255 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4799 

2023-07-03 11:29:40.255 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4439 

2023-07-03 11:29:40.255 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4258 row column role 177 0 259 

2023-07-03 11:29:40.256 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4800 

2023-07-03 11:29:40.256 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4440 

2023-07-03 11:29:40.256 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4259 row column role 177 0 260 

2023-07-03 11:29:40.256 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4801 

2023-07-03 11:29:40.256 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4441 

2023-07-03 11:29:40.256 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4260 row column role 177 0 261 

2023-07-03 11:29:40.256 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4802 

2023-07-03 11:29:40.256 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4442 

2023-07-03 11:29:40.256 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4261 row column role 177 0 262 

2023-07-03 11:29:40.257 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4803 

2023-07-03 11:29:40.257 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4443 

2023-07-03 11:29:40.257 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4262 row column role 177 0 263 

2023-07-03 11:29:40.257 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4804 

2023-07-03 11:29:40.257 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4444 

2023-07-03 11:29:40.257 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4263 row column role 177 0 264 

2023-07-03 11:29:40.257 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4805 

2023-07-03 11:29:40.257 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4445 

2023-07-03 11:29:40.257 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4264 row column role 177 0 265 

2023-07-03 11:29:40.258 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4806 

2023-07-03 11:29:40.258 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4446 

2023-07-03 11:29:40.258 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4265 row column role 177 0 266 

2023-07-03 11:29:40.258 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4807 

2023-07-03 11:29:40.258 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4447 

2023-07-03 11:29:40.258 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4266 row column role 177 0 267 

2023-07-03 11:29:40.258 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4808 

2023-07-03 11:29:40.258 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4448 

2023-07-03 11:29:40.258 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4267 row column role 177 0 268 

2023-07-03 11:29:40.258 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4809 

2023-07-03 11:29:40.258 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4449 

2023-07-03 11:29:40.259 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4268 row column role 177 0 269 

2023-07-03 11:29:40.259 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4810 

2023-07-03 11:29:40.259 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4450 

2023-07-03 11:29:40.259 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4269 row column role 177 0 270 

2023-07-03 11:29:40.259 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4811 

2023-07-03 11:29:40.259 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4451 

2023-07-03 11:29:40.259 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4270 row column role 177 0 271 

2023-07-03 11:29:40.259 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4812 

2023-07-03 11:29:40.259 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4452 

2023-07-03 11:29:40.259 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4271 row column role 177 0 272 

2023-07-03 11:29:40.260 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4813 

2023-07-03 11:29:40.260 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4453 

2023-07-03 11:29:40.260 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4272 row column role 177 0 273 

2023-07-03 11:29:40.260 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4814 

2023-07-03 11:29:40.260 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4454 

2023-07-03 11:29:40.260 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4273 row column role 177 0 274 

2023-07-03 11:29:40.260 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4815 

2023-07-03 11:29:40.260 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4455 

2023-07-03 11:29:40.260 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4274 row column role 177 0 275 

2023-07-03 11:29:40.316 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4816 

2023-07-03 11:29:40.316 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4456 

2023-07-03 11:29:40.316 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4275 row column role 178 0 257 

2023-07-03 11:29:40.317 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4817 

2023-07-03 11:29:40.317 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4457 

2023-07-03 11:29:40.317 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4276 row column role 178 0 258 

2023-07-03 11:29:40.317 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4818 

2023-07-03 11:29:40.317 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4458 

2023-07-03 11:29:40.317 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4277 row column role 178 0 259 

2023-07-03 11:29:40.317 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4819 

2023-07-03 11:29:40.317 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4459 

2023-07-03 11:29:40.317 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4278 row column role 178 0 260 

2023-07-03 11:29:40.317 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4820 

2023-07-03 11:29:40.317 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4460 

2023-07-03 11:29:40.318 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4279 row column role 178 0 261 

2023-07-03 11:29:40.318 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4821 

2023-07-03 11:29:40.318 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4461 

2023-07-03 11:29:40.318 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4280 row column role 178 0 262 

2023-07-03 11:29:40.318 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4822 

2023-07-03 11:29:40.318 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4462 

2023-07-03 11:29:40.318 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4281 row column role 178 0 263 

2023-07-03 11:29:40.318 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4823 

2023-07-03 11:29:40.318 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4463 

2023-07-03 11:29:40.319 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4282 row column role 178 0 264 

2023-07-03 11:29:40.319 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4824 

2023-07-03 11:29:40.319 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4464 

2023-07-03 11:29:40.319 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4283 row column role 178 0 265 

2023-07-03 11:29:40.319 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4825 

2023-07-03 11:29:40.319 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4465 

2023-07-03 11:29:40.319 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4284 row column role 178 0 266 

2023-07-03 11:29:40.319 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4826 

2023-07-03 11:29:40.319 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4466 

2023-07-03 11:29:40.319 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4285 row column role 178 0 267 

2023-07-03 11:29:40.320 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4827 

2023-07-03 11:29:40.320 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4467 

2023-07-03 11:29:40.320 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4286 row column role 178 0 268 

2023-07-03 11:29:40.320 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4828 

2023-07-03 11:29:40.320 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4468 

2023-07-03 11:29:40.320 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4287 row column role 178 0 269 

2023-07-03 11:29:40.320 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4829 

2023-07-03 11:29:40.320 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4469 

2023-07-03 11:29:40.320 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4288 row column role 178 0 270 

2023-07-03 11:29:40.320 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4830 

2023-07-03 11:29:40.320 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4470 

2023-07-03 11:29:40.321 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4289 row column role 178 0 271 

2023-07-03 11:29:40.321 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4831 

2023-07-03 11:29:40.321 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4471 

2023-07-03 11:29:40.321 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4290 row column role 178 0 272 

2023-07-03 11:29:40.321 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4832 

2023-07-03 11:29:40.321 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4472 

2023-07-03 11:29:40.321 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4291 row column role 178 0 273 

2023-07-03 11:29:40.321 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4833 

2023-07-03 11:29:40.321 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4473 

2023-07-03 11:29:40.321 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4292 row column role 178 0 274 

2023-07-03 11:29:40.321 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4834 

2023-07-03 11:29:40.321 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4474 

2023-07-03 11:29:40.321 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4293 row column role 178 0 275 

2023-07-03 11:29:40.471 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4835 

2023-07-03 11:29:40.471 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4475 

2023-07-03 11:29:40.471 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4294 row column role 179 0 257 

2023-07-03 11:29:40.471 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4836 

2023-07-03 11:29:40.471 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4476 

2023-07-03 11:29:40.471 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4295 row column role 179 0 258 

2023-07-03 11:29:40.472 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4837 

2023-07-03 11:29:40.472 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4477 

2023-07-03 11:29:40.472 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4296 row column role 179 0 259 

2023-07-03 11:29:40.472 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4838 

2023-07-03 11:29:40.472 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4478 

2023-07-03 11:29:40.472 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4297 row column role 179 0 260 

2023-07-03 11:29:40.473 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4839 

2023-07-03 11:29:40.473 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4479 

2023-07-03 11:29:40.473 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4298 row column role 179 0 261 

2023-07-03 11:29:40.473 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4840 

2023-07-03 11:29:40.473 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4480 

2023-07-03 11:29:40.473 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4299 row column role 179 0 262 

2023-07-03 11:29:40.474 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4841 

2023-07-03 11:29:40.474 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4481 

2023-07-03 11:29:40.474 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4300 row column role 179 0 263 

2023-07-03 11:29:40.474 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4842 

2023-07-03 11:29:40.474 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4482 

2023-07-03 11:29:40.474 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4301 row column role 179 0 264 

2023-07-03 11:29:40.475 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4843 

2023-07-03 11:29:40.475 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4483 

2023-07-03 11:29:40.475 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4302 row column role 179 0 265 

2023-07-03 11:29:40.475 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4844 

2023-07-03 11:29:40.475 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4484 

2023-07-03 11:29:40.475 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4303 row column role 179 0 266 

2023-07-03 11:29:40.476 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4845 

2023-07-03 11:29:40.476 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4485 

2023-07-03 11:29:40.476 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4304 row column role 179 0 267 

2023-07-03 11:29:40.476 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4846 

2023-07-03 11:29:40.476 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4486 

2023-07-03 11:29:40.476 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4305 row column role 179 0 268 

2023-07-03 11:29:40.476 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4847 

2023-07-03 11:29:40.476 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4487 

2023-07-03 11:29:40.477 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4306 row column role 179 0 269 

2023-07-03 11:29:40.477 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4848 

2023-07-03 11:29:40.477 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4488 

2023-07-03 11:29:40.477 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4307 row column role 179 0 270 

2023-07-03 11:29:40.477 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4849 

2023-07-03 11:29:40.477 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4489 

2023-07-03 11:29:40.477 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4308 row column role 179 0 271 

2023-07-03 11:29:40.478 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4850 

2023-07-03 11:29:40.478 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4490 

2023-07-03 11:29:40.478 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4309 row column role 179 0 272 

2023-07-03 11:29:40.478 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4851 

2023-07-03 11:29:40.478 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4491 

2023-07-03 11:29:40.478 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4310 row column role 179 0 273 

2023-07-03 11:29:40.478 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4852 

2023-07-03 11:29:40.478 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4492 

2023-07-03 11:29:40.478 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4311 row column role 179 0 274 

2023-07-03 11:29:40.479 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4853 

2023-07-03 11:29:40.479 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4493 

2023-07-03 11:29:40.479 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4312 row column role 179 0 275 

2023-07-03 11:30:17.118 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4854 

2023-07-03 11:30:17.118 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4494 

2023-07-03 11:30:17.118 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4313 row column role 147 0 257 

2023-07-03 11:30:17.119 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4855 

2023-07-03 11:30:17.119 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4495 

2023-07-03 11:30:17.119 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4314 row column role 147 0 258 

2023-07-03 11:30:17.119 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4856 

2023-07-03 11:30:17.119 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4496 

2023-07-03 11:30:17.119 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4315 row column role 147 0 259 

2023-07-03 11:30:17.120 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4857 

2023-07-03 11:30:17.120 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4497 

2023-07-03 11:30:17.120 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4316 row column role 147 0 260 

2023-07-03 11:30:17.120 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4858 

2023-07-03 11:30:17.120 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4498 

2023-07-03 11:30:17.121 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4317 row column role 147 0 261 

2023-07-03 11:30:17.121 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4859 

2023-07-03 11:30:17.121 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4499 

2023-07-03 11:30:17.121 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4318 row column role 147 0 262 

2023-07-03 11:30:17.122 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4860 

2023-07-03 11:30:17.122 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4500 

2023-07-03 11:30:17.122 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4319 row column role 147 0 263 

2023-07-03 11:30:17.122 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4861 

2023-07-03 11:30:17.122 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4501 

2023-07-03 11:30:17.122 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4320 row column role 147 0 264 

2023-07-03 11:30:17.123 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4862 

2023-07-03 11:30:17.123 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4502 

2023-07-03 11:30:17.123 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4321 row column role 147 0 265 

2023-07-03 11:30:17.123 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4863 

2023-07-03 11:30:17.123 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4503 

2023-07-03 11:30:17.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4322 row column role 147 0 266 

2023-07-03 11:30:17.124 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4864 

2023-07-03 11:30:17.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4504 

2023-07-03 11:30:17.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4323 row column role 147 0 267 

2023-07-03 11:30:17.125 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4865 

2023-07-03 11:30:17.125 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4505 

2023-07-03 11:30:17.125 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4324 row column role 147 0 268 

2023-07-03 11:30:17.125 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4866 

2023-07-03 11:30:17.125 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4506 

2023-07-03 11:30:17.125 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4325 row column role 147 0 269 

2023-07-03 11:30:17.126 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4867 

2023-07-03 11:30:17.126 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4507 

2023-07-03 11:30:17.126 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4326 row column role 147 0 270 

2023-07-03 11:30:17.126 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4868 

2023-07-03 11:30:17.126 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4508 

2023-07-03 11:30:17.126 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4327 row column role 147 0 271 

2023-07-03 11:30:17.127 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4869 

2023-07-03 11:30:17.127 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4509 

2023-07-03 11:30:17.127 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4328 row column role 147 0 272 

2023-07-03 11:30:17.127 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4870 

2023-07-03 11:30:17.127 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4510 

2023-07-03 11:30:17.127 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4329 row column role 147 0 273 

2023-07-03 11:30:17.127 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4871 

2023-07-03 11:30:17.127 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4511 

2023-07-03 11:30:17.127 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4330 row column role 147 0 274 

2023-07-03 11:30:17.128 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4872 

2023-07-03 11:30:17.128 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4512 

2023-07-03 11:30:17.128 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4331 row column role 147 0 275 

2023-07-03 11:30:17.140 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4873 

2023-07-03 11:30:17.140 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4513 

2023-07-03 11:30:17.141 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4332 row column role 146 0 257 

2023-07-03 11:30:17.141 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4874 

2023-07-03 11:30:17.141 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4514 

2023-07-03 11:30:17.141 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4333 row column role 146 0 258 

2023-07-03 11:30:17.142 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4875 

2023-07-03 11:30:17.142 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4515 

2023-07-03 11:30:17.142 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4334 row column role 146 0 259 

2023-07-03 11:30:17.142 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4876 

2023-07-03 11:30:17.142 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4516 

2023-07-03 11:30:17.142 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4335 row column role 146 0 260 

2023-07-03 11:30:17.143 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4877 

2023-07-03 11:30:17.143 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4517 

2023-07-03 11:30:17.143 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4336 row column role 146 0 261 

2023-07-03 11:30:17.143 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4878 

2023-07-03 11:30:17.143 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4518 

2023-07-03 11:30:17.143 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4337 row column role 146 0 262 

2023-07-03 11:30:17.144 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4879 

2023-07-03 11:30:17.144 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4519 

2023-07-03 11:30:17.144 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4338 row column role 146 0 263 

2023-07-03 11:30:17.144 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4880 

2023-07-03 11:30:17.144 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4520 

2023-07-03 11:30:17.145 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4339 row column role 146 0 264 

2023-07-03 11:30:17.145 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4881 

2023-07-03 11:30:17.145 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4521 

2023-07-03 11:30:17.145 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4340 row column role 146 0 265 

2023-07-03 11:30:17.145 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4882 

2023-07-03 11:30:17.146 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4522 

2023-07-03 11:30:17.146 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4341 row column role 146 0 266 

2023-07-03 11:30:17.146 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4883 

2023-07-03 11:30:17.146 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4523 

2023-07-03 11:30:17.146 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4342 row column role 146 0 267 

2023-07-03 11:30:17.147 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4884 

2023-07-03 11:30:17.147 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4524 

2023-07-03 11:30:17.147 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4343 row column role 146 0 268 

2023-07-03 11:30:17.147 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4885 

2023-07-03 11:30:17.147 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4525 

2023-07-03 11:30:17.147 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4344 row column role 146 0 269 

2023-07-03 11:30:17.147 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4886 

2023-07-03 11:30:17.147 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4526 

2023-07-03 11:30:17.147 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4345 row column role 146 0 270 

2023-07-03 11:30:17.149 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4887 

2023-07-03 11:30:17.149 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4527 

2023-07-03 11:30:17.149 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4346 row column role 146 0 271 

2023-07-03 11:30:17.149 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4888 

2023-07-03 11:30:17.149 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4528 

2023-07-03 11:30:17.149 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4347 row column role 146 0 272 

2023-07-03 11:30:17.149 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4889 

2023-07-03 11:30:17.149 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4529 

2023-07-03 11:30:17.149 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4348 row column role 146 0 273 

2023-07-03 11:30:17.150 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4890 

2023-07-03 11:30:17.150 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4530 

2023-07-03 11:30:17.150 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4349 row column role 146 0 274 

2023-07-03 11:30:17.150 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4891 

2023-07-03 11:30:17.150 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4531 

2023-07-03 11:30:17.151 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4350 row column role 146 0 275 

2023-07-03 11:30:17.189 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4892 

2023-07-03 11:30:17.190 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4532 

2023-07-03 11:30:17.190 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4351 row column role 145 0 257 

2023-07-03 11:30:17.190 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4893 

2023-07-03 11:30:17.190 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4533 

2023-07-03 11:30:17.190 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4352 row column role 145 0 258 

2023-07-03 11:30:17.191 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4894 

2023-07-03 11:30:17.191 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4534 

2023-07-03 11:30:17.191 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4353 row column role 145 0 259 

2023-07-03 11:30:17.191 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4895 

2023-07-03 11:30:17.191 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4535 

2023-07-03 11:30:17.192 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4354 row column role 145 0 260 

2023-07-03 11:30:17.192 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4896 

2023-07-03 11:30:17.192 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4536 

2023-07-03 11:30:17.192 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4355 row column role 145 0 261 

2023-07-03 11:30:17.193 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4897 

2023-07-03 11:30:17.193 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4537 

2023-07-03 11:30:17.193 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4356 row column role 145 0 262 

2023-07-03 11:30:17.193 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4898 

2023-07-03 11:30:17.193 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4538 

2023-07-03 11:30:17.193 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4357 row column role 145 0 263 

2023-07-03 11:30:17.194 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4899 

2023-07-03 11:30:17.194 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4539 

2023-07-03 11:30:17.194 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4358 row column role 145 0 264 

2023-07-03 11:30:17.195 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4900 

2023-07-03 11:30:17.195 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4540 

2023-07-03 11:30:17.195 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4359 row column role 145 0 265 

2023-07-03 11:30:17.195 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4901 

2023-07-03 11:30:17.195 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4541 

2023-07-03 11:30:17.195 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4360 row column role 145 0 266 

2023-07-03 11:30:17.196 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4902 

2023-07-03 11:30:17.196 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4542 

2023-07-03 11:30:17.196 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4361 row column role 145 0 267 

2023-07-03 11:30:17.196 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4903 

2023-07-03 11:30:17.196 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4543 

2023-07-03 11:30:17.196 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4362 row column role 145 0 268 

2023-07-03 11:30:17.197 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4904 

2023-07-03 11:30:17.197 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4544 

2023-07-03 11:30:17.197 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4363 row column role 145 0 269 

2023-07-03 11:30:17.197 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4905 

2023-07-03 11:30:17.197 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4545 

2023-07-03 11:30:17.197 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4364 row column role 145 0 270 

2023-07-03 11:30:17.198 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4906 

2023-07-03 11:30:17.198 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4546 

2023-07-03 11:30:17.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4365 row column role 145 0 271 

2023-07-03 11:30:17.198 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4907 

2023-07-03 11:30:17.198 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4547 

2023-07-03 11:30:17.198 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4366 row column role 145 0 272 

2023-07-03 11:30:17.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4908 

2023-07-03 11:30:17.199 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4548 

2023-07-03 11:30:17.199 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4367 row column role 145 0 273 

2023-07-03 11:30:17.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4909 

2023-07-03 11:30:17.199 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4549 

2023-07-03 11:30:17.199 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4368 row column role 145 0 274 

2023-07-03 11:30:17.199 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4910 

2023-07-03 11:30:17.200 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4550 

2023-07-03 11:30:17.200 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4369 row column role 145 0 275 

2023-07-03 11:30:17.289 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4911 

2023-07-03 11:30:17.289 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4551 

2023-07-03 11:30:17.289 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4370 row column role 144 0 257 

2023-07-03 11:30:17.289 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4912 

2023-07-03 11:30:17.290 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4552 

2023-07-03 11:30:17.290 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4371 row column role 144 0 258 

2023-07-03 11:30:17.290 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4913 

2023-07-03 11:30:17.290 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4553 

2023-07-03 11:30:17.290 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4372 row column role 144 0 259 

2023-07-03 11:30:17.290 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4914 

2023-07-03 11:30:17.290 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4554 

2023-07-03 11:30:17.290 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4373 row column role 144 0 260 

2023-07-03 11:30:17.290 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4915 

2023-07-03 11:30:17.290 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4555 

2023-07-03 11:30:17.290 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4374 row column role 144 0 261 

2023-07-03 11:30:17.291 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4916 

2023-07-03 11:30:17.291 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4556 

2023-07-03 11:30:17.291 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4375 row column role 144 0 262 

2023-07-03 11:30:17.291 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4917 

2023-07-03 11:30:17.291 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4557 

2023-07-03 11:30:17.291 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4376 row column role 144 0 263 

2023-07-03 11:30:17.291 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4918 

2023-07-03 11:30:17.291 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4558 

2023-07-03 11:30:17.291 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4377 row column role 144 0 264 

2023-07-03 11:30:17.291 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4919 

2023-07-03 11:30:17.291 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4559 

2023-07-03 11:30:17.291 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4378 row column role 144 0 265 

2023-07-03 11:30:17.292 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4920 

2023-07-03 11:30:17.292 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4560 

2023-07-03 11:30:17.292 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4379 row column role 144 0 266 

2023-07-03 11:30:17.292 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4921 

2023-07-03 11:30:17.292 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4561 

2023-07-03 11:30:17.292 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4380 row column role 144 0 267 

2023-07-03 11:30:17.292 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4922 

2023-07-03 11:30:17.292 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4562 

2023-07-03 11:30:17.292 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4381 row column role 144 0 268 

2023-07-03 11:30:17.292 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4923 

2023-07-03 11:30:17.293 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4563 

2023-07-03 11:30:17.293 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4382 row column role 144 0 269 

2023-07-03 11:30:17.293 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4924 

2023-07-03 11:30:17.293 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4564 

2023-07-03 11:30:17.293 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4383 row column role 144 0 270 

2023-07-03 11:30:17.293 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4925 

2023-07-03 11:30:17.293 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4565 

2023-07-03 11:30:17.293 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4384 row column role 144 0 271 

2023-07-03 11:30:17.293 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4926 

2023-07-03 11:30:17.293 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4566 

2023-07-03 11:30:17.293 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4385 row column role 144 0 272 

2023-07-03 11:30:17.293 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4927 

2023-07-03 11:30:17.293 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4567 

2023-07-03 11:30:17.293 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4386 row column role 144 0 273 

2023-07-03 11:30:17.294 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4928 

2023-07-03 11:30:17.294 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4568 

2023-07-03 11:30:17.294 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4387 row column role 144 0 274 

2023-07-03 11:30:17.294 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4929 

2023-07-03 11:30:17.294 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4569 

2023-07-03 11:30:17.294 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4388 row column role 144 0 275 

2023-07-03 11:30:17.339 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4930 

2023-07-03 11:30:17.339 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4570 

2023-07-03 11:30:17.340 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4389 row column role 177 0 257 

2023-07-03 11:30:17.340 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4931 

2023-07-03 11:30:17.340 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4571 

2023-07-03 11:30:17.340 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4390 row column role 177 0 258 

2023-07-03 11:30:17.340 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4932 

2023-07-03 11:30:17.341 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4572 

2023-07-03 11:30:17.341 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4391 row column role 177 0 259 

2023-07-03 11:30:17.341 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4933 

2023-07-03 11:30:17.341 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4573 

2023-07-03 11:30:17.341 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4392 row column role 177 0 260 

2023-07-03 11:30:17.341 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4934 

2023-07-03 11:30:17.342 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4574 

2023-07-03 11:30:17.342 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4393 row column role 177 0 261 

2023-07-03 11:30:17.342 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4935 

2023-07-03 11:30:17.342 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4575 

2023-07-03 11:30:17.342 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4394 row column role 177 0 262 

2023-07-03 11:30:17.342 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4936 

2023-07-03 11:30:17.342 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4576 

2023-07-03 11:30:17.342 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4395 row column role 177 0 263 

2023-07-03 11:30:17.343 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4937 

2023-07-03 11:30:17.343 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4577 

2023-07-03 11:30:17.343 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4396 row column role 177 0 264 

2023-07-03 11:30:17.343 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4938 

2023-07-03 11:30:17.343 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4578 

2023-07-03 11:30:17.343 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4397 row column role 177 0 265 

2023-07-03 11:30:17.343 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4939 

2023-07-03 11:30:17.343 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4579 

2023-07-03 11:30:17.343 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4398 row column role 177 0 266 

2023-07-03 11:30:17.343 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4940 

2023-07-03 11:30:17.344 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4580 

2023-07-03 11:30:17.344 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4399 row column role 177 0 267 

2023-07-03 11:30:17.344 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4941 

2023-07-03 11:30:17.344 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4581 

2023-07-03 11:30:17.344 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4400 row column role 177 0 268 

2023-07-03 11:30:17.344 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4942 

2023-07-03 11:30:17.344 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4582 

2023-07-03 11:30:17.344 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4401 row column role 177 0 269 

2023-07-03 11:30:17.345 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4943 

2023-07-03 11:30:17.345 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4583 

2023-07-03 11:30:17.345 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4402 row column role 177 0 270 

2023-07-03 11:30:17.345 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4944 

2023-07-03 11:30:17.345 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4584 

2023-07-03 11:30:17.345 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4403 row column role 177 0 271 

2023-07-03 11:30:17.345 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4945 

2023-07-03 11:30:17.345 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4585 

2023-07-03 11:30:17.345 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4404 row column role 177 0 272 

2023-07-03 11:30:17.346 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4946 

2023-07-03 11:30:17.346 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4586 

2023-07-03 11:30:17.346 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4405 row column role 177 0 273 

2023-07-03 11:30:17.346 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4947 

2023-07-03 11:30:17.346 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4587 

2023-07-03 11:30:17.346 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4406 row column role 177 0 274 

2023-07-03 11:30:17.346 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4948 

2023-07-03 11:30:17.346 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4588 

2023-07-03 11:30:17.346 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4407 row column role 177 0 275 

2023-07-03 11:30:17.384 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4949 

2023-07-03 11:30:17.384 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4589 

2023-07-03 11:30:17.384 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4408 row column role 178 0 257 

2023-07-03 11:30:17.384 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4950 

2023-07-03 11:30:17.385 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4590 

2023-07-03 11:30:17.385 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4409 row column role 178 0 258 

2023-07-03 11:30:17.385 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4951 

2023-07-03 11:30:17.385 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4591 

2023-07-03 11:30:17.385 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4410 row column role 178 0 259 

2023-07-03 11:30:17.385 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4952 

2023-07-03 11:30:17.385 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4592 

2023-07-03 11:30:17.385 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4411 row column role 178 0 260 

2023-07-03 11:30:17.385 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4953 

2023-07-03 11:30:17.386 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4593 

2023-07-03 11:30:17.386 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4412 row column role 178 0 261 

2023-07-03 11:30:17.386 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4954 

2023-07-03 11:30:17.386 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4594 

2023-07-03 11:30:17.386 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4413 row column role 178 0 262 

2023-07-03 11:30:17.386 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4955 

2023-07-03 11:30:17.386 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4595 

2023-07-03 11:30:17.386 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4414 row column role 178 0 263 

2023-07-03 11:30:17.386 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4956 

2023-07-03 11:30:17.387 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4596 

2023-07-03 11:30:17.387 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4415 row column role 178 0 264 

2023-07-03 11:30:17.387 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4957 

2023-07-03 11:30:17.387 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4597 

2023-07-03 11:30:17.387 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4416 row column role 178 0 265 

2023-07-03 11:30:17.387 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4958 

2023-07-03 11:30:17.387 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4598 

2023-07-03 11:30:17.387 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4417 row column role 178 0 266 

2023-07-03 11:30:17.387 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4959 

2023-07-03 11:30:17.388 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4599 

2023-07-03 11:30:17.388 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4418 row column role 178 0 267 

2023-07-03 11:30:17.388 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4960 

2023-07-03 11:30:17.388 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4600 

2023-07-03 11:30:17.388 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4419 row column role 178 0 268 

2023-07-03 11:30:17.388 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4961 

2023-07-03 11:30:17.388 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4601 

2023-07-03 11:30:17.388 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4420 row column role 178 0 269 

2023-07-03 11:30:17.388 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4962 

2023-07-03 11:30:17.389 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4602 

2023-07-03 11:30:17.389 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4421 row column role 178 0 270 

2023-07-03 11:30:17.389 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4963 

2023-07-03 11:30:17.389 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4603 

2023-07-03 11:30:17.389 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4422 row column role 178 0 271 

2023-07-03 11:30:17.389 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4964 

2023-07-03 11:30:17.389 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4604 

2023-07-03 11:30:17.389 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4423 row column role 178 0 272 

2023-07-03 11:30:17.389 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4965 

2023-07-03 11:30:17.389 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4605 

2023-07-03 11:30:17.389 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4424 row column role 178 0 273 

2023-07-03 11:30:17.389 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4966 

2023-07-03 11:30:17.389 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4606 

2023-07-03 11:30:17.389 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4425 row column role 178 0 274 

2023-07-03 11:30:17.390 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4967 

2023-07-03 11:30:17.390 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4607 

2023-07-03 11:30:17.390 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4426 row column role 178 0 275 

2023-07-03 11:30:17.391 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4968 

2023-07-03 11:30:17.391 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4608 

2023-07-03 11:30:17.391 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4427 row column role 179 0 257 

2023-07-03 11:30:17.391 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4969 

2023-07-03 11:30:17.391 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4609 

2023-07-03 11:30:17.391 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4428 row column role 179 0 258 

2023-07-03 11:30:17.391 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4970 

2023-07-03 11:30:17.391 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4610 

2023-07-03 11:30:17.391 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4429 row column role 179 0 259 

2023-07-03 11:30:17.392 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4971 

2023-07-03 11:30:17.392 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4611 

2023-07-03 11:30:17.392 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4430 row column role 179 0 260 

2023-07-03 11:30:17.392 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4972 

2023-07-03 11:30:17.392 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4612 

2023-07-03 11:30:17.392 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4431 row column role 179 0 261 

2023-07-03 11:30:17.392 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4973 

2023-07-03 11:30:17.392 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4613 

2023-07-03 11:30:17.392 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4432 row column role 179 0 262 

2023-07-03 11:30:17.393 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4974 

2023-07-03 11:30:17.393 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4614 

2023-07-03 11:30:17.393 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4433 row column role 179 0 263 

2023-07-03 11:30:17.393 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4975 

2023-07-03 11:30:17.393 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4615 

2023-07-03 11:30:17.393 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4434 row column role 179 0 264 

2023-07-03 11:30:17.394 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4976 

2023-07-03 11:30:17.394 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4616 

2023-07-03 11:30:17.394 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4435 row column role 179 0 265 

2023-07-03 11:30:17.394 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4977 

2023-07-03 11:30:17.394 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4617 

2023-07-03 11:30:17.394 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4436 row column role 179 0 266 

2023-07-03 11:30:17.394 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4978 

2023-07-03 11:30:17.394 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4618 

2023-07-03 11:30:17.394 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4437 row column role 179 0 267 

2023-07-03 11:30:17.395 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4979 

2023-07-03 11:30:17.395 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4619 

2023-07-03 11:30:17.395 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4438 row column role 179 0 268 

2023-07-03 11:30:17.395 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4980 

2023-07-03 11:30:17.395 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4620 

2023-07-03 11:30:17.395 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4439 row column role 179 0 269 

2023-07-03 11:30:17.395 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4981 

2023-07-03 11:30:17.395 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4621 

2023-07-03 11:30:17.395 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4440 row column role 179 0 270 

2023-07-03 11:30:17.396 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4982 

2023-07-03 11:30:17.396 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4622 

2023-07-03 11:30:17.396 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4441 row column role 179 0 271 

2023-07-03 11:30:17.396 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4983 

2023-07-03 11:30:17.396 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4623 

2023-07-03 11:30:17.396 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4442 row column role 179 0 272 

2023-07-03 11:30:17.396 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4984 

2023-07-03 11:30:17.396 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4624 

2023-07-03 11:30:17.396 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4443 row column role 179 0 273 

2023-07-03 11:30:17.396 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4985 

2023-07-03 11:30:17.396 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4625 

2023-07-03 11:30:17.396 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4444 row column role 179 0 274 

2023-07-03 11:30:17.397 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4986 

2023-07-03 11:30:17.397 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4626 

2023-07-03 11:30:17.397 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4445 row column role 179 0 275 

2023-07-03 11:30:17.934 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4987 

2023-07-03 11:30:17.934 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4627 

2023-07-03 11:30:17.934 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4446 row column role 147 0 257 

2023-07-03 11:30:17.935 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4988 

2023-07-03 11:30:17.935 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4628 

2023-07-03 11:30:17.935 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4447 row column role 147 0 258 

2023-07-03 11:30:17.935 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4989 

2023-07-03 11:30:17.935 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4629 

2023-07-03 11:30:17.935 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4448 row column role 147 0 259 

2023-07-03 11:30:17.936 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4990 

2023-07-03 11:30:17.936 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4630 

2023-07-03 11:30:17.936 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4449 row column role 147 0 260 

2023-07-03 11:30:17.936 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4991 

2023-07-03 11:30:17.936 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4631 

2023-07-03 11:30:17.936 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4450 row column role 147 0 261 

2023-07-03 11:30:17.937 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4992 

2023-07-03 11:30:17.937 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4632 

2023-07-03 11:30:17.937 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4451 row column role 147 0 262 

2023-07-03 11:30:17.937 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4993 

2023-07-03 11:30:17.937 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4633 

2023-07-03 11:30:17.937 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4452 row column role 147 0 263 

2023-07-03 11:30:17.938 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4994 

2023-07-03 11:30:17.938 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4634 

2023-07-03 11:30:17.938 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4453 row column role 147 0 264 

2023-07-03 11:30:17.938 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4995 

2023-07-03 11:30:17.938 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4635 

2023-07-03 11:30:17.938 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4454 row column role 147 0 265 

2023-07-03 11:30:17.939 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4996 

2023-07-03 11:30:17.939 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4636 

2023-07-03 11:30:17.939 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4455 row column role 147 0 266 

2023-07-03 11:30:17.939 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4997 

2023-07-03 11:30:17.939 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4637 

2023-07-03 11:30:17.939 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4456 row column role 147 0 267 

2023-07-03 11:30:17.940 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4998 

2023-07-03 11:30:17.940 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4638 

2023-07-03 11:30:17.940 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4457 row column role 147 0 268 

2023-07-03 11:30:17.940 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 4999 

2023-07-03 11:30:17.940 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4639 

2023-07-03 11:30:17.940 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4458 row column role 147 0 269 

2023-07-03 11:30:17.940 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5000 

2023-07-03 11:30:17.941 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4640 

2023-07-03 11:30:17.941 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4459 row column role 147 0 270 

2023-07-03 11:30:17.941 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5001 

2023-07-03 11:30:17.941 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4641 

2023-07-03 11:30:17.941 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4460 row column role 147 0 271 

2023-07-03 11:30:17.941 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5002 

2023-07-03 11:30:17.941 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4642 

2023-07-03 11:30:17.942 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4461 row column role 147 0 272 

2023-07-03 11:30:17.942 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5003 

2023-07-03 11:30:17.942 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4643 

2023-07-03 11:30:17.942 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4462 row column role 147 0 273 

2023-07-03 11:30:17.942 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5004 

2023-07-03 11:30:17.942 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4644 

2023-07-03 11:30:17.942 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4463 row column role 147 0 274 

2023-07-03 11:30:17.943 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5005 

2023-07-03 11:30:17.943 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4645 

2023-07-03 11:30:17.943 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4464 row column role 147 0 275 

2023-07-03 11:30:17.952 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5006 

2023-07-03 11:30:17.952 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4646 

2023-07-03 11:30:17.952 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4465 row column role 146 0 257 

2023-07-03 11:30:17.953 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5007 

2023-07-03 11:30:17.953 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4647 

2023-07-03 11:30:17.953 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4466 row column role 146 0 258 

2023-07-03 11:30:17.953 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5008 

2023-07-03 11:30:17.953 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4648 

2023-07-03 11:30:17.953 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4467 row column role 146 0 259 

2023-07-03 11:30:17.953 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5009 

2023-07-03 11:30:17.953 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4649 

2023-07-03 11:30:17.954 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4468 row column role 146 0 260 

2023-07-03 11:30:17.954 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5010 

2023-07-03 11:30:17.954 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4650 

2023-07-03 11:30:17.954 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4469 row column role 146 0 261 

2023-07-03 11:30:17.954 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5011 

2023-07-03 11:30:17.955 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4651 

2023-07-03 11:30:17.955 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4470 row column role 146 0 262 

2023-07-03 11:30:17.955 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5012 

2023-07-03 11:30:17.955 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4652 

2023-07-03 11:30:17.955 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4471 row column role 146 0 263 

2023-07-03 11:30:17.955 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5013 

2023-07-03 11:30:17.955 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4653 

2023-07-03 11:30:17.955 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4472 row column role 146 0 264 

2023-07-03 11:30:17.955 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5014 

2023-07-03 11:30:17.956 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4654 

2023-07-03 11:30:17.956 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4473 row column role 146 0 265 

2023-07-03 11:30:17.956 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5015 

2023-07-03 11:30:17.956 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4655 

2023-07-03 11:30:17.956 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4474 row column role 146 0 266 

2023-07-03 11:30:17.956 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5016 

2023-07-03 11:30:17.956 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4656 

2023-07-03 11:30:17.956 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4475 row column role 146 0 267 

2023-07-03 11:30:17.956 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5017 

2023-07-03 11:30:17.957 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4657 

2023-07-03 11:30:17.957 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4476 row column role 146 0 268 

2023-07-03 11:30:17.957 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5018 

2023-07-03 11:30:17.957 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4658 

2023-07-03 11:30:17.957 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4477 row column role 146 0 269 

2023-07-03 11:30:17.957 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5019 

2023-07-03 11:30:17.957 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4659 

2023-07-03 11:30:17.957 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4478 row column role 146 0 270 

2023-07-03 11:30:17.957 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5020 

2023-07-03 11:30:17.957 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4660 

2023-07-03 11:30:17.957 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4479 row column role 146 0 271 

2023-07-03 11:30:17.958 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5021 

2023-07-03 11:30:17.958 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4661 

2023-07-03 11:30:17.958 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4480 row column role 146 0 272 

2023-07-03 11:30:17.958 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5022 

2023-07-03 11:30:17.958 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4662 

2023-07-03 11:30:17.958 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4481 row column role 146 0 273 

2023-07-03 11:30:17.958 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5023 

2023-07-03 11:30:17.958 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4663 

2023-07-03 11:30:17.958 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4482 row column role 146 0 274 

2023-07-03 11:30:17.958 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5024 

2023-07-03 11:30:17.958 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4664 

2023-07-03 11:30:17.959 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4483 row column role 146 0 275 

2023-07-03 11:30:17.965 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5025 

2023-07-03 11:30:17.965 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4665 

2023-07-03 11:30:17.965 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4484 row column role 145 0 257 

2023-07-03 11:30:17.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5026 

2023-07-03 11:30:17.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4666 

2023-07-03 11:30:17.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4485 row column role 145 0 258 

2023-07-03 11:30:17.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5027 

2023-07-03 11:30:17.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4667 

2023-07-03 11:30:17.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4486 row column role 145 0 259 

2023-07-03 11:30:17.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5028 

2023-07-03 11:30:17.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4668 

2023-07-03 11:30:17.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4487 row column role 145 0 260 

2023-07-03 11:30:17.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5029 

2023-07-03 11:30:17.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4669 

2023-07-03 11:30:17.966 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4488 row column role 145 0 261 

2023-07-03 11:30:17.966 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5030 

2023-07-03 11:30:17.966 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4670 

2023-07-03 11:30:17.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4489 row column role 145 0 262 

2023-07-03 11:30:17.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5031 

2023-07-03 11:30:17.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4671 

2023-07-03 11:30:17.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4490 row column role 145 0 263 

2023-07-03 11:30:17.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5032 

2023-07-03 11:30:17.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4672 

2023-07-03 11:30:17.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4491 row column role 145 0 264 

2023-07-03 11:30:17.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5033 

2023-07-03 11:30:17.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4673 

2023-07-03 11:30:17.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4492 row column role 145 0 265 

2023-07-03 11:30:17.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5034 

2023-07-03 11:30:17.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4674 

2023-07-03 11:30:17.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4493 row column role 145 0 266 

2023-07-03 11:30:17.967 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5035 

2023-07-03 11:30:17.967 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4675 

2023-07-03 11:30:17.967 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4494 row column role 145 0 267 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5036 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4676 

2023-07-03 11:30:17.968 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4495 row column role 145 0 268 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5037 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4677 

2023-07-03 11:30:17.968 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4496 row column role 145 0 269 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5038 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4678 

2023-07-03 11:30:17.968 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4497 row column role 145 0 270 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5039 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4679 

2023-07-03 11:30:17.968 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4498 row column role 145 0 271 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5040 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4680 

2023-07-03 11:30:17.968 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4499 row column role 145 0 272 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5041 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4681 

2023-07-03 11:30:17.968 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4500 row column role 145 0 273 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5042 

2023-07-03 11:30:17.968 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4682 

2023-07-03 11:30:17.969 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4501 row column role 145 0 274 

2023-07-03 11:30:17.969 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5043 

2023-07-03 11:30:17.969 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4683 

2023-07-03 11:30:17.969 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4502 row column role 145 0 275 

2023-07-03 11:30:17.986 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5044 

2023-07-03 11:30:17.986 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4684 

2023-07-03 11:30:17.986 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4503 row column role 144 0 257 

2023-07-03 11:30:17.986 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5045 

2023-07-03 11:30:17.986 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4685 

2023-07-03 11:30:17.986 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4504 row column role 144 0 258 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5046 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4686 

2023-07-03 11:30:17.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4505 row column role 144 0 259 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5047 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4687 

2023-07-03 11:30:17.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4506 row column role 144 0 260 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5048 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4688 

2023-07-03 11:30:17.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4507 row column role 144 0 261 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5049 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4689 

2023-07-03 11:30:17.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4508 row column role 144 0 262 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5050 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4690 

2023-07-03 11:30:17.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4509 row column role 144 0 263 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5051 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4691 

2023-07-03 11:30:17.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4510 row column role 144 0 264 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5052 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4692 

2023-07-03 11:30:17.988 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4511 row column role 144 0 265 

2023-07-03 11:30:17.988 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5053 

2023-07-03 11:30:17.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4693 

2023-07-03 11:30:17.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4512 row column role 144 0 266 

2023-07-03 11:30:17.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5054 

2023-07-03 11:30:17.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4694 

2023-07-03 11:30:17.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4513 row column role 144 0 267 

2023-07-03 11:30:17.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5055 

2023-07-03 11:30:17.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4695 

2023-07-03 11:30:17.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4514 row column role 144 0 268 

2023-07-03 11:30:17.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5056 

2023-07-03 11:30:17.989 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4696 

2023-07-03 11:30:17.989 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4515 row column role 144 0 269 

2023-07-03 11:30:17.989 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5057 

2023-07-03 11:30:17.990 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4697 

2023-07-03 11:30:17.990 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4516 row column role 144 0 270 

2023-07-03 11:30:17.990 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5058 

2023-07-03 11:30:17.990 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4698 

2023-07-03 11:30:17.990 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4517 row column role 144 0 271 

2023-07-03 11:30:17.990 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5059 

2023-07-03 11:30:17.990 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4699 

2023-07-03 11:30:17.990 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4518 row column role 144 0 272 

2023-07-03 11:30:17.990 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5060 

2023-07-03 11:30:17.990 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4700 

2023-07-03 11:30:17.990 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4519 row column role 144 0 273 

2023-07-03 11:30:17.990 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5061 

2023-07-03 11:30:17.990 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4701 

2023-07-03 11:30:17.990 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4520 row column role 144 0 274 

2023-07-03 11:30:17.991 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5062 

2023-07-03 11:30:17.991 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4702 

2023-07-03 11:30:17.991 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4521 row column role 144 0 275 

2023-07-03 11:30:18.011 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5063 

2023-07-03 11:30:18.011 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4703 

2023-07-03 11:30:18.012 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4522 row column role 143 0 257 

2023-07-03 11:30:18.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5064 

2023-07-03 11:30:18.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4704 

2023-07-03 11:30:18.012 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4523 row column role 143 0 258 

2023-07-03 11:30:18.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5065 

2023-07-03 11:30:18.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4705 

2023-07-03 11:30:18.012 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4524 row column role 143 0 259 

2023-07-03 11:30:18.012 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5066 

2023-07-03 11:30:18.012 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4706 

2023-07-03 11:30:18.012 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4525 row column role 143 0 260 

2023-07-03 11:30:18.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5067 

2023-07-03 11:30:18.013 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4707 

2023-07-03 11:30:18.013 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4526 row column role 143 0 261 

2023-07-03 11:30:18.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5068 

2023-07-03 11:30:18.013 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4708 

2023-07-03 11:30:18.013 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4527 row column role 143 0 262 

2023-07-03 11:30:18.013 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5069 

2023-07-03 11:30:18.013 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4709 

2023-07-03 11:30:18.013 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4528 row column role 143 0 263 

2023-07-03 11:30:18.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5070 

2023-07-03 11:30:18.014 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4710 

2023-07-03 11:30:18.014 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4529 row column role 143 0 264 

2023-07-03 11:30:18.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5071 

2023-07-03 11:30:18.014 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4711 

2023-07-03 11:30:18.014 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4530 row column role 143 0 265 

2023-07-03 11:30:18.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5072 

2023-07-03 11:30:18.014 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4712 

2023-07-03 11:30:18.014 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4531 row column role 143 0 266 

2023-07-03 11:30:18.014 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5073 

2023-07-03 11:30:18.014 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4713 

2023-07-03 11:30:18.014 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4532 row column role 143 0 267 

2023-07-03 11:30:18.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5074 

2023-07-03 11:30:18.015 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4714 

2023-07-03 11:30:18.015 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4533 row column role 143 0 268 

2023-07-03 11:30:18.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5075 

2023-07-03 11:30:18.015 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4715 

2023-07-03 11:30:18.015 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4534 row column role 143 0 269 

2023-07-03 11:30:18.015 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5076 

2023-07-03 11:30:18.015 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4716 

2023-07-03 11:30:18.015 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4535 row column role 143 0 270 

2023-07-03 11:30:18.016 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5077 

2023-07-03 11:30:18.016 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4717 

2023-07-03 11:30:18.016 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4536 row column role 143 0 271 

2023-07-03 11:30:18.016 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5078 

2023-07-03 11:30:18.016 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4718 

2023-07-03 11:30:18.016 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4537 row column role 143 0 272 

2023-07-03 11:30:18.016 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5079 

2023-07-03 11:30:18.016 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4719 

2023-07-03 11:30:18.016 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4538 row column role 143 0 273 

2023-07-03 11:30:18.016 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5080 

2023-07-03 11:30:18.016 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4720 

2023-07-03 11:30:18.016 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4539 row column role 143 0 274 

2023-07-03 11:30:18.017 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5081 

2023-07-03 11:30:18.017 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4721 

2023-07-03 11:30:18.017 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4540 row column role 143 0 275 

2023-07-03 11:30:18.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5082 

2023-07-03 11:30:18.028 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4722 

2023-07-03 11:30:18.028 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4541 row column role 142 0 257 

2023-07-03 11:30:18.028 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5083 

2023-07-03 11:30:18.028 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4723 

2023-07-03 11:30:18.028 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4542 row column role 142 0 258 

2023-07-03 11:30:18.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5084 

2023-07-03 11:30:18.029 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4724 

2023-07-03 11:30:18.029 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4543 row column role 142 0 259 

2023-07-03 11:30:18.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5085 

2023-07-03 11:30:18.029 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4725 

2023-07-03 11:30:18.029 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4544 row column role 142 0 260 

2023-07-03 11:30:18.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5086 

2023-07-03 11:30:18.029 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4726 

2023-07-03 11:30:18.029 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4545 row column role 142 0 261 

2023-07-03 11:30:18.029 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5087 

2023-07-03 11:30:18.030 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4727 

2023-07-03 11:30:18.030 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4546 row column role 142 0 262 

2023-07-03 11:30:18.030 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5088 

2023-07-03 11:30:18.030 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4728 

2023-07-03 11:30:18.030 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4547 row column role 142 0 263 

2023-07-03 11:30:18.030 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5089 

2023-07-03 11:30:18.030 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4729 

2023-07-03 11:30:18.030 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4548 row column role 142 0 264 

2023-07-03 11:30:18.030 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5090 

2023-07-03 11:30:18.031 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4730 

2023-07-03 11:30:18.031 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4549 row column role 142 0 265 

2023-07-03 11:30:18.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5091 

2023-07-03 11:30:18.031 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4731 

2023-07-03 11:30:18.031 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4550 row column role 142 0 266 

2023-07-03 11:30:18.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5092 

2023-07-03 11:30:18.031 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4732 

2023-07-03 11:30:18.031 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4551 row column role 142 0 267 

2023-07-03 11:30:18.031 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5093 

2023-07-03 11:30:18.031 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4733 

2023-07-03 11:30:18.032 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4552 row column role 142 0 268 

2023-07-03 11:30:18.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5094 

2023-07-03 11:30:18.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4734 

2023-07-03 11:30:18.032 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4553 row column role 142 0 269 

2023-07-03 11:30:18.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5095 

2023-07-03 11:30:18.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4735 

2023-07-03 11:30:18.032 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4554 row column role 142 0 270 

2023-07-03 11:30:18.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5096 

2023-07-03 11:30:18.032 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4736 

2023-07-03 11:30:18.032 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4555 row column role 142 0 271 

2023-07-03 11:30:18.032 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5097 

2023-07-03 11:30:18.033 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4737 

2023-07-03 11:30:18.033 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4556 row column role 142 0 272 

2023-07-03 11:30:18.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5098 

2023-07-03 11:30:18.033 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4738 

2023-07-03 11:30:18.033 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4557 row column role 142 0 273 

2023-07-03 11:30:18.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5099 

2023-07-03 11:30:18.033 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4739 

2023-07-03 11:30:18.033 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4558 row column role 142 0 274 

2023-07-03 11:30:18.033 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5100 

2023-07-03 11:30:18.033 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4740 

2023-07-03 11:30:18.033 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4559 row column role 142 0 275 

2023-07-03 11:30:18.049 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5101 

2023-07-03 11:30:18.050 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4741 

2023-07-03 11:30:18.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4560 row column role 141 0 257 

2023-07-03 11:30:18.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5102 

2023-07-03 11:30:18.050 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4742 

2023-07-03 11:30:18.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4561 row column role 141 0 258 

2023-07-03 11:30:18.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5103 

2023-07-03 11:30:18.050 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4743 

2023-07-03 11:30:18.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4562 row column role 141 0 259 

2023-07-03 11:30:18.050 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5104 

2023-07-03 11:30:18.050 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4744 

2023-07-03 11:30:18.050 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4563 row column role 141 0 260 

2023-07-03 11:30:18.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5105 

2023-07-03 11:30:18.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4745 

2023-07-03 11:30:18.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4564 row column role 141 0 261 

2023-07-03 11:30:18.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5106 

2023-07-03 11:30:18.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4746 

2023-07-03 11:30:18.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4565 row column role 141 0 262 

2023-07-03 11:30:18.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5107 

2023-07-03 11:30:18.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4747 

2023-07-03 11:30:18.051 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4566 row column role 141 0 263 

2023-07-03 11:30:18.051 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5108 

2023-07-03 11:30:18.051 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4748 

2023-07-03 11:30:18.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4567 row column role 141 0 264 

2023-07-03 11:30:18.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5109 

2023-07-03 11:30:18.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4749 

2023-07-03 11:30:18.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4568 row column role 141 0 265 

2023-07-03 11:30:18.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5110 

2023-07-03 11:30:18.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4750 

2023-07-03 11:30:18.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4569 row column role 141 0 266 

2023-07-03 11:30:18.052 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5111 

2023-07-03 11:30:18.052 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4751 

2023-07-03 11:30:18.052 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4570 row column role 141 0 267 

2023-07-03 11:30:18.053 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5112 

2023-07-03 11:30:18.053 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4752 

2023-07-03 11:30:18.053 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4571 row column role 141 0 268 

2023-07-03 11:30:18.053 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5113 

2023-07-03 11:30:18.053 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4753 

2023-07-03 11:30:18.053 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4572 row column role 141 0 269 

2023-07-03 11:30:18.053 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5114 

2023-07-03 11:30:18.053 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4754 

2023-07-03 11:30:18.053 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4573 row column role 141 0 270 

2023-07-03 11:30:18.053 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5115 

2023-07-03 11:30:18.053 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4755 

2023-07-03 11:30:18.053 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4574 row column role 141 0 271 

2023-07-03 11:30:18.054 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5116 

2023-07-03 11:30:18.054 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4756 

2023-07-03 11:30:18.054 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4575 row column role 141 0 272 

2023-07-03 11:30:18.054 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5117 

2023-07-03 11:30:18.054 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4757 

2023-07-03 11:30:18.054 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4576 row column role 141 0 273 

2023-07-03 11:30:18.054 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5118 

2023-07-03 11:30:18.054 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4758 

2023-07-03 11:30:18.054 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4577 row column role 141 0 274 

2023-07-03 11:30:18.054 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5119 

2023-07-03 11:30:18.054 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4759 

2023-07-03 11:30:18.054 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4578 row column role 141 0 275 

2023-07-03 11:30:18.070 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5120 

2023-07-03 11:30:18.070 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4760 

2023-07-03 11:30:18.070 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4579 row column role 140 0 257 

2023-07-03 11:30:18.070 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5121 

2023-07-03 11:30:18.070 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4761 

2023-07-03 11:30:18.070 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4580 row column role 140 0 258 

2023-07-03 11:30:18.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5122 

2023-07-03 11:30:18.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4762 

2023-07-03 11:30:18.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4581 row column role 140 0 259 

2023-07-03 11:30:18.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5123 

2023-07-03 11:30:18.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4763 

2023-07-03 11:30:18.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4582 row column role 140 0 260 

2023-07-03 11:30:18.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5124 

2023-07-03 11:30:18.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4764 

2023-07-03 11:30:18.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4583 row column role 140 0 261 

2023-07-03 11:30:18.071 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5125 

2023-07-03 11:30:18.071 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4765 

2023-07-03 11:30:18.071 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4584 row column role 140 0 262 

2023-07-03 11:30:18.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5126 

2023-07-03 11:30:18.072 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4766 

2023-07-03 11:30:18.072 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4585 row column role 140 0 263 

2023-07-03 11:30:18.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5127 

2023-07-03 11:30:18.072 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4767 

2023-07-03 11:30:18.072 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4586 row column role 140 0 264 

2023-07-03 11:30:18.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5128 

2023-07-03 11:30:18.072 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4768 

2023-07-03 11:30:18.072 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4587 row column role 140 0 265 

2023-07-03 11:30:18.072 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5129 

2023-07-03 11:30:18.072 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4769 

2023-07-03 11:30:18.072 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4588 row column role 140 0 266 

2023-07-03 11:30:18.073 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5130 

2023-07-03 11:30:18.073 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4770 

2023-07-03 11:30:18.073 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4589 row column role 140 0 267 

2023-07-03 11:30:18.073 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5131 

2023-07-03 11:30:18.073 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4771 

2023-07-03 11:30:18.073 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4590 row column role 140 0 268 

2023-07-03 11:30:18.073 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5132 

2023-07-03 11:30:18.073 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4772 

2023-07-03 11:30:18.073 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4591 row column role 140 0 269 

2023-07-03 11:30:18.073 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5133 

2023-07-03 11:30:18.073 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4773 

2023-07-03 11:30:18.073 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4592 row column role 140 0 270 

2023-07-03 11:30:18.074 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5134 

2023-07-03 11:30:18.074 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4774 

2023-07-03 11:30:18.074 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4593 row column role 140 0 271 

2023-07-03 11:30:18.074 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5135 

2023-07-03 11:30:18.074 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4775 

2023-07-03 11:30:18.074 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4594 row column role 140 0 272 

2023-07-03 11:30:18.074 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5136 

2023-07-03 11:30:18.074 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4776 

2023-07-03 11:30:18.074 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4595 row column role 140 0 273 

2023-07-03 11:30:18.074 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5137 

2023-07-03 11:30:18.074 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4777 

2023-07-03 11:30:18.074 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4596 row column role 140 0 274 

2023-07-03 11:30:18.074 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5138 

2023-07-03 11:30:18.075 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4778 

2023-07-03 11:30:18.075 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4597 row column role 140 0 275 

2023-07-03 11:30:18.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5139 

2023-07-03 11:30:18.111 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4779 

2023-07-03 11:30:18.111 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4598 row column role 139 0 257 

2023-07-03 11:30:18.111 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5140 

2023-07-03 11:30:18.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4780 

2023-07-03 11:30:18.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4599 row column role 139 0 258 

2023-07-03 11:30:18.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5141 

2023-07-03 11:30:18.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4781 

2023-07-03 11:30:18.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4600 row column role 139 0 259 

2023-07-03 11:30:18.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5142 

2023-07-03 11:30:18.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4782 

2023-07-03 11:30:18.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4601 row column role 139 0 260 

2023-07-03 11:30:18.112 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5143 

2023-07-03 11:30:18.112 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4783 

2023-07-03 11:30:18.112 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4602 row column role 139 0 261 

2023-07-03 11:30:18.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5144 

2023-07-03 11:30:18.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4784 

2023-07-03 11:30:18.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4603 row column role 139 0 262 

2023-07-03 11:30:18.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5145 

2023-07-03 11:30:18.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4785 

2023-07-03 11:30:18.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4604 row column role 139 0 263 

2023-07-03 11:30:18.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5146 

2023-07-03 11:30:18.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4786 

2023-07-03 11:30:18.113 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4605 row column role 139 0 264 

2023-07-03 11:30:18.113 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5147 

2023-07-03 11:30:18.113 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4787 

2023-07-03 11:30:18.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4606 row column role 139 0 265 

2023-07-03 11:30:18.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5148 

2023-07-03 11:30:18.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4788 

2023-07-03 11:30:18.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4607 row column role 139 0 266 

2023-07-03 11:30:18.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5149 

2023-07-03 11:30:18.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4789 

2023-07-03 11:30:18.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4608 row column role 139 0 267 

2023-07-03 11:30:18.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5150 

2023-07-03 11:30:18.114 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4790 

2023-07-03 11:30:18.114 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4609 row column role 139 0 268 

2023-07-03 11:30:18.114 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5151 

2023-07-03 11:30:18.115 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4791 

2023-07-03 11:30:18.115 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4610 row column role 139 0 269 

2023-07-03 11:30:18.115 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5152 

2023-07-03 11:30:18.115 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4792 

2023-07-03 11:30:18.115 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4611 row column role 139 0 270 

2023-07-03 11:30:18.115 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5153 

2023-07-03 11:30:18.115 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4793 

2023-07-03 11:30:18.115 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4612 row column role 139 0 271 

2023-07-03 11:30:18.115 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5154 

2023-07-03 11:30:18.115 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4794 

2023-07-03 11:30:18.115 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4613 row column role 139 0 272 

2023-07-03 11:30:18.115 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5155 

2023-07-03 11:30:18.116 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4795 

2023-07-03 11:30:18.116 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4614 row column role 139 0 273 

2023-07-03 11:30:18.116 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5156 

2023-07-03 11:30:18.116 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4796 

2023-07-03 11:30:18.116 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4615 row column role 139 0 274 

2023-07-03 11:30:18.116 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5157 

2023-07-03 11:30:18.116 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4797 

2023-07-03 11:30:18.116 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4616 row column role 139 0 275 

2023-07-03 11:30:18.133 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5158 

2023-07-03 11:30:18.133 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4798 

2023-07-03 11:30:18.133 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4617 row column role 138 0 257 

2023-07-03 11:30:18.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5159 

2023-07-03 11:30:18.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4799 

2023-07-03 11:30:18.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4618 row column role 138 0 258 

2023-07-03 11:30:18.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5160 

2023-07-03 11:30:18.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4800 

2023-07-03 11:30:18.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4619 row column role 138 0 259 

2023-07-03 11:30:18.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5161 

2023-07-03 11:30:18.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4801 

2023-07-03 11:30:18.134 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4620 row column role 138 0 260 

2023-07-03 11:30:18.134 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5162 

2023-07-03 11:30:18.134 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4802 

2023-07-03 11:30:18.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4621 row column role 138 0 261 

2023-07-03 11:30:18.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5163 

2023-07-03 11:30:18.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4803 

2023-07-03 11:30:18.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4622 row column role 138 0 262 

2023-07-03 11:30:18.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5164 

2023-07-03 11:30:18.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4804 

2023-07-03 11:30:18.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4623 row column role 138 0 263 

2023-07-03 11:30:18.135 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5165 

2023-07-03 11:30:18.135 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4805 

2023-07-03 11:30:18.135 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4624 row column role 138 0 264 

2023-07-03 11:30:18.136 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5166 

2023-07-03 11:30:18.136 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4806 

2023-07-03 11:30:18.136 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4625 row column role 138 0 265 

2023-07-03 11:30:18.136 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5167 

2023-07-03 11:30:18.136 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4807 

2023-07-03 11:30:18.136 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4626 row column role 138 0 266 

2023-07-03 11:30:18.136 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5168 

2023-07-03 11:30:18.136 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4808 

2023-07-03 11:30:18.136 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4627 row column role 138 0 267 

2023-07-03 11:30:18.136 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5169 

2023-07-03 11:30:18.136 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4809 

2023-07-03 11:30:18.136 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4628 row column role 138 0 268 

2023-07-03 11:30:18.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5170 

2023-07-03 11:30:18.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4810 

2023-07-03 11:30:18.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4629 row column role 138 0 269 

2023-07-03 11:30:18.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5171 

2023-07-03 11:30:18.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4811 

2023-07-03 11:30:18.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4630 row column role 138 0 270 

2023-07-03 11:30:18.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5172 

2023-07-03 11:30:18.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4812 

2023-07-03 11:30:18.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4631 row column role 138 0 271 

2023-07-03 11:30:18.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5173 

2023-07-03 11:30:18.137 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4813 

2023-07-03 11:30:18.137 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4632 row column role 138 0 272 

2023-07-03 11:30:18.137 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5174 

2023-07-03 11:30:18.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4814 

2023-07-03 11:30:18.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4633 row column role 138 0 273 

2023-07-03 11:30:18.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5175 

2023-07-03 11:30:18.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4815 

2023-07-03 11:30:18.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4634 row column role 138 0 274 

2023-07-03 11:30:18.138 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5176 

2023-07-03 11:30:18.138 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4816 

2023-07-03 11:30:18.138 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4635 row column role 138 0 275 

2023-07-03 11:30:18.180 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5177 

2023-07-03 11:30:18.180 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4817 

2023-07-03 11:30:18.180 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4636 row column role 137 0 257 

2023-07-03 11:30:18.180 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5178 

2023-07-03 11:30:18.180 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4818 

2023-07-03 11:30:18.180 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4637 row column role 137 0 258 

2023-07-03 11:30:18.181 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5179 

2023-07-03 11:30:18.181 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4819 

2023-07-03 11:30:18.181 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4638 row column role 137 0 259 

2023-07-03 11:30:18.181 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5180 

2023-07-03 11:30:18.181 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4820 

2023-07-03 11:30:18.181 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4639 row column role 137 0 260 

2023-07-03 11:30:18.182 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5181 

2023-07-03 11:30:18.182 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4821 

2023-07-03 11:30:18.182 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4640 row column role 137 0 261 

2023-07-03 11:30:18.182 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5182 

2023-07-03 11:30:18.182 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4822 

2023-07-03 11:30:18.183 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4641 row column role 137 0 262 

2023-07-03 11:30:18.183 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5183 

2023-07-03 11:30:18.183 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4823 

2023-07-03 11:30:18.183 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4642 row column role 137 0 263 

2023-07-03 11:30:18.183 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5184 

2023-07-03 11:30:18.183 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4824 

2023-07-03 11:30:18.184 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4643 row column role 137 0 264 

2023-07-03 11:30:18.184 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5185 

2023-07-03 11:30:18.184 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4825 

2023-07-03 11:30:18.184 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4644 row column role 137 0 265 

2023-07-03 11:30:18.185 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5186 

2023-07-03 11:30:18.185 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4826 

2023-07-03 11:30:18.185 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4645 row column role 137 0 266 

2023-07-03 11:30:18.185 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5187 

2023-07-03 11:30:18.185 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4827 

2023-07-03 11:30:18.185 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4646 row column role 137 0 267 

2023-07-03 11:30:18.186 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5188 

2023-07-03 11:30:18.186 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4828 

2023-07-03 11:30:18.186 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4647 row column role 137 0 268 

2023-07-03 11:30:18.186 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5189 

2023-07-03 11:30:18.186 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4829 

2023-07-03 11:30:18.186 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4648 row column role 137 0 269 

2023-07-03 11:30:18.187 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5190 

2023-07-03 11:30:18.187 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4830 

2023-07-03 11:30:18.187 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4649 row column role 137 0 270 

2023-07-03 11:30:18.187 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5191 

2023-07-03 11:30:18.187 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4831 

2023-07-03 11:30:18.187 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4650 row column role 137 0 271 

2023-07-03 11:30:18.188 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5192 

2023-07-03 11:30:18.188 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4832 

2023-07-03 11:30:18.188 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4651 row column role 137 0 272 

2023-07-03 11:30:18.188 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5193 

2023-07-03 11:30:18.188 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4833 

2023-07-03 11:30:18.188 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4652 row column role 137 0 273 

2023-07-03 11:30:18.188 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5194 

2023-07-03 11:30:18.188 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4834 

2023-07-03 11:30:18.188 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4653 row column role 137 0 274 

2023-07-03 11:30:18.189 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5195 

2023-07-03 11:30:18.189 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4835 

2023-07-03 11:30:18.189 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4654 row column role 137 0 275 

2023-07-03 11:30:18.266 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5196 

2023-07-03 11:30:18.266 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4836 

2023-07-03 11:30:18.266 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4655 row column role 136 0 257 

2023-07-03 11:30:18.267 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5197 

2023-07-03 11:30:18.267 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4837 

2023-07-03 11:30:18.267 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4656 row column role 136 0 258 

2023-07-03 11:30:18.267 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5198 

2023-07-03 11:30:18.267 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4838 

2023-07-03 11:30:18.267 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4657 row column role 136 0 259 

2023-07-03 11:30:18.267 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5199 

2023-07-03 11:30:18.267 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4839 

2023-07-03 11:30:18.267 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4658 row column role 136 0 260 

2023-07-03 11:30:18.268 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5200 

2023-07-03 11:30:18.268 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4840 

2023-07-03 11:30:18.268 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4659 row column role 136 0 261 

2023-07-03 11:30:18.268 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5201 

2023-07-03 11:30:18.268 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4841 

2023-07-03 11:30:18.268 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4660 row column role 136 0 262 

2023-07-03 11:30:18.268 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5202 

2023-07-03 11:30:18.268 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4842 

2023-07-03 11:30:18.269 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4661 row column role 136 0 263 

2023-07-03 11:30:18.269 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5203 

2023-07-03 11:30:18.269 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4843 

2023-07-03 11:30:18.269 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4662 row column role 136 0 264 

2023-07-03 11:30:18.269 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5204 

2023-07-03 11:30:18.269 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4844 

2023-07-03 11:30:18.269 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4663 row column role 136 0 265 

2023-07-03 11:30:18.270 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5205 

2023-07-03 11:30:18.270 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4845 

2023-07-03 11:30:18.270 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4664 row column role 136 0 266 

2023-07-03 11:30:18.270 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5206 

2023-07-03 11:30:18.270 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4846 

2023-07-03 11:30:18.270 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4665 row column role 136 0 267 

2023-07-03 11:30:18.270 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5207 

2023-07-03 11:30:18.270 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4847 

2023-07-03 11:30:18.270 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4666 row column role 136 0 268 

2023-07-03 11:30:18.270 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5208 

2023-07-03 11:30:18.270 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4848 

2023-07-03 11:30:18.271 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4667 row column role 136 0 269 

2023-07-03 11:30:18.271 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5209 

2023-07-03 11:30:18.271 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4849 

2023-07-03 11:30:18.271 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4668 row column role 136 0 270 

2023-07-03 11:30:18.271 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5210 

2023-07-03 11:30:18.271 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4850 

2023-07-03 11:30:18.271 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4669 row column role 136 0 271 

2023-07-03 11:30:18.271 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5211 

2023-07-03 11:30:18.271 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4851 

2023-07-03 11:30:18.271 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4670 row column role 136 0 272 

2023-07-03 11:30:18.271 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5212 

2023-07-03 11:30:18.271 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4852 

2023-07-03 11:30:18.271 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4671 row column role 136 0 273 

2023-07-03 11:30:18.272 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5213 

2023-07-03 11:30:18.272 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4853 

2023-07-03 11:30:18.272 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4672 row column role 136 0 274 

2023-07-03 11:30:18.272 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5214 

2023-07-03 11:30:18.272 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4854 

2023-07-03 11:30:18.272 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4673 row column role 136 0 275 

2023-07-03 11:30:44.905 DBG qml: mouse clicked right or left styleData.selected false
2023-07-03 11:30:44.912 DBG qml: clicked cell in table view  147
2023-07-03 11:30:44.913 DBG qml: clicked cell in table view coordinates =  QPointF(194, 438)
2023-07-03 11:30:44.913 DBG qml: clicked cell in table view clickIndex =  147
2023-07-03 11:30:44.913 DBG qml: clicked cell in table view  147
2023-07-03 11:30:44.913 DBG qml: clicked cell in table view  147
2023-07-03 11:30:44.913 DBG qml: Right
2023-07-03 11:30:46.609 DBG default: int SevaBookingSearchModel::getRowOfDataFromTableViewModel(int) >>>>>>>getRowOfDataFromTableViewModel>>>>1>>>> 147 

2023-07-03 11:30:46.609 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5215 

2023-07-03 11:30:46.610 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4855 

2023-07-03 11:30:46.610 DBG default: int SevaBookingSearchModel::getRowOfDataFromTableViewModel(int) >>>>>>>getRowOfDataFromTableViewModel>>>>1>>>> 147 

2023-07-03 11:30:46.610 DBG qml: ///////////////////147
2023-07-03 11:31:22.123 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5216 

2023-07-03 11:31:22.123 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4856 

2023-07-03 11:31:22.123 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4674 row column role 168 0 257 

2023-07-03 11:31:22.124 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5217 

2023-07-03 11:31:22.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4857 

2023-07-03 11:31:22.124 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4675 row column role 168 0 258 

2023-07-03 11:31:22.124 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5218 

2023-07-03 11:31:22.124 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4858 

2023-07-03 11:31:22.125 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4676 row column role 168 0 259 

2023-07-03 11:31:22.125 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5219 

2023-07-03 11:31:22.125 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4859 

2023-07-03 11:31:22.125 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4677 row column role 168 0 260 

2023-07-03 11:31:22.125 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5220 

2023-07-03 11:31:22.125 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4860 

2023-07-03 11:31:22.126 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4678 row column role 168 0 261 

2023-07-03 11:31:22.126 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5221 

2023-07-03 11:31:22.126 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4861 

2023-07-03 11:31:22.126 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4679 row column role 168 0 262 

2023-07-03 11:31:22.126 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5222 

2023-07-03 11:31:22.126 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4862 

2023-07-03 11:31:22.126 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4680 row column role 168 0 263 

2023-07-03 11:31:22.127 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5223 

2023-07-03 11:31:22.127 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4863 

2023-07-03 11:31:22.127 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4681 row column role 168 0 264 

2023-07-03 11:31:22.127 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5224 

2023-07-03 11:31:22.127 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4864 

2023-07-03 11:31:22.127 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4682 row column role 168 0 265 

2023-07-03 11:31:22.128 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5225 

2023-07-03 11:31:22.128 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4865 

2023-07-03 11:31:22.128 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4683 row column role 168 0 266 

2023-07-03 11:31:22.128 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5226 

2023-07-03 11:31:22.128 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4866 

2023-07-03 11:31:22.128 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4684 row column role 168 0 267 

2023-07-03 11:31:22.128 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5227 

2023-07-03 11:31:22.128 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4867 

2023-07-03 11:31:22.128 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4685 row column role 168 0 268 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5228 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4868 

2023-07-03 11:31:22.129 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4686 row column role 168 0 269 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5229 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4869 

2023-07-03 11:31:22.129 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4687 row column role 168 0 270 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5230 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4870 

2023-07-03 11:31:22.129 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4688 row column role 168 0 271 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5231 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4871 

2023-07-03 11:31:22.129 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4689 row column role 168 0 272 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5232 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4872 

2023-07-03 11:31:22.129 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4690 row column role 168 0 273 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5233 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4873 

2023-07-03 11:31:22.129 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4691 row column role 168 0 274 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5234 

2023-07-03 11:31:22.129 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4874 

2023-07-03 11:31:22.129 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4692 row column role 168 0 275 

2023-07-03 11:31:22.175 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5235 

2023-07-03 11:31:22.175 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4875 

2023-07-03 11:31:22.176 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4693 row column role 169 0 257 

2023-07-03 11:31:22.176 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5236 

2023-07-03 11:31:22.176 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4876 

2023-07-03 11:31:22.176 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4694 row column role 169 0 258 

2023-07-03 11:31:22.177 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5237 

2023-07-03 11:31:22.177 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4877 

2023-07-03 11:31:22.177 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4695 row column role 169 0 259 

2023-07-03 11:31:22.177 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5238 

2023-07-03 11:31:22.177 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4878 

2023-07-03 11:31:22.177 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4696 row column role 169 0 260 

2023-07-03 11:31:22.177 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5239 

2023-07-03 11:31:22.178 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4879 

2023-07-03 11:31:22.178 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4697 row column role 169 0 261 

2023-07-03 11:31:22.178 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5240 

2023-07-03 11:31:22.178 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4880 

2023-07-03 11:31:22.178 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4698 row column role 169 0 262 

2023-07-03 11:31:22.178 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5241 

2023-07-03 11:31:22.179 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4881 

2023-07-03 11:31:22.179 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4699 row column role 169 0 263 

2023-07-03 11:31:22.179 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5242 

2023-07-03 11:31:22.179 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4882 

2023-07-03 11:31:22.179 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4700 row column role 169 0 264 

2023-07-03 11:31:22.179 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5243 

2023-07-03 11:31:22.179 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4883 

2023-07-03 11:31:22.180 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4701 row column role 169 0 265 

2023-07-03 11:31:22.180 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5244 

2023-07-03 11:31:22.180 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4884 

2023-07-03 11:31:22.180 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4702 row column role 169 0 266 

2023-07-03 11:31:22.180 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5245 

2023-07-03 11:31:22.181 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4885 

2023-07-03 11:31:22.181 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4703 row column role 169 0 267 

2023-07-03 11:31:22.181 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5246 

2023-07-03 11:31:22.181 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4886 

2023-07-03 11:31:22.181 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4704 row column role 169 0 268 

2023-07-03 11:31:22.181 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5247 

2023-07-03 11:31:22.181 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4887 

2023-07-03 11:31:22.181 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4705 row column role 169 0 269 

2023-07-03 11:31:22.182 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5248 

2023-07-03 11:31:22.182 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4888 

2023-07-03 11:31:22.182 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4706 row column role 169 0 270 

2023-07-03 11:31:22.182 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5249 

2023-07-03 11:31:22.182 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4889 

2023-07-03 11:31:22.182 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4707 row column role 169 0 271 

2023-07-03 11:31:22.183 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5250 

2023-07-03 11:31:22.183 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4890 

2023-07-03 11:31:22.183 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4708 row column role 169 0 272 

2023-07-03 11:31:22.183 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5251 

2023-07-03 11:31:22.183 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4891 

2023-07-03 11:31:22.183 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4709 row column role 169 0 273 

2023-07-03 11:31:22.183 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5252 

2023-07-03 11:31:22.183 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4892 

2023-07-03 11:31:22.184 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4710 row column role 169 0 274 

2023-07-03 11:31:22.184 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5253 

2023-07-03 11:31:22.184 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4893 

2023-07-03 11:31:22.184 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4711 row column role 169 0 275 

2023-07-03 11:31:22.259 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5254 

2023-07-03 11:31:22.259 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4894 

2023-07-03 11:31:22.259 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4712 row column role 170 0 257 

2023-07-03 11:31:22.260 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5255 

2023-07-03 11:31:22.260 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4895 

2023-07-03 11:31:22.260 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4713 row column role 170 0 258 

2023-07-03 11:31:22.260 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5256 

2023-07-03 11:31:22.260 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4896 

2023-07-03 11:31:22.261 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4714 row column role 170 0 259 

2023-07-03 11:31:22.261 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5257 

2023-07-03 11:31:22.261 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4897 

2023-07-03 11:31:22.261 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4715 row column role 170 0 260 

2023-07-03 11:31:22.262 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5258 

2023-07-03 11:31:22.262 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4898 

2023-07-03 11:31:22.262 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4716 row column role 170 0 261 

2023-07-03 11:31:22.262 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5259 

2023-07-03 11:31:22.262 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4899 

2023-07-03 11:31:22.262 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4717 row column role 170 0 262 

2023-07-03 11:31:22.263 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5260 

2023-07-03 11:31:22.263 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4900 

2023-07-03 11:31:22.263 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4718 row column role 170 0 263 

2023-07-03 11:31:22.263 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5261 

2023-07-03 11:31:22.263 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4901 

2023-07-03 11:31:22.263 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4719 row column role 170 0 264 

2023-07-03 11:31:22.264 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5262 

2023-07-03 11:31:22.264 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4902 

2023-07-03 11:31:22.264 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4720 row column role 170 0 265 

2023-07-03 11:31:22.264 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5263 

2023-07-03 11:31:22.264 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4903 

2023-07-03 11:31:22.264 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4721 row column role 170 0 266 

2023-07-03 11:31:22.264 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5264 

2023-07-03 11:31:22.264 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4904 

2023-07-03 11:31:22.264 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4722 row column role 170 0 267 

2023-07-03 11:31:22.265 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5265 

2023-07-03 11:31:22.265 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4905 

2023-07-03 11:31:22.265 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4723 row column role 170 0 268 

2023-07-03 11:31:22.265 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5266 

2023-07-03 11:31:22.265 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4906 

2023-07-03 11:31:22.265 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4724 row column role 170 0 269 

2023-07-03 11:31:22.265 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5267 

2023-07-03 11:31:22.265 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4907 

2023-07-03 11:31:22.265 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4725 row column role 170 0 270 

2023-07-03 11:31:22.265 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5268 

2023-07-03 11:31:22.266 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4908 

2023-07-03 11:31:22.266 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4726 row column role 170 0 271 

2023-07-03 11:31:22.266 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5269 

2023-07-03 11:31:22.266 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4909 

2023-07-03 11:31:22.266 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4727 row column role 170 0 272 

2023-07-03 11:31:22.266 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5270 

2023-07-03 11:31:22.266 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4910 

2023-07-03 11:31:22.266 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4728 row column role 170 0 273 

2023-07-03 11:31:22.266 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5271 

2023-07-03 11:31:22.266 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4911 

2023-07-03 11:31:22.266 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4729 row column role 170 0 274 

2023-07-03 11:31:22.267 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5272 

2023-07-03 11:31:22.267 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4912 

2023-07-03 11:31:22.267 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4730 row column role 170 0 275 

2023-07-03 11:31:22.550 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5273 

2023-07-03 11:31:22.550 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4913 

2023-07-03 11:31:22.550 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4731 row column role 171 0 257 

2023-07-03 11:31:22.551 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5274 

2023-07-03 11:31:22.551 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4914 

2023-07-03 11:31:22.551 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4732 row column role 171 0 258 

2023-07-03 11:31:22.551 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5275 

2023-07-03 11:31:22.551 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4915 

2023-07-03 11:31:22.551 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4733 row column role 171 0 259 

2023-07-03 11:31:22.552 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5276 

2023-07-03 11:31:22.552 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4916 

2023-07-03 11:31:22.552 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4734 row column role 171 0 260 

2023-07-03 11:31:22.552 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5277 

2023-07-03 11:31:22.552 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4917 

2023-07-03 11:31:22.552 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4735 row column role 171 0 261 

2023-07-03 11:31:22.553 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5278 

2023-07-03 11:31:22.553 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4918 

2023-07-03 11:31:22.553 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4736 row column role 171 0 262 

2023-07-03 11:31:22.553 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5279 

2023-07-03 11:31:22.553 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4919 

2023-07-03 11:31:22.553 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4737 row column role 171 0 263 

2023-07-03 11:31:22.554 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5280 

2023-07-03 11:31:22.554 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4920 

2023-07-03 11:31:22.554 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4738 row column role 171 0 264 

2023-07-03 11:31:22.554 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5281 

2023-07-03 11:31:22.554 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4921 

2023-07-03 11:31:22.554 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4739 row column role 171 0 265 

2023-07-03 11:31:22.555 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5282 

2023-07-03 11:31:22.555 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4922 

2023-07-03 11:31:22.555 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4740 row column role 171 0 266 

2023-07-03 11:31:22.555 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5283 

2023-07-03 11:31:22.555 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4923 

2023-07-03 11:31:22.555 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4741 row column role 171 0 267 

2023-07-03 11:31:22.555 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5284 

2023-07-03 11:31:22.556 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4924 

2023-07-03 11:31:22.556 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4742 row column role 171 0 268 

2023-07-03 11:31:22.556 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5285 

2023-07-03 11:31:22.556 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4925 

2023-07-03 11:31:22.556 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4743 row column role 171 0 269 

2023-07-03 11:31:22.556 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5286 

2023-07-03 11:31:22.556 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4926 

2023-07-03 11:31:22.557 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4744 row column role 171 0 270 

2023-07-03 11:31:22.557 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5287 

2023-07-03 11:31:22.557 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4927 

2023-07-03 11:31:22.557 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4745 row column role 171 0 271 

2023-07-03 11:31:22.558 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5288 

2023-07-03 11:31:22.558 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4928 

2023-07-03 11:31:22.558 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4746 row column role 171 0 272 

2023-07-03 11:31:22.558 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5289 

2023-07-03 11:31:22.558 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4929 

2023-07-03 11:31:22.558 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4747 row column role 171 0 273 

2023-07-03 11:31:22.558 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5290 

2023-07-03 11:31:22.558 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4930 

2023-07-03 11:31:22.558 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4748 row column role 171 0 274 

2023-07-03 11:31:22.559 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5291 

2023-07-03 11:31:22.559 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4931 

2023-07-03 11:31:22.559 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4749 row column role 171 0 275 

2023-07-03 11:31:22.560 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5292 

2023-07-03 11:31:22.560 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4932 

2023-07-03 11:31:22.560 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4750 row column role 172 0 257 

2023-07-03 11:31:22.560 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5293 

2023-07-03 11:31:22.560 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4933 

2023-07-03 11:31:22.560 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4751 row column role 172 0 258 

2023-07-03 11:31:22.561 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5294 

2023-07-03 11:31:22.561 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4934 

2023-07-03 11:31:22.561 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4752 row column role 172 0 259 

2023-07-03 11:31:22.561 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5295 

2023-07-03 11:31:22.561 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4935 

2023-07-03 11:31:22.561 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4753 row column role 172 0 260 

2023-07-03 11:31:22.562 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5296 

2023-07-03 11:31:22.562 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4936 

2023-07-03 11:31:22.562 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4754 row column role 172 0 261 

2023-07-03 11:31:22.562 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5297 

2023-07-03 11:31:22.562 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4937 

2023-07-03 11:31:22.563 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4755 row column role 172 0 262 

2023-07-03 11:31:22.563 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5298 

2023-07-03 11:31:22.563 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4938 

2023-07-03 11:31:22.563 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4756 row column role 172 0 263 

2023-07-03 11:31:22.563 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5299 

2023-07-03 11:31:22.563 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4939 

2023-07-03 11:31:22.563 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4757 row column role 172 0 264 

2023-07-03 11:31:22.564 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5300 

2023-07-03 11:31:22.564 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4940 

2023-07-03 11:31:22.564 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4758 row column role 172 0 265 

2023-07-03 11:31:22.564 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5301 

2023-07-03 11:31:22.564 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4941 

2023-07-03 11:31:22.564 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4759 row column role 172 0 266 

2023-07-03 11:31:22.565 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5302 

2023-07-03 11:31:22.565 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4942 

2023-07-03 11:31:22.565 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4760 row column role 172 0 267 

2023-07-03 11:31:22.566 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5303 

2023-07-03 11:31:22.566 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4943 

2023-07-03 11:31:22.566 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4761 row column role 172 0 268 

2023-07-03 11:31:22.566 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5304 

2023-07-03 11:31:22.566 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4944 

2023-07-03 11:31:22.566 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4762 row column role 172 0 269 

2023-07-03 11:31:22.566 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5305 

2023-07-03 11:31:22.567 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4945 

2023-07-03 11:31:22.567 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4763 row column role 172 0 270 

2023-07-03 11:31:22.567 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5306 

2023-07-03 11:31:22.567 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4946 

2023-07-03 11:31:22.567 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4764 row column role 172 0 271 

2023-07-03 11:31:22.567 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5307 

2023-07-03 11:31:22.567 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4947 

2023-07-03 11:31:22.568 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4765 row column role 172 0 272 

2023-07-03 11:31:22.568 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5308 

2023-07-03 11:31:22.568 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4948 

2023-07-03 11:31:22.568 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4766 row column role 172 0 273 

2023-07-03 11:31:22.568 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5309 

2023-07-03 11:31:22.568 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4949 

2023-07-03 11:31:22.568 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4767 row column role 172 0 274 

2023-07-03 11:31:22.569 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5310 

2023-07-03 11:31:22.569 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4950 

2023-07-03 11:31:22.569 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4768 row column role 172 0 275 

2023-07-03 11:31:22.583 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5311 

2023-07-03 11:31:22.583 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4951 

2023-07-03 11:31:22.583 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4769 row column role 173 0 257 

2023-07-03 11:31:22.583 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5312 

2023-07-03 11:31:22.584 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4952 

2023-07-03 11:31:22.584 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4770 row column role 173 0 258 

2023-07-03 11:31:22.584 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5313 

2023-07-03 11:31:22.584 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4953 

2023-07-03 11:31:22.584 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4771 row column role 173 0 259 

2023-07-03 11:31:22.584 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5314 

2023-07-03 11:31:22.584 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4954 

2023-07-03 11:31:22.584 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4772 row column role 173 0 260 

2023-07-03 11:31:22.585 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5315 

2023-07-03 11:31:22.585 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4955 

2023-07-03 11:31:22.585 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4773 row column role 173 0 261 

2023-07-03 11:31:22.585 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5316 

2023-07-03 11:31:22.585 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4956 

2023-07-03 11:31:22.585 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4774 row column role 173 0 262 

2023-07-03 11:31:22.585 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5317 

2023-07-03 11:31:22.586 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4957 

2023-07-03 11:31:22.586 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4775 row column role 173 0 263 

2023-07-03 11:31:22.586 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5318 

2023-07-03 11:31:22.586 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4958 

2023-07-03 11:31:22.586 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4776 row column role 173 0 264 

2023-07-03 11:31:22.586 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5319 

2023-07-03 11:31:22.587 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4959 

2023-07-03 11:31:22.587 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4777 row column role 173 0 265 

2023-07-03 11:31:22.587 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5320 

2023-07-03 11:31:22.587 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4960 

2023-07-03 11:31:22.587 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4778 row column role 173 0 266 

2023-07-03 11:31:22.587 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5321 

2023-07-03 11:31:22.587 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4961 

2023-07-03 11:31:22.587 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4779 row column role 173 0 267 

2023-07-03 11:31:22.588 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5322 

2023-07-03 11:31:22.588 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4962 

2023-07-03 11:31:22.588 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4780 row column role 173 0 268 

2023-07-03 11:31:22.588 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5323 

2023-07-03 11:31:22.588 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4963 

2023-07-03 11:31:22.588 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4781 row column role 173 0 269 

2023-07-03 11:31:22.589 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5324 

2023-07-03 11:31:22.589 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4964 

2023-07-03 11:31:22.589 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4782 row column role 173 0 270 

2023-07-03 11:31:22.589 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5325 

2023-07-03 11:31:22.589 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4965 

2023-07-03 11:31:22.589 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4783 row column role 173 0 271 

2023-07-03 11:31:22.589 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5326 

2023-07-03 11:31:22.589 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4966 

2023-07-03 11:31:22.589 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4784 row column role 173 0 272 

2023-07-03 11:31:22.589 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5327 

2023-07-03 11:31:22.590 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4967 

2023-07-03 11:31:22.590 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4785 row column role 173 0 273 

2023-07-03 11:31:22.590 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5328 

2023-07-03 11:31:22.590 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4968 

2023-07-03 11:31:22.590 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4786 row column role 173 0 274 

2023-07-03 11:31:22.590 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5329 

2023-07-03 11:31:22.590 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4969 

2023-07-03 11:31:22.590 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4787 row column role 173 0 275 

2023-07-03 11:31:22.629 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5330 

2023-07-03 11:31:22.629 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4970 

2023-07-03 11:31:22.629 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4788 row column role 174 0 257 

2023-07-03 11:31:22.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5331 

2023-07-03 11:31:22.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4971 

2023-07-03 11:31:22.630 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4789 row column role 174 0 258 

2023-07-03 11:31:22.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5332 

2023-07-03 11:31:22.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4972 

2023-07-03 11:31:22.630 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4790 row column role 174 0 259 

2023-07-03 11:31:22.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5333 

2023-07-03 11:31:22.630 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4973 

2023-07-03 11:31:22.630 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4791 row column role 174 0 260 

2023-07-03 11:31:22.630 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5334 

2023-07-03 11:31:22.631 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4974 

2023-07-03 11:31:22.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4792 row column role 174 0 261 

2023-07-03 11:31:22.631 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5335 

2023-07-03 11:31:22.631 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4975 

2023-07-03 11:31:22.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4793 row column role 174 0 262 

2023-07-03 11:31:22.631 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5336 

2023-07-03 11:31:22.631 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4976 

2023-07-03 11:31:22.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4794 row column role 174 0 263 

2023-07-03 11:31:22.631 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5337 

2023-07-03 11:31:22.631 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4977 

2023-07-03 11:31:22.631 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4795 row column role 174 0 264 

2023-07-03 11:31:22.632 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5338 

2023-07-03 11:31:22.632 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4978 

2023-07-03 11:31:22.632 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4796 row column role 174 0 265 

2023-07-03 11:31:22.632 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5339 

2023-07-03 11:31:22.632 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4979 

2023-07-03 11:31:22.632 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4797 row column role 174 0 266 

2023-07-03 11:31:22.632 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5340 

2023-07-03 11:31:22.632 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4980 

2023-07-03 11:31:22.632 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4798 row column role 174 0 267 

2023-07-03 11:31:22.632 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5341 

2023-07-03 11:31:22.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4981 

2023-07-03 11:31:22.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4799 row column role 174 0 268 

2023-07-03 11:31:22.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5342 

2023-07-03 11:31:22.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4982 

2023-07-03 11:31:22.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4800 row column role 174 0 269 

2023-07-03 11:31:22.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5343 

2023-07-03 11:31:22.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4983 

2023-07-03 11:31:22.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4801 row column role 174 0 270 

2023-07-03 11:31:22.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5344 

2023-07-03 11:31:22.633 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4984 

2023-07-03 11:31:22.633 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4802 row column role 174 0 271 

2023-07-03 11:31:22.633 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5345 

2023-07-03 11:31:22.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4985 

2023-07-03 11:31:22.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4803 row column role 174 0 272 

2023-07-03 11:31:22.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5346 

2023-07-03 11:31:22.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4986 

2023-07-03 11:31:22.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4804 row column role 174 0 273 

2023-07-03 11:31:22.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5347 

2023-07-03 11:31:22.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4987 

2023-07-03 11:31:22.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4805 row column role 174 0 274 

2023-07-03 11:31:22.634 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5348 

2023-07-03 11:31:22.634 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4988 

2023-07-03 11:31:22.634 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4806 row column role 174 0 275 

2023-07-03 11:31:22.672 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5349 

2023-07-03 11:31:22.672 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4989 

2023-07-03 11:31:22.672 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4807 row column role 175 0 257 

2023-07-03 11:31:22.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5350 

2023-07-03 11:31:22.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4990 

2023-07-03 11:31:22.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4808 row column role 175 0 258 

2023-07-03 11:31:22.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5351 

2023-07-03 11:31:22.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4991 

2023-07-03 11:31:22.673 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4809 row column role 175 0 259 

2023-07-03 11:31:22.673 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5352 

2023-07-03 11:31:22.673 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4992 

2023-07-03 11:31:22.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4810 row column role 175 0 260 

2023-07-03 11:31:22.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5353 

2023-07-03 11:31:22.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4993 

2023-07-03 11:31:22.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4811 row column role 175 0 261 

2023-07-03 11:31:22.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5354 

2023-07-03 11:31:22.674 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4994 

2023-07-03 11:31:22.674 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4812 row column role 175 0 262 

2023-07-03 11:31:22.674 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5355 

2023-07-03 11:31:22.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4995 

2023-07-03 11:31:22.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4813 row column role 175 0 263 

2023-07-03 11:31:22.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5356 

2023-07-03 11:31:22.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4996 

2023-07-03 11:31:22.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4814 row column role 175 0 264 

2023-07-03 11:31:22.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5357 

2023-07-03 11:31:22.675 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4997 

2023-07-03 11:31:22.675 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4815 row column role 175 0 265 

2023-07-03 11:31:22.675 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5358 

2023-07-03 11:31:22.676 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4998 

2023-07-03 11:31:22.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4816 row column role 175 0 266 

2023-07-03 11:31:22.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5359 

2023-07-03 11:31:22.676 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 4999 

2023-07-03 11:31:22.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4817 row column role 175 0 267 

2023-07-03 11:31:22.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5360 

2023-07-03 11:31:22.676 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5000 

2023-07-03 11:31:22.676 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4818 row column role 175 0 268 

2023-07-03 11:31:22.676 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5361 

2023-07-03 11:31:22.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5001 

2023-07-03 11:31:22.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4819 row column role 175 0 269 

2023-07-03 11:31:22.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5362 

2023-07-03 11:31:22.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5002 

2023-07-03 11:31:22.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4820 row column role 175 0 270 

2023-07-03 11:31:22.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5363 

2023-07-03 11:31:22.677 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5003 

2023-07-03 11:31:22.677 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4821 row column role 175 0 271 

2023-07-03 11:31:22.677 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5364 

2023-07-03 11:31:22.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5004 

2023-07-03 11:31:22.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4822 row column role 175 0 272 

2023-07-03 11:31:22.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5365 

2023-07-03 11:31:22.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5005 

2023-07-03 11:31:22.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4823 row column role 175 0 273 

2023-07-03 11:31:22.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5366 

2023-07-03 11:31:22.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5006 

2023-07-03 11:31:22.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4824 row column role 175 0 274 

2023-07-03 11:31:22.678 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5367 

2023-07-03 11:31:22.678 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5007 

2023-07-03 11:31:22.678 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4825 row column role 175 0 275 

2023-07-03 11:31:22.720 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5368 

2023-07-03 11:31:22.720 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5008 

2023-07-03 11:31:22.720 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4826 row column role 176 0 257 

2023-07-03 11:31:22.721 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5369 

2023-07-03 11:31:22.721 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5009 

2023-07-03 11:31:22.721 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4827 row column role 176 0 258 

2023-07-03 11:31:22.721 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5370 

2023-07-03 11:31:22.721 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5010 

2023-07-03 11:31:22.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4828 row column role 176 0 259 

2023-07-03 11:31:22.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5371 

2023-07-03 11:31:22.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5011 

2023-07-03 11:31:22.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4829 row column role 176 0 260 

2023-07-03 11:31:22.722 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5372 

2023-07-03 11:31:22.722 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5012 

2023-07-03 11:31:22.722 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4830 row column role 176 0 261 

2023-07-03 11:31:22.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5373 

2023-07-03 11:31:22.723 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5013 

2023-07-03 11:31:22.723 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4831 row column role 176 0 262 

2023-07-03 11:31:22.723 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5374 

2023-07-03 11:31:22.723 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5014 

2023-07-03 11:31:22.723 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4832 row column role 176 0 263 

2023-07-03 11:31:22.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5375 

2023-07-03 11:31:22.724 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5015 

2023-07-03 11:31:22.724 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4833 row column role 176 0 264 

2023-07-03 11:31:22.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5376 

2023-07-03 11:31:22.724 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5016 

2023-07-03 11:31:22.724 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4834 row column role 176 0 265 

2023-07-03 11:31:22.724 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5377 

2023-07-03 11:31:22.725 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5017 

2023-07-03 11:31:22.725 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4835 row column role 176 0 266 

2023-07-03 11:31:22.725 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5378 

2023-07-03 11:31:22.725 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5018 

2023-07-03 11:31:22.725 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4836 row column role 176 0 267 

2023-07-03 11:31:22.725 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5379 

2023-07-03 11:31:22.725 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5019 

2023-07-03 11:31:22.725 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4837 row column role 176 0 268 

2023-07-03 11:31:22.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5380 

2023-07-03 11:31:22.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5020 

2023-07-03 11:31:22.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4838 row column role 176 0 269 

2023-07-03 11:31:22.726 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5381 

2023-07-03 11:31:22.726 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5021 

2023-07-03 11:31:22.726 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4839 row column role 176 0 270 

2023-07-03 11:31:22.727 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5382 

2023-07-03 11:31:22.727 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5022 

2023-07-03 11:31:22.727 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4840 row column role 176 0 271 

2023-07-03 11:31:22.727 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5383 

2023-07-03 11:31:22.727 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5023 

2023-07-03 11:31:22.727 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4841 row column role 176 0 272 

2023-07-03 11:31:22.728 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5384 

2023-07-03 11:31:22.728 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5024 

2023-07-03 11:31:22.728 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4842 row column role 176 0 273 

2023-07-03 11:31:22.728 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5385 

2023-07-03 11:31:22.728 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5025 

2023-07-03 11:31:22.728 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4843 row column role 176 0 274 

2023-07-03 11:31:22.728 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5386 

2023-07-03 11:31:22.728 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5026 

2023-07-03 11:31:22.729 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4844 row column role 176 0 275 

2023-07-03 11:31:22.761 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5387 

2023-07-03 11:31:22.761 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5027 

2023-07-03 11:31:22.761 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4845 row column role 177 0 257 

2023-07-03 11:31:22.762 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5388 

2023-07-03 11:31:22.762 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5028 

2023-07-03 11:31:22.762 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4846 row column role 177 0 258 

2023-07-03 11:31:22.762 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5389 

2023-07-03 11:31:22.762 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5029 

2023-07-03 11:31:22.762 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4847 row column role 177 0 259 

2023-07-03 11:31:22.763 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5390 

2023-07-03 11:31:22.763 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5030 

2023-07-03 11:31:22.763 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4848 row column role 177 0 260 

2023-07-03 11:31:22.763 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5391 

2023-07-03 11:31:22.763 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5031 

2023-07-03 11:31:22.763 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4849 row column role 177 0 261 

2023-07-03 11:31:22.764 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5392 

2023-07-03 11:31:22.764 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5032 

2023-07-03 11:31:22.764 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4850 row column role 177 0 262 

2023-07-03 11:31:22.764 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5393 

2023-07-03 11:31:22.764 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5033 

2023-07-03 11:31:22.764 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4851 row column role 177 0 263 

2023-07-03 11:31:22.764 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5394 

2023-07-03 11:31:22.765 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5034 

2023-07-03 11:31:22.765 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4852 row column role 177 0 264 

2023-07-03 11:31:22.765 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5395 

2023-07-03 11:31:22.765 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5035 

2023-07-03 11:31:22.765 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4853 row column role 177 0 265 

2023-07-03 11:31:22.765 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5396 

2023-07-03 11:31:22.765 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5036 

2023-07-03 11:31:22.766 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4854 row column role 177 0 266 

2023-07-03 11:31:22.766 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5397 

2023-07-03 11:31:22.766 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5037 

2023-07-03 11:31:22.766 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4855 row column role 177 0 267 

2023-07-03 11:31:22.766 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5398 

2023-07-03 11:31:22.766 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5038 

2023-07-03 11:31:22.766 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4856 row column role 177 0 268 

2023-07-03 11:31:22.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5399 

2023-07-03 11:31:22.767 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5039 

2023-07-03 11:31:22.767 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4857 row column role 177 0 269 

2023-07-03 11:31:22.767 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5400 

2023-07-03 11:31:22.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5040 

2023-07-03 11:31:22.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4858 row column role 177 0 270 

2023-07-03 11:31:22.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5401 

2023-07-03 11:31:22.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5041 

2023-07-03 11:31:22.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4859 row column role 177 0 271 

2023-07-03 11:31:22.768 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5402 

2023-07-03 11:31:22.768 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5042 

2023-07-03 11:31:22.768 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4860 row column role 177 0 272 

2023-07-03 11:31:22.769 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5403 

2023-07-03 11:31:22.769 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5043 

2023-07-03 11:31:22.769 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4861 row column role 177 0 273 

2023-07-03 11:31:22.769 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5404 

2023-07-03 11:31:22.769 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5044 

2023-07-03 11:31:22.769 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4862 row column role 177 0 274 

2023-07-03 11:31:22.769 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5405 

2023-07-03 11:31:22.770 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5045 

2023-07-03 11:31:22.770 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4863 row column role 177 0 275 

2023-07-03 11:31:22.820 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5406 

2023-07-03 11:31:22.820 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5046 

2023-07-03 11:31:22.821 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4864 row column role 178 0 257 

2023-07-03 11:31:22.821 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5407 

2023-07-03 11:31:22.821 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5047 

2023-07-03 11:31:22.821 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4865 row column role 178 0 258 

2023-07-03 11:31:22.822 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5408 

2023-07-03 11:31:22.822 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5048 

2023-07-03 11:31:22.822 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4866 row column role 178 0 259 

2023-07-03 11:31:22.822 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5409 

2023-07-03 11:31:22.822 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5049 

2023-07-03 11:31:22.822 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4867 row column role 178 0 260 

2023-07-03 11:31:22.822 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5410 

2023-07-03 11:31:22.823 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5050 

2023-07-03 11:31:22.823 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4868 row column role 178 0 261 

2023-07-03 11:31:22.823 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5411 

2023-07-03 11:31:22.823 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5051 

2023-07-03 11:31:22.823 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4869 row column role 178 0 262 

2023-07-03 11:31:22.823 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5412 

2023-07-03 11:31:22.824 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5052 

2023-07-03 11:31:22.824 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4870 row column role 178 0 263 

2023-07-03 11:31:22.824 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5413 

2023-07-03 11:31:22.824 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5053 

2023-07-03 11:31:22.824 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4871 row column role 178 0 264 

2023-07-03 11:31:22.825 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5414 

2023-07-03 11:31:22.825 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5054 

2023-07-03 11:31:22.825 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4872 row column role 178 0 265 

2023-07-03 11:31:22.825 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5415 

2023-07-03 11:31:22.825 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5055 

2023-07-03 11:31:22.825 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4873 row column role 178 0 266 

2023-07-03 11:31:22.826 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5416 

2023-07-03 11:31:22.826 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5056 

2023-07-03 11:31:22.826 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4874 row column role 178 0 267 

2023-07-03 11:31:22.826 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5417 

2023-07-03 11:31:22.826 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5057 

2023-07-03 11:31:22.826 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4875 row column role 178 0 268 

2023-07-03 11:31:22.827 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5418 

2023-07-03 11:31:22.827 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5058 

2023-07-03 11:31:22.827 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4876 row column role 178 0 269 

2023-07-03 11:31:22.827 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5419 

2023-07-03 11:31:22.827 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5059 

2023-07-03 11:31:22.827 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4877 row column role 178 0 270 

2023-07-03 11:31:22.827 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5420 

2023-07-03 11:31:22.828 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5060 

2023-07-03 11:31:22.828 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4878 row column role 178 0 271 

2023-07-03 11:31:22.828 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5421 

2023-07-03 11:31:22.828 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5061 

2023-07-03 11:31:22.828 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4879 row column role 178 0 272 

2023-07-03 11:31:22.828 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5422 

2023-07-03 11:31:22.828 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5062 

2023-07-03 11:31:22.828 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4880 row column role 178 0 273 

2023-07-03 11:31:22.828 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5423 

2023-07-03 11:31:22.828 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5063 

2023-07-03 11:31:22.828 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4881 row column role 178 0 274 

2023-07-03 11:31:22.829 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5424 

2023-07-03 11:31:22.829 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5064 

2023-07-03 11:31:22.829 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4882 row column role 178 0 275 

2023-07-03 11:31:23.056 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5425 

2023-07-03 11:31:23.056 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5065 

2023-07-03 11:31:23.056 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4883 row column role 179 0 257 

2023-07-03 11:31:23.056 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5426 

2023-07-03 11:31:23.056 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5066 

2023-07-03 11:31:23.056 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4884 row column role 179 0 258 

2023-07-03 11:31:23.057 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5427 

2023-07-03 11:31:23.057 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5067 

2023-07-03 11:31:23.057 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4885 row column role 179 0 259 

2023-07-03 11:31:23.057 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5428 

2023-07-03 11:31:23.057 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5068 

2023-07-03 11:31:23.057 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4886 row column role 179 0 260 

2023-07-03 11:31:23.058 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5429 

2023-07-03 11:31:23.058 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5069 

2023-07-03 11:31:23.058 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4887 row column role 179 0 261 

2023-07-03 11:31:23.058 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5430 

2023-07-03 11:31:23.058 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5070 

2023-07-03 11:31:23.058 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4888 row column role 179 0 262 

2023-07-03 11:31:23.059 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5431 

2023-07-03 11:31:23.059 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5071 

2023-07-03 11:31:23.059 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4889 row column role 179 0 263 

2023-07-03 11:31:23.059 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5432 

2023-07-03 11:31:23.059 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5072 

2023-07-03 11:31:23.059 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4890 row column role 179 0 264 

2023-07-03 11:31:23.060 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5433 

2023-07-03 11:31:23.060 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5073 

2023-07-03 11:31:23.060 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4891 row column role 179 0 265 

2023-07-03 11:31:23.060 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5434 

2023-07-03 11:31:23.060 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5074 

2023-07-03 11:31:23.060 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4892 row column role 179 0 266 

2023-07-03 11:31:23.061 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5435 

2023-07-03 11:31:23.061 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5075 

2023-07-03 11:31:23.061 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4893 row column role 179 0 267 

2023-07-03 11:31:23.062 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5436 

2023-07-03 11:31:23.062 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5076 

2023-07-03 11:31:23.062 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4894 row column role 179 0 268 

2023-07-03 11:31:23.062 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5437 

2023-07-03 11:31:23.062 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5077 

2023-07-03 11:31:23.062 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4895 row column role 179 0 269 

2023-07-03 11:31:23.062 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5438 

2023-07-03 11:31:23.063 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5078 

2023-07-03 11:31:23.063 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4896 row column role 179 0 270 

2023-07-03 11:31:23.063 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5439 

2023-07-03 11:31:23.063 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5079 

2023-07-03 11:31:23.063 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4897 row column role 179 0 271 

2023-07-03 11:31:23.063 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5440 

2023-07-03 11:31:23.064 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5080 

2023-07-03 11:31:23.064 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4898 row column role 179 0 272 

2023-07-03 11:31:23.064 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5441 

2023-07-03 11:31:23.064 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5081 

2023-07-03 11:31:23.064 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4899 row column role 179 0 273 

2023-07-03 11:31:23.064 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5442 

2023-07-03 11:31:23.064 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5082 

2023-07-03 11:31:23.064 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4900 row column role 179 0 274 

2023-07-03 11:31:23.065 DBG default: virtual int SevaBookingTableModel::rowCount(const QModelIndex&) const 180 5443 

2023-07-03 11:31:23.065 DBG default: virtual int SevaBookingTableModel::columnCount(const QModelIndex&) const 180 5083 

2023-07-03 11:31:23.065 DBG default: virtual QVariant SevaBookingTableModel::data(const QModelIndex&, int) const 4901 row column role 179 0 275 

2023-07-03 11:32:38.184 DBG qml: Keys.onEscapePressed: Seva All view Page 
2023-07-03 11:32:38.184 DBG qml:  In onLoadSevaBookingView
2023-07-03 11:32:38.221 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:32:38.227 DBG qml: state changedinitial
2023-07-03 11:32:38.231 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:32:38.231 WRN default: qrc:/ui/SevaDateTime.qml:103:5: QML Connections: Cannot assign to non-existent property "onDefaultDates"
2023-07-03 11:32:38.231 WRN default: qrc:/ui/SevaDateTime.qml:97:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:32:38.231 WRN default: qrc:/ui/SevaDateTime.qml:91:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:32:38.295 DBG qml: my seva delegate is created
2023-07-03 11:32:38.295 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:32:38.296 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:32:38.296 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:32:38.296 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:32:38.296 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:32:38.296 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:32:38.296 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:32:38.296 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:32:38.296 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:32:38.296 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:32:38.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:32:38.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:32:38.296 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:32:38.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:32:38.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:32:38.296 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:32:38.296 DBG qml: --------------- onCurrentIndexChanged: of combo box sevaListView1
2023-07-03 11:32:38.296 DBG qml:  Index =0
2023-07-03 11:32:38.296 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:32:38.296 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:32:38.296 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:32:38.296 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:32:38.296 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:32:38.296 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:32:38.296 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:32:38.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:32:38.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:32:38.296 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:32:38.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:32:38.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:32:38.296 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:32:38.296 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:32:38.296 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:32:38.296 DBG qml:  Seva Type Changed: 0
2023-07-03 11:32:38.296 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:32:38.296 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:32:38.296 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:32:38.296 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:32:38.296 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:32:38.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:32:38.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:32:38.296 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:32:38.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:32:38.296 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:32:38.297 DBG qml: my seva delegate is created
2023-07-03 11:32:38.297 DBG qml:  Current Index changed0
2023-07-03 11:32:38.297 DBG qml:  VIEW-1 - Index =0
2023-07-03 11:32:38.297 DBG qml:  Seva Selected =0
2023-07-03 11:32:38.297 DBG default: SevaName* SevaViewProxy::getSevaByIndex(int) 0 

2023-07-03 11:32:38.297 DBG default: current.... seva model 

2023-07-03 11:32:38.297 DBG default: current seva model SevaListViewModel(0x1af0e4b0) 

2023-07-03 11:32:38.297 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int) (SevaName(0x97eb488)) 

2023-07-03 11:32:38.297 DBG default: SevaName* SevaListViewModel::getSevaByIndex(int)  Index requested 1= 0 

2023-07-03 11:32:38.297 DBG qml:  Seva Details =0
2023-07-03 11:32:38.297 DBG default: void SevaName::print()  Seva Name   = "Nithya Archane"
2023-07-03 11:32:38.297 DBG default: void SevaName::print()  Seva ID     = 102
2023-07-03 11:32:38.297 DBG default: void SevaName::print()  Seva Number = 102
2023-07-03 11:32:38.297 DBG default: void SevaName::print()  Seva        = 0
2023-07-03 11:32:38.297 DBG default: void SevaName::print()  Seva Date   = "2021-11-25"
2023-07-03 11:32:38.297 DBG default: void SevaName::print()  Seva Type   = 0
2023-07-03 11:32:38.297 DBG default: void SevaName::print()  Seva Cost   = 0
2023-07-03 11:32:38.297 DBG default: void SevaName::print()  Seva Count  = 1
2023-07-03 11:32:38.297 DBG default: void SevaName::print()  Additional Cost = 0
2023-07-03 11:32:38.297 DBG default: void SevaName::print()  Seva Time  = ""
2023-07-03 11:32:38.297 DBG qml: seva name  = Nithya Archane Seva cost = 0
2023-07-03 11:32:38.297 DBG default: QStringList SevaViewProxy::getGothras() 

2023-07-03 11:32:38.297 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:32:38.297 DBG default: QStringList SevaTypeNamesDataModel::getGothras() 

2023-07-03 11:32:38.298 DBG default: QStringList DBInterface::qryGothras()  Gothra List = ("Vashistha", "", "Puthamanasa", "Shrivathsa", "Sankhyayanasa", "Jamadagni", "Harithasa", "Kashyapa", "Maudgalya", "Bharadwaja", "Gargeyyesa", "Mounabharghava", "Dhananjaya", "Kaundinya", "Galava", "Athreyasa", "Vishwamitra", "Kaushika", "Gouthama") 

2023-07-03 11:32:38.298 DBG qml: ********* In setGothras function  *********** = 0
2023-07-03 11:32:38.298 DBG default: QStringList SevaViewProxy::getNakshatras() 

2023-07-03 11:32:38.298 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:32:38.298 DBG qml: ********* In set nakshatra function  *********** = 0
2023-07-03 11:32:38.298 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:32:38.298 DBG qml: Current Text =SevaTypeViewModel(0x19caf9e0)
2023-07-03 11:32:38.298 DBG qml: Model SevaType--------: [object Object]
2023-07-03 11:32:38.298 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:32:38.298 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:32:38.298 DBG qml: Model SevaType: RAMANAVAMI SEVE
2023-07-03 11:32:38.298 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:32:38.298 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:32:38.298 DBG qml: Model SevaType: 0
2023-07-03 11:32:38.298 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:32:38.298 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:32:38.298 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:32:38.298 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:32:38.308 DBG qml: Component.onCompleted: of seva booking view
2023-07-03 11:32:38.309 DBG qml: In Component.onCompleted: of SevaPaymenConfirmationDialog
2023-07-03 11:32:38.309 DBG qml: Dialog object is ccreated in SPCD
2023-07-03 11:32:38.309 DBG default: QStringList SevaTypeNamesDataModel::getBankList() 

2023-07-03 11:32:38.309 DBG default: JsonProcessor::JsonProcessor(QObject*) 

2023-07-03 11:32:38.309 DBG default: void JsonProcessor::readBanksFromJsonToList() 

2023-07-03 11:32:38.309 DBG default: file opened 

2023-07-03 11:32:38.309 DBG default: read all 

2023-07-03 11:32:38.309 DBG default: void JsonProcessor::readBanksFromJsonToList() dddddddoooooooooooocccccccc 

2023-07-03 11:32:38.309 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:32:38.309 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:32:38.309 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:32:38.309 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:32:38.309 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:32:38.309 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:32:38.309 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:32:38.309 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:32:38.309 DBG default: BankDetails::BankDetails(QObject*) 

2023-07-03 11:32:38.309 DBG default: virtual JsonProcessor::~JsonProcessor() 

2023-07-03 11:32:38.309 DBG qml:  Trying to get the list category
2023-07-03 11:32:38.309 WRN default: qrc:/ui/SevaDateTime.qml:89: ReferenceError: defaultDates is not defined
2023-07-03 11:32:38.309 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:32:38.309 DBG qml: Screen screenWidth size =1920
2023-07-03 11:32:38.309 DBG qml: Screen screenHeight size =1000
2023-07-03 11:32:38.310 DBG qml:  Name Status =false
2023-07-03 11:32:38.310 DBG qml:  Mobile Status =false
2023-07-03 11:32:38.310 DBG qml: Component.onCompleted: of seva list view
2023-07-03 11:32:38.310 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:32:38.310 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:32:38.310 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:32:38.310 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:32:38.310 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:32:38.310 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:32:38.310 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:32:38.310 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:32:38.310 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:32:38.310 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:32:38.310 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:32:38.310 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:32:38.310 DBG default: int SevaListViewModel::getSevaListViewSize() 

2023-07-03 11:32:38.310 DBG qml: Component.onCompleted of combo box sevaListView current index =0 1
2023-07-03 11:32:38.310 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:32:38.310 DBG qml: Screen screenWidth size =1920
2023-07-03 11:32:38.310 DBG qml: Screen screenHeight size =1000
2023-07-03 11:32:38.310 WRN default: qrc:/ui/SevaBookingView.qml:380:9: QML Connections: Detected function "onLoadSevaBookingView" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:32:38.310 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.310 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.310 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.310 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.311 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.314 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.317 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.317 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.318 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.318 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.318 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.318 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.318 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.318 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:32:38.318 WRN default: Qt Quick Layouts: Polish loop detected. Aborting after two iterations.
2023-07-03 11:33:57.718 DBG qml: Esc pressed in select seva type view
2023-07-03 11:33:57.718 DBG qml:  In onLoadMenuPage
2023-07-03 11:33:57.718 DBG qml: loading Menu page from main
2023-07-03 11:33:57.742 DBG qml: the accounts enable true
2023-07-03 11:33:57.742 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:33:57.742 DBG qml: Screen screenWidth size =1920
2023-07-03 11:33:57.742 DBG qml: Screen screenHeight size =1000
2023-07-03 11:33:57.742 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:33:57.742 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:33:57.742 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:33:57.742 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:34:00.983 DBG qml: booking report button clicked
2023-07-03 11:34:00.983 DBG qml: Clicked on Bookingreport
2023-07-03 11:34:01.101 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-07-03 11:34:01.107 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:01.107 DBG default: 0 

2023-07-03 11:34:01.122 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-07-03 11:34:01.122 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:34:01.122 DBG qml:  bookings Selected year2015
2023-07-03 11:34:01.123 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-07-03 11:34:01.123 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:34:01.123 DBG qml: Selected month1
2023-07-03 11:34:01.124 WRN default: qrc:/ui/components/MyBookingFilter.qml:331:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.124 WRN default: qrc:/ui/components/MyBookingFilter.qml:342:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.179 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.179 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.199 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.201 WRN default: qrc:/ui/components/MyBookingFilter.qml:127:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.201 WRN default: qrc:/ui/components/MyBookingFilter.qml:165:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.201 WRN default: qrc:/ui/components/MyBookingFilter.qml:331:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.201 WRN default: qrc:/ui/components/MyBookingFilter.qml:342:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.201 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.201 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.201 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.201 WRN default: qrc:/ui/components/MyBookingFilter.qml:127:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.201 WRN default: qrc:/ui/components/MyBookingFilter.qml:165:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.202 DBG qml: In Component.onCompleted: of booking report page
2023-07-03 11:34:01.202 DBG qml: In  Component.onCompleted: loader brp
2023-07-03 11:34:01.205 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-07-03 11:34:01.205 DBG qml: In  Component.onCompleted: of table view of brp function() { [native code] }
2023-07-03 11:34:01.205 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:34:01.205 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:34:01.205 DBG qml: The month and year initial 1   2015
2023-07-03 11:34:01.205 DBG qml:  Trying to get the list category
2023-07-03 11:34:01.205 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:34:01.205 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:34:01.205 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.205 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.205 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.205 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.205 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:34:01.205 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:34:01.205 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:34:01.205 DBG qml: 0
2023-07-03 11:34:01.205 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.205 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:34:01.205 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:34:01.205 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:34:01.205 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.205 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:34:01.205 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:34:01.205 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:34:01.205 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:34:01.205 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:34:01.205 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:34:01.205 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:34:01.205 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:34:01.205 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:34:01.205 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:34:01.205 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:34:01.205 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-03 11:34:01.205 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:34:01.205 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:34:01.206 DBG qml: Seva name selected : Nithya Archane
2023-07-03 11:34:01.206 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:34:01.206 DBG qml: Seva type selected in report filter : 0
2023-07-03 11:34:01.206 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.206 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.206 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.206 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:34:01.206 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:34:01.206 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:34:01.206 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:34:01.206 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:34:01.206 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:34:01.206 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:34:01.206 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:34:01.206 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:34:01.206 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:34:01.206 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:34:01.206 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:34:01.206 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-03 11:34:01.206 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:34:01.206 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:01.206 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:01.206 DBG qml:   _rip.sSingleDate 203-07-2023
2023-07-03 11:34:01.206 DBG default: void SevaReport::generateBookReport(ReportFilterElements*) 

2023-07-03 11:34:01.206 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:01.206 DBG default: 0 

2023-07-03 11:34:01.206 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 0 

2023-07-03 11:34:01.206 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 

2023-07-03 11:34:01.206 DBG default: Selected Type  0 

2023-07-03 11:34:01.206 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:34:01.206 DBG default: Selected Month  1 

2023-07-03 11:34:01.206 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:34:01.206 DBG default: Selected Year  2015 

2023-07-03 11:34:01.206 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:01.206 DBG default: Selected date  "03-07-2023" 

2023-07-03 11:34:01.206 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) Inside c date book rep 

2023-07-03 11:34:01.206 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:01.206 DBG default: QString BookingReportModel::FormatDate(QString) "03-07-2023" 

2023-07-03 11:34:01.206 DBG default: QString BookingReportModel::FormatDate(QString) QDate("2023-07-03") 

2023-07-03 11:34:01.206 DBG default: QString BookingReportModel::FormatDate(QString) "2023-07-03" 

2023-07-03 11:34:01.206 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:34:01.206 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:01.206 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-07-03" 

2023-07-03 11:34:01.206 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:34:01.206 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:34:01.206 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:01.206 DBG default: 
Changed format is:  "2023-07-03" 

2023-07-03 11:34:01.206 DBG default: In type 0:  

2023-07-03 11:34:01.206 DBG default:  Query string = "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-03';" 

2023-07-03 11:34:01.207 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-07-03 11:34:01.207 DBG default:  Query string = true 

2023-07-03 11:34:01.207 DBG default:  Query prepared successfully = true 

2023-07-03 11:34:01.207 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-07-03 11:34:01.207 DBG default:  Query string =2222222222222 "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-03';" 

2023-07-03 11:34:01.207 DBG default:  Query string =@@@@@@@@@@@@@ QSqlError("", "", "") 

2023-07-03 11:34:01.207 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-03 11:34:01.207 DBG default: false 

2023-07-03 11:34:01.207 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:01.207 DBG default: "2023-07-03" 

2023-07-03 11:34:01.207 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-07-03 11:34:01.207 DBG default: int BookingReportModel::getBookingReportQryListSize() 

2023-07-03 11:34:01.207 DBG qml: Component.completed:if of mft.qml
2023-07-03 11:34:01.207 DBG qml: In onSendError
2023-07-03 11:34:01.207 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-07-03 11:34:01.207 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:34:01.207 DBG qml:  bookings Selected year2023
2023-07-03 11:34:01.207 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-07-03 11:34:01.207 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:34:01.208 DBG qml: Selected month7
2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 1 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 2 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 3 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 4 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 5 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 6 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 7 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 8 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 9 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 10 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 11 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 12 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 13 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 14 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 15 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 16 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 17 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 18 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 19 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.208 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 20 

2023-07-03 11:34:01.209 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.209 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.209 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.209 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 21 

2023-07-03 11:34:01.209 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.209 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.209 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.209 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 22 

2023-07-03 11:34:01.209 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.209 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.209 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.209 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 23 

2023-07-03 11:34:01.209 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.209 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.209 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:34:01.209 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 24 

2023-07-03 11:34:01.209 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:34:01.209 DBG qml: Screen screenWidth size =1920
2023-07-03 11:34:01.209 DBG qml: Screen screenHeight size =1000
2023-07-03 11:34:01.209 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:34:01.209 DBG qml: Screen screenWidth size =1920
2023-07-03 11:34:01.209 DBG qml: Screen screenHeight size =1000
2023-07-03 11:34:01.209 WRN default: qrc:/ui/MenuPage.qml:158:9: QML DisplayDialog: cannot find any window to open popup in.
2023-07-03 11:34:01.210 WRN default: qrc:/ui/components/MyBookingFilter.qml:127:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.210 WRN default: qrc:/ui/components/MyBookingFilter.qml:165:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.210 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.210 WRN default: qrc:/ui/components/MyBookingFilter.qml:215:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.210 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.210 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.225 WRN default: qrc:/ui/components/MyBookingFilter.qml:261:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.225 WRN default: qrc:/ui/components/MyBookingFilter.qml:271:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.225 WRN default: qrc:/ui/components/MyBookingFilter.qml:331:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.225 WRN default: qrc:/ui/components/MyBookingFilter.qml:342:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.225 WRN default: qrc:/ui/components/MyBookingFilter.qml:331:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:01.225 WRN default: qrc:/ui/components/MyBookingFilter.qml:342:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:34:02.813 DBG qml: Ok clicked
2023-07-03 11:34:04.783 DBG qml: _month.currentIndex+1 61
2023-07-03 11:34:04.783 DBG qml: _year._data 2023
2023-07-03 11:34:06.304 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:34:06.304 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:34:06.304 DBG qml: I am hereeee
2023-07-03 11:34:06.304 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-07-03 11:34:06.304 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-07-03 11:34:06.304 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:34:06.304 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-07-03 11:34:06.304 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-07-03 11:34:06.304 DBG qml: ---------11----------------
2023-07-03 11:34:06.304 DBG qml: In onLoadDateWiseBookingPage
2023-07-03 11:34:06.362 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-07-03 11:34:06.366 WRN default: qrc:/ui/SevaBookingReportOnDateRange.qml:276:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:34:06.367 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:34:06.373 DBG qml: Component.completed: of SevaBookingReportOnDateRange.qml
2023-07-03 11:34:06.376 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:34:06.376 DBG qml: Screen screenWidth size =1920
2023-07-03 11:34:06.376 DBG qml: Screen screenHeight size =1000
2023-07-03 11:34:06.376 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadDateWiseBookingPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:34:06.376 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadDateWiseBookingForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:34:06.376 DBG qml: ---------12----------------
2023-07-03 11:34:06.376 DBG qml: In onSendBookingReportDateRangeInputForWholeMonth
2023-07-03 11:34:06.376 DBG qml: In main
2023-07-03 11:34:06.376 DBG default: void SevaReport::generateBookingReportForEachDateForWholeMonth(ReportFilterElements*) 

2023-07-03 11:34:06.376 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) 

2023-07-03 11:34:06.376 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:34:06.376 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) 0 

2023-07-03 11:34:06.376 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:06.376 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) elm date "03-07-2023" 

2023-07-03 11:34:06.376 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:34:06.376 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:34:06.376 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetails "All" 0 

2023-07-03 11:34:06.376 DBG default: void BookingReportDateRangeModel::generateBookingDateRangeReportForWholeMonth(ReportFilterElements*) elm ddetailqqqqqqqqqqqqqqqqqs 2 

2023-07-03 11:34:06.376 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:34:06.376 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:34:06.376 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:34:06.376 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:34:06.376 DBG default: void DBInterface::booking_report_eachDateDataRangeForMonth_function(QString, int, int, int) The suman monthe 7 2023 

2023-07-03 11:34:06.376 DBG default:  Query string = "select RECEIPT_DATE,sum(QUANTITY) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='7' Group by sevabooking.RECEIPT_DATE;" 

2023-07-03 11:34:06.376 DBG default: Query in while 

2023-07-03 11:34:06.376 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='7' Group by sevabooking.RECEIPT_DATE;" 

2023-07-03 11:34:06.376 DBG default: BookingReportDateRangeElement::BookingReportDateRangeElement(QObject*) 

2023-07-03 11:34:06.376 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-07-01" 

2023-07-03 11:34:06.376 DBG default: In while of db **********query_other1.value(1).toInt()***************** 6 

2023-07-03 11:34:06.377 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) suman insert sevaRow for report 

2023-07-03 11:34:06.377 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) ------------ 

2023-07-03 11:34:06.377 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:34:06.377 DBG default: Query in while 

2023-07-03 11:34:06.377 DBG default: In while of db *************************** "select RECEIPT_DATE,sum(QUANTITY) from sevabooking where sevabooking.S_YEAR ='2023' and sevabooking.S_MONTH ='7' Group by sevabooking.RECEIPT_DATE;" 

2023-07-03 11:34:06.377 DBG default: BookingReportDateRangeElement::BookingReportDateRangeElement(QObject*) 

2023-07-03 11:34:06.377 DBG default: In while of db ********query_other1.value(0).toString()******************* "2023-07-02" 

2023-07-03 11:34:06.377 DBG default: In while of db **********query_other1.value(1).toInt()***************** 9 

2023-07-03 11:34:06.377 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) suman insert sevaRow for report 

2023-07-03 11:34:06.377 DBG default: bool BookingReportDateRangeModel::insertSevaRow(BookingReportDateRangeElement*) ------------ 

2023-07-03 11:34:06.377 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 1 

2023-07-03 11:34:06.377 DBG default: int BookingReportDateRangeModel::getBookingReportDateRangeQryList() 

2023-07-03 11:34:06.378 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:06.378 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:06.378 DBG default: virtual QHash<int, QByteArray> BookingReportDateRangeModel::roleNames() const 

2023-07-03 11:34:06.379 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:06.380 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:06.380 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:06.380 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:34:06.382 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:06.382 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:06.382 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:06.382 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-01" 

2023-07-03 11:34:06.383 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:06.383 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:06.383 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:06.383 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 6 

2023-07-03 11:34:06.383 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:06.383 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:06.384 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:06.384 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:06.384 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:06.384 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 2 

2023-07-03 11:34:06.385 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:06.385 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:06.385 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:06.385 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-02" 

2023-07-03 11:34:06.385 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:06.385 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:06.385 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:06.385 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 9 

2023-07-03 11:34:08.251 DBG qml: mouse clicked left styleData.selected true
2023-07-03 11:34:08.251 DBG qml: clicked cell in table view  0
2023-07-03 11:34:08.251 DBG qml: clicked cell in table view coordinates =  QPointF(313, 42)
2023-07-03 11:34:08.252 DBG qml: clicked cell in table view clickIndex =  0
2023-07-03 11:34:08.252 DBG qml: clicked cell in table view  0
2023-07-03 11:34:08.252 DBG qml: clicked cell in table view  0
2023-07-03 11:34:08.252 DBG qml: Left 0
2023-07-03 11:34:08.252 DBG default: BookingReportDateRangeElement* BookingReportDateRangeModel::getBookingReportDateRangeElementAt(int) 

2023-07-03 11:34:08.252 DBG default: BookingReportDateRangeElement* BookingReportDateRangeModel::getBookingReportDateRangeElementAt(int) I am index  0 

2023-07-03 11:34:08.252 DBG default: BookingReportDateRangeElement* BookingReportDateRangeModel::getBookingReportDateRangeElementAt(int) "2023-07-01" 

2023-07-03 11:34:08.252 DBG default: BookingReportDateRangeElement* BookingReportDateRangeModel::getBookingReportDateRangeElementAt(int) 6 

2023-07-03 11:34:08.252 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:08.253 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:08.253 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:08.254 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:08.254 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.254 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.254 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:34:08.254 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:08.255 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.255 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.255 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-01" 

2023-07-03 11:34:08.255 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:08.255 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.255 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.255 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 6 

2023-07-03 11:34:08.256 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:08.256 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:08.256 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:08.256 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.256 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.256 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 2 

2023-07-03 11:34:08.257 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:08.257 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.257 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.257 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-02" 

2023-07-03 11:34:08.257 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:34:08.257 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.258 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.258 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 9 

2023-07-03 11:34:08.258 DBG qml: /////////////////////////////2023-07-01
2023-07-03 11:34:08.258 DBG qml: In   1111111111onLoadSingleDateBookingPage(obj.date) 2023-07-01
2023-07-03 11:34:08.259 DBG qml:  Component.onDestruction of SevaBookingReportOnDateRange.qml
2023-07-03 11:34:08.324 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-07-03 11:34:08.325 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-07-03 11:34:08.328 WRN default: qrc:/ui/SevaBookingReportForSingleDate.qml:204:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:34:08.332 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.332 DBG default: 0 

2023-07-03 11:34:08.338 DBG qml: Component.completed: of SevaAccountReportForSingleDate.qml
2023-07-03 11:34:08.341 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:34:08.341 DBG qml: Screen screenWidth size =1920
2023-07-03 11:34:08.341 DBG qml: Screen screenHeight size =1000
2023-07-03 11:34:08.341 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadSingleDateBookingPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:34:08.341 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadMonthWiseBookingPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:34:08.341 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadDateWiseBookingForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:34:08.341 DBG qml: ******** 01-07-2023
2023-07-03 11:34:08.341 DBG default: void ReportFilterElements::setBSevawise(bool) 

2023-07-03 11:34:08.342 DBG default: void ReportFilterElements::setBDatewise(bool) 

2023-07-03 11:34:08.342 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:34:08.342 DBG default: void ReportFilterElements::setSStartDate(const QString&) 

2023-07-03 11:34:08.342 DBG default: void ReportFilterElements::setSEndDate(const QString&) 

2023-07-03 11:34:08.342 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:34:08.342 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:34:08.342 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:34:08.342 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-03 11:34:08.342 DBG default: bool ReportFilterElements::bSevawise() const 

2023-07-03 11:34:08.342 DBG qml: In Loader of booking report page _rip.bSevawisetrue
2023-07-03 11:34:08.342 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-03 11:34:08.342 DBG qml: In Loader of booking report page _rip.bDatewisefalse
2023-07-03 11:34:08.342 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:08.342 DBG qml: In Loader of booking report page _rip.sSingleDate01-07-2023
2023-07-03 11:34:08.342 DBG default: const QString& ReportFilterElements::sStartDate() const 

2023-07-03 11:34:08.342 DBG qml: In Loader of booking report page  _rip.sStartDatenull
2023-07-03 11:34:08.342 DBG default: const QString& ReportFilterElements::sEndDate() const 

2023-07-03 11:34:08.342 DBG qml: In Loader of booking report page    _rip.sEndDate null
2023-07-03 11:34:08.342 DBG qml: In Loader of booking report page     _rip.iSelectedType0
2023-07-03 11:34:08.342 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:34:08.342 DBG qml: In Loader of booking report page    _rip.iSevaType 0
2023-07-03 11:34:08.342 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:34:08.342 DBG qml: In Loader of booking report page    _rip.sSevaNameAll
2023-07-03 11:34:08.342 DBG qml: In main
2023-07-03 11:34:08.342 DBG default: void SevaReport::generateBookReport(ReportFilterElements*) 

2023-07-03 11:34:08.342 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.342 DBG default: 0 

2023-07-03 11:34:08.342 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.342 DBG default: 0 

2023-07-03 11:34:08.342 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 0 

2023-07-03 11:34:08.342 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) 

2023-07-03 11:34:08.342 DBG default: Selected Type  0 

2023-07-03 11:34:08.342 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:34:08.342 DBG default: Selected Month  0 

2023-07-03 11:34:08.342 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:34:08.342 DBG default: Selected Year  0 

2023-07-03 11:34:08.342 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:08.342 DBG default: Selected date  "01-07-2023" 

2023-07-03 11:34:08.342 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) Inside c date book rep 

2023-07-03 11:34:08.342 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:08.342 DBG default: QString BookingReportModel::FormatDate(QString) "01-07-2023" 

2023-07-03 11:34:08.343 DBG default: QString BookingReportModel::FormatDate(QString) QDate("2023-07-01") 

2023-07-03 11:34:08.343 DBG default: QString BookingReportModel::FormatDate(QString) "2023-07-01" 

2023-07-03 11:34:08.343 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:34:08.343 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:08.343 DBG default: void BookingReportModel::generateBookReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-07-01" 

2023-07-03 11:34:08.343 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:34:08.343 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:34:08.343 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:08.343 DBG default: 
Changed format is:  "2023-07-01" 

2023-07-03 11:34:08.343 DBG default: In type 0:  

2023-07-03 11:34:08.343 DBG default:  Query string = "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.343 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-07-03 11:34:08.343 DBG default:  Query string = true 

2023-07-03 11:34:08.343 DBG default:  Query prepared successfully = true 

2023-07-03 11:34:08.343 DBG default:  Query string =111111111111111111111 QSqlError("", "", "") 

2023-07-03 11:34:08.343 DBG default:  Query string =2222222222222 "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.343 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.343 DBG default: 999999999999999999999999 "Hasthodaka" 

2023-07-03 11:34:08.343 DBG default: 88888888888888888888888888 0 

2023-07-03 11:34:08.343 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.343 DBG default: 999999999999999999999999 "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:34:08.343 DBG default: 88888888888888888888888888 0 

2023-07-03 11:34:08.343 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.343 DBG default: 999999999999999999999999 "M Navami Pavamana Homa" 

2023-07-03 11:34:08.343 DBG default: 88888888888888888888888888 0 

2023-07-03 11:34:08.343 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.344 DBG default: 999999999999999999999999 "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:34:08.344 DBG default: 88888888888888888888888888 0 

2023-07-03 11:34:08.344 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.344 DBG default: 999999999999999999999999 "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:34:08.344 DBG default: 88888888888888888888888888 0 

2023-07-03 11:34:08.344 DBG default:  Query string inside 1st while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.344 DBG default: 999999999999999999999999 "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:34:08.344 DBG default: 88888888888888888888888888 0 

2023-07-03 11:34:08.344 DBG default: query while/********** 

2023-07-03 11:34:08.344 DBG default: query while/******1**** 

2023-07-03 11:34:08.344 DBG default: query while/*****2***** 

2023-07-03 11:34:08.344 DBG default: query while/*****3***** true 

2023-07-03 11:34:08.344 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'Hasthodaka' and SEVATYPE = '1';" 

2023-07-03 11:34:08.344 DBG default: query ifeee/*****5***** 

2023-07-03 11:34:08.344 DBG default: query while/*****5***** 

2023-07-03 11:34:08.344 DBG default: query while/********** 

2023-07-03 11:34:08.344 DBG default: query while/******1**** 

2023-07-03 11:34:08.344 DBG default: query while/*****2***** 

2023-07-03 11:34:08.344 DBG default: query while/*****3***** true 

2023-07-03 11:34:08.344 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'M Navami Sampoorna Annadana Seva' and SEVATYPE = '3';" 

2023-07-03 11:34:08.344 DBG default: query ifeee/*****5***** 

2023-07-03 11:34:08.344 DBG default: query while/*****5***** 

2023-07-03 11:34:08.344 DBG default: query while/********** 

2023-07-03 11:34:08.344 DBG default: query while/******1**** 

2023-07-03 11:34:08.344 DBG default: query while/*****2***** 

2023-07-03 11:34:08.344 DBG default: query while/*****3***** true 

2023-07-03 11:34:08.344 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'M Navami Pavamana Homa' and SEVATYPE = '3';" 

2023-07-03 11:34:08.344 DBG default: query ifeee/*****5***** 

2023-07-03 11:34:08.344 DBG default: query while/*****5***** 

2023-07-03 11:34:08.344 DBG default: query while/********** 

2023-07-03 11:34:08.344 DBG default: query while/******1**** 

2023-07-03 11:34:08.344 DBG default: query while/*****2***** 

2023-07-03 11:34:08.344 DBG default: query while/*****3***** true 

2023-07-03 11:34:08.345 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'SRI RAMA TARAKA HOMA SANKALPA' and SEVATYPE = '2';" 

2023-07-03 11:34:08.345 DBG default: query ifeee/*****5***** 

2023-07-03 11:34:08.345 DBG default: query while/*****5***** 

2023-07-03 11:34:08.345 DBG default: query while/********** 

2023-07-03 11:34:08.345 DBG default: query while/******1**** 

2023-07-03 11:34:08.345 DBG default: query while/*****2***** 

2023-07-03 11:34:08.345 DBG default: query while/*****3***** true 

2023-07-03 11:34:08.345 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'PRATIDINA PRAVACHANA SEVE ' and SEVATYPE = '2';" 

2023-07-03 11:34:08.345 DBG default: query ifeee/*****5***** 

2023-07-03 11:34:08.345 DBG default: query while/*****5***** 

2023-07-03 11:34:08.345 DBG default: query while/********** 

2023-07-03 11:34:08.345 DBG default: query while/******1**** 

2023-07-03 11:34:08.345 DBG default: query while/*****2***** 

2023-07-03 11:34:08.345 DBG default: query while/*****3***** true 

2023-07-03 11:34:08.345 DBG default: query while/*****4***** true "select sevaname.THEERTHAPRASADA from sevaname where SEVANAME = 'YELLA DINAGALA PRAVACHANA SEVE' and SEVATYPE = '2';" 

2023-07-03 11:34:08.345 DBG default: query ifeee/*****5***** 

2023-07-03 11:34:08.345 DBG default: query while/*****5***** 

2023-07-03 11:34:08.345 DBG default:  Query string =@@@@@@@@@@@@@ QSqlError("", "", "") 

2023-07-03 11:34:08.345 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.345 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-07-03 11:34:08.345 DBG default: Sl No-- "Suman N" 

2023-07-03 11:34:08.345 DBG default: name-- "Kashyapa" 

2023-07-03 11:34:08.345 DBG default: gothra-- "Shathabhisha" 

2023-07-03 11:34:08.345 DBG default: nakshatra-- "Hasthodaka" 

2023-07-03 11:34:08.345 DBG default: seva-- "9481914363" 

2023-07-03 11:34:08.345 DBG default: mobile-- "" 

2023-07-03 11:34:08.345 DBG default: note-- "1" 

2023-07-03 11:34:08.345 DBG default: prasada-- "2023-07-01" 

2023-07-03 11:34:08.345 DBG default: SDate-- "2023-07-01" 

2023-07-03 11:34:08.345 DBG default: Rdate-- "200" 

2023-07-03 11:34:08.345 DBG default: total-- "" 

2023-07-03 11:34:08.345 DBG default: paymode-- "" 

2023-07-03 11:34:08.345 DBG default: refrence-- "" 

2023-07-03 11:34:08.345 DBG default: address-- "1" 

2023-07-03 11:34:08.345 DBG default: before emitting signal  booking_report '''''''' 

2023-07-03 11:34:08.345 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-07-03 11:34:08.346 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.346 DBG default: 0 

2023-07-03 11:34:08.346 DBG default: "Suman N" 

2023-07-03 11:34:08.346 DBG default: "Kashyapa" 

2023-07-03 11:34:08.346 DBG default: "Shathabhisha" 

2023-07-03 11:34:08.346 DBG default: "Hasthodaka" 

2023-07-03 11:34:08.346 DBG default: "9481914363" 

2023-07-03 11:34:08.346 DBG default: "" 

2023-07-03 11:34:08.346 DBG default: after emitting signal  booking_report '''''''' 

2023-07-03 11:34:08.346 DBG default: after increment 1 

2023-07-03 11:34:08.346 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.346 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-07-03 11:34:08.346 DBG default: Sl No-- "Suman N" 

2023-07-03 11:34:08.346 DBG default: name-- "Kashyapa" 

2023-07-03 11:34:08.346 DBG default: gothra-- "Shathabhisha" 

2023-07-03 11:34:08.346 DBG default: nakshatra-- "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:34:08.346 DBG default: seva-- "9481914363" 

2023-07-03 11:34:08.346 DBG default: mobile-- "paid" 

2023-07-03 11:34:08.346 DBG default: note-- "3" 

2023-07-03 11:34:08.346 DBG default: prasada-- "2023-07-01" 

2023-07-03 11:34:08.346 DBG default: SDate-- "2023-07-01" 

2023-07-03 11:34:08.346 DBG default: Rdate-- "10000" 

2023-07-03 11:34:08.346 DBG default: total-- "" 

2023-07-03 11:34:08.346 DBG default: paymode-- "123456788901" 

2023-07-03 11:34:08.346 DBG default: refrence-- "rrn" 

2023-07-03 11:34:08.346 DBG default: address-- "1" 

2023-07-03 11:34:08.346 DBG default: before emitting signal  booking_report '''''''' 

2023-07-03 11:34:08.346 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-07-03 11:34:08.346 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.346 DBG default: 1 

2023-07-03 11:34:08.346 DBG default: "Suman N" 

2023-07-03 11:34:08.346 DBG default: "Kashyapa" 

2023-07-03 11:34:08.346 DBG default: "Shathabhisha" 

2023-07-03 11:34:08.346 DBG default: "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:34:08.346 DBG default: "9481914363" 

2023-07-03 11:34:08.346 DBG default: "paid" 

2023-07-03 11:34:08.346 DBG default: after emitting signal  booking_report '''''''' 

2023-07-03 11:34:08.346 DBG default: after increment 2 

2023-07-03 11:34:08.346 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.346 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-07-03 11:34:08.346 DBG default: Sl No-- "Suman N" 

2023-07-03 11:34:08.346 DBG default: name-- "Kashyapa" 

2023-07-03 11:34:08.346 DBG default: gothra-- "Shathabhisha" 

2023-07-03 11:34:08.346 DBG default: nakshatra-- "M Navami Pavamana Homa" 

2023-07-03 11:34:08.346 DBG default: seva-- "9481914363" 

2023-07-03 11:34:08.346 DBG default: mobile-- "done" 

2023-07-03 11:34:08.346 DBG default: note-- "3" 

2023-07-03 11:34:08.346 DBG default: prasada-- "2023-07-01" 

2023-07-03 11:34:08.346 DBG default: SDate-- "2023-07-01" 

2023-07-03 11:34:08.346 DBG default: Rdate-- "5000" 

2023-07-03 11:34:08.346 DBG default: total-- "" 

2023-07-03 11:34:08.346 DBG default: paymode-- "" 

2023-07-03 11:34:08.346 DBG default: refrence-- "rrn" 

2023-07-03 11:34:08.346 DBG default: address-- "1" 

2023-07-03 11:34:08.346 DBG default: before emitting signal  booking_report '''''''' 

2023-07-03 11:34:08.346 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-07-03 11:34:08.347 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.347 DBG default: 2 

2023-07-03 11:34:08.347 DBG default: "Suman N" 

2023-07-03 11:34:08.347 DBG default: "Kashyapa" 

2023-07-03 11:34:08.347 DBG default: "Shathabhisha" 

2023-07-03 11:34:08.347 DBG default: "M Navami Pavamana Homa" 

2023-07-03 11:34:08.347 DBG default: "9481914363" 

2023-07-03 11:34:08.347 DBG default: "done" 

2023-07-03 11:34:08.347 DBG default: after emitting signal  booking_report '''''''' 

2023-07-03 11:34:08.347 DBG default: after increment 3 

2023-07-03 11:34:08.347 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.347 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-07-03 11:34:08.347 DBG default: Sl No-- "Suman N" 

2023-07-03 11:34:08.347 DBG default: name-- "Kashyapa" 

2023-07-03 11:34:08.347 DBG default: gothra-- "Shathabhisha" 

2023-07-03 11:34:08.347 DBG default: nakshatra-- "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:34:08.347 DBG default: seva-- "9481914363" 

2023-07-03 11:34:08.347 DBG default: mobile-- "paid" 

2023-07-03 11:34:08.347 DBG default: note-- "2" 

2023-07-03 11:34:08.347 DBG default: prasada-- "2023-07-01" 

2023-07-03 11:34:08.347 DBG default: SDate-- "2023-07-01" 

2023-07-03 11:34:08.347 DBG default: Rdate-- "150" 

2023-07-03 11:34:08.347 DBG default: total-- "" 

2023-07-03 11:34:08.347 DBG default: paymode-- "" 

2023-07-03 11:34:08.347 DBG default: refrence-- "rrn" 

2023-07-03 11:34:08.347 DBG default: address-- "1" 

2023-07-03 11:34:08.347 DBG default: before emitting signal  booking_report '''''''' 

2023-07-03 11:34:08.347 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-07-03 11:34:08.347 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.347 DBG default: 3 

2023-07-03 11:34:08.347 DBG default: "Suman N" 

2023-07-03 11:34:08.347 DBG default: "Kashyapa" 

2023-07-03 11:34:08.347 DBG default: "Shathabhisha" 

2023-07-03 11:34:08.347 DBG default: "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:34:08.347 DBG default: "9481914363" 

2023-07-03 11:34:08.347 DBG default: "paid" 

2023-07-03 11:34:08.347 DBG default: after emitting signal  booking_report '''''''' 

2023-07-03 11:34:08.347 DBG default: after increment 4 

2023-07-03 11:34:08.347 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.347 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-07-03 11:34:08.347 DBG default: Sl No-- "Suman N" 

2023-07-03 11:34:08.347 DBG default: name-- "Kashyapa" 

2023-07-03 11:34:08.347 DBG default: gothra-- "Shathabhisha" 

2023-07-03 11:34:08.347 DBG default: nakshatra-- "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:34:08.347 DBG default: seva-- "9481914363" 

2023-07-03 11:34:08.347 DBG default: mobile-- "paid" 

2023-07-03 11:34:08.347 DBG default: note-- "2" 

2023-07-03 11:34:08.347 DBG default: prasada-- "2023-07-01" 

2023-07-03 11:34:08.347 DBG default: SDate-- "2023-07-01" 

2023-07-03 11:34:08.347 DBG default: Rdate-- "600" 

2023-07-03 11:34:08.347 DBG default: total-- "" 

2023-07-03 11:34:08.347 DBG default: paymode-- "123456789" 

2023-07-03 11:34:08.347 DBG default: refrence-- "" 

2023-07-03 11:34:08.347 DBG default: address-- "1" 

2023-07-03 11:34:08.347 DBG default: before emitting signal  booking_report '''''''' 

2023-07-03 11:34:08.347 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-07-03 11:34:08.347 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.348 DBG default: 4 

2023-07-03 11:34:08.348 DBG default: "Suman N" 

2023-07-03 11:34:08.348 DBG default: "Kashyapa" 

2023-07-03 11:34:08.348 DBG default: "Shathabhisha" 

2023-07-03 11:34:08.348 DBG default: "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:34:08.348 DBG default: "9481914363" 

2023-07-03 11:34:08.348 DBG default: "paid" 

2023-07-03 11:34:08.348 DBG default: after emitting signal  booking_report '''''''' 

2023-07-03 11:34:08.348 DBG default: after increment 5 

2023-07-03 11:34:08.348 DBG default:  Query string inside 2nd while = book rep "select persondetails.PERSONNAME,persondetails.GOTHRA,persondetails.NAKSHATRA,sevabooking.SEVANAME,persondetails.MOBILE,sevabooking.NOTE,sevabooking.SEVATYPE,sevabooking.SEVA_DATE,sevabooking.RECEIPT_DATE,sevabooking.SEVATOTALPRICE,sevabooking.BANK,sevabooking.REFERENCE,sevabooking.ADDRESS,sevabooking.QUANTITY from sevabooking,persondetails where sevabooking.PERSONID = persondetails.SNO and sevabooking.RECEIPT_DATE='2023-07-01';" 

2023-07-03 11:34:08.348 DBG default:  kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk 

2023-07-03 11:34:08.348 DBG default: Sl No-- "Suman N" 

2023-07-03 11:34:08.348 DBG default: name-- "Kashyapa" 

2023-07-03 11:34:08.348 DBG default: gothra-- "Shathabhisha" 

2023-07-03 11:34:08.348 DBG default: nakshatra-- "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:34:08.348 DBG default: seva-- "9481914363" 

2023-07-03 11:34:08.348 DBG default: mobile-- "paid" 

2023-07-03 11:34:08.348 DBG default: note-- "2" 

2023-07-03 11:34:08.348 DBG default: prasada-- "2023-07-01" 

2023-07-03 11:34:08.348 DBG default: SDate-- "2023-07-01" 

2023-07-03 11:34:08.348 DBG default: Rdate-- "6000" 

2023-07-03 11:34:08.348 DBG default: total-- "" 

2023-07-03 11:34:08.348 DBG default: paymode-- "1234567890" 

2023-07-03 11:34:08.348 DBG default: refrence-- "" 

2023-07-03 11:34:08.348 DBG default: address-- "1" 

2023-07-03 11:34:08.348 DBG default: before emitting signal  booking_report '''''''' 

2023-07-03 11:34:08.348 DBG default: bool BookingReportModel::insertSevaRow(BookingReportElement*) 

2023-07-03 11:34:08.348 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.348 DBG default: 5 

2023-07-03 11:34:08.348 DBG default: "Suman N" 

2023-07-03 11:34:08.348 DBG default: "Kashyapa" 

2023-07-03 11:34:08.348 DBG default: "Shathabhisha" 

2023-07-03 11:34:08.348 DBG default: "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:34:08.348 DBG default: "9481914363" 

2023-07-03 11:34:08.348 DBG default: "paid" 

2023-07-03 11:34:08.348 DBG default: after emitting signal  booking_report '''''''' 

2023-07-03 11:34:08.348 DBG default: after increment 6 

2023-07-03 11:34:08.348 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-03 11:34:08.348 DBG default: false 

2023-07-03 11:34:08.348 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:34:08.348 DBG default: "2023-07-01" 

2023-07-03 11:34:08.349 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.349 DBG default: 6 

2023-07-03 11:34:08.349 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.349 DBG default: 6 

2023-07-03 11:34:08.349 DBG default: virtual QHash<int, QByteArray> BookingReportModel::roleNames() const 

2023-07-03 11:34:08.350 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.350 DBG default: 6 

2023-07-03 11:34:08.350 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.350 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.350 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-07-03 11:34:08.350 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.350 DBG default: 6 

2023-07-03 11:34:08.350 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.350 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.350 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-07-03 11:34:08.350 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.350 DBG default: 6 

2023-07-03 11:34:08.350 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.350 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.350 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shathabhisha" 

2023-07-03 11:34:08.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.351 DBG default: 6 

2023-07-03 11:34:08.351 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasthodaka" 

2023-07-03 11:34:08.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.351 DBG default: 6 

2023-07-03 11:34:08.351 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-07-03 11:34:08.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.351 DBG default: 6 

2023-07-03 11:34:08.351 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.351 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-07-03 11:34:08.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.351 DBG default: 6 

2023-07-03 11:34:08.351 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.351 DBG default: 6 

2023-07-03 11:34:08.352 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.352 DBG default: 6 

2023-07-03 11:34:08.352 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.352 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.352 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-07-03 11:34:08.352 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.352 DBG default: 6 

2023-07-03 11:34:08.352 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.352 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.352 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-07-03 11:34:08.353 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.353 DBG default: 6 

2023-07-03 11:34:08.353 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shathabhisha" 

2023-07-03 11:34:08.353 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.353 DBG default: 6 

2023-07-03 11:34:08.353 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.353 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:34:08.353 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.353 DBG default: 6 

2023-07-03 11:34:08.353 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.354 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.354 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-07-03 11:34:08.354 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.354 DBG default: 6 

2023-07-03 11:34:08.354 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.354 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.354 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-07-03 11:34:08.354 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.354 DBG default: 6 

2023-07-03 11:34:08.354 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.354 DBG default: 6 

2023-07-03 11:34:08.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.355 DBG default: 6 

2023-07-03 11:34:08.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-07-03 11:34:08.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.355 DBG default: 6 

2023-07-03 11:34:08.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-07-03 11:34:08.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.355 DBG default: 6 

2023-07-03 11:34:08.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shathabhisha" 

2023-07-03 11:34:08.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.355 DBG default: 6 

2023-07-03 11:34:08.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "M Navami Pavamana Homa" 

2023-07-03 11:34:08.355 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.355 DBG default: 6 

2023-07-03 11:34:08.355 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.355 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-07-03 11:34:08.356 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.356 DBG default: 6 

2023-07-03 11:34:08.356 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.356 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "done" 

2023-07-03 11:34:08.356 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.356 DBG default: 6 

2023-07-03 11:34:08.356 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.356 DBG default: 6 

2023-07-03 11:34:08.356 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.356 DBG default: 6 

2023-07-03 11:34:08.356 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-07-03 11:34:08.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.357 DBG default: 6 

2023-07-03 11:34:08.357 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-07-03 11:34:08.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.357 DBG default: 6 

2023-07-03 11:34:08.357 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shathabhisha" 

2023-07-03 11:34:08.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.357 DBG default: 6 

2023-07-03 11:34:08.357 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.357 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:34:08.357 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.358 DBG default: 6 

2023-07-03 11:34:08.358 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-07-03 11:34:08.358 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.358 DBG default: 6 

2023-07-03 11:34:08.358 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.358 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-07-03 11:34:08.358 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.358 DBG default: 6 

2023-07-03 11:34:08.358 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.358 DBG default: 6 

2023-07-03 11:34:08.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.359 DBG default: 6 

2023-07-03 11:34:08.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-07-03 11:34:08.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.359 DBG default: 6 

2023-07-03 11:34:08.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-07-03 11:34:08.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.359 DBG default: 6 

2023-07-03 11:34:08.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shathabhisha" 

2023-07-03 11:34:08.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.359 DBG default: 6 

2023-07-03 11:34:08.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:34:08.359 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.359 DBG default: 6 

2023-07-03 11:34:08.359 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.359 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-07-03 11:34:08.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.360 DBG default: 6 

2023-07-03 11:34:08.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-07-03 11:34:08.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.360 DBG default: 6 

2023-07-03 11:34:08.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.360 DBG default: 6 

2023-07-03 11:34:08.360 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.360 DBG default: 6 

2023-07-03 11:34:08.360 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.360 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-07-03 11:34:08.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.361 DBG default: 6 

2023-07-03 11:34:08.361 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-07-03 11:34:08.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.361 DBG default: 6 

2023-07-03 11:34:08.361 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shathabhisha" 

2023-07-03 11:34:08.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.361 DBG default: 6 

2023-07-03 11:34:08.361 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:34:08.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.361 DBG default: 6 

2023-07-03 11:34:08.361 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-07-03 11:34:08.361 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.361 DBG default: 6 

2023-07-03 11:34:08.361 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.361 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-07-03 11:34:08.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.362 DBG default: 6 

2023-07-03 11:34:08.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.362 DBG default: 6 

2023-07-03 11:34:08.362 DBG default: virtual QHash<int, QByteArray> BookingReportModel::roleNames() const 

2023-07-03 11:34:08.362 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.362 DBG default: 6 

2023-07-03 11:34:08.362 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.362 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: 6 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: 6 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shathabhisha" 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: 6 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Hasthodaka" 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: 6 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: 6 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: 6 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.363 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "" 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: 6 

2023-07-03 11:34:08.363 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.363 DBG default: 6 

2023-07-03 11:34:08.364 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.364 DBG default: 6 

2023-07-03 11:34:08.364 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-07-03 11:34:08.364 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.364 DBG default: 6 

2023-07-03 11:34:08.364 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-07-03 11:34:08.364 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.364 DBG default: 6 

2023-07-03 11:34:08.364 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shathabhisha" 

2023-07-03 11:34:08.364 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.364 DBG default: 6 

2023-07-03 11:34:08.364 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.364 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "M Navami Sampoorna Annadana Seva" 

2023-07-03 11:34:08.365 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.365 DBG default: 6 

2023-07-03 11:34:08.365 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-07-03 11:34:08.365 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.365 DBG default: 6 

2023-07-03 11:34:08.365 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-07-03 11:34:08.365 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.365 DBG default: 6 

2023-07-03 11:34:08.365 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.365 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-07-03 11:34:08.365 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.365 DBG default: 6 

2023-07-03 11:34:08.365 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.365 DBG default: 6 

2023-07-03 11:34:08.366 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.366 DBG default: 6 

2023-07-03 11:34:08.366 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-07-03 11:34:08.366 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.366 DBG default: 6 

2023-07-03 11:34:08.366 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-07-03 11:34:08.366 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.366 DBG default: 6 

2023-07-03 11:34:08.366 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shathabhisha" 

2023-07-03 11:34:08.366 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.366 DBG default: 6 

2023-07-03 11:34:08.366 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "M Navami Pavamana Homa" 

2023-07-03 11:34:08.366 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.366 DBG default: 6 

2023-07-03 11:34:08.366 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-07-03 11:34:08.366 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.366 DBG default: 6 

2023-07-03 11:34:08.366 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.366 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-07-03 11:34:08.367 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.367 DBG default: 6 

2023-07-03 11:34:08.367 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "done" 

2023-07-03 11:34:08.367 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.367 DBG default: 6 

2023-07-03 11:34:08.367 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.367 DBG default: 6 

2023-07-03 11:34:08.367 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.367 DBG default: 6 

2023-07-03 11:34:08.367 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-07-03 11:34:08.367 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.367 DBG default: 6 

2023-07-03 11:34:08.367 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.367 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-07-03 11:34:08.368 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.368 DBG default: 6 

2023-07-03 11:34:08.368 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shathabhisha" 

2023-07-03 11:34:08.368 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.368 DBG default: 6 

2023-07-03 11:34:08.368 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "SRI RAMA TARAKA HOMA SANKALPA" 

2023-07-03 11:34:08.368 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.368 DBG default: 6 

2023-07-03 11:34:08.368 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-07-03 11:34:08.368 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.368 DBG default: 6 

2023-07-03 11:34:08.368 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-07-03 11:34:08.368 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.368 DBG default: 6 

2023-07-03 11:34:08.368 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.368 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-07-03 11:34:08.368 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.368 DBG default: 6 

2023-07-03 11:34:08.368 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.368 DBG default: 6 

2023-07-03 11:34:08.369 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.369 DBG default: 6 

2023-07-03 11:34:08.369 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-07-03 11:34:08.369 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.369 DBG default: 6 

2023-07-03 11:34:08.369 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-07-03 11:34:08.369 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.369 DBG default: 6 

2023-07-03 11:34:08.369 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shathabhisha" 

2023-07-03 11:34:08.369 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.369 DBG default: 6 

2023-07-03 11:34:08.369 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "PRATIDINA PRAVACHANA SEVE " 

2023-07-03 11:34:08.369 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.369 DBG default: 6 

2023-07-03 11:34:08.369 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-07-03 11:34:08.369 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.369 DBG default: 6 

2023-07-03 11:34:08.369 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.369 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-07-03 11:34:08.370 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.370 DBG default: 6 

2023-07-03 11:34:08.370 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.370 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.370 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-07-03 11:34:08.370 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.370 DBG default: 6 

2023-07-03 11:34:08.370 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.370 DBG default: 6 

2023-07-03 11:34:08.370 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.370 DBG default: 6 

2023-07-03 11:34:08.370 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.370 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.370 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Suman N" 

2023-07-03 11:34:08.370 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.370 DBG default: 6 

2023-07-03 11:34:08.370 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.370 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.370 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Kashyapa" 

2023-07-03 11:34:08.370 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.370 DBG default: 6 

2023-07-03 11:34:08.370 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.370 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "Shathabhisha" 

2023-07-03 11:34:08.371 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.371 DBG default: 6 

2023-07-03 11:34:08.371 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "YELLA DINAGALA PRAVACHANA SEVE" 

2023-07-03 11:34:08.371 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.371 DBG default: 6 

2023-07-03 11:34:08.371 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 0 

2023-07-03 11:34:08.371 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.371 DBG default: 6 

2023-07-03 11:34:08.371 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "9481914363" 

2023-07-03 11:34:08.371 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:34:08.371 DBG default: 6 

2023-07-03 11:34:08.371 DBG default: virtual int BookingReportModel::columnCount(const QModelIndex&) const 

2023-07-03 11:34:08.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const 

2023-07-03 11:34:08.371 DBG default: virtual QVariant BookingReportModel::data(const QModelIndex&, int) const "paid" 

2023-07-03 11:36:37.246 DBG qml: Esc pressed in SevaAccountReportForSingleDate 
2023-07-03 11:36:37.261 DBG qml: In onLoadDateWiseBookingPage
2023-07-03 11:36:37.261 DBG qml:  Component.onDestruction of SevaAccountReportForSingleDate.qml
2023-07-03 11:36:37.261 DBG default: void SevaReport::resetBookingDateRangeModel() 

2023-07-03 11:36:37.261 DBG default: void BookingReportDateRangeModel::resetBookingDateRangeModel() 

2023-07-03 11:36:37.265 DBG default: BookingReportModel* SevaReport::bookingReportModel() const 

2023-07-03 11:36:37.268 WRN default: qrc:/ui/SevaBookingReportOnDateRange.qml:276:5: QML Connections: Implicitly defined onFoo properties in Connections are deprecated. Use this syntax instead: function onFoo(<arguments>) { ... }
2023-07-03 11:36:37.268 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:36:37.269 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:36:37.269 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:36:37.269 DBG default: virtual QHash<int, QByteArray> BookingReportDateRangeModel::roleNames() const 

2023-07-03 11:36:37.273 DBG qml: Component.completed: of SevaBookingReportOnDateRange.qml
2023-07-03 11:36:37.274 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:36:37.274 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:36:37.274 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:36:37.274 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 1 

2023-07-03 11:36:37.275 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:36:37.275 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:36:37.275 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:36:37.275 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-01" 

2023-07-03 11:36:37.275 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:36:37.275 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:36:37.275 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:36:37.275 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 6 

2023-07-03 11:36:37.276 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:36:37.276 DBG qml: Screen screenWidth size =1920
2023-07-03 11:36:37.276 DBG qml: Screen screenHeight size =1000
2023-07-03 11:36:37.276 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadDateWiseBookingPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:36:37.276 WRN default: qrc:/ui/BookingReportPage.qml:227:17: QML Connections: Detected function "onLoadDateWiseBookingForSlectedMonthPage" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.
2023-07-03 11:36:37.278 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:36:37.278 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:36:37.278 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:36:37.278 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:36:37.278 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:36:37.278 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 2 

2023-07-03 11:36:37.278 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:36:37.278 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:36:37.278 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:36:37.278 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const "2023-07-02" 

2023-07-03 11:36:37.279 DBG default: virtual int BookingReportDateRangeModel::rowCount(const QModelIndex&) const 2 

2023-07-03 11:36:37.279 DBG default: virtual int BookingReportDateRangeModel::columnCount(const QModelIndex&) const 

2023-07-03 11:36:37.279 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 

2023-07-03 11:36:37.279 DBG default: virtual QVariant BookingReportDateRangeModel::data(const QModelIndex&, int) const 9 

2023-07-03 11:36:38.333 DBG qml: Esc pressed in  seva booking report on Date Range pageJuly
2023-07-03 11:36:38.333 DBG qml: Esc pressed in  seva booking report on Date Range page loadMenuPage();
2023-07-03 11:36:38.333 DBG qml: In onLoadMenuPage
2023-07-03 11:36:38.333 DBG qml: loading Menu page from main
2023-07-03 11:36:38.333 DBG qml: Closing the report
2023-07-03 11:36:38.333 DBG qml: reset DateRangeModel
2023-07-03 11:36:38.333 DBG default: void BookingReportModel::resetBookingModel() 

2023-07-03 11:36:38.333 DBG default: virtual int BookingReportModel::rowCount(const QModelIndex&) const 

2023-07-03 11:36:38.333 DBG default: 0 

2023-07-03 11:36:38.345 DBG qml:  Component.onDestruction of SevaBookingReportOnDateRange.qml
2023-07-03 11:36:38.359 DBG qml: the accounts enable true
2023-07-03 11:36:38.359 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:36:38.359 DBG qml: Screen screenWidth size =1920
2023-07-03 11:36:38.359 DBG qml: Screen screenHeight size =1000
2023-07-03 11:36:38.359 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:36:38.359 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:36:38.359 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:36:38.359 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:36:41.253 DBG qml: account details button clicked
2023-07-03 11:36:41.253 DBG qml: Clicked on AccountDetails
2023-07-03 11:36:41.273 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:36:41.273 DBG default: int AccountReportModel::iGrandTotal() const 0 

2023-07-03 11:36:41.273 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:36:41.288 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:36:41.295 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-07-03 11:36:41.295 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:36:41.295 DBG qml: accont report Selected year2015
2023-07-03 11:36:41.296 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-07-03 11:36:41.296 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:36:41.296 DBG qml: Selected month1
2023-07-03 11:36:41.297 WRN default: qrc:/ui/components/MyReportFilter.qml:328:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.297 WRN default: qrc:/ui/components/MyReportFilter.qml:339:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.351 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.351 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.373 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.374 WRN default: qrc:/ui/components/MyReportFilter.qml:126:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.374 WRN default: qrc:/ui/components/MyReportFilter.qml:164:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.375 WRN default: qrc:/ui/components/MyReportFilter.qml:328:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.375 WRN default: qrc:/ui/components/MyReportFilter.qml:339:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.375 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.375 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.375 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.375 WRN default: qrc:/ui/components/MyReportFilter.qml:126:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.375 WRN default: qrc:/ui/components/MyReportFilter.qml:164:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.376 DBG qml: In Component.onCompleted: of seva report page
2023-07-03 11:36:41.376 DBG qml: In  Component.onCompleted: loader srp
2023-07-03 11:36:41.376 DBG qml: In Component.onCompleted: of seva report page total text 0.00 ?
2023-07-03 11:36:41.377 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:36:41.377 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:36:41.377 DBG qml: The month and year initial 1   2015
2023-07-03 11:36:41.377 DBG qml:  Trying to get the list category
2023-07-03 11:36:41.377 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:36:41.377 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:36:41.377 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.377 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.377 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.377 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.377 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:36:41.377 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:36:41.377 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:36:41.377 DBG qml: 0
2023-07-03 11:36:41.377 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.377 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:36:41.377 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:36:41.377 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:36:41.377 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.377 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:36:41.377 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:36:41.378 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:36:41.378 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:36:41.378 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:36:41.378 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:36:41.378 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:36:41.378 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:36:41.378 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:36:41.378 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:36:41.378 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:36:41.378 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-03 11:36:41.378 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:36:41.378 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:36:41.378 DBG qml: Seva name selected : Nithya Archane
2023-07-03 11:36:41.378 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:36:41.378 DBG qml: Seva type selected in report filter : 0
2023-07-03 11:36:41.378 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.378 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.378 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.378 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:36:41.378 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:36:41.378 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:36:41.378 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:36:41.378 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:36:41.378 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:36:41.378 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:36:41.378 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:36:41.378 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:36:41.378 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:36:41.378 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:36:41.378 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:36:41.378 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-03 11:36:41.378 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:36:41.378 DBG default: void SevaReport::generateAccReport(ReportFilterElements*) 

2023-07-03 11:36:41.378 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:36:41.378 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) 0 

2023-07-03 11:36:41.378 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:41.378 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm date "03-07-2023" 

2023-07-03 11:36:41.378 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:36:41.378 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:36:41.378 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm ddetails "All" 0 

2023-07-03 11:36:41.378 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) Inside c date acc rep 

2023-07-03 11:36:41.378 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:41.378 DBG default: QString AccountReportModel::FormatDate(QString) "03-07-2023" 

2023-07-03 11:36:41.378 DBG default: QString AccountReportModel::FormatDate(QString) QDate("2023-07-03") 

2023-07-03 11:36:41.378 DBG default: QString AccountReportModel::FormatDate(QString) "2023-07-03" 

2023-07-03 11:36:41.378 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:36:41.378 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:41.379 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-07-03" 

2023-07-03 11:36:41.379 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:41.379 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:36:41.379 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:36:41.379 DBG default: void DBInterface::account_report_cdate_function(QString, int, QString) 

2023-07-03 11:36:41.379 DBG default: "2023-07-03" ^^^^^^^^^^^^^^^^^^^^^^^^^^  "All"    0 

2023-07-03 11:36:41.379 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-03 11:36:41.379 DBG default: First 

2023-07-03 11:36:41.379 DBG default:  Query string = "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-03' Group by sevabooking.SEVANAME; " 

2023-07-03 11:36:41.379 DBG default: inside cash true 

2023-07-03 11:36:41.379 DBG default:  Query string Acc rep true 

2023-07-03 11:36:41.379 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-03 11:36:41.379 DBG default: true 

2023-07-03 11:36:41.379 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:41.379 DBG default: "2023-07-03" 

2023-07-03 11:36:41.379 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:41.379 DBG qml: ******** 03-07-2023
2023-07-03 11:36:41.379 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:36:41.379 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:41.379 DBG qml:   _rip.sSingleDate 203-07-2023
2023-07-03 11:36:41.379 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:36:41.379 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-03 11:36:41.379 DBG qml: Component.completed:if of sevaProxy.sevaReport.accReportModel.getAccountReportQryListSize()===0
2023-07-03 11:36:41.379 DBG qml: In onSendError
2023-07-03 11:36:41.380 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-07-03 11:36:41.380 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:36:41.380 DBG qml: accont report Selected year2023
2023-07-03 11:36:41.380 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-07-03 11:36:41.380 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:36:41.380 DBG qml: Selected month7
2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 1 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 2 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 3 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 4 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 5 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 6 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 7 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 8 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 9 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 10 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 11 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 12 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 13 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.380 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 14 

2023-07-03 11:36:41.380 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 15 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 16 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 17 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 18 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 19 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 20 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 21 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 22 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 23 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:41.381 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 24 

2023-07-03 11:36:41.381 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:36:41.381 DBG qml: Screen screenWidth size =1920
2023-07-03 11:36:41.381 DBG qml: Screen screenHeight size =1000
2023-07-03 11:36:41.381 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:36:41.381 DBG qml: Screen screenWidth size =1920
2023-07-03 11:36:41.381 DBG qml: Screen screenHeight size =1000
2023-07-03 11:36:41.381 DBG qml: this is admin
2023-07-03 11:36:41.382 WRN default: qrc:/ui/components/MyReportFilter.qml:126:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.382 WRN default: qrc:/ui/components/MyReportFilter.qml:164:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.382 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.382 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.382 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.382 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.397 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.397 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.397 WRN default: qrc:/ui/components/MyReportFilter.qml:328:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.397 WRN default: qrc:/ui/components/MyReportFilter.qml:339:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.397 WRN default: qrc:/ui/components/MyReportFilter.qml:328:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:41.397 WRN default: qrc:/ui/components/MyReportFilter.qml:339:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:44.753 DBG qml: Ok clicked
2023-07-03 11:36:46.590 DBG qml: Esc pressed in select seva report page
2023-07-03 11:36:46.590 DBG qml: loading Menu page from main
2023-07-03 11:36:46.590 DBG qml: Closing the report
2023-07-03 11:36:46.590 DBG qml: reset Model
2023-07-03 11:36:46.590 DBG default: void SevaReport::resetAccModel() 

2023-07-03 11:36:46.590 DBG default: void AccountReportModel::resetAccModel() 

2023-07-03 11:36:46.590 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:36:46.602 DBG qml: the accounts enable true
2023-07-03 11:36:46.602 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:36:46.602 DBG qml: Screen screenWidth size =1920
2023-07-03 11:36:46.602 DBG qml: Screen screenHeight size =1000
2023-07-03 11:36:46.603 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:36:46.603 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:36:46.603 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:36:46.603 WRN default: qrc:/ui/components/TempleButton.qml:10:5: Unable to assign [undefined] to double
2023-07-03 11:36:50.505 DBG qml: account details button clicked
2023-07-03 11:36:50.505 DBG qml: Clicked on AccountDetails
2023-07-03 11:36:50.529 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:36:50.529 DBG default: int AccountReportModel::iGrandTotal() const 0 

2023-07-03 11:36:50.529 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:36:50.532 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:36:50.537 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-07-03 11:36:50.537 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:36:50.537 DBG qml: accont report Selected year2015
2023-07-03 11:36:50.538 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-07-03 11:36:50.538 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:36:50.538 DBG qml: Selected month1
2023-07-03 11:36:50.538 WRN default: qrc:/ui/components/MyReportFilter.qml:328:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.538 WRN default: qrc:/ui/components/MyReportFilter.qml:339:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.587 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.587 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.611 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.612 WRN default: qrc:/ui/components/MyReportFilter.qml:126:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.612 WRN default: qrc:/ui/components/MyReportFilter.qml:164:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.612 WRN default: qrc:/ui/components/MyReportFilter.qml:328:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.612 WRN default: qrc:/ui/components/MyReportFilter.qml:339:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.612 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.612 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.613 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.613 WRN default: qrc:/ui/components/MyReportFilter.qml:126:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.613 WRN default: qrc:/ui/components/MyReportFilter.qml:164:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.613 DBG qml: In Component.onCompleted: of seva report page
2023-07-03 11:36:50.613 DBG qml: In  Component.onCompleted: loader srp
2023-07-03 11:36:50.613 DBG qml: In Component.onCompleted: of seva report page total text 0.00 ?
2023-07-03 11:36:50.614 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:36:50.614 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:36:50.614 DBG qml: The month and year initial 1   2015
2023-07-03 11:36:50.614 DBG qml:  Trying to get the list category
2023-07-03 11:36:50.614 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:36:50.614 DBG default: QAbstractItemModel* SevaViewProxy::getSevaTypeModel()  ############### 

2023-07-03 11:36:50.614 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.614 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.614 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.614 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.614 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:36:50.614 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:36:50.614 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:36:50.614 DBG qml: 0
2023-07-03 11:36:50.614 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.614 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:36:50.614 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:36:50.614 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:36:50.614 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.614 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:36:50.614 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:36:50.615 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:36:50.615 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:36:50.615 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:36:50.615 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:36:50.615 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:36:50.615 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:36:50.615 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:36:50.615 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:36:50.615 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:36:50.615 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-03 11:36:50.615 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:36:50.615 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:36:50.615 DBG qml: Seva name selected : Nithya Archane
2023-07-03 11:36:50.615 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:36:50.615 DBG qml: Seva type selected in report filter : 0
2023-07-03 11:36:50.615 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.615 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.615 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.615 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:36:50.615 DBG default: QAbstractItemModel* SevaViewProxy::getSevaModel(int)  Seva Type = 0 

2023-07-03 11:36:50.615 DBG default: void SevaListViewModel::initSevaList(int) hello 1  

2023-07-03 11:36:50.615 DBG default: static SevaTypeNamesDataModel* SevaTypeNamesDataModel::self() SevaTypeNamesDataModel Object is returned 

2023-07-03 11:36:50.615 DBG default: void SevaListViewModel::initSevaList(int) hello 2 

2023-07-03 11:36:50.615 DBG default: void SevaListViewModel::initSevaList(int) data model object ==  SevaTypeNamesDataModel(0x974da88) 

2023-07-03 11:36:50.615 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:36:50.615 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:36:50.615 DBG default: void SevaListViewModel::initSevaList(int) (SevaName(0x97eb488)) 

2023-07-03 11:36:50.615 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Seva Type = 0 

2023-07-03 11:36:50.615 DBG default: QList<SevaName*> SevaTypeNamesDataModel::getSevaList(int)  Sevas===== >  QMap((102, SevaName(0x97eb488))) 
(SevaName(0x97eb488)) 

2023-07-03 11:36:50.615 DBG default: void ReportFilterElements::setISevaType(int) 

2023-07-03 11:36:50.615 DBG default: void ReportFilterElements::setSSevaName(const QString&) 

2023-07-03 11:36:50.615 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:36:50.615 DBG default: void SevaReport::generateAccReport(ReportFilterElements*) 

2023-07-03 11:36:50.615 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

2023-07-03 11:36:50.615 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) 0 

2023-07-03 11:36:50.615 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:50.615 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm date "03-07-2023" 

2023-07-03 11:36:50.615 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:36:50.615 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:36:50.615 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm ddetails "All" 0 

2023-07-03 11:36:50.615 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) Inside c date acc rep 

2023-07-03 11:36:50.615 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:50.615 DBG default: QString AccountReportModel::FormatDate(QString) "03-07-2023" 

2023-07-03 11:36:50.615 DBG default: QString AccountReportModel::FormatDate(QString) QDate("2023-07-03") 

2023-07-03 11:36:50.616 DBG default: QString AccountReportModel::FormatDate(QString) "2023-07-03" 

2023-07-03 11:36:50.616 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:36:50.616 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:50.616 DBG default: void AccountReportModel::generateAccReport(ReportFilterElements*) elm->setSSingleDate(FormatDate(elm->sSingleDate())) "2023-07-03" 

2023-07-03 11:36:50.616 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:50.616 DBG default: int ReportFilterElements::iSevaType() const 

2023-07-03 11:36:50.616 DBG default: const QString& ReportFilterElements::sSevaName() const 

2023-07-03 11:36:50.616 DBG default: void DBInterface::account_report_cdate_function(QString, int, QString) 

2023-07-03 11:36:50.616 DBG default: "2023-07-03" ^^^^^^^^^^^^^^^^^^^^^^^^^^  "All"    0 

2023-07-03 11:36:50.616 DBG default: AccountReportElement::AccountReportElement(QObject*) 

2023-07-03 11:36:50.616 DBG default: First 

2023-07-03 11:36:50.616 DBG default:  Query string = "select SEVANAME,sum(QUANTITY),SEVACOST,sum(ADDITIONALCOST+(QUANTITY*SEVACOST)) from sevabooking where sevabooking.RECEIPT_DATE='2023-07-03' Group by sevabooking.SEVANAME; " 

2023-07-03 11:36:50.616 DBG default: inside cash true 

2023-07-03 11:36:50.616 DBG default:  Query string Acc rep true 

2023-07-03 11:36:50.616 DBG default: bool ReportFilterElements::bDatewise() const 

2023-07-03 11:36:50.616 DBG default: false 

2023-07-03 11:36:50.616 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:50.616 DBG default: "2023-07-03" 

2023-07-03 11:36:50.616 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:50.616 DBG qml: ******** 03-07-2023
2023-07-03 11:36:50.616 DBG default: void ReportFilterElements::setSSingleDate(const QString&) 

2023-07-03 11:36:50.616 DBG default: const QString& ReportFilterElements::sSingleDate() const 

2023-07-03 11:36:50.616 DBG qml:   _rip.sSingleDate 203-07-2023
2023-07-03 11:36:50.616 DBG default: AccountReportModel* SevaReport::accountreportModel() const 

2023-07-03 11:36:50.616 DBG default: int AccountReportModel::getAccountReportQryListSize() 

2023-07-03 11:36:50.616 DBG qml: Component.completed:if of sevaProxy.sevaReport.accReportModel.getAccountReportQryListSize()===0
2023-07-03 11:36:50.616 DBG qml: In onSendError
2023-07-03 11:36:50.616 DBG default: void ReportFilterElements::setSYear(const QString&) 

2023-07-03 11:36:50.616 DBG default: const QString& ReportFilterElements::sYear() const 

2023-07-03 11:36:50.616 DBG qml: accont report Selected year2023
2023-07-03 11:36:50.617 DBG default: void ReportFilterElements::setSMonth(const QString&) 

2023-07-03 11:36:50.617 DBG default: const QString& ReportFilterElements::sMonth() const 

2023-07-03 11:36:50.617 DBG qml: Selected month7
2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 0 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 1 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 2 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 3 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 4 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 5 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 6 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 7 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 8 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 9 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 10 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 11 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 12 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 13 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 14 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 15 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 16 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.617 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 17 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 18 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 19 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 20 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 21 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 22 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 23 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual int SevaTypeViewModel::rowCount(const QModelIndex&) const  Row Count ==  25 

2023-07-03 11:36:50.618 DBG default: virtual QVariant SevaTypeViewModel::data(const QModelIndex&, int) const  Row = 24 

2023-07-03 11:36:50.618 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:36:50.618 DBG qml: Screen screenWidth size =1920
2023-07-03 11:36:50.618 DBG qml: Screen screenHeight size =1000
2023-07-03 11:36:50.618 DBG qml: SingleTon is created. Screen density  == 6.228183399741848
2023-07-03 11:36:50.618 DBG qml: Screen screenWidth size =1920
2023-07-03 11:36:50.618 DBG qml: Screen screenHeight size =1000
2023-07-03 11:36:50.618 DBG qml: this is admin
2023-07-03 11:36:50.619 WRN default: qrc:/ui/components/MyReportFilter.qml:126:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.619 WRN default: qrc:/ui/components/MyReportFilter.qml:164:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.619 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.619 WRN default: qrc:/ui/components/MyReportFilter.qml:214:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.619 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.619 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.634 WRN default: qrc:/ui/components/MyReportFilter.qml:260:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.634 WRN default: qrc:/ui/components/MyReportFilter.qml:270:17: QML MyDateEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.634 WRN default: qrc:/ui/components/MyReportFilter.qml:328:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.634 WRN default: qrc:/ui/components/MyReportFilter.qml:339:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.634 WRN default: qrc:/ui/components/MyReportFilter.qml:328:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:36:50.634 WRN default: qrc:/ui/components/MyReportFilter.qml:339:17: QML MyComboEntry: Detected anchors on an item that is managed by a layout. This is undefined behavior; use Layout.alignment instead.
2023-07-03 11:55:36.091 DBG qml: Closing the report
2023-07-03 11:55:36.091 DBG qml: reset Model
2023-07-03 11:55:36.091 DBG default: void SevaReport::resetAccModel() 

2023-07-03 11:55:36.091 DBG default: void AccountReportModel::resetAccModel() 

2023-07-03 11:55:36.091 DBG default: virtual int AccountReportModel::rowCount(const QModelIndex&) const 0 

